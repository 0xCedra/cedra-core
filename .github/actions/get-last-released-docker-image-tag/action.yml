name: "Get the last released docker image"
description: |
  To test the compat test against the last released docker image, we need to get the last released docker image tag.
  This action will get the last released docker image tag from the appropriate branch based on the input branch.
  - Determine the IMAGE_TAG based on the latest release R and check for images built on branch R - 1
    - For commits on the `aptos-release-v1.19` branch, the `IMAGE_TAG` should be the latest commit built on `aptos-release-v1.18`
    - For commits on the `main` branch, the `IMAGE_TAG` should be the latest commit on the max release `aptos-release-v<MAX>` branch

inputs:
  branch:
    description: "The current branch"
    required: true

outputs:
  IMAGE_TAG:
    description: "The last released docker image tag for the appropriate branch"
    value: ${{ steps.determine-test-image-tag.outputs.IMAGE_TAG }}

runs:
  using: composite
  steps:
    - name: Determine target branch
      id: determine-target-branch
      shell: bash
      run: |
        current_branch="${{ inputs.branch }}"
        if [[ $current_branch == "main" ]]; then
          # Find the latest release branch
          target_branch=$(git ls-remote --heads origin 'aptos-release-v*' | sort -V | tail -n 1 | awk -F'/' '{print $NF}')
        elif [[ $current_branch =~ ^aptos-release-v([0-9]+)\.([0-9]+)$ ]]; then
          major=${BASH_REMATCH[1]}
          minor=${BASH_REMATCH[2]}
          prev_minor=$((minor - 1))
          target_branch="aptos-release-v${major}.${prev_minor}"
        else
          echo "Error: Unsupported branch format" >&2
          exit 1
        fi
        echo "TARGET_BRANCH=${target_branch}" >> $GITHUB_OUTPUT

    - uses: actions/checkout@v3
      with:
        ref: ${{ steps.determine-target-branch.outputs.TARGET_BRANCH }}
        path: checkout_branch
        fetch-depth: 0

    - uses: ./checkout_branch/.github/actions/python-setup
      with:
        pyproject_directory: checkout_branch/testsuite

    - name: Determine image tag
      id: determine-test-image-tag
      shell: bash
      working-directory: checkout_branch/testsuite
      run: |
        IMAGE_TAG=$(./testrun find_latest_image.py)
        echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_OUTPUT
