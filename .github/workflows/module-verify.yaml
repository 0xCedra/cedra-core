name: "module-verify"
on:
  # Allow triggering manually
  workflow_dispatch:
    inputs:
      GIT_SHA:
        required: false
        type: string
        description: The git SHA1 to test. If not specified, it will use the latest commit on main.
      NETWORK:
        required: true
        type: choice
        options:
          - testnet
          - mainnet
          - all
        description: The network to replay. If not specified, it will use the default network.
  pull_request:
    paths:
      - ".github/workflows/module-verify.yaml"
  push:
    branches:
      - devnet
      - testnet
      - mainnet
      - aptos-node-v*

# cancel redundant builds
concurrency:
  # cancel redundant builds on PRs (only on PR, not on branches)
  group: ${{ github.workflow }}-${{ (github.event_name == 'pull_request' && github.ref) || github.sha }}
  cancel-in-progress: true

jobs:
  # This job determines the target of the module-verify job. It's a separate job so that we can use the `needs` syntax to make the module-verify job depend on it.
  # The module-verify job should run under these conditions:
  # - If we're running on a PR, we want to run the module-verify job on all networks. But with a shorter timeout so as to only test the functionality of the workflow
  # - If we're running on a workflow_dispatch, we want to run the module-verify job on the network specified in the workflow_dispatch.
  determine-networks:
    runs-on: ubuntu-latest
    outputs:
      target-network: ${{ steps.determine-networks.outputs.target-network }}
    steps:
      - name: Determine target network
        id: determine-networks
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # If we're running on a PR, we want to run the module-verify job on all networks.
            echo "::set-output name=target-network::all"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # If we're running on a workflow_dispatch, we want to run the module-verify job on the network specified in the workflow_dispatch.
            echo "::set-output name=target-network::${{ github.event.inputs.NETWORK }}" 
          else
            echo "Unknown event: ${{ github.event_name }}"
            exit 1
          fi

      - name: Print target network
        run: |
          echo "Target network: ${{ steps.determine-networks.outputs.target-network }}"

  testnet-module-verify:
    needs: determine-networks
    if: |
      ${{ needs.determine-networks.outputs.target-network == 'testnet' 
      || needs.determine-networks.outputs.target-network == 'all' }}
    # if we're running on a PR, it's only for testing purposes, so we can set a shorter timeout
    timeout-minutes: ${{ github.event_name == 'pull_request' && 20 || 720 }}
    runs-on: high-perf-docker-with-local-ssd
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # pin@v3
        with:
          ref: ${{ inputs.GIT_SHA }}

      - uses: ./.github/actions/module-verify
        with:
          BUCKET: aptos-testnet-backup-2223d95b
          SUB_DIR: e1
          BACKUP_CONFIG_TEMPLATE_PATH: terraform/helm/fullnode/files/backup/s3-public.yaml

  mainnet-module-verify:
    needs: determine-networks
    if: |
      ${{ needs.determine-networks.outputs.target-network == 'testnet' }}
      || needs.determine-networks.outputs.target-network == 'all' }}
    # if we're running on a PR, it's only for testing purposes, so we can set a shorter timeout
    timeout-minutes: ${{ github.event_name == 'pull_request' && 20 || 720 }}
    runs-on: high-perf-docker-with-local-ssd
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # pin@v3
        with:
          ref: ${{ inputs.GIT_SHA }}

      - uses: ./.github/actions/module-verify
        with:
          BUCKET: aptos-mainnet-backup-backup-831a69a8
          SUB_DIR: e1
          BACKUP_CONFIG_TEMPLATE_PATH: terraform/helm/fullnode/files/backup/s3-public.yaml
