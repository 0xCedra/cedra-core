name: "Lint+Test"
on:
  pull_request:
  push:
    branches:
      - main
      - devnet
      - testnet
      - auto
      - canary

env:
  HAS_BUILDPULSE_SECRETS: ${{ secrets.BUILDPULSE_ACCESS_KEY_ID != '' && secrets.BUILDPULSE_SECRET_ACCESS_KEY != '' }}
  GIT_SHA: ${{ github.event.pull_request.head.sha || github.sha }}
  CARGO_INCREMENTAL: "0"


# cancel redundant builds
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  scripts-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: sudo apt-get install shellcheck --assume-yes --no-install-recommends
      - run: shellcheck scripts/dev_setup.sh
      - run: shellcheck scripts/dockerhub_prune.sh
      - run: shellcheck scripts/weekly-dep-report.sh

  ecosystem-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version-file: .node-version
      # install packages for examples
      - run: cd ./ecosystem/typescript/sdk/examples/typescript && yarn install
      - run: cd ./ecosystem/typescript/sdk/examples/javascript && yarn install
      # Run package build+lint + tests
      - run: cd ./ecosystem/typescript/sdk && yarn install
      - run: cd ./ecosystem/typescript/sdk && yarn lint
      - run: cd ./ecosystem/typescript/sdk && yarn fmt:check
      # Run typescript indexer server linting
      - run: cd ./ecosystem/indexer-server/typescript && yarn install
      - run: cd ./ecosystem/indexer-server/typescript && yarn lint

  community-platform-lint:
    runs-on: ubuntu-latest
    env:
      RAILS_ENV: test
      NODE_ENV: test
    defaults:
      run:
        working-directory: ecosystem/platform/server
    steps:
      - uses: actions/checkout@v3
      - uses: ruby/setup-ruby@v1
        with:
          working-directory: ecosystem/platform/server
          bundler-cache: true
      - uses: actions/setup-node@v3
        with:
          node-version-file: .node-version
      - run: bundle exec bundler-audit --update
      - run: bundle exec brakeman -q -w2
      - run: bundle exec rubocop
      - run: yarn install --frozen-lockfile
      - run: yarn run tsc

  community-platform-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:11-alpine
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: complat
          POSTGRES_PASSWORD: password
    env:
      RAILS_ENV: test
      NODE_ENV: test
      COMMUNITY_DB_USER: complat
      COMMUNITY_DB_PASS: password
      COMMUNITY_DB_HOST: localhost
      COMMUNITY_DB_PORT: 5432
    defaults:
      run:
        working-directory: ecosystem/platform/server
    steps:
      - uses: actions/checkout@v3
      - uses: ruby/setup-ruby@v1
        with:
          working-directory: ecosystem/platform/server
          bundler-cache: true
      - uses: actions/setup-node@v3
        with:
          node-version-file: .node-version
      - run: bin/setup
      - run: bin/rails test

  docs-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version-file: .node-version
      - run: yarn lint
        working-directory: developer-docs-site

  # rust-lint:
  #   runs-on: high-perf-docker
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: ./.github/actions/rust-setup
  #     - run: cargo x lint
  #     - run: cargo xclippy --workspace --all-targets
  #     - run: cargo xfmt --check
  #     - run: cargo install cargo-sort
  #     # Temporary workaround for unsorted hakari generated Cargo files (https://github.com/DevinR528/cargo-sort/issues/38).
  #     - run: cargo sort --grouped crates/aptos-workspace-hack
  #     - run: cargo sort --grouped --check --workspace

  # rust-unit-xtest:
  #   runs-on: high-perf-docker
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0 # get all the history because cargo xtest --change-since origin/main requires it.
  #     - uses: ./.github/actions/rust-setup
  #     - run: cargo xtest --doc --unit --changed-since "origin/main"

  # rust-unit-nextest-pure:
  #   runs-on: high-perf-pure
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       run: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
  #       cache: [false]
  #       changed_since: [false]
        
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0 # get all the history because cargo xtest --change-since origin/main requires it.
  #     - uses: ./.github/actions/rust-setup
  #     - uses: bmwill/rust-cache@v1
  #       if: matrix.cache == true
  #       with:
  #         path: ~/.cargo/registry/src/**/librocksdb-sys-*
  #     - run: docker run --detach -p 5432:5432 cimg/postgres:14.2
  #     - run: cargo nextest --nextest-profile ci --partition hash:1/1 --unit --exclude backup-cli --changed-since origin/main
  #       if: matrix.changed_since == true
  #       env:
  #         INDEXER_DATABASE_URL: postgresql://postgres@localhost/postgres
  #     - run: cargo nextest --nextest-profile ci --partition hash:1/1 --unit --exclude backup-cli
  #       if: matrix.changed_since == false
  #       env:
  #         INDEXER_DATABASE_URL: postgresql://postgres@localhost/postgres

      # - name: Upload test results to BuildPulse for flaky test detection
      #   # Only run this step for branches where where we have access to secrets.
      #   # Run this step even when the tests fail. Skip if the workflow is cancelled.
      #   if: env.HAS_BUILDPULSE_SECRETS == 'true' && !cancelled()
      #   uses: Workshop64/buildpulse-action@main
      #   with:
      #     account: 99841612
      #     repository: 462597790
      #     path: target/nextest/ci/junit.xml
      #     key: ${{ secrets.BUILDPULSE_ACCESS_KEY_ID }}
      #     secret: ${{ secrets.BUILDPULSE_SECRET_ACCESS_KEY }}
  
  rust-unit-nextest-docker:
    runs-on: high-perf-docker
    strategy:
      fail-fast: false
      matrix:
        # run: [0]
        run: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
        
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # get all the history because cargo xtest --change-since origin/main requires it.
          ref: ${{ env.GIT_SHA }}
      - uses: ./.github/actions/rust-setup
      - run: docker run --detach -p 5432:5432 cimg/postgres:14.2
      - run: cargo nextest --nextest-profile ci --partition hash:1/1 --unit --exclude backup-cli
        env:
          INDEXER_DATABASE_URL: postgresql://postgres@localhost/postgres

      # - name: Upload test results to BuildPulse for flaky test detection
      #   # Only run this step for branches where where we have access to secrets.
      #   # Run this step even when the tests fail. Skip if the workflow is cancelled.
      #   if: env.HAS_BUILDPULSE_SECRETS == 'true' && !cancelled()
      #   uses: Workshop64/buildpulse-action@main
      #   with:
      #     account: 99841612
      #     repository: 462597790
      #     path: target/nextest/ci/junit.xml
      #     key: ${{ secrets.BUILDPULSE_ACCESS_KEY_ID }}
      #     secret: ${{ secrets.BUILDPULSE_SECRET_ACCESS_KEY }}


  # rust-e2e-test:
  #   runs-on: high-perf-docker
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: ./.github/actions/rust-setup
  #     - run: docker run --detach -p 5432:5432 cimg/postgres:14.2
  #     # --test-threads is intentionally set to reduce resource contention in ci jobs. Increasing this, increases job failures and retries.
  #     - run: cargo nextest --nextest-profile ci --partition hash:1/1 --package smoke-test --test-threads 6 --retries 3
  #       env:
  #         RUST_BACKTRACE: full
  #         INDEXER_DATABASE_URL: postgresql://postgres@localhost/postgres
  #     - name: Upload smoke test logs for failures
  #       uses: actions/upload-artifact@v3
  #       if: failure()
  #       with:
  #         name: failed-smoke-test-logs
  #         # Retain all smoke test data except for the db (which may be large).
  #         path: |
  #           /tmp/.tmp*
  #           !/tmp/.tmp*/**/db/
  #         retention-days: 1
