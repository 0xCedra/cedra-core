
// ** Expanded prelude

// Copyright (c) The Diem Core Contributors
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0

// Basic theory for vectors using arrays. This version of vectors is not extensional.

datatype Vec<T> {
    Vec(v: [int]T, l: int)
}

function {:builtin "MapConst"} MapConstVec<T>(T): [int]T;
function DefaultVecElem<T>(): T;
function {:inline} DefaultVecMap<T>(): [int]T { MapConstVec(DefaultVecElem()) }

function {:inline} EmptyVec<T>(): Vec T {
    Vec(DefaultVecMap(), 0)
}

function {:inline} MakeVec1<T>(v: T): Vec T {
    Vec(DefaultVecMap()[0 := v], 1)
}

function {:inline} MakeVec2<T>(v1: T, v2: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2], 2)
}

function {:inline} MakeVec3<T>(v1: T, v2: T, v3: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2][2 := v3], 3)
}

function {:inline} MakeVec4<T>(v1: T, v2: T, v3: T, v4: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2][2 := v3][3 := v4], 4)
}

function {:inline} ExtendVec<T>(v: Vec T, elem: T): Vec T {
    (var l := v->l;
    Vec(v->v[l := elem], l + 1))
}

function {:inline} ReadVec<T>(v: Vec T, i: int): T {
    v->v[i]
}

function {:inline} LenVec<T>(v: Vec T): int {
    v->l
}

function {:inline} IsEmptyVec<T>(v: Vec T): bool {
    v->l == 0
}

function {:inline} RemoveVec<T>(v: Vec T): Vec T {
    (var l := v->l - 1;
    Vec(v->v[l := DefaultVecElem()], l))
}

function {:inline} RemoveAtVec<T>(v: Vec T, i: int): Vec T {
    (var l := v->l - 1;
    Vec(
        (lambda j: int ::
           if j >= 0 && j < l then
               if j < i then v->v[j] else v->v[j+1]
           else DefaultVecElem()),
        l))
}

function {:inline} ConcatVec<T>(v1: Vec T, v2: Vec T): Vec T {
    (var l1, m1, l2, m2 := v1->l, v1->v, v2->l, v2->v;
    Vec(
        (lambda i: int ::
          if i >= 0 && i < l1 + l2 then
            if i < l1 then m1[i] else m2[i - l1]
          else DefaultVecElem()),
        l1 + l2))
}

function {:inline} ReverseVec<T>(v: Vec T): Vec T {
    (var l := v->l;
    Vec(
        (lambda i: int :: if 0 <= i && i < l then v->v[l - i - 1] else DefaultVecElem()),
        l))
}

function {:inline} SliceVec<T>(v: Vec T, i: int, j: int): Vec T {
    (var m := v->v;
    Vec(
        (lambda k:int ::
          if 0 <= k && k < j - i then
            m[i + k]
          else
            DefaultVecElem()),
        (if j - i < 0 then 0 else j - i)))
}


function {:inline} UpdateVec<T>(v: Vec T, i: int, elem: T): Vec T {
    Vec(v->v[i := elem], v->l)
}

function {:inline} SwapVec<T>(v: Vec T, i: int, j: int): Vec T {
    (var m := v->v;
    Vec(m[i := m[j]][j := m[i]], v->l))
}

function {:inline} ContainsVec<T>(v: Vec T, e: T): bool {
    (var l := v->l;
    (exists i: int :: InRangeVec(v, i) && v->v[i] == e))
}

function IndexOfVec<T>(v: Vec T, e: T): int;
axiom {:ctor "Vec"} (forall<T> v: Vec T, e: T :: {IndexOfVec(v, e)}
    (var i := IndexOfVec(v,e);
     if (!ContainsVec(v, e)) then i == -1
     else InRangeVec(v, i) && ReadVec(v, i) == e &&
        (forall j: int :: j >= 0 && j < i ==> ReadVec(v, j) != e)));

// This function should stay non-inlined as it guards many quantifiers
// over vectors. It appears important to have this uninterpreted for
// quantifier triggering.
function InRangeVec<T>(v: Vec T, i: int): bool {
    i >= 0 && i < LenVec(v)
}

// Copyright (c) The Diem Core Contributors
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0

// Boogie model for multisets, based on Boogie arrays. This theory assumes extensional equality for element types.

datatype Multiset<T> {
    Multiset(v: [T]int, l: int)
}

function {:builtin "MapConst"} MapConstMultiset<T>(l: int): [T]int;

function {:inline} EmptyMultiset<T>(): Multiset T {
    Multiset(MapConstMultiset(0), 0)
}

function {:inline} LenMultiset<T>(s: Multiset T): int {
    s->l
}

function {:inline} ExtendMultiset<T>(s: Multiset T, v: T): Multiset T {
    (var len := s->l;
    (var cnt := s->v[v];
    Multiset(s->v[v := (cnt + 1)], len + 1)))
}

// This function returns (s1 - s2). This function assumes that s2 is a subset of s1.
function {:inline} SubtractMultiset<T>(s1: Multiset T, s2: Multiset T): Multiset T {
    (var len1 := s1->l;
    (var len2 := s2->l;
    Multiset((lambda v:T :: s1->v[v]-s2->v[v]), len1-len2)))
}

function {:inline} IsEmptyMultiset<T>(s: Multiset T): bool {
    (s->l == 0) &&
    (forall v: T :: s->v[v] == 0)
}

function {:inline} IsSubsetMultiset<T>(s1: Multiset T, s2: Multiset T): bool {
    (s1->l <= s2->l) &&
    (forall v: T :: s1->v[v] <= s2->v[v])
}

function {:inline} ContainsMultiset<T>(s: Multiset T, v: T): bool {
    s->v[v] > 0
}

// Copyright (c) The Diem Core Contributors
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0

// Theory for tables.

// v is the SMT array holding the key-value assignment. e is an array which
// independently determines whether a key is valid or not. l is the length.
//
// Note that even though the program cannot reflect over existence of a key,
// we want the specification to be able to do this, so it can express
// verification conditions like "key has been inserted".
datatype Table <K, V> {
    Table(v: [K]V, e: [K]bool, l: int)
}

// Functions for default SMT arrays. For the table values, we don't care and
// use an uninterpreted function.
function DefaultTableArray<K, V>(): [K]V;
function DefaultTableKeyExistsArray<K>(): [K]bool;
axiom DefaultTableKeyExistsArray() == (lambda i: int :: false);

function {:inline} EmptyTable<K, V>(): Table K V {
    Table(DefaultTableArray(), DefaultTableKeyExistsArray(), 0)
}

function {:inline} GetTable<K,V>(t: Table K V, k: K): V {
    // Notice we do not check whether key is in the table. The result is undetermined if it is not.
    t->v[k]
}

function {:inline} LenTable<K,V>(t: Table K V): int {
    t->l
}


function {:inline} ContainsTable<K,V>(t: Table K V, k: K): bool {
    t->e[k]
}

function {:inline} UpdateTable<K,V>(t: Table K V, k: K, v: V): Table K V {
    Table(t->v[k := v], t->e, t->l)
}

function {:inline} AddTable<K,V>(t: Table K V, k: K, v: V): Table K V {
    // This function has an undetermined result if the key is already in the table
    // (all specification functions have this "partial definiteness" behavior). Thus we can
    // just increment the length.
    Table(t->v[k := v], t->e[k := true], t->l + 1)
}

function {:inline} RemoveTable<K,V>(t: Table K V, k: K): Table K V {
    // Similar as above, we only need to consider the case where the key is in the table.
    Table(t->v, t->e[k := false], t->l - 1)
}

axiom {:ctor "Table"} (forall<K,V> t: Table K V :: {LenTable(t)}
    (exists k: K :: {ContainsTable(t, k)} ContainsTable(t, k)) ==> LenTable(t) >= 1
);
// TODO: we might want to encoder a stronger property that the length of table
// must be more than N given a set of N items. Currently we don't see a need here
// and the above axiom seems to be sufficient.
// Copyright Â© Aptos Foundation
// SPDX-License-Identifier: Apache-2.0

// ==================================================================================
// Native object::exists_at

// ==================================================================================
// Intrinsic implementation of aggregator and aggregator factory

datatype $1_aggregator_Aggregator {
    $1_aggregator_Aggregator($handle: int, $key: int, $limit: int, $val: int)
}
function {:inline} $Update'$1_aggregator_Aggregator'_handle(s: $1_aggregator_Aggregator, x: int): $1_aggregator_Aggregator {
    $1_aggregator_Aggregator(x, s->$key, s->$limit, s->$val)
}
function {:inline} $Update'$1_aggregator_Aggregator'_key(s: $1_aggregator_Aggregator, x: int): $1_aggregator_Aggregator {
    $1_aggregator_Aggregator(s->$handle, x, s->$limit, s->$val)
}
function {:inline} $Update'$1_aggregator_Aggregator'_limit(s: $1_aggregator_Aggregator, x: int): $1_aggregator_Aggregator {
    $1_aggregator_Aggregator(s->$handle, s->$key, x, s->$val)
}
function {:inline} $Update'$1_aggregator_Aggregator'_val(s: $1_aggregator_Aggregator, x: int): $1_aggregator_Aggregator {
    $1_aggregator_Aggregator(s->$handle, s->$key, s->$limit, x)
}
function $IsValid'$1_aggregator_Aggregator'(s: $1_aggregator_Aggregator): bool {
    $IsValid'address'(s->$handle)
      && $IsValid'address'(s->$key)
      && $IsValid'u128'(s->$limit)
      && $IsValid'u128'(s->$val)
}
function {:inline} $IsEqual'$1_aggregator_Aggregator'(s1: $1_aggregator_Aggregator, s2: $1_aggregator_Aggregator): bool {
    s1 == s2
}
function {:inline} $1_aggregator_spec_get_limit(s: $1_aggregator_Aggregator): int {
    s->$limit
}
function {:inline} $1_aggregator_spec_get_handle(s: $1_aggregator_Aggregator): int {
    s->$handle
}
function {:inline} $1_aggregator_spec_get_key(s: $1_aggregator_Aggregator): int {
    s->$key
}
function {:inline} $1_aggregator_spec_get_val(s: $1_aggregator_Aggregator): int {
    s->$val
}

function $1_aggregator_spec_read(agg: $1_aggregator_Aggregator): int {
    $1_aggregator_spec_get_val(agg)
}

function $1_aggregator_spec_aggregator_set_val(agg: $1_aggregator_Aggregator, val: int): $1_aggregator_Aggregator {
    $Update'$1_aggregator_Aggregator'_val(agg, val)
}

function $1_aggregator_spec_aggregator_get_val(agg: $1_aggregator_Aggregator): int {
    $1_aggregator_spec_get_val(agg)
}

function $1_aggregator_factory_spec_new_aggregator(limit: int) : $1_aggregator_Aggregator;

axiom (forall limit: int :: {$1_aggregator_factory_spec_new_aggregator(limit)}
    (var agg := $1_aggregator_factory_spec_new_aggregator(limit);
     $1_aggregator_spec_get_limit(agg) == limit));

axiom (forall limit: int :: {$1_aggregator_factory_spec_new_aggregator(limit)}
     (var agg := $1_aggregator_factory_spec_new_aggregator(limit);
     $1_aggregator_spec_aggregator_get_val(agg) == 0));


// ============================================================================================
// Primitive Types

const $MAX_U8: int;
axiom $MAX_U8 == 255;
const $MAX_U16: int;
axiom $MAX_U16 == 65535;
const $MAX_U32: int;
axiom $MAX_U32 == 4294967295;
const $MAX_U64: int;
axiom $MAX_U64 == 18446744073709551615;
const $MAX_U128: int;
axiom $MAX_U128 == 340282366920938463463374607431768211455;
const $MAX_U256: int;
axiom $MAX_U256 == 115792089237316195423570985008687907853269984665640564039457584007913129639935;

// Templates for bitvector operations

function {:bvbuiltin "bvand"} $And'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvor"} $Or'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvxor"} $Xor'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvadd"} $Add'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvsub"} $Sub'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvmul"} $Mul'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvudiv"} $Div'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvurem"} $Mod'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvshl"} $Shl'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvlshr"} $Shr'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvult"} $Lt'Bv8'(bv8,bv8) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv8'(bv8,bv8) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv8'(bv8,bv8) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv8'(bv8,bv8) returns(bool);

procedure {:inline 1} $AddBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Lt'Bv8'($Add'Bv8'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv8'(src1, src2);
}

procedure {:inline 1} $AddBv8_unchecked(src1: bv8, src2: bv8) returns (dst: bv8)
{
    dst := $Add'Bv8'(src1, src2);
}

procedure {:inline 1} $SubBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Lt'Bv8'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv8'(src1, src2);
}

procedure {:inline 1} $MulBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Lt'Bv8'($Mul'Bv8'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv8'(src1, src2);
}

procedure {:inline 1} $DivBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if (src2 == 0bv8) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv8'(src1, src2);
}

procedure {:inline 1} $ModBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if (src2 == 0bv8) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv8'(src1, src2);
}

procedure {:inline 1} $AndBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    dst := $And'Bv8'(src1,src2);
}

procedure {:inline 1} $OrBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    dst := $Or'Bv8'(src1,src2);
}

procedure {:inline 1} $XorBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    dst := $Xor'Bv8'(src1,src2);
}

procedure {:inline 1} $LtBv8(src1: bv8, src2: bv8) returns (dst: bool)
{
    dst := $Lt'Bv8'(src1,src2);
}

procedure {:inline 1} $LeBv8(src1: bv8, src2: bv8) returns (dst: bool)
{
    dst := $Le'Bv8'(src1,src2);
}

procedure {:inline 1} $GtBv8(src1: bv8, src2: bv8) returns (dst: bool)
{
    dst := $Gt'Bv8'(src1,src2);
}

procedure {:inline 1} $GeBv8(src1: bv8, src2: bv8) returns (dst: bool)
{
    dst := $Ge'Bv8'(src1,src2);
}

function $IsValid'bv8'(v: bv8): bool {
  $Ge'Bv8'(v,0bv8) && $Le'Bv8'(v,255bv8)
}

function {:inline} $IsEqual'bv8'(x: bv8, y: bv8): bool {
    x == y
}

procedure {:inline 1} $int2bv8(src: int) returns (dst: bv8)
{
    if (src > 255) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.8(src);
}

procedure {:inline 1} $bv2int8(src: bv8) returns (dst: int)
{
    dst := $bv2int.8(src);
}

function {:builtin "(_ int2bv 8)"} $int2bv.8(i: int) returns (bv8);
function {:builtin "bv2nat"} $bv2int.8(i: bv8) returns (int);

function {:bvbuiltin "bvand"} $And'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvor"} $Or'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvxor"} $Xor'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvadd"} $Add'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvsub"} $Sub'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvmul"} $Mul'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvudiv"} $Div'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvurem"} $Mod'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvshl"} $Shl'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvlshr"} $Shr'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvult"} $Lt'Bv16'(bv16,bv16) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv16'(bv16,bv16) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv16'(bv16,bv16) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv16'(bv16,bv16) returns(bool);

procedure {:inline 1} $AddBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Lt'Bv16'($Add'Bv16'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv16'(src1, src2);
}

procedure {:inline 1} $AddBv16_unchecked(src1: bv16, src2: bv16) returns (dst: bv16)
{
    dst := $Add'Bv16'(src1, src2);
}

procedure {:inline 1} $SubBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Lt'Bv16'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv16'(src1, src2);
}

procedure {:inline 1} $MulBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Lt'Bv16'($Mul'Bv16'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv16'(src1, src2);
}

procedure {:inline 1} $DivBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if (src2 == 0bv16) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv16'(src1, src2);
}

procedure {:inline 1} $ModBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if (src2 == 0bv16) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv16'(src1, src2);
}

procedure {:inline 1} $AndBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    dst := $And'Bv16'(src1,src2);
}

procedure {:inline 1} $OrBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    dst := $Or'Bv16'(src1,src2);
}

procedure {:inline 1} $XorBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    dst := $Xor'Bv16'(src1,src2);
}

procedure {:inline 1} $LtBv16(src1: bv16, src2: bv16) returns (dst: bool)
{
    dst := $Lt'Bv16'(src1,src2);
}

procedure {:inline 1} $LeBv16(src1: bv16, src2: bv16) returns (dst: bool)
{
    dst := $Le'Bv16'(src1,src2);
}

procedure {:inline 1} $GtBv16(src1: bv16, src2: bv16) returns (dst: bool)
{
    dst := $Gt'Bv16'(src1,src2);
}

procedure {:inline 1} $GeBv16(src1: bv16, src2: bv16) returns (dst: bool)
{
    dst := $Ge'Bv16'(src1,src2);
}

function $IsValid'bv16'(v: bv16): bool {
  $Ge'Bv16'(v,0bv16) && $Le'Bv16'(v,65535bv16)
}

function {:inline} $IsEqual'bv16'(x: bv16, y: bv16): bool {
    x == y
}

procedure {:inline 1} $int2bv16(src: int) returns (dst: bv16)
{
    if (src > 65535) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.16(src);
}

procedure {:inline 1} $bv2int16(src: bv16) returns (dst: int)
{
    dst := $bv2int.16(src);
}

function {:builtin "(_ int2bv 16)"} $int2bv.16(i: int) returns (bv16);
function {:builtin "bv2nat"} $bv2int.16(i: bv16) returns (int);

function {:bvbuiltin "bvand"} $And'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvor"} $Or'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvxor"} $Xor'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvadd"} $Add'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvsub"} $Sub'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvmul"} $Mul'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvudiv"} $Div'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvurem"} $Mod'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvshl"} $Shl'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvlshr"} $Shr'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvult"} $Lt'Bv32'(bv32,bv32) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv32'(bv32,bv32) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv32'(bv32,bv32) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv32'(bv32,bv32) returns(bool);

procedure {:inline 1} $AddBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Lt'Bv32'($Add'Bv32'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv32'(src1, src2);
}

procedure {:inline 1} $AddBv32_unchecked(src1: bv32, src2: bv32) returns (dst: bv32)
{
    dst := $Add'Bv32'(src1, src2);
}

procedure {:inline 1} $SubBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Lt'Bv32'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv32'(src1, src2);
}

procedure {:inline 1} $MulBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Lt'Bv32'($Mul'Bv32'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv32'(src1, src2);
}

procedure {:inline 1} $DivBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if (src2 == 0bv32) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv32'(src1, src2);
}

procedure {:inline 1} $ModBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if (src2 == 0bv32) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv32'(src1, src2);
}

procedure {:inline 1} $AndBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    dst := $And'Bv32'(src1,src2);
}

procedure {:inline 1} $OrBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    dst := $Or'Bv32'(src1,src2);
}

procedure {:inline 1} $XorBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    dst := $Xor'Bv32'(src1,src2);
}

procedure {:inline 1} $LtBv32(src1: bv32, src2: bv32) returns (dst: bool)
{
    dst := $Lt'Bv32'(src1,src2);
}

procedure {:inline 1} $LeBv32(src1: bv32, src2: bv32) returns (dst: bool)
{
    dst := $Le'Bv32'(src1,src2);
}

procedure {:inline 1} $GtBv32(src1: bv32, src2: bv32) returns (dst: bool)
{
    dst := $Gt'Bv32'(src1,src2);
}

procedure {:inline 1} $GeBv32(src1: bv32, src2: bv32) returns (dst: bool)
{
    dst := $Ge'Bv32'(src1,src2);
}

function $IsValid'bv32'(v: bv32): bool {
  $Ge'Bv32'(v,0bv32) && $Le'Bv32'(v,2147483647bv32)
}

function {:inline} $IsEqual'bv32'(x: bv32, y: bv32): bool {
    x == y
}

procedure {:inline 1} $int2bv32(src: int) returns (dst: bv32)
{
    if (src > 2147483647) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.32(src);
}

procedure {:inline 1} $bv2int32(src: bv32) returns (dst: int)
{
    dst := $bv2int.32(src);
}

function {:builtin "(_ int2bv 32)"} $int2bv.32(i: int) returns (bv32);
function {:builtin "bv2nat"} $bv2int.32(i: bv32) returns (int);

function {:bvbuiltin "bvand"} $And'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvor"} $Or'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvxor"} $Xor'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvadd"} $Add'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvsub"} $Sub'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvmul"} $Mul'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvudiv"} $Div'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvurem"} $Mod'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvshl"} $Shl'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvlshr"} $Shr'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvult"} $Lt'Bv64'(bv64,bv64) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv64'(bv64,bv64) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv64'(bv64,bv64) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv64'(bv64,bv64) returns(bool);

procedure {:inline 1} $AddBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Lt'Bv64'($Add'Bv64'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv64'(src1, src2);
}

procedure {:inline 1} $AddBv64_unchecked(src1: bv64, src2: bv64) returns (dst: bv64)
{
    dst := $Add'Bv64'(src1, src2);
}

procedure {:inline 1} $SubBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Lt'Bv64'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv64'(src1, src2);
}

procedure {:inline 1} $MulBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Lt'Bv64'($Mul'Bv64'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv64'(src1, src2);
}

procedure {:inline 1} $DivBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if (src2 == 0bv64) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv64'(src1, src2);
}

procedure {:inline 1} $ModBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if (src2 == 0bv64) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv64'(src1, src2);
}

procedure {:inline 1} $AndBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    dst := $And'Bv64'(src1,src2);
}

procedure {:inline 1} $OrBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    dst := $Or'Bv64'(src1,src2);
}

procedure {:inline 1} $XorBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    dst := $Xor'Bv64'(src1,src2);
}

procedure {:inline 1} $LtBv64(src1: bv64, src2: bv64) returns (dst: bool)
{
    dst := $Lt'Bv64'(src1,src2);
}

procedure {:inline 1} $LeBv64(src1: bv64, src2: bv64) returns (dst: bool)
{
    dst := $Le'Bv64'(src1,src2);
}

procedure {:inline 1} $GtBv64(src1: bv64, src2: bv64) returns (dst: bool)
{
    dst := $Gt'Bv64'(src1,src2);
}

procedure {:inline 1} $GeBv64(src1: bv64, src2: bv64) returns (dst: bool)
{
    dst := $Ge'Bv64'(src1,src2);
}

function $IsValid'bv64'(v: bv64): bool {
  $Ge'Bv64'(v,0bv64) && $Le'Bv64'(v,18446744073709551615bv64)
}

function {:inline} $IsEqual'bv64'(x: bv64, y: bv64): bool {
    x == y
}

procedure {:inline 1} $int2bv64(src: int) returns (dst: bv64)
{
    if (src > 18446744073709551615) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.64(src);
}

procedure {:inline 1} $bv2int64(src: bv64) returns (dst: int)
{
    dst := $bv2int.64(src);
}

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: int) returns (bv64);
function {:builtin "bv2nat"} $bv2int.64(i: bv64) returns (int);

function {:bvbuiltin "bvand"} $And'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvor"} $Or'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvxor"} $Xor'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvadd"} $Add'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvsub"} $Sub'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvmul"} $Mul'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvudiv"} $Div'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvurem"} $Mod'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvshl"} $Shl'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvlshr"} $Shr'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvult"} $Lt'Bv128'(bv128,bv128) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv128'(bv128,bv128) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv128'(bv128,bv128) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv128'(bv128,bv128) returns(bool);

procedure {:inline 1} $AddBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Lt'Bv128'($Add'Bv128'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv128'(src1, src2);
}

procedure {:inline 1} $AddBv128_unchecked(src1: bv128, src2: bv128) returns (dst: bv128)
{
    dst := $Add'Bv128'(src1, src2);
}

procedure {:inline 1} $SubBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Lt'Bv128'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv128'(src1, src2);
}

procedure {:inline 1} $MulBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Lt'Bv128'($Mul'Bv128'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv128'(src1, src2);
}

procedure {:inline 1} $DivBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if (src2 == 0bv128) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv128'(src1, src2);
}

procedure {:inline 1} $ModBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if (src2 == 0bv128) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv128'(src1, src2);
}

procedure {:inline 1} $AndBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    dst := $And'Bv128'(src1,src2);
}

procedure {:inline 1} $OrBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    dst := $Or'Bv128'(src1,src2);
}

procedure {:inline 1} $XorBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    dst := $Xor'Bv128'(src1,src2);
}

procedure {:inline 1} $LtBv128(src1: bv128, src2: bv128) returns (dst: bool)
{
    dst := $Lt'Bv128'(src1,src2);
}

procedure {:inline 1} $LeBv128(src1: bv128, src2: bv128) returns (dst: bool)
{
    dst := $Le'Bv128'(src1,src2);
}

procedure {:inline 1} $GtBv128(src1: bv128, src2: bv128) returns (dst: bool)
{
    dst := $Gt'Bv128'(src1,src2);
}

procedure {:inline 1} $GeBv128(src1: bv128, src2: bv128) returns (dst: bool)
{
    dst := $Ge'Bv128'(src1,src2);
}

function $IsValid'bv128'(v: bv128): bool {
  $Ge'Bv128'(v,0bv128) && $Le'Bv128'(v,340282366920938463463374607431768211455bv128)
}

function {:inline} $IsEqual'bv128'(x: bv128, y: bv128): bool {
    x == y
}

procedure {:inline 1} $int2bv128(src: int) returns (dst: bv128)
{
    if (src > 340282366920938463463374607431768211455) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.128(src);
}

procedure {:inline 1} $bv2int128(src: bv128) returns (dst: int)
{
    dst := $bv2int.128(src);
}

function {:builtin "(_ int2bv 128)"} $int2bv.128(i: int) returns (bv128);
function {:builtin "bv2nat"} $bv2int.128(i: bv128) returns (int);

function {:bvbuiltin "bvand"} $And'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvor"} $Or'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvxor"} $Xor'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvadd"} $Add'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvsub"} $Sub'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvmul"} $Mul'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvudiv"} $Div'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvurem"} $Mod'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvshl"} $Shl'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvlshr"} $Shr'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvult"} $Lt'Bv256'(bv256,bv256) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv256'(bv256,bv256) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv256'(bv256,bv256) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv256'(bv256,bv256) returns(bool);

procedure {:inline 1} $AddBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Lt'Bv256'($Add'Bv256'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv256'(src1, src2);
}

procedure {:inline 1} $AddBv256_unchecked(src1: bv256, src2: bv256) returns (dst: bv256)
{
    dst := $Add'Bv256'(src1, src2);
}

procedure {:inline 1} $SubBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Lt'Bv256'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv256'(src1, src2);
}

procedure {:inline 1} $MulBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Lt'Bv256'($Mul'Bv256'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv256'(src1, src2);
}

procedure {:inline 1} $DivBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if (src2 == 0bv256) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv256'(src1, src2);
}

procedure {:inline 1} $ModBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if (src2 == 0bv256) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv256'(src1, src2);
}

procedure {:inline 1} $AndBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    dst := $And'Bv256'(src1,src2);
}

procedure {:inline 1} $OrBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    dst := $Or'Bv256'(src1,src2);
}

procedure {:inline 1} $XorBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    dst := $Xor'Bv256'(src1,src2);
}

procedure {:inline 1} $LtBv256(src1: bv256, src2: bv256) returns (dst: bool)
{
    dst := $Lt'Bv256'(src1,src2);
}

procedure {:inline 1} $LeBv256(src1: bv256, src2: bv256) returns (dst: bool)
{
    dst := $Le'Bv256'(src1,src2);
}

procedure {:inline 1} $GtBv256(src1: bv256, src2: bv256) returns (dst: bool)
{
    dst := $Gt'Bv256'(src1,src2);
}

procedure {:inline 1} $GeBv256(src1: bv256, src2: bv256) returns (dst: bool)
{
    dst := $Ge'Bv256'(src1,src2);
}

function $IsValid'bv256'(v: bv256): bool {
  $Ge'Bv256'(v,0bv256) && $Le'Bv256'(v,115792089237316195423570985008687907853269984665640564039457584007913129639935bv256)
}

function {:inline} $IsEqual'bv256'(x: bv256, y: bv256): bool {
    x == y
}

procedure {:inline 1} $int2bv256(src: int) returns (dst: bv256)
{
    if (src > 115792089237316195423570985008687907853269984665640564039457584007913129639935) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.256(src);
}

procedure {:inline 1} $bv2int256(src: bv256) returns (dst: int)
{
    dst := $bv2int.256(src);
}

function {:builtin "(_ int2bv 256)"} $int2bv.256(i: int) returns (bv256);
function {:builtin "bv2nat"} $bv2int.256(i: bv256) returns (int);

datatype $Range {
    $Range(lb: int, ub: int)
}

function {:inline} $IsValid'bool'(v: bool): bool {
  true
}

function $IsValid'u8'(v: int): bool {
  v >= 0 && v <= $MAX_U8
}

function $IsValid'u16'(v: int): bool {
  v >= 0 && v <= $MAX_U16
}

function $IsValid'u32'(v: int): bool {
  v >= 0 && v <= $MAX_U32
}

function $IsValid'u64'(v: int): bool {
  v >= 0 && v <= $MAX_U64
}

function $IsValid'u128'(v: int): bool {
  v >= 0 && v <= $MAX_U128
}

function $IsValid'u256'(v: int): bool {
  v >= 0 && v <= $MAX_U256
}

function $IsValid'num'(v: int): bool {
  true
}

function $IsValid'address'(v: int): bool {
  // TODO: restrict max to representable addresses?
  v >= 0
}

function {:inline} $IsValidRange(r: $Range): bool {
   $IsValid'u64'(r->lb) &&  $IsValid'u64'(r->ub)
}

// Intentionally not inlined so it serves as a trigger in quantifiers.
function $InRange(r: $Range, i: int): bool {
   r->lb <= i && i < r->ub
}


function {:inline} $IsEqual'u8'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u16'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u32'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u64'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u128'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u256'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'num'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'address'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'bool'(x: bool, y: bool): bool {
    x == y
}

// ============================================================================================
// Memory

datatype $Location {
    // A global resource location within the statically known resource type's memory,
    // where `a` is an address.
    $Global(a: int),
    // A local location. `i` is the unique index of the local.
    $Local(i: int),
    // The location of a reference outside of the verification scope, for example, a `&mut` parameter
    // of the function being verified. References with these locations don't need to be written back
    // when mutation ends.
    $Param(i: int),
    // The location of an uninitialized mutation. Using this to make sure that the location
    // will not be equal to any valid mutation locations, i.e., $Local, $Global, or $Param.
    $Uninitialized()
}

// A mutable reference which also carries its current value. Since mutable references
// are single threaded in Move, we can keep them together and treat them as a value
// during mutation until the point they are stored back to their original location.
datatype $Mutation<T> {
    $Mutation(l: $Location, p: Vec int, v: T)
}

// Representation of memory for a given type.
datatype $Memory<T> {
    $Memory(domain: [int]bool, contents: [int]T)
}

function {:builtin "MapConst"} $ConstMemoryDomain(v: bool): [int]bool;
function {:builtin "MapConst"} $ConstMemoryContent<T>(v: T): [int]T;
axiom $ConstMemoryDomain(false) == (lambda i: int :: false);
axiom $ConstMemoryDomain(true) == (lambda i: int :: true);


// Dereferences a mutation.
function {:inline} $Dereference<T>(ref: $Mutation T): T {
    ref->v
}

// Update the value of a mutation.
function {:inline} $UpdateMutation<T>(m: $Mutation T, v: T): $Mutation T {
    $Mutation(m->l, m->p, v)
}

function {:inline} $ChildMutation<T1, T2>(m: $Mutation T1, offset: int, v: T2): $Mutation T2 {
    $Mutation(m->l, ExtendVec(m->p, offset), v)
}

// Return true if two mutations share the location and path
function {:inline} $IsSameMutation<T1, T2>(parent: $Mutation T1, child: $Mutation T2 ): bool {
    parent->l == child->l && parent->p == child->p
}

// Return true if the mutation is a parent of a child which was derived with the given edge offset. This
// is used to implement write-back choices.
function {:inline} $IsParentMutation<T1, T2>(parent: $Mutation T1, edge: int, child: $Mutation T2 ): bool {
    parent->l == child->l &&
    (var pp := parent->p;
    (var cp := child->p;
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
     cl == pl + 1 &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) ==  ReadVec(cp, i)) &&
     $EdgeMatches(ReadVec(cp, pl), edge)
    ))))
}

// Return true if the mutation is a parent of a child, for hyper edge.
function {:inline} $IsParentMutationHyper<T1, T2>(parent: $Mutation T1, hyper_edge: Vec int, child: $Mutation T2 ): bool {
    parent->l == child->l &&
    (var pp := parent->p;
    (var cp := child->p;
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
    (var el := LenVec(hyper_edge);
     cl == pl + el &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) == ReadVec(cp, i)) &&
     (forall i: int:: i >= 0 && i < el ==> $EdgeMatches(ReadVec(cp, pl + i), ReadVec(hyper_edge, i)))
    )))))
}

function {:inline} $EdgeMatches(edge: int, edge_pattern: int): bool {
    edge_pattern == -1 // wildcard
    || edge_pattern == edge
}



function {:inline} $SameLocation<T1, T2>(m1: $Mutation T1, m2: $Mutation T2): bool {
    m1->l == m2->l
}

function {:inline} $HasGlobalLocation<T>(m: $Mutation T): bool {
    (m->l) is $Global
}

function {:inline} $HasLocalLocation<T>(m: $Mutation T, idx: int): bool {
    m->l == $Local(idx)
}

function {:inline} $GlobalLocationAddress<T>(m: $Mutation T): int {
    (m->l)->a
}



// Tests whether resource exists.
function {:inline} $ResourceExists<T>(m: $Memory T, addr: int): bool {
    m->domain[addr]
}

// Obtains Value of given resource.
function {:inline} $ResourceValue<T>(m: $Memory T, addr: int): T {
    m->contents[addr]
}

// Update resource.
function {:inline} $ResourceUpdate<T>(m: $Memory T, a: int, v: T): $Memory T {
    $Memory(m->domain[a := true], m->contents[a := v])
}

// Remove resource.
function {:inline} $ResourceRemove<T>(m: $Memory T, a: int): $Memory T {
    $Memory(m->domain[a := false], m->contents)
}

// Copies resource from memory s to m.
function {:inline} $ResourceCopy<T>(m: $Memory T, s: $Memory T, a: int): $Memory T {
    $Memory(m->domain[a := s->domain[a]],
            m->contents[a := s->contents[a]])
}



// ============================================================================================
// Abort Handling

var $abort_flag: bool;
var $abort_code: int;

function {:inline} $process_abort_code(code: int): int {
    code
}

const $EXEC_FAILURE_CODE: int;
axiom $EXEC_FAILURE_CODE == -1;

// TODO(wrwg): currently we map aborts of native functions like those for vectors also to
//   execution failure. This may need to be aligned with what the runtime actually does.

procedure {:inline 1} $ExecFailureAbort() {
    $abort_flag := true;
    $abort_code := $EXEC_FAILURE_CODE;
}

procedure {:inline 1} $Abort(code: int) {
    $abort_flag := true;
    $abort_code := code;
}

function {:inline} $StdError(cat: int, reason: int): int {
    reason * 256 + cat
}

procedure {:inline 1} $InitVerification() {
    // Set abort_flag to false, and havoc abort_code
    $abort_flag := false;
    havoc $abort_code;
    // Initialize event store
    call $InitEventStore();
}

// ============================================================================================
// Instructions


procedure {:inline 1} $CastU8(src: int) returns (dst: int)
{
    if (src > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU16(src: int) returns (dst: int)
{
    if (src > $MAX_U16) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU32(src: int) returns (dst: int)
{
    if (src > $MAX_U32) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU64(src: int) returns (dst: int)
{
    if (src > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU128(src: int) returns (dst: int)
{
    if (src > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU256(src: int) returns (dst: int)
{
    if (src > $MAX_U256) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $AddU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU16(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U16) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU16_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU32(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U32) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU32_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU256(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U256) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU256_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $Sub(src1: int, src2: int) returns (dst: int)
{
    if (src1 < src2) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 - src2;
}

// uninterpreted function to return an undefined value.
function $undefined_int(): int;

// Recursive exponentiation function
// Undefined unless e >=0.  $pow(0,0) is also undefined.
function $pow(n: int, e: int): int {
    if n != 0 && e == 0 then 1
    else if e > 0 then n * $pow(n, e - 1)
    else $undefined_int()
}

function $shl(src1: int, p: int): int {
    src1 * $pow(2, p)
}

function $shlU8(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 256
}

function $shlU16(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 65536
}

function $shlU32(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 4294967296
}

function $shlU64(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 18446744073709551616
}

function $shlU128(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 340282366920938463463374607431768211456
}

function $shlU256(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 115792089237316195423570985008687907853269984665640564039457584007913129639936
}

function $shr(src1: int, p: int): int {
    src1 div $pow(2, p)
}

// We need to know the size of the destination in order to drop bits
// that have been shifted left more than that, so we have $ShlU8/16/32/64/128/256
procedure {:inline 1} $ShlU8(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 8) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shlU8(src1, src2);
}

// Template for cast and shift operations of bitvector types

procedure {:inline 1} $CastBv8to8(src: bv8) returns (dst: bv8)
{
    dst := src;
}


function $shlBv8From8(src1: bv8, src2: bv8) returns (bv8)
{
    $Shl'Bv8'(src1, src2)
}

procedure {:inline 1} $ShlBv8From8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Ge'Bv8'(src2, 8bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2);
}

function $shrBv8From8(src1: bv8, src2: bv8) returns (bv8)
{
    $Shr'Bv8'(src1, src2)
}

procedure {:inline 1} $ShrBv8From8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Ge'Bv8'(src2, 8bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2);
}

procedure {:inline 1} $CastBv16to8(src: bv16) returns (dst: bv8)
{
    if ($Gt'Bv16'(src, 255bv16)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $shlBv8From16(src1: bv8, src2: bv16) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From16(src1: bv8, src2: bv16) returns (dst: bv8)
{
    if ($Ge'Bv16'(src2, 8bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From16(src1: bv8, src2: bv16) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From16(src1: bv8, src2: bv16) returns (dst: bv8)
{
    if ($Ge'Bv16'(src2, 8bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv32to8(src: bv32) returns (dst: bv8)
{
    if ($Gt'Bv32'(src, 255bv32)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $shlBv8From32(src1: bv8, src2: bv32) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From32(src1: bv8, src2: bv32) returns (dst: bv8)
{
    if ($Ge'Bv32'(src2, 8bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From32(src1: bv8, src2: bv32) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From32(src1: bv8, src2: bv32) returns (dst: bv8)
{
    if ($Ge'Bv32'(src2, 8bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv64to8(src: bv64) returns (dst: bv8)
{
    if ($Gt'Bv64'(src, 255bv64)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $shlBv8From64(src1: bv8, src2: bv64) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From64(src1: bv8, src2: bv64) returns (dst: bv8)
{
    if ($Ge'Bv64'(src2, 8bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From64(src1: bv8, src2: bv64) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From64(src1: bv8, src2: bv64) returns (dst: bv8)
{
    if ($Ge'Bv64'(src2, 8bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv128to8(src: bv128) returns (dst: bv8)
{
    if ($Gt'Bv128'(src, 255bv128)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $shlBv8From128(src1: bv8, src2: bv128) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From128(src1: bv8, src2: bv128) returns (dst: bv8)
{
    if ($Ge'Bv128'(src2, 8bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From128(src1: bv8, src2: bv128) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From128(src1: bv8, src2: bv128) returns (dst: bv8)
{
    if ($Ge'Bv128'(src2, 8bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv256to8(src: bv256) returns (dst: bv8)
{
    if ($Gt'Bv256'(src, 255bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $shlBv8From256(src1: bv8, src2: bv256) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From256(src1: bv8, src2: bv256) returns (dst: bv8)
{
    if ($Ge'Bv256'(src2, 8bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From256(src1: bv8, src2: bv256) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From256(src1: bv8, src2: bv256) returns (dst: bv8)
{
    if ($Ge'Bv256'(src2, 8bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv8to16(src: bv8) returns (dst: bv16)
{
    dst := 0bv8 ++ src;
}


function $shlBv16From8(src1: bv16, src2: bv8) returns (bv16)
{
    $Shl'Bv16'(src1, 0bv8 ++ src2)
}

procedure {:inline 1} $ShlBv16From8(src1: bv16, src2: bv8) returns (dst: bv16)
{
    if ($Ge'Bv8'(src2, 16bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, 0bv8 ++ src2);
}

function $shrBv16From8(src1: bv16, src2: bv8) returns (bv16)
{
    $Shr'Bv16'(src1, 0bv8 ++ src2)
}

procedure {:inline 1} $ShrBv16From8(src1: bv16, src2: bv8) returns (dst: bv16)
{
    if ($Ge'Bv8'(src2, 16bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, 0bv8 ++ src2);
}

procedure {:inline 1} $CastBv16to16(src: bv16) returns (dst: bv16)
{
    dst := src;
}


function $shlBv16From16(src1: bv16, src2: bv16) returns (bv16)
{
    $Shl'Bv16'(src1, src2)
}

procedure {:inline 1} $ShlBv16From16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Ge'Bv16'(src2, 16bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, src2);
}

function $shrBv16From16(src1: bv16, src2: bv16) returns (bv16)
{
    $Shr'Bv16'(src1, src2)
}

procedure {:inline 1} $ShrBv16From16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Ge'Bv16'(src2, 16bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, src2);
}

procedure {:inline 1} $CastBv32to16(src: bv32) returns (dst: bv16)
{
    if ($Gt'Bv32'(src, 65535bv32)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[16:0];
}


function $shlBv16From32(src1: bv16, src2: bv32) returns (bv16)
{
    $Shl'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShlBv16From32(src1: bv16, src2: bv32) returns (dst: bv16)
{
    if ($Ge'Bv32'(src2, 16bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, src2[16:0]);
}

function $shrBv16From32(src1: bv16, src2: bv32) returns (bv16)
{
    $Shr'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShrBv16From32(src1: bv16, src2: bv32) returns (dst: bv16)
{
    if ($Ge'Bv32'(src2, 16bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, src2[16:0]);
}

procedure {:inline 1} $CastBv64to16(src: bv64) returns (dst: bv16)
{
    if ($Gt'Bv64'(src, 65535bv64)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[16:0];
}


function $shlBv16From64(src1: bv16, src2: bv64) returns (bv16)
{
    $Shl'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShlBv16From64(src1: bv16, src2: bv64) returns (dst: bv16)
{
    if ($Ge'Bv64'(src2, 16bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, src2[16:0]);
}

function $shrBv16From64(src1: bv16, src2: bv64) returns (bv16)
{
    $Shr'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShrBv16From64(src1: bv16, src2: bv64) returns (dst: bv16)
{
    if ($Ge'Bv64'(src2, 16bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, src2[16:0]);
}

procedure {:inline 1} $CastBv128to16(src: bv128) returns (dst: bv16)
{
    if ($Gt'Bv128'(src, 65535bv128)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[16:0];
}


function $shlBv16From128(src1: bv16, src2: bv128) returns (bv16)
{
    $Shl'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShlBv16From128(src1: bv16, src2: bv128) returns (dst: bv16)
{
    if ($Ge'Bv128'(src2, 16bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, src2[16:0]);
}

function $shrBv16From128(src1: bv16, src2: bv128) returns (bv16)
{
    $Shr'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShrBv16From128(src1: bv16, src2: bv128) returns (dst: bv16)
{
    if ($Ge'Bv128'(src2, 16bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, src2[16:0]);
}

procedure {:inline 1} $CastBv256to16(src: bv256) returns (dst: bv16)
{
    if ($Gt'Bv256'(src, 65535bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[16:0];
}


function $shlBv16From256(src1: bv16, src2: bv256) returns (bv16)
{
    $Shl'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShlBv16From256(src1: bv16, src2: bv256) returns (dst: bv16)
{
    if ($Ge'Bv256'(src2, 16bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, src2[16:0]);
}

function $shrBv16From256(src1: bv16, src2: bv256) returns (bv16)
{
    $Shr'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShrBv16From256(src1: bv16, src2: bv256) returns (dst: bv16)
{
    if ($Ge'Bv256'(src2, 16bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, src2[16:0]);
}

procedure {:inline 1} $CastBv8to32(src: bv8) returns (dst: bv32)
{
    dst := 0bv24 ++ src;
}


function $shlBv32From8(src1: bv32, src2: bv8) returns (bv32)
{
    $Shl'Bv32'(src1, 0bv24 ++ src2)
}

procedure {:inline 1} $ShlBv32From8(src1: bv32, src2: bv8) returns (dst: bv32)
{
    if ($Ge'Bv8'(src2, 32bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, 0bv24 ++ src2);
}

function $shrBv32From8(src1: bv32, src2: bv8) returns (bv32)
{
    $Shr'Bv32'(src1, 0bv24 ++ src2)
}

procedure {:inline 1} $ShrBv32From8(src1: bv32, src2: bv8) returns (dst: bv32)
{
    if ($Ge'Bv8'(src2, 32bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, 0bv24 ++ src2);
}

procedure {:inline 1} $CastBv16to32(src: bv16) returns (dst: bv32)
{
    dst := 0bv16 ++ src;
}


function $shlBv32From16(src1: bv32, src2: bv16) returns (bv32)
{
    $Shl'Bv32'(src1, 0bv16 ++ src2)
}

procedure {:inline 1} $ShlBv32From16(src1: bv32, src2: bv16) returns (dst: bv32)
{
    if ($Ge'Bv16'(src2, 32bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, 0bv16 ++ src2);
}

function $shrBv32From16(src1: bv32, src2: bv16) returns (bv32)
{
    $Shr'Bv32'(src1, 0bv16 ++ src2)
}

procedure {:inline 1} $ShrBv32From16(src1: bv32, src2: bv16) returns (dst: bv32)
{
    if ($Ge'Bv16'(src2, 32bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, 0bv16 ++ src2);
}

procedure {:inline 1} $CastBv32to32(src: bv32) returns (dst: bv32)
{
    dst := src;
}


function $shlBv32From32(src1: bv32, src2: bv32) returns (bv32)
{
    $Shl'Bv32'(src1, src2)
}

procedure {:inline 1} $ShlBv32From32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Ge'Bv32'(src2, 32bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, src2);
}

function $shrBv32From32(src1: bv32, src2: bv32) returns (bv32)
{
    $Shr'Bv32'(src1, src2)
}

procedure {:inline 1} $ShrBv32From32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Ge'Bv32'(src2, 32bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, src2);
}

procedure {:inline 1} $CastBv64to32(src: bv64) returns (dst: bv32)
{
    if ($Gt'Bv64'(src, 2147483647bv64)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[32:0];
}


function $shlBv32From64(src1: bv32, src2: bv64) returns (bv32)
{
    $Shl'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShlBv32From64(src1: bv32, src2: bv64) returns (dst: bv32)
{
    if ($Ge'Bv64'(src2, 32bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, src2[32:0]);
}

function $shrBv32From64(src1: bv32, src2: bv64) returns (bv32)
{
    $Shr'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShrBv32From64(src1: bv32, src2: bv64) returns (dst: bv32)
{
    if ($Ge'Bv64'(src2, 32bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, src2[32:0]);
}

procedure {:inline 1} $CastBv128to32(src: bv128) returns (dst: bv32)
{
    if ($Gt'Bv128'(src, 2147483647bv128)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[32:0];
}


function $shlBv32From128(src1: bv32, src2: bv128) returns (bv32)
{
    $Shl'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShlBv32From128(src1: bv32, src2: bv128) returns (dst: bv32)
{
    if ($Ge'Bv128'(src2, 32bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, src2[32:0]);
}

function $shrBv32From128(src1: bv32, src2: bv128) returns (bv32)
{
    $Shr'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShrBv32From128(src1: bv32, src2: bv128) returns (dst: bv32)
{
    if ($Ge'Bv128'(src2, 32bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, src2[32:0]);
}

procedure {:inline 1} $CastBv256to32(src: bv256) returns (dst: bv32)
{
    if ($Gt'Bv256'(src, 2147483647bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[32:0];
}


function $shlBv32From256(src1: bv32, src2: bv256) returns (bv32)
{
    $Shl'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShlBv32From256(src1: bv32, src2: bv256) returns (dst: bv32)
{
    if ($Ge'Bv256'(src2, 32bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, src2[32:0]);
}

function $shrBv32From256(src1: bv32, src2: bv256) returns (bv32)
{
    $Shr'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShrBv32From256(src1: bv32, src2: bv256) returns (dst: bv32)
{
    if ($Ge'Bv256'(src2, 32bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, src2[32:0]);
}

procedure {:inline 1} $CastBv8to64(src: bv8) returns (dst: bv64)
{
    dst := 0bv56 ++ src;
}


function $shlBv64From8(src1: bv64, src2: bv8) returns (bv64)
{
    $Shl'Bv64'(src1, 0bv56 ++ src2)
}

procedure {:inline 1} $ShlBv64From8(src1: bv64, src2: bv8) returns (dst: bv64)
{
    if ($Ge'Bv8'(src2, 64bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, 0bv56 ++ src2);
}

function $shrBv64From8(src1: bv64, src2: bv8) returns (bv64)
{
    $Shr'Bv64'(src1, 0bv56 ++ src2)
}

procedure {:inline 1} $ShrBv64From8(src1: bv64, src2: bv8) returns (dst: bv64)
{
    if ($Ge'Bv8'(src2, 64bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, 0bv56 ++ src2);
}

procedure {:inline 1} $CastBv16to64(src: bv16) returns (dst: bv64)
{
    dst := 0bv48 ++ src;
}


function $shlBv64From16(src1: bv64, src2: bv16) returns (bv64)
{
    $Shl'Bv64'(src1, 0bv48 ++ src2)
}

procedure {:inline 1} $ShlBv64From16(src1: bv64, src2: bv16) returns (dst: bv64)
{
    if ($Ge'Bv16'(src2, 64bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, 0bv48 ++ src2);
}

function $shrBv64From16(src1: bv64, src2: bv16) returns (bv64)
{
    $Shr'Bv64'(src1, 0bv48 ++ src2)
}

procedure {:inline 1} $ShrBv64From16(src1: bv64, src2: bv16) returns (dst: bv64)
{
    if ($Ge'Bv16'(src2, 64bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, 0bv48 ++ src2);
}

procedure {:inline 1} $CastBv32to64(src: bv32) returns (dst: bv64)
{
    dst := 0bv32 ++ src;
}


function $shlBv64From32(src1: bv64, src2: bv32) returns (bv64)
{
    $Shl'Bv64'(src1, 0bv32 ++ src2)
}

procedure {:inline 1} $ShlBv64From32(src1: bv64, src2: bv32) returns (dst: bv64)
{
    if ($Ge'Bv32'(src2, 64bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, 0bv32 ++ src2);
}

function $shrBv64From32(src1: bv64, src2: bv32) returns (bv64)
{
    $Shr'Bv64'(src1, 0bv32 ++ src2)
}

procedure {:inline 1} $ShrBv64From32(src1: bv64, src2: bv32) returns (dst: bv64)
{
    if ($Ge'Bv32'(src2, 64bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, 0bv32 ++ src2);
}

procedure {:inline 1} $CastBv64to64(src: bv64) returns (dst: bv64)
{
    dst := src;
}


function $shlBv64From64(src1: bv64, src2: bv64) returns (bv64)
{
    $Shl'Bv64'(src1, src2)
}

procedure {:inline 1} $ShlBv64From64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Ge'Bv64'(src2, 64bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, src2);
}

function $shrBv64From64(src1: bv64, src2: bv64) returns (bv64)
{
    $Shr'Bv64'(src1, src2)
}

procedure {:inline 1} $ShrBv64From64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Ge'Bv64'(src2, 64bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, src2);
}

procedure {:inline 1} $CastBv128to64(src: bv128) returns (dst: bv64)
{
    if ($Gt'Bv128'(src, 18446744073709551615bv128)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[64:0];
}


function $shlBv64From128(src1: bv64, src2: bv128) returns (bv64)
{
    $Shl'Bv64'(src1, src2[64:0])
}

procedure {:inline 1} $ShlBv64From128(src1: bv64, src2: bv128) returns (dst: bv64)
{
    if ($Ge'Bv128'(src2, 64bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, src2[64:0]);
}

function $shrBv64From128(src1: bv64, src2: bv128) returns (bv64)
{
    $Shr'Bv64'(src1, src2[64:0])
}

procedure {:inline 1} $ShrBv64From128(src1: bv64, src2: bv128) returns (dst: bv64)
{
    if ($Ge'Bv128'(src2, 64bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, src2[64:0]);
}

procedure {:inline 1} $CastBv256to64(src: bv256) returns (dst: bv64)
{
    if ($Gt'Bv256'(src, 18446744073709551615bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[64:0];
}


function $shlBv64From256(src1: bv64, src2: bv256) returns (bv64)
{
    $Shl'Bv64'(src1, src2[64:0])
}

procedure {:inline 1} $ShlBv64From256(src1: bv64, src2: bv256) returns (dst: bv64)
{
    if ($Ge'Bv256'(src2, 64bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, src2[64:0]);
}

function $shrBv64From256(src1: bv64, src2: bv256) returns (bv64)
{
    $Shr'Bv64'(src1, src2[64:0])
}

procedure {:inline 1} $ShrBv64From256(src1: bv64, src2: bv256) returns (dst: bv64)
{
    if ($Ge'Bv256'(src2, 64bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, src2[64:0]);
}

procedure {:inline 1} $CastBv8to128(src: bv8) returns (dst: bv128)
{
    dst := 0bv120 ++ src;
}


function $shlBv128From8(src1: bv128, src2: bv8) returns (bv128)
{
    $Shl'Bv128'(src1, 0bv120 ++ src2)
}

procedure {:inline 1} $ShlBv128From8(src1: bv128, src2: bv8) returns (dst: bv128)
{
    if ($Ge'Bv8'(src2, 128bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, 0bv120 ++ src2);
}

function $shrBv128From8(src1: bv128, src2: bv8) returns (bv128)
{
    $Shr'Bv128'(src1, 0bv120 ++ src2)
}

procedure {:inline 1} $ShrBv128From8(src1: bv128, src2: bv8) returns (dst: bv128)
{
    if ($Ge'Bv8'(src2, 128bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, 0bv120 ++ src2);
}

procedure {:inline 1} $CastBv16to128(src: bv16) returns (dst: bv128)
{
    dst := 0bv112 ++ src;
}


function $shlBv128From16(src1: bv128, src2: bv16) returns (bv128)
{
    $Shl'Bv128'(src1, 0bv112 ++ src2)
}

procedure {:inline 1} $ShlBv128From16(src1: bv128, src2: bv16) returns (dst: bv128)
{
    if ($Ge'Bv16'(src2, 128bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, 0bv112 ++ src2);
}

function $shrBv128From16(src1: bv128, src2: bv16) returns (bv128)
{
    $Shr'Bv128'(src1, 0bv112 ++ src2)
}

procedure {:inline 1} $ShrBv128From16(src1: bv128, src2: bv16) returns (dst: bv128)
{
    if ($Ge'Bv16'(src2, 128bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, 0bv112 ++ src2);
}

procedure {:inline 1} $CastBv32to128(src: bv32) returns (dst: bv128)
{
    dst := 0bv96 ++ src;
}


function $shlBv128From32(src1: bv128, src2: bv32) returns (bv128)
{
    $Shl'Bv128'(src1, 0bv96 ++ src2)
}

procedure {:inline 1} $ShlBv128From32(src1: bv128, src2: bv32) returns (dst: bv128)
{
    if ($Ge'Bv32'(src2, 128bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, 0bv96 ++ src2);
}

function $shrBv128From32(src1: bv128, src2: bv32) returns (bv128)
{
    $Shr'Bv128'(src1, 0bv96 ++ src2)
}

procedure {:inline 1} $ShrBv128From32(src1: bv128, src2: bv32) returns (dst: bv128)
{
    if ($Ge'Bv32'(src2, 128bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, 0bv96 ++ src2);
}

procedure {:inline 1} $CastBv64to128(src: bv64) returns (dst: bv128)
{
    dst := 0bv64 ++ src;
}


function $shlBv128From64(src1: bv128, src2: bv64) returns (bv128)
{
    $Shl'Bv128'(src1, 0bv64 ++ src2)
}

procedure {:inline 1} $ShlBv128From64(src1: bv128, src2: bv64) returns (dst: bv128)
{
    if ($Ge'Bv64'(src2, 128bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, 0bv64 ++ src2);
}

function $shrBv128From64(src1: bv128, src2: bv64) returns (bv128)
{
    $Shr'Bv128'(src1, 0bv64 ++ src2)
}

procedure {:inline 1} $ShrBv128From64(src1: bv128, src2: bv64) returns (dst: bv128)
{
    if ($Ge'Bv64'(src2, 128bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, 0bv64 ++ src2);
}

procedure {:inline 1} $CastBv128to128(src: bv128) returns (dst: bv128)
{
    dst := src;
}


function $shlBv128From128(src1: bv128, src2: bv128) returns (bv128)
{
    $Shl'Bv128'(src1, src2)
}

procedure {:inline 1} $ShlBv128From128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Ge'Bv128'(src2, 128bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, src2);
}

function $shrBv128From128(src1: bv128, src2: bv128) returns (bv128)
{
    $Shr'Bv128'(src1, src2)
}

procedure {:inline 1} $ShrBv128From128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Ge'Bv128'(src2, 128bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, src2);
}

procedure {:inline 1} $CastBv256to128(src: bv256) returns (dst: bv128)
{
    if ($Gt'Bv256'(src, 340282366920938463463374607431768211455bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[128:0];
}


function $shlBv128From256(src1: bv128, src2: bv256) returns (bv128)
{
    $Shl'Bv128'(src1, src2[128:0])
}

procedure {:inline 1} $ShlBv128From256(src1: bv128, src2: bv256) returns (dst: bv128)
{
    if ($Ge'Bv256'(src2, 128bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, src2[128:0]);
}

function $shrBv128From256(src1: bv128, src2: bv256) returns (bv128)
{
    $Shr'Bv128'(src1, src2[128:0])
}

procedure {:inline 1} $ShrBv128From256(src1: bv128, src2: bv256) returns (dst: bv128)
{
    if ($Ge'Bv256'(src2, 128bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, src2[128:0]);
}

procedure {:inline 1} $CastBv8to256(src: bv8) returns (dst: bv256)
{
    dst := 0bv248 ++ src;
}


function $shlBv256From8(src1: bv256, src2: bv8) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv248 ++ src2)
}

procedure {:inline 1} $ShlBv256From8(src1: bv256, src2: bv8) returns (dst: bv256)
{
    if ($Ge'Bv8'(src2, 256bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, 0bv248 ++ src2);
}

function $shrBv256From8(src1: bv256, src2: bv8) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv248 ++ src2)
}

procedure {:inline 1} $ShrBv256From8(src1: bv256, src2: bv8) returns (dst: bv256)
{
    if ($Ge'Bv8'(src2, 256bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, 0bv248 ++ src2);
}

procedure {:inline 1} $CastBv16to256(src: bv16) returns (dst: bv256)
{
    dst := 0bv240 ++ src;
}


function $shlBv256From16(src1: bv256, src2: bv16) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv240 ++ src2)
}

procedure {:inline 1} $ShlBv256From16(src1: bv256, src2: bv16) returns (dst: bv256)
{
    if ($Ge'Bv16'(src2, 256bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, 0bv240 ++ src2);
}

function $shrBv256From16(src1: bv256, src2: bv16) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv240 ++ src2)
}

procedure {:inline 1} $ShrBv256From16(src1: bv256, src2: bv16) returns (dst: bv256)
{
    if ($Ge'Bv16'(src2, 256bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, 0bv240 ++ src2);
}

procedure {:inline 1} $CastBv32to256(src: bv32) returns (dst: bv256)
{
    dst := 0bv224 ++ src;
}


function $shlBv256From32(src1: bv256, src2: bv32) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv224 ++ src2)
}

procedure {:inline 1} $ShlBv256From32(src1: bv256, src2: bv32) returns (dst: bv256)
{
    if ($Ge'Bv32'(src2, 256bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, 0bv224 ++ src2);
}

function $shrBv256From32(src1: bv256, src2: bv32) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv224 ++ src2)
}

procedure {:inline 1} $ShrBv256From32(src1: bv256, src2: bv32) returns (dst: bv256)
{
    if ($Ge'Bv32'(src2, 256bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, 0bv224 ++ src2);
}

procedure {:inline 1} $CastBv64to256(src: bv64) returns (dst: bv256)
{
    dst := 0bv192 ++ src;
}


function $shlBv256From64(src1: bv256, src2: bv64) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv192 ++ src2)
}

procedure {:inline 1} $ShlBv256From64(src1: bv256, src2: bv64) returns (dst: bv256)
{
    if ($Ge'Bv64'(src2, 256bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, 0bv192 ++ src2);
}

function $shrBv256From64(src1: bv256, src2: bv64) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv192 ++ src2)
}

procedure {:inline 1} $ShrBv256From64(src1: bv256, src2: bv64) returns (dst: bv256)
{
    if ($Ge'Bv64'(src2, 256bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, 0bv192 ++ src2);
}

procedure {:inline 1} $CastBv128to256(src: bv128) returns (dst: bv256)
{
    dst := 0bv128 ++ src;
}


function $shlBv256From128(src1: bv256, src2: bv128) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv128 ++ src2)
}

procedure {:inline 1} $ShlBv256From128(src1: bv256, src2: bv128) returns (dst: bv256)
{
    if ($Ge'Bv128'(src2, 256bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, 0bv128 ++ src2);
}

function $shrBv256From128(src1: bv256, src2: bv128) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv128 ++ src2)
}

procedure {:inline 1} $ShrBv256From128(src1: bv256, src2: bv128) returns (dst: bv256)
{
    if ($Ge'Bv128'(src2, 256bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, 0bv128 ++ src2);
}

procedure {:inline 1} $CastBv256to256(src: bv256) returns (dst: bv256)
{
    dst := src;
}


function $shlBv256From256(src1: bv256, src2: bv256) returns (bv256)
{
    $Shl'Bv256'(src1, src2)
}

procedure {:inline 1} $ShlBv256From256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Ge'Bv256'(src2, 256bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, src2);
}

function $shrBv256From256(src1: bv256, src2: bv256) returns (bv256)
{
    $Shr'Bv256'(src1, src2)
}

procedure {:inline 1} $ShrBv256From256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Ge'Bv256'(src2, 256bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, src2);
}

procedure {:inline 1} $ShlU16(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 16) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shlU16(src1, src2);
}

procedure {:inline 1} $ShlU32(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 32) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shlU32(src1, src2);
}

procedure {:inline 1} $ShlU64(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 64) {
       call $ExecFailureAbort();
       return;
    }
    dst := $shlU64(src1, src2);
}

procedure {:inline 1} $ShlU128(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 128) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shlU128(src1, src2);
}

procedure {:inline 1} $ShlU256(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    dst := $shlU256(src1, src2);
}

procedure {:inline 1} $Shr(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU8(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 8) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU16(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 16) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU32(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 32) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU64(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 64) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU128(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 128) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU256(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    dst := $shr(src1, src2);
}

procedure {:inline 1} $MulU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU16(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U16) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU32(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U32) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU256(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U256) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $Div(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 div src2;
}

procedure {:inline 1} $Mod(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 mod src2;
}

procedure {:inline 1} $ArithBinaryUnimplemented(src1: int, src2: int) returns (dst: int);

procedure {:inline 1} $Lt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 < src2;
}

procedure {:inline 1} $Gt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 > src2;
}

procedure {:inline 1} $Le(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 <= src2;
}

procedure {:inline 1} $Ge(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 >= src2;
}

procedure {:inline 1} $And(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 && src2;
}

procedure {:inline 1} $Or(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 || src2;
}

procedure {:inline 1} $Not(src: bool) returns (dst: bool)
{
    dst := !src;
}

// Pack and Unpack are auto-generated for each type T


// ==================================================================================
// Native Vector

function {:inline} $SliceVecByRange<T>(v: Vec T, r: $Range): Vec T {
    SliceVec(v, r->lb, r->ub)
}

// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `#0`

// Not inlined. It appears faster this way.
function $IsEqual'vec'#0''(v1: Vec (#0), v2: Vec (#0)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'#0'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'#0''(v: Vec (#0), prefix: Vec (#0)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'#0'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'#0''(v: Vec (#0), suffix: Vec (#0)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'#0'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'#0''(v: Vec (#0)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'#0'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'#0'(v: Vec (#0), e: #0): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'#0'(ReadVec(v, i), e))
}

function $IndexOfVec'#0'(v: Vec (#0), e: #0): int;
axiom (forall v: Vec (#0), e: #0:: {$IndexOfVec'#0'(v, e)}
    (var i := $IndexOfVec'#0'(v, e);
     if (!$ContainsVec'#0'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'#0'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'#0'(ReadVec(v, j), e))));


function {:inline} $RangeVec'#0'(v: Vec (#0)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'#0'(): Vec (#0) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'#0'() returns (v: Vec (#0)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'#0'(): Vec (#0) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'#0'(v: Vec (#0)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'#0'(m: $Mutation (Vec (#0)), val: #0) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'#0'(v: Vec (#0), val: #0): Vec (#0) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'#0'(m: $Mutation (Vec (#0))) returns (e: #0, m': $Mutation (Vec (#0))) {
    var v: Vec (#0);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'#0'(m: $Mutation (Vec (#0)), other: Vec (#0)) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'#0'(m: $Mutation (Vec (#0))) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'#0'(m: $Mutation (Vec (#0)), other: Vec (#0)) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'#0'(m: $Mutation (Vec (#0)), new_len: int) returns (v: (Vec (#0)), m': $Mutation (Vec (#0))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'#0'(m: $Mutation (Vec (#0)), new_len: int) returns (v: (Vec (#0)), m': $Mutation (Vec (#0))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'#0'(m: $Mutation (Vec (#0)), left: int, right: int) returns (m': $Mutation (Vec (#0))) {
    var left_vec: Vec (#0);
    var mid_vec: Vec (#0);
    var right_vec: Vec (#0);
    var v: Vec (#0);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'#0'(m: $Mutation (Vec (#0)), rot: int) returns (n: int, m': $Mutation (Vec (#0))) {
    var v: Vec (#0);
    var len: int;
    var left_vec: Vec (#0);
    var right_vec: Vec (#0);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'#0'(m: $Mutation (Vec (#0)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (#0))) {
    var left_vec: Vec (#0);
    var mid_vec: Vec (#0);
    var right_vec: Vec (#0);
    var mid_left_vec: Vec (#0);
    var mid_right_vec: Vec (#0);
    var v: Vec (#0);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'#0'(m: $Mutation (Vec (#0)), i: int, e: #0) returns (m': $Mutation (Vec (#0))) {
    var left_vec: Vec (#0);
    var right_vec: Vec (#0);
    var v: Vec (#0);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'#0'(v: Vec (#0)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'#0'(v: Vec (#0)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'#0'(v: Vec (#0), i: int) returns (dst: #0) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'#0'(v: Vec (#0), i: int): #0 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'#0'(m: $Mutation (Vec (#0)), index: int)
returns (dst: $Mutation (#0), m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'#0'(v: Vec (#0), i: int): #0 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'#0'(v: Vec (#0)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'#0'(m: $Mutation (Vec (#0)), i: int, j: int) returns (m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'#0'(v: Vec (#0), i: int, j: int): Vec (#0) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'#0'(m: $Mutation (Vec (#0)), i: int) returns (e: #0, m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'#0'(m: $Mutation (Vec (#0)), i: int) returns (e: #0, m': $Mutation (Vec (#0)))
{
    var len: int;
    var v: Vec (#0);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'#0'(v: Vec (#0), e: #0) returns (res: bool)  {
    res := $ContainsVec'#0'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'#0'(v: Vec (#0), e: #0) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'#0'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_aggregator_Aggregator`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_aggregator_Aggregator''(v1: Vec ($1_aggregator_Aggregator), v2: Vec ($1_aggregator_Aggregator)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_aggregator_Aggregator'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_aggregator_Aggregator''(v: Vec ($1_aggregator_Aggregator), prefix: Vec ($1_aggregator_Aggregator)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_aggregator_Aggregator'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_aggregator_Aggregator''(v: Vec ($1_aggregator_Aggregator), suffix: Vec ($1_aggregator_Aggregator)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_aggregator_Aggregator'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_aggregator_Aggregator''(v: Vec ($1_aggregator_Aggregator)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_aggregator_Aggregator'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator), e: $1_aggregator_Aggregator): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_aggregator_Aggregator'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator), e: $1_aggregator_Aggregator): int;
axiom (forall v: Vec ($1_aggregator_Aggregator), e: $1_aggregator_Aggregator:: {$IndexOfVec'$1_aggregator_Aggregator'(v, e)}
    (var i := $IndexOfVec'$1_aggregator_Aggregator'(v, e);
     if (!$ContainsVec'$1_aggregator_Aggregator'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_aggregator_Aggregator'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_aggregator_Aggregator'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_aggregator_Aggregator'(): Vec ($1_aggregator_Aggregator) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_aggregator_Aggregator'() returns (v: Vec ($1_aggregator_Aggregator)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_aggregator_Aggregator'(): Vec ($1_aggregator_Aggregator) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), val: $1_aggregator_Aggregator) returns (m': $Mutation (Vec ($1_aggregator_Aggregator))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator), val: $1_aggregator_Aggregator): Vec ($1_aggregator_Aggregator) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator))) returns (e: $1_aggregator_Aggregator, m': $Mutation (Vec ($1_aggregator_Aggregator))) {
    var v: Vec ($1_aggregator_Aggregator);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), other: Vec ($1_aggregator_Aggregator)) returns (m': $Mutation (Vec ($1_aggregator_Aggregator))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator))) returns (m': $Mutation (Vec ($1_aggregator_Aggregator))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), other: Vec ($1_aggregator_Aggregator)) returns (m': $Mutation (Vec ($1_aggregator_Aggregator))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), new_len: int) returns (v: (Vec ($1_aggregator_Aggregator)), m': $Mutation (Vec ($1_aggregator_Aggregator))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), new_len: int) returns (v: (Vec ($1_aggregator_Aggregator)), m': $Mutation (Vec ($1_aggregator_Aggregator))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), left: int, right: int) returns (m': $Mutation (Vec ($1_aggregator_Aggregator))) {
    var left_vec: Vec ($1_aggregator_Aggregator);
    var mid_vec: Vec ($1_aggregator_Aggregator);
    var right_vec: Vec ($1_aggregator_Aggregator);
    var v: Vec ($1_aggregator_Aggregator);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), rot: int) returns (n: int, m': $Mutation (Vec ($1_aggregator_Aggregator))) {
    var v: Vec ($1_aggregator_Aggregator);
    var len: int;
    var left_vec: Vec ($1_aggregator_Aggregator);
    var right_vec: Vec ($1_aggregator_Aggregator);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_aggregator_Aggregator))) {
    var left_vec: Vec ($1_aggregator_Aggregator);
    var mid_vec: Vec ($1_aggregator_Aggregator);
    var right_vec: Vec ($1_aggregator_Aggregator);
    var mid_left_vec: Vec ($1_aggregator_Aggregator);
    var mid_right_vec: Vec ($1_aggregator_Aggregator);
    var v: Vec ($1_aggregator_Aggregator);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), i: int, e: $1_aggregator_Aggregator) returns (m': $Mutation (Vec ($1_aggregator_Aggregator))) {
    var left_vec: Vec ($1_aggregator_Aggregator);
    var right_vec: Vec ($1_aggregator_Aggregator);
    var v: Vec ($1_aggregator_Aggregator);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator), i: int) returns (dst: $1_aggregator_Aggregator) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator), i: int): $1_aggregator_Aggregator {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), index: int)
returns (dst: $Mutation ($1_aggregator_Aggregator), m': $Mutation (Vec ($1_aggregator_Aggregator)))
{
    var v: Vec ($1_aggregator_Aggregator);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator), i: int): $1_aggregator_Aggregator {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), i: int, j: int) returns (m': $Mutation (Vec ($1_aggregator_Aggregator)))
{
    var v: Vec ($1_aggregator_Aggregator);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator), i: int, j: int): Vec ($1_aggregator_Aggregator) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), i: int) returns (e: $1_aggregator_Aggregator, m': $Mutation (Vec ($1_aggregator_Aggregator)))
{
    var v: Vec ($1_aggregator_Aggregator);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), i: int) returns (e: $1_aggregator_Aggregator, m': $Mutation (Vec ($1_aggregator_Aggregator)))
{
    var len: int;
    var v: Vec ($1_aggregator_Aggregator);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator), e: $1_aggregator_Aggregator) returns (res: bool)  {
    res := $ContainsVec'$1_aggregator_Aggregator'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator), e: $1_aggregator_Aggregator) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_aggregator_Aggregator'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_fixed_point32_FixedPoint32`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_fixed_point32_FixedPoint32''(v1: Vec ($1_fixed_point32_FixedPoint32), v2: Vec ($1_fixed_point32_FixedPoint32)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_fixed_point32_FixedPoint32'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_fixed_point32_FixedPoint32''(v: Vec ($1_fixed_point32_FixedPoint32), prefix: Vec ($1_fixed_point32_FixedPoint32)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_fixed_point32_FixedPoint32'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_fixed_point32_FixedPoint32''(v: Vec ($1_fixed_point32_FixedPoint32), suffix: Vec ($1_fixed_point32_FixedPoint32)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_fixed_point32_FixedPoint32'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_fixed_point32_FixedPoint32''(v: Vec ($1_fixed_point32_FixedPoint32)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_fixed_point32_FixedPoint32'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_fixed_point32_FixedPoint32'(v: Vec ($1_fixed_point32_FixedPoint32), e: $1_fixed_point32_FixedPoint32): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_fixed_point32_FixedPoint32'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_fixed_point32_FixedPoint32'(v: Vec ($1_fixed_point32_FixedPoint32), e: $1_fixed_point32_FixedPoint32): int;
axiom (forall v: Vec ($1_fixed_point32_FixedPoint32), e: $1_fixed_point32_FixedPoint32:: {$IndexOfVec'$1_fixed_point32_FixedPoint32'(v, e)}
    (var i := $IndexOfVec'$1_fixed_point32_FixedPoint32'(v, e);
     if (!$ContainsVec'$1_fixed_point32_FixedPoint32'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_fixed_point32_FixedPoint32'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_fixed_point32_FixedPoint32'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_fixed_point32_FixedPoint32'(v: Vec ($1_fixed_point32_FixedPoint32)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_fixed_point32_FixedPoint32'(): Vec ($1_fixed_point32_FixedPoint32) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_fixed_point32_FixedPoint32'() returns (v: Vec ($1_fixed_point32_FixedPoint32)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_fixed_point32_FixedPoint32'(): Vec ($1_fixed_point32_FixedPoint32) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_fixed_point32_FixedPoint32'(v: Vec ($1_fixed_point32_FixedPoint32)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_fixed_point32_FixedPoint32'(m: $Mutation (Vec ($1_fixed_point32_FixedPoint32)), val: $1_fixed_point32_FixedPoint32) returns (m': $Mutation (Vec ($1_fixed_point32_FixedPoint32))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_fixed_point32_FixedPoint32'(v: Vec ($1_fixed_point32_FixedPoint32), val: $1_fixed_point32_FixedPoint32): Vec ($1_fixed_point32_FixedPoint32) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_fixed_point32_FixedPoint32'(m: $Mutation (Vec ($1_fixed_point32_FixedPoint32))) returns (e: $1_fixed_point32_FixedPoint32, m': $Mutation (Vec ($1_fixed_point32_FixedPoint32))) {
    var v: Vec ($1_fixed_point32_FixedPoint32);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_fixed_point32_FixedPoint32'(m: $Mutation (Vec ($1_fixed_point32_FixedPoint32)), other: Vec ($1_fixed_point32_FixedPoint32)) returns (m': $Mutation (Vec ($1_fixed_point32_FixedPoint32))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_fixed_point32_FixedPoint32'(m: $Mutation (Vec ($1_fixed_point32_FixedPoint32))) returns (m': $Mutation (Vec ($1_fixed_point32_FixedPoint32))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_fixed_point32_FixedPoint32'(m: $Mutation (Vec ($1_fixed_point32_FixedPoint32)), other: Vec ($1_fixed_point32_FixedPoint32)) returns (m': $Mutation (Vec ($1_fixed_point32_FixedPoint32))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_fixed_point32_FixedPoint32'(m: $Mutation (Vec ($1_fixed_point32_FixedPoint32)), new_len: int) returns (v: (Vec ($1_fixed_point32_FixedPoint32)), m': $Mutation (Vec ($1_fixed_point32_FixedPoint32))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_fixed_point32_FixedPoint32'(m: $Mutation (Vec ($1_fixed_point32_FixedPoint32)), new_len: int) returns (v: (Vec ($1_fixed_point32_FixedPoint32)), m': $Mutation (Vec ($1_fixed_point32_FixedPoint32))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_fixed_point32_FixedPoint32'(m: $Mutation (Vec ($1_fixed_point32_FixedPoint32)), left: int, right: int) returns (m': $Mutation (Vec ($1_fixed_point32_FixedPoint32))) {
    var left_vec: Vec ($1_fixed_point32_FixedPoint32);
    var mid_vec: Vec ($1_fixed_point32_FixedPoint32);
    var right_vec: Vec ($1_fixed_point32_FixedPoint32);
    var v: Vec ($1_fixed_point32_FixedPoint32);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_fixed_point32_FixedPoint32'(m: $Mutation (Vec ($1_fixed_point32_FixedPoint32)), rot: int) returns (n: int, m': $Mutation (Vec ($1_fixed_point32_FixedPoint32))) {
    var v: Vec ($1_fixed_point32_FixedPoint32);
    var len: int;
    var left_vec: Vec ($1_fixed_point32_FixedPoint32);
    var right_vec: Vec ($1_fixed_point32_FixedPoint32);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_fixed_point32_FixedPoint32'(m: $Mutation (Vec ($1_fixed_point32_FixedPoint32)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_fixed_point32_FixedPoint32))) {
    var left_vec: Vec ($1_fixed_point32_FixedPoint32);
    var mid_vec: Vec ($1_fixed_point32_FixedPoint32);
    var right_vec: Vec ($1_fixed_point32_FixedPoint32);
    var mid_left_vec: Vec ($1_fixed_point32_FixedPoint32);
    var mid_right_vec: Vec ($1_fixed_point32_FixedPoint32);
    var v: Vec ($1_fixed_point32_FixedPoint32);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_fixed_point32_FixedPoint32'(m: $Mutation (Vec ($1_fixed_point32_FixedPoint32)), i: int, e: $1_fixed_point32_FixedPoint32) returns (m': $Mutation (Vec ($1_fixed_point32_FixedPoint32))) {
    var left_vec: Vec ($1_fixed_point32_FixedPoint32);
    var right_vec: Vec ($1_fixed_point32_FixedPoint32);
    var v: Vec ($1_fixed_point32_FixedPoint32);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_fixed_point32_FixedPoint32'(v: Vec ($1_fixed_point32_FixedPoint32)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_fixed_point32_FixedPoint32'(v: Vec ($1_fixed_point32_FixedPoint32)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_fixed_point32_FixedPoint32'(v: Vec ($1_fixed_point32_FixedPoint32), i: int) returns (dst: $1_fixed_point32_FixedPoint32) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_fixed_point32_FixedPoint32'(v: Vec ($1_fixed_point32_FixedPoint32), i: int): $1_fixed_point32_FixedPoint32 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_fixed_point32_FixedPoint32'(m: $Mutation (Vec ($1_fixed_point32_FixedPoint32)), index: int)
returns (dst: $Mutation ($1_fixed_point32_FixedPoint32), m': $Mutation (Vec ($1_fixed_point32_FixedPoint32)))
{
    var v: Vec ($1_fixed_point32_FixedPoint32);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_fixed_point32_FixedPoint32'(v: Vec ($1_fixed_point32_FixedPoint32), i: int): $1_fixed_point32_FixedPoint32 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_fixed_point32_FixedPoint32'(v: Vec ($1_fixed_point32_FixedPoint32)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_fixed_point32_FixedPoint32'(m: $Mutation (Vec ($1_fixed_point32_FixedPoint32)), i: int, j: int) returns (m': $Mutation (Vec ($1_fixed_point32_FixedPoint32)))
{
    var v: Vec ($1_fixed_point32_FixedPoint32);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_fixed_point32_FixedPoint32'(v: Vec ($1_fixed_point32_FixedPoint32), i: int, j: int): Vec ($1_fixed_point32_FixedPoint32) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_fixed_point32_FixedPoint32'(m: $Mutation (Vec ($1_fixed_point32_FixedPoint32)), i: int) returns (e: $1_fixed_point32_FixedPoint32, m': $Mutation (Vec ($1_fixed_point32_FixedPoint32)))
{
    var v: Vec ($1_fixed_point32_FixedPoint32);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_fixed_point32_FixedPoint32'(m: $Mutation (Vec ($1_fixed_point32_FixedPoint32)), i: int) returns (e: $1_fixed_point32_FixedPoint32, m': $Mutation (Vec ($1_fixed_point32_FixedPoint32)))
{
    var len: int;
    var v: Vec ($1_fixed_point32_FixedPoint32);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_fixed_point32_FixedPoint32'(v: Vec ($1_fixed_point32_FixedPoint32), e: $1_fixed_point32_FixedPoint32) returns (res: bool)  {
    res := $ContainsVec'$1_fixed_point32_FixedPoint32'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_fixed_point32_FixedPoint32'(v: Vec ($1_fixed_point32_FixedPoint32), e: $1_fixed_point32_FixedPoint32) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_fixed_point32_FixedPoint32'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_optional_aggregator_Integer`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_optional_aggregator_Integer''(v1: Vec ($1_optional_aggregator_Integer), v2: Vec ($1_optional_aggregator_Integer)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_optional_aggregator_Integer'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_optional_aggregator_Integer''(v: Vec ($1_optional_aggregator_Integer), prefix: Vec ($1_optional_aggregator_Integer)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_optional_aggregator_Integer'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_optional_aggregator_Integer''(v: Vec ($1_optional_aggregator_Integer), suffix: Vec ($1_optional_aggregator_Integer)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_optional_aggregator_Integer'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_optional_aggregator_Integer''(v: Vec ($1_optional_aggregator_Integer)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_optional_aggregator_Integer'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer), e: $1_optional_aggregator_Integer): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_optional_aggregator_Integer'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer), e: $1_optional_aggregator_Integer): int;
axiom (forall v: Vec ($1_optional_aggregator_Integer), e: $1_optional_aggregator_Integer:: {$IndexOfVec'$1_optional_aggregator_Integer'(v, e)}
    (var i := $IndexOfVec'$1_optional_aggregator_Integer'(v, e);
     if (!$ContainsVec'$1_optional_aggregator_Integer'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_optional_aggregator_Integer'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_optional_aggregator_Integer'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_optional_aggregator_Integer'(): Vec ($1_optional_aggregator_Integer) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_optional_aggregator_Integer'() returns (v: Vec ($1_optional_aggregator_Integer)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_optional_aggregator_Integer'(): Vec ($1_optional_aggregator_Integer) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), val: $1_optional_aggregator_Integer) returns (m': $Mutation (Vec ($1_optional_aggregator_Integer))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer), val: $1_optional_aggregator_Integer): Vec ($1_optional_aggregator_Integer) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer))) returns (e: $1_optional_aggregator_Integer, m': $Mutation (Vec ($1_optional_aggregator_Integer))) {
    var v: Vec ($1_optional_aggregator_Integer);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), other: Vec ($1_optional_aggregator_Integer)) returns (m': $Mutation (Vec ($1_optional_aggregator_Integer))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer))) returns (m': $Mutation (Vec ($1_optional_aggregator_Integer))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), other: Vec ($1_optional_aggregator_Integer)) returns (m': $Mutation (Vec ($1_optional_aggregator_Integer))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), new_len: int) returns (v: (Vec ($1_optional_aggregator_Integer)), m': $Mutation (Vec ($1_optional_aggregator_Integer))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), new_len: int) returns (v: (Vec ($1_optional_aggregator_Integer)), m': $Mutation (Vec ($1_optional_aggregator_Integer))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), left: int, right: int) returns (m': $Mutation (Vec ($1_optional_aggregator_Integer))) {
    var left_vec: Vec ($1_optional_aggregator_Integer);
    var mid_vec: Vec ($1_optional_aggregator_Integer);
    var right_vec: Vec ($1_optional_aggregator_Integer);
    var v: Vec ($1_optional_aggregator_Integer);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), rot: int) returns (n: int, m': $Mutation (Vec ($1_optional_aggregator_Integer))) {
    var v: Vec ($1_optional_aggregator_Integer);
    var len: int;
    var left_vec: Vec ($1_optional_aggregator_Integer);
    var right_vec: Vec ($1_optional_aggregator_Integer);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_optional_aggregator_Integer))) {
    var left_vec: Vec ($1_optional_aggregator_Integer);
    var mid_vec: Vec ($1_optional_aggregator_Integer);
    var right_vec: Vec ($1_optional_aggregator_Integer);
    var mid_left_vec: Vec ($1_optional_aggregator_Integer);
    var mid_right_vec: Vec ($1_optional_aggregator_Integer);
    var v: Vec ($1_optional_aggregator_Integer);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), i: int, e: $1_optional_aggregator_Integer) returns (m': $Mutation (Vec ($1_optional_aggregator_Integer))) {
    var left_vec: Vec ($1_optional_aggregator_Integer);
    var right_vec: Vec ($1_optional_aggregator_Integer);
    var v: Vec ($1_optional_aggregator_Integer);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer), i: int) returns (dst: $1_optional_aggregator_Integer) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer), i: int): $1_optional_aggregator_Integer {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), index: int)
returns (dst: $Mutation ($1_optional_aggregator_Integer), m': $Mutation (Vec ($1_optional_aggregator_Integer)))
{
    var v: Vec ($1_optional_aggregator_Integer);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer), i: int): $1_optional_aggregator_Integer {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), i: int, j: int) returns (m': $Mutation (Vec ($1_optional_aggregator_Integer)))
{
    var v: Vec ($1_optional_aggregator_Integer);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer), i: int, j: int): Vec ($1_optional_aggregator_Integer) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), i: int) returns (e: $1_optional_aggregator_Integer, m': $Mutation (Vec ($1_optional_aggregator_Integer)))
{
    var v: Vec ($1_optional_aggregator_Integer);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), i: int) returns (e: $1_optional_aggregator_Integer, m': $Mutation (Vec ($1_optional_aggregator_Integer)))
{
    var len: int;
    var v: Vec ($1_optional_aggregator_Integer);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer), e: $1_optional_aggregator_Integer) returns (res: bool)  {
    res := $ContainsVec'$1_optional_aggregator_Integer'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer), e: $1_optional_aggregator_Integer) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_optional_aggregator_Integer'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_optional_aggregator_OptionalAggregator`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_optional_aggregator_OptionalAggregator''(v1: Vec ($1_optional_aggregator_OptionalAggregator), v2: Vec ($1_optional_aggregator_OptionalAggregator)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_optional_aggregator_OptionalAggregator'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_optional_aggregator_OptionalAggregator''(v: Vec ($1_optional_aggregator_OptionalAggregator), prefix: Vec ($1_optional_aggregator_OptionalAggregator)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_optional_aggregator_OptionalAggregator'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_optional_aggregator_OptionalAggregator''(v: Vec ($1_optional_aggregator_OptionalAggregator), suffix: Vec ($1_optional_aggregator_OptionalAggregator)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_optional_aggregator_OptionalAggregator'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_optional_aggregator_OptionalAggregator''(v: Vec ($1_optional_aggregator_OptionalAggregator)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_optional_aggregator_OptionalAggregator'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator), e: $1_optional_aggregator_OptionalAggregator): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_optional_aggregator_OptionalAggregator'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator), e: $1_optional_aggregator_OptionalAggregator): int;
axiom (forall v: Vec ($1_optional_aggregator_OptionalAggregator), e: $1_optional_aggregator_OptionalAggregator:: {$IndexOfVec'$1_optional_aggregator_OptionalAggregator'(v, e)}
    (var i := $IndexOfVec'$1_optional_aggregator_OptionalAggregator'(v, e);
     if (!$ContainsVec'$1_optional_aggregator_OptionalAggregator'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_optional_aggregator_OptionalAggregator'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_optional_aggregator_OptionalAggregator'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_optional_aggregator_OptionalAggregator'(): Vec ($1_optional_aggregator_OptionalAggregator) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_optional_aggregator_OptionalAggregator'() returns (v: Vec ($1_optional_aggregator_OptionalAggregator)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_optional_aggregator_OptionalAggregator'(): Vec ($1_optional_aggregator_OptionalAggregator) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), val: $1_optional_aggregator_OptionalAggregator) returns (m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator), val: $1_optional_aggregator_OptionalAggregator): Vec ($1_optional_aggregator_OptionalAggregator) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) returns (e: $1_optional_aggregator_OptionalAggregator, m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) {
    var v: Vec ($1_optional_aggregator_OptionalAggregator);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), other: Vec ($1_optional_aggregator_OptionalAggregator)) returns (m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) returns (m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), other: Vec ($1_optional_aggregator_OptionalAggregator)) returns (m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), new_len: int) returns (v: (Vec ($1_optional_aggregator_OptionalAggregator)), m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), new_len: int) returns (v: (Vec ($1_optional_aggregator_OptionalAggregator)), m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), left: int, right: int) returns (m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) {
    var left_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    var mid_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    var right_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    var v: Vec ($1_optional_aggregator_OptionalAggregator);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), rot: int) returns (n: int, m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) {
    var v: Vec ($1_optional_aggregator_OptionalAggregator);
    var len: int;
    var left_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    var right_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) {
    var left_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    var mid_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    var right_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    var mid_left_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    var mid_right_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    var v: Vec ($1_optional_aggregator_OptionalAggregator);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), i: int, e: $1_optional_aggregator_OptionalAggregator) returns (m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) {
    var left_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    var right_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    var v: Vec ($1_optional_aggregator_OptionalAggregator);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator), i: int) returns (dst: $1_optional_aggregator_OptionalAggregator) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator), i: int): $1_optional_aggregator_OptionalAggregator {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), index: int)
returns (dst: $Mutation ($1_optional_aggregator_OptionalAggregator), m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)))
{
    var v: Vec ($1_optional_aggregator_OptionalAggregator);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator), i: int): $1_optional_aggregator_OptionalAggregator {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), i: int, j: int) returns (m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)))
{
    var v: Vec ($1_optional_aggregator_OptionalAggregator);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator), i: int, j: int): Vec ($1_optional_aggregator_OptionalAggregator) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), i: int) returns (e: $1_optional_aggregator_OptionalAggregator, m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)))
{
    var v: Vec ($1_optional_aggregator_OptionalAggregator);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), i: int) returns (e: $1_optional_aggregator_OptionalAggregator, m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)))
{
    var len: int;
    var v: Vec ($1_optional_aggregator_OptionalAggregator);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator), e: $1_optional_aggregator_OptionalAggregator) returns (res: bool)  {
    res := $ContainsVec'$1_optional_aggregator_OptionalAggregator'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator), e: $1_optional_aggregator_OptionalAggregator) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_optional_aggregator_OptionalAggregator'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_stake_IndividualValidatorPerformance`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_stake_IndividualValidatorPerformance''(v1: Vec ($1_stake_IndividualValidatorPerformance), v2: Vec ($1_stake_IndividualValidatorPerformance)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_stake_IndividualValidatorPerformance'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_stake_IndividualValidatorPerformance''(v: Vec ($1_stake_IndividualValidatorPerformance), prefix: Vec ($1_stake_IndividualValidatorPerformance)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_stake_IndividualValidatorPerformance'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_stake_IndividualValidatorPerformance''(v: Vec ($1_stake_IndividualValidatorPerformance), suffix: Vec ($1_stake_IndividualValidatorPerformance)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_stake_IndividualValidatorPerformance'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_stake_IndividualValidatorPerformance''(v: Vec ($1_stake_IndividualValidatorPerformance)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_stake_IndividualValidatorPerformance'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance), e: $1_stake_IndividualValidatorPerformance): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_stake_IndividualValidatorPerformance'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance), e: $1_stake_IndividualValidatorPerformance): int;
axiom (forall v: Vec ($1_stake_IndividualValidatorPerformance), e: $1_stake_IndividualValidatorPerformance:: {$IndexOfVec'$1_stake_IndividualValidatorPerformance'(v, e)}
    (var i := $IndexOfVec'$1_stake_IndividualValidatorPerformance'(v, e);
     if (!$ContainsVec'$1_stake_IndividualValidatorPerformance'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_stake_IndividualValidatorPerformance'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_stake_IndividualValidatorPerformance'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_stake_IndividualValidatorPerformance'(): Vec ($1_stake_IndividualValidatorPerformance) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_stake_IndividualValidatorPerformance'() returns (v: Vec ($1_stake_IndividualValidatorPerformance)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_stake_IndividualValidatorPerformance'(): Vec ($1_stake_IndividualValidatorPerformance) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), val: $1_stake_IndividualValidatorPerformance) returns (m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance), val: $1_stake_IndividualValidatorPerformance): Vec ($1_stake_IndividualValidatorPerformance) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) returns (e: $1_stake_IndividualValidatorPerformance, m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) {
    var v: Vec ($1_stake_IndividualValidatorPerformance);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), other: Vec ($1_stake_IndividualValidatorPerformance)) returns (m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) returns (m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), other: Vec ($1_stake_IndividualValidatorPerformance)) returns (m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), new_len: int) returns (v: (Vec ($1_stake_IndividualValidatorPerformance)), m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), new_len: int) returns (v: (Vec ($1_stake_IndividualValidatorPerformance)), m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), left: int, right: int) returns (m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) {
    var left_vec: Vec ($1_stake_IndividualValidatorPerformance);
    var mid_vec: Vec ($1_stake_IndividualValidatorPerformance);
    var right_vec: Vec ($1_stake_IndividualValidatorPerformance);
    var v: Vec ($1_stake_IndividualValidatorPerformance);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), rot: int) returns (n: int, m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) {
    var v: Vec ($1_stake_IndividualValidatorPerformance);
    var len: int;
    var left_vec: Vec ($1_stake_IndividualValidatorPerformance);
    var right_vec: Vec ($1_stake_IndividualValidatorPerformance);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) {
    var left_vec: Vec ($1_stake_IndividualValidatorPerformance);
    var mid_vec: Vec ($1_stake_IndividualValidatorPerformance);
    var right_vec: Vec ($1_stake_IndividualValidatorPerformance);
    var mid_left_vec: Vec ($1_stake_IndividualValidatorPerformance);
    var mid_right_vec: Vec ($1_stake_IndividualValidatorPerformance);
    var v: Vec ($1_stake_IndividualValidatorPerformance);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), i: int, e: $1_stake_IndividualValidatorPerformance) returns (m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) {
    var left_vec: Vec ($1_stake_IndividualValidatorPerformance);
    var right_vec: Vec ($1_stake_IndividualValidatorPerformance);
    var v: Vec ($1_stake_IndividualValidatorPerformance);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance), i: int) returns (dst: $1_stake_IndividualValidatorPerformance) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance), i: int): $1_stake_IndividualValidatorPerformance {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), index: int)
returns (dst: $Mutation ($1_stake_IndividualValidatorPerformance), m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance)))
{
    var v: Vec ($1_stake_IndividualValidatorPerformance);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance), i: int): $1_stake_IndividualValidatorPerformance {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), i: int, j: int) returns (m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance)))
{
    var v: Vec ($1_stake_IndividualValidatorPerformance);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance), i: int, j: int): Vec ($1_stake_IndividualValidatorPerformance) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), i: int) returns (e: $1_stake_IndividualValidatorPerformance, m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance)))
{
    var v: Vec ($1_stake_IndividualValidatorPerformance);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), i: int) returns (e: $1_stake_IndividualValidatorPerformance, m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance)))
{
    var len: int;
    var v: Vec ($1_stake_IndividualValidatorPerformance);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance), e: $1_stake_IndividualValidatorPerformance) returns (res: bool)  {
    res := $ContainsVec'$1_stake_IndividualValidatorPerformance'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance), e: $1_stake_IndividualValidatorPerformance) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_stake_IndividualValidatorPerformance'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_stake_ValidatorInfo`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_stake_ValidatorInfo''(v1: Vec ($1_stake_ValidatorInfo), v2: Vec ($1_stake_ValidatorInfo)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_stake_ValidatorInfo'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_stake_ValidatorInfo''(v: Vec ($1_stake_ValidatorInfo), prefix: Vec ($1_stake_ValidatorInfo)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_stake_ValidatorInfo'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_stake_ValidatorInfo''(v: Vec ($1_stake_ValidatorInfo), suffix: Vec ($1_stake_ValidatorInfo)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_stake_ValidatorInfo'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_stake_ValidatorInfo''(v: Vec ($1_stake_ValidatorInfo)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_stake_ValidatorInfo'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo), e: $1_stake_ValidatorInfo): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_stake_ValidatorInfo'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo), e: $1_stake_ValidatorInfo): int;
axiom (forall v: Vec ($1_stake_ValidatorInfo), e: $1_stake_ValidatorInfo:: {$IndexOfVec'$1_stake_ValidatorInfo'(v, e)}
    (var i := $IndexOfVec'$1_stake_ValidatorInfo'(v, e);
     if (!$ContainsVec'$1_stake_ValidatorInfo'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_stake_ValidatorInfo'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_stake_ValidatorInfo'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_stake_ValidatorInfo'(): Vec ($1_stake_ValidatorInfo) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_stake_ValidatorInfo'() returns (v: Vec ($1_stake_ValidatorInfo)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_stake_ValidatorInfo'(): Vec ($1_stake_ValidatorInfo) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), val: $1_stake_ValidatorInfo) returns (m': $Mutation (Vec ($1_stake_ValidatorInfo))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo), val: $1_stake_ValidatorInfo): Vec ($1_stake_ValidatorInfo) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo))) returns (e: $1_stake_ValidatorInfo, m': $Mutation (Vec ($1_stake_ValidatorInfo))) {
    var v: Vec ($1_stake_ValidatorInfo);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), other: Vec ($1_stake_ValidatorInfo)) returns (m': $Mutation (Vec ($1_stake_ValidatorInfo))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo))) returns (m': $Mutation (Vec ($1_stake_ValidatorInfo))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), other: Vec ($1_stake_ValidatorInfo)) returns (m': $Mutation (Vec ($1_stake_ValidatorInfo))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), new_len: int) returns (v: (Vec ($1_stake_ValidatorInfo)), m': $Mutation (Vec ($1_stake_ValidatorInfo))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), new_len: int) returns (v: (Vec ($1_stake_ValidatorInfo)), m': $Mutation (Vec ($1_stake_ValidatorInfo))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), left: int, right: int) returns (m': $Mutation (Vec ($1_stake_ValidatorInfo))) {
    var left_vec: Vec ($1_stake_ValidatorInfo);
    var mid_vec: Vec ($1_stake_ValidatorInfo);
    var right_vec: Vec ($1_stake_ValidatorInfo);
    var v: Vec ($1_stake_ValidatorInfo);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), rot: int) returns (n: int, m': $Mutation (Vec ($1_stake_ValidatorInfo))) {
    var v: Vec ($1_stake_ValidatorInfo);
    var len: int;
    var left_vec: Vec ($1_stake_ValidatorInfo);
    var right_vec: Vec ($1_stake_ValidatorInfo);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_stake_ValidatorInfo))) {
    var left_vec: Vec ($1_stake_ValidatorInfo);
    var mid_vec: Vec ($1_stake_ValidatorInfo);
    var right_vec: Vec ($1_stake_ValidatorInfo);
    var mid_left_vec: Vec ($1_stake_ValidatorInfo);
    var mid_right_vec: Vec ($1_stake_ValidatorInfo);
    var v: Vec ($1_stake_ValidatorInfo);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), i: int, e: $1_stake_ValidatorInfo) returns (m': $Mutation (Vec ($1_stake_ValidatorInfo))) {
    var left_vec: Vec ($1_stake_ValidatorInfo);
    var right_vec: Vec ($1_stake_ValidatorInfo);
    var v: Vec ($1_stake_ValidatorInfo);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo), i: int) returns (dst: $1_stake_ValidatorInfo) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo), i: int): $1_stake_ValidatorInfo {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), index: int)
returns (dst: $Mutation ($1_stake_ValidatorInfo), m': $Mutation (Vec ($1_stake_ValidatorInfo)))
{
    var v: Vec ($1_stake_ValidatorInfo);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo), i: int): $1_stake_ValidatorInfo {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), i: int, j: int) returns (m': $Mutation (Vec ($1_stake_ValidatorInfo)))
{
    var v: Vec ($1_stake_ValidatorInfo);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo), i: int, j: int): Vec ($1_stake_ValidatorInfo) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), i: int) returns (e: $1_stake_ValidatorInfo, m': $Mutation (Vec ($1_stake_ValidatorInfo)))
{
    var v: Vec ($1_stake_ValidatorInfo);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), i: int) returns (e: $1_stake_ValidatorInfo, m': $Mutation (Vec ($1_stake_ValidatorInfo)))
{
    var len: int;
    var v: Vec ($1_stake_ValidatorInfo);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo), e: $1_stake_ValidatorInfo) returns (res: bool)  {
    res := $ContainsVec'$1_stake_ValidatorInfo'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo), e: $1_stake_ValidatorInfo) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_stake_ValidatorInfo'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `address`

// Not inlined. It appears faster this way.
function $IsEqual'vec'address''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'address'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'address''(v: Vec (int), prefix: Vec (int)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'address'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'address''(v: Vec (int), suffix: Vec (int)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'address'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'address''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'address'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'address'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'address'(ReadVec(v, i), e))
}

function $IndexOfVec'address'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'address'(v, e)}
    (var i := $IndexOfVec'address'(v, e);
     if (!$ContainsVec'address'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'address'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'address'(ReadVec(v, j), e))));


function {:inline} $RangeVec'address'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'address'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'address'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'address'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'address'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'address'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'address'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'address'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'address'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'address'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'address'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'address'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'address'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'address'(m: $Mutation (Vec (int)), left: int, right: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'address'(m: $Mutation (Vec (int)), rot: int) returns (n: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'address'(m: $Mutation (Vec (int)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var mid_left_vec: Vec (int);
    var mid_right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'address'(m: $Mutation (Vec (int)), i: int, e: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'address'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'address'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'address'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'address'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'address'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'address'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'address'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'address'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'address'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'address'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'address'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'address'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'address'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'address'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'address'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `u8`

// Not inlined. It appears faster this way.
function $IsEqual'vec'u8''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'u8'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'u8''(v: Vec (int), prefix: Vec (int)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'u8'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'u8''(v: Vec (int), suffix: Vec (int)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'u8'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'u8''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'u8'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'u8'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e))
}

function $IndexOfVec'u8'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'u8'(v, e)}
    (var i := $IndexOfVec'u8'(v, e);
     if (!$ContainsVec'u8'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'u8'(ReadVec(v, j), e))));


function {:inline} $RangeVec'u8'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'u8'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'u8'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'u8'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'u8'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'u8'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'u8'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'u8'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'u8'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'u8'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'u8'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'u8'(m: $Mutation (Vec (int)), left: int, right: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'u8'(m: $Mutation (Vec (int)), rot: int) returns (n: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'u8'(m: $Mutation (Vec (int)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var mid_left_vec: Vec (int);
    var mid_right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'u8'(m: $Mutation (Vec (int)), i: int, e: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'u8'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'u8'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'u8'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'u8'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'u8'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'u8'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'u8'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'u8'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'u8'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'u8'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'u8'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `bv8`

// Not inlined. It appears faster this way.
function $IsEqual'vec'bv8''(v1: Vec (bv8), v2: Vec (bv8)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'bv8'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'bv8''(v: Vec (bv8), prefix: Vec (bv8)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'bv8'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'bv8''(v: Vec (bv8), suffix: Vec (bv8)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'bv8'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'bv8''(v: Vec (bv8)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'bv8'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'bv8'(v: Vec (bv8), e: bv8): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv8'(ReadVec(v, i), e))
}

function $IndexOfVec'bv8'(v: Vec (bv8), e: bv8): int;
axiom (forall v: Vec (bv8), e: bv8:: {$IndexOfVec'bv8'(v, e)}
    (var i := $IndexOfVec'bv8'(v, e);
     if (!$ContainsVec'bv8'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv8'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'bv8'(ReadVec(v, j), e))));


function {:inline} $RangeVec'bv8'(v: Vec (bv8)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'bv8'(): Vec (bv8) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'bv8'() returns (v: Vec (bv8)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'bv8'(): Vec (bv8) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'bv8'(v: Vec (bv8)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'bv8'(m: $Mutation (Vec (bv8)), val: bv8) returns (m': $Mutation (Vec (bv8))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'bv8'(v: Vec (bv8), val: bv8): Vec (bv8) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'bv8'(m: $Mutation (Vec (bv8))) returns (e: bv8, m': $Mutation (Vec (bv8))) {
    var v: Vec (bv8);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'bv8'(m: $Mutation (Vec (bv8)), other: Vec (bv8)) returns (m': $Mutation (Vec (bv8))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'bv8'(m: $Mutation (Vec (bv8))) returns (m': $Mutation (Vec (bv8))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'bv8'(m: $Mutation (Vec (bv8)), other: Vec (bv8)) returns (m': $Mutation (Vec (bv8))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'bv8'(m: $Mutation (Vec (bv8)), new_len: int) returns (v: (Vec (bv8)), m': $Mutation (Vec (bv8))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'bv8'(m: $Mutation (Vec (bv8)), new_len: int) returns (v: (Vec (bv8)), m': $Mutation (Vec (bv8))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'bv8'(m: $Mutation (Vec (bv8)), left: int, right: int) returns (m': $Mutation (Vec (bv8))) {
    var left_vec: Vec (bv8);
    var mid_vec: Vec (bv8);
    var right_vec: Vec (bv8);
    var v: Vec (bv8);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'bv8'(m: $Mutation (Vec (bv8)), rot: int) returns (n: int, m': $Mutation (Vec (bv8))) {
    var v: Vec (bv8);
    var len: int;
    var left_vec: Vec (bv8);
    var right_vec: Vec (bv8);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'bv8'(m: $Mutation (Vec (bv8)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (bv8))) {
    var left_vec: Vec (bv8);
    var mid_vec: Vec (bv8);
    var right_vec: Vec (bv8);
    var mid_left_vec: Vec (bv8);
    var mid_right_vec: Vec (bv8);
    var v: Vec (bv8);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'bv8'(m: $Mutation (Vec (bv8)), i: int, e: bv8) returns (m': $Mutation (Vec (bv8))) {
    var left_vec: Vec (bv8);
    var right_vec: Vec (bv8);
    var v: Vec (bv8);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'bv8'(v: Vec (bv8)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'bv8'(v: Vec (bv8)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'bv8'(v: Vec (bv8), i: int) returns (dst: bv8) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'bv8'(v: Vec (bv8), i: int): bv8 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'bv8'(m: $Mutation (Vec (bv8)), index: int)
returns (dst: $Mutation (bv8), m': $Mutation (Vec (bv8)))
{
    var v: Vec (bv8);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'bv8'(v: Vec (bv8), i: int): bv8 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'bv8'(v: Vec (bv8)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'bv8'(m: $Mutation (Vec (bv8)), i: int, j: int) returns (m': $Mutation (Vec (bv8)))
{
    var v: Vec (bv8);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'bv8'(v: Vec (bv8), i: int, j: int): Vec (bv8) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'bv8'(m: $Mutation (Vec (bv8)), i: int) returns (e: bv8, m': $Mutation (Vec (bv8)))
{
    var v: Vec (bv8);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'bv8'(m: $Mutation (Vec (bv8)), i: int) returns (e: bv8, m': $Mutation (Vec (bv8)))
{
    var len: int;
    var v: Vec (bv8);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'bv8'(v: Vec (bv8), e: bv8) returns (res: bool)  {
    res := $ContainsVec'bv8'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'bv8'(v: Vec (bv8), e: bv8) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'bv8'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ==================================================================================
// Native Table

// ----------------------------------------------------------------------------------
// Native Table key encoding for type `address`

function $EncodeKey'address'(k: int): int;
axiom (
  forall k1, k2: int :: {$EncodeKey'address'(k1), $EncodeKey'address'(k2)}
    $IsEqual'address'(k1, k2) <==> $EncodeKey'address'(k1) == $EncodeKey'address'(k2)
);


// ----------------------------------------------------------------------------------
// Native Table key encoding for type `$1_string_String`

function $EncodeKey'$1_string_String'(k: $1_string_String): int;
axiom (
  forall k1, k2: $1_string_String :: {$EncodeKey'$1_string_String'(k1), $EncodeKey'$1_string_String'(k2)}
    $IsEqual'$1_string_String'(k1, k2) <==> $EncodeKey'$1_string_String'(k1) == $EncodeKey'$1_string_String'(k2)
);


// ----------------------------------------------------------------------------------
// Native Table implementation for type `(address,u64)`

function $IsEqual'$1_simple_map_SimpleMap'address_u64''(t1: Table int (int), t2: Table int (int)): bool {
    LenTable(t1) == LenTable(t2) &&
    (forall k: int :: ContainsTable(t1, k) <==> ContainsTable(t2, k)) &&
    (forall k: int :: ContainsTable(t1, k) ==> GetTable(t1, k) == GetTable(t2, k)) &&
    (forall k: int :: ContainsTable(t2, k) ==> GetTable(t1, k) == GetTable(t2, k))
}

// Not inlined.
function $IsValid'$1_simple_map_SimpleMap'address_u64''(t: Table int (int)): bool {
    $IsValid'u64'(LenTable(t)) &&
    (forall i: int:: ContainsTable(t, i) ==> $IsValid'u64'(GetTable(t, i)))
}
procedure {:inline 2} $1_simple_map_create'address_u64'() returns (v: Table int (int)) {
    v := EmptyTable();
}
procedure {:inline 2} $1_simple_map_destroy_empty'address_u64'(t: Table int (int)) {
    if (LenTable(t) != 0) {
        call $Abort($StdError(1/*INVALID_STATE*/, 102/*ENOT_EMPTY*/));
    }
}
procedure {:inline 2} $1_simple_map_length'address_u64'(t: (Table int (int))) returns (l: int) {
    l := LenTable(t);
}
procedure {:inline 2} $1_simple_map_contains_key'address_u64'(t: (Table int (int)), k: int) returns (r: bool) {
    r := ContainsTable(t, $EncodeKey'address'(k));
}
procedure {:inline 2} $1_simple_map_add'address_u64'(m: $Mutation (Table int (int)), k: int, v: int) returns (m': $Mutation(Table int (int))) {
    var enc_k: int;
    var t: Table int (int);
    enc_k := $EncodeKey'address'(k);
    t := $Dereference(m);
    if (ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 100/*EALREADY_EXISTS*/));
    } else {
        m' := $UpdateMutation(m, AddTable(t, enc_k, v));
    }
}
procedure {:inline 2} $1_simple_map_remove'address_u64'(m: $Mutation (Table int (int)), k: int)
returns (k': int, v: int, m': $Mutation(Table int (int))) {
    var enc_k: int;
    var t: Table int (int);
    enc_k := $EncodeKey'address'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        k' := k;
        v := GetTable(t, enc_k);
        m' := $UpdateMutation(m, RemoveTable(t, enc_k));
    }
}
procedure {:inline 2} $1_simple_map_borrow'address_u64'(t: Table int (int), k: int) returns (v: int) {
    var enc_k: int;
    enc_k := $EncodeKey'address'(k);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        v := GetTable(t, $EncodeKey'address'(k));
    }
}
procedure {:inline 2} $1_simple_map_borrow_mut'address_u64'(m: $Mutation (Table int (int)), k: int)
returns (dst: $Mutation (int), m': $Mutation (Table int (int))) {
    var enc_k: int;
    var t: Table int (int);
    enc_k := $EncodeKey'address'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        dst := $Mutation(m->l, ExtendVec(m->p, enc_k), GetTable(t, enc_k));
        m' := m;
    }
}
function {:inline} $1_simple_map_spec_len'address_u64'(t: (Table int (int))): int {
    LenTable(t)
}
function {:inline} $1_simple_map_spec_contains_key'address_u64'(t: (Table int (int)), k: int): bool {
    ContainsTable(t, $EncodeKey'address'(k))
}
function {:inline} $1_simple_map_spec_set'address_u64'(t: Table int (int), k: int, v: int): Table int (int) {
    (var enc_k := $EncodeKey'address'(k);
    if (ContainsTable(t, enc_k)) then
        UpdateTable(t, enc_k, v)
    else
        AddTable(t, enc_k, v))
}
function {:inline} $1_simple_map_spec_remove'address_u64'(t: Table int (int), k: int): Table int (int) {
    RemoveTable(t, $EncodeKey'address'(k))
}
function {:inline} $1_simple_map_spec_get'address_u64'(t: Table int (int), k: int): int {
    GetTable(t, $EncodeKey'address'(k))
}



// ----------------------------------------------------------------------------------
// Native Table implementation for type `(address,address)`

function $IsEqual'$1_simple_map_SimpleMap'address_address''(t1: Table int (int), t2: Table int (int)): bool {
    LenTable(t1) == LenTable(t2) &&
    (forall k: int :: ContainsTable(t1, k) <==> ContainsTable(t2, k)) &&
    (forall k: int :: ContainsTable(t1, k) ==> GetTable(t1, k) == GetTable(t2, k)) &&
    (forall k: int :: ContainsTable(t2, k) ==> GetTable(t1, k) == GetTable(t2, k))
}

// Not inlined.
function $IsValid'$1_simple_map_SimpleMap'address_address''(t: Table int (int)): bool {
    $IsValid'u64'(LenTable(t)) &&
    (forall i: int:: ContainsTable(t, i) ==> $IsValid'address'(GetTable(t, i)))
}
procedure {:inline 2} $1_simple_map_create'address_address'() returns (v: Table int (int)) {
    v := EmptyTable();
}
procedure {:inline 2} $1_simple_map_destroy_empty'address_address'(t: Table int (int)) {
    if (LenTable(t) != 0) {
        call $Abort($StdError(1/*INVALID_STATE*/, 102/*ENOT_EMPTY*/));
    }
}
procedure {:inline 2} $1_simple_map_length'address_address'(t: (Table int (int))) returns (l: int) {
    l := LenTable(t);
}
procedure {:inline 2} $1_simple_map_contains_key'address_address'(t: (Table int (int)), k: int) returns (r: bool) {
    r := ContainsTable(t, $EncodeKey'address'(k));
}
procedure {:inline 2} $1_simple_map_add'address_address'(m: $Mutation (Table int (int)), k: int, v: int) returns (m': $Mutation(Table int (int))) {
    var enc_k: int;
    var t: Table int (int);
    enc_k := $EncodeKey'address'(k);
    t := $Dereference(m);
    if (ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 100/*EALREADY_EXISTS*/));
    } else {
        m' := $UpdateMutation(m, AddTable(t, enc_k, v));
    }
}
procedure {:inline 2} $1_simple_map_remove'address_address'(m: $Mutation (Table int (int)), k: int)
returns (k': int, v: int, m': $Mutation(Table int (int))) {
    var enc_k: int;
    var t: Table int (int);
    enc_k := $EncodeKey'address'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        k' := k;
        v := GetTable(t, enc_k);
        m' := $UpdateMutation(m, RemoveTable(t, enc_k));
    }
}
procedure {:inline 2} $1_simple_map_borrow'address_address'(t: Table int (int), k: int) returns (v: int) {
    var enc_k: int;
    enc_k := $EncodeKey'address'(k);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        v := GetTable(t, $EncodeKey'address'(k));
    }
}
procedure {:inline 2} $1_simple_map_borrow_mut'address_address'(m: $Mutation (Table int (int)), k: int)
returns (dst: $Mutation (int), m': $Mutation (Table int (int))) {
    var enc_k: int;
    var t: Table int (int);
    enc_k := $EncodeKey'address'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        dst := $Mutation(m->l, ExtendVec(m->p, enc_k), GetTable(t, enc_k));
        m' := m;
    }
}
function {:inline} $1_simple_map_spec_len'address_address'(t: (Table int (int))): int {
    LenTable(t)
}
function {:inline} $1_simple_map_spec_contains_key'address_address'(t: (Table int (int)), k: int): bool {
    ContainsTable(t, $EncodeKey'address'(k))
}
function {:inline} $1_simple_map_spec_set'address_address'(t: Table int (int), k: int, v: int): Table int (int) {
    (var enc_k := $EncodeKey'address'(k);
    if (ContainsTable(t, enc_k)) then
        UpdateTable(t, enc_k, v)
    else
        AddTable(t, enc_k, v))
}
function {:inline} $1_simple_map_spec_remove'address_address'(t: Table int (int), k: int): Table int (int) {
    RemoveTable(t, $EncodeKey'address'(k))
}
function {:inline} $1_simple_map_spec_get'address_address'(t: Table int (int), k: int): int {
    GetTable(t, $EncodeKey'address'(k))
}



// ----------------------------------------------------------------------------------
// Native Table implementation for type `(address,$1_staking_contract_StakingContract)`

function $IsEqual'$1_simple_map_SimpleMap'address_$1_staking_contract_StakingContract''(t1: Table int ($1_staking_contract_StakingContract), t2: Table int ($1_staking_contract_StakingContract)): bool {
    LenTable(t1) == LenTable(t2) &&
    (forall k: int :: ContainsTable(t1, k) <==> ContainsTable(t2, k)) &&
    (forall k: int :: ContainsTable(t1, k) ==> GetTable(t1, k) == GetTable(t2, k)) &&
    (forall k: int :: ContainsTable(t2, k) ==> GetTable(t1, k) == GetTable(t2, k))
}

// Not inlined.
function $IsValid'$1_simple_map_SimpleMap'address_$1_staking_contract_StakingContract''(t: Table int ($1_staking_contract_StakingContract)): bool {
    $IsValid'u64'(LenTable(t)) &&
    (forall i: int:: ContainsTable(t, i) ==> $IsValid'$1_staking_contract_StakingContract'(GetTable(t, i)))
}
procedure {:inline 2} $1_simple_map_create'address_$1_staking_contract_StakingContract'() returns (v: Table int ($1_staking_contract_StakingContract)) {
    v := EmptyTable();
}
procedure {:inline 2} $1_simple_map_destroy_empty'address_$1_staking_contract_StakingContract'(t: Table int ($1_staking_contract_StakingContract)) {
    if (LenTable(t) != 0) {
        call $Abort($StdError(1/*INVALID_STATE*/, 102/*ENOT_EMPTY*/));
    }
}
procedure {:inline 2} $1_simple_map_length'address_$1_staking_contract_StakingContract'(t: (Table int ($1_staking_contract_StakingContract))) returns (l: int) {
    l := LenTable(t);
}
procedure {:inline 2} $1_simple_map_contains_key'address_$1_staking_contract_StakingContract'(t: (Table int ($1_staking_contract_StakingContract)), k: int) returns (r: bool) {
    r := ContainsTable(t, $EncodeKey'address'(k));
}
procedure {:inline 2} $1_simple_map_add'address_$1_staking_contract_StakingContract'(m: $Mutation (Table int ($1_staking_contract_StakingContract)), k: int, v: $1_staking_contract_StakingContract) returns (m': $Mutation(Table int ($1_staking_contract_StakingContract))) {
    var enc_k: int;
    var t: Table int ($1_staking_contract_StakingContract);
    enc_k := $EncodeKey'address'(k);
    t := $Dereference(m);
    if (ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 100/*EALREADY_EXISTS*/));
    } else {
        m' := $UpdateMutation(m, AddTable(t, enc_k, v));
    }
}
procedure {:inline 2} $1_simple_map_remove'address_$1_staking_contract_StakingContract'(m: $Mutation (Table int ($1_staking_contract_StakingContract)), k: int)
returns (k': int, v: $1_staking_contract_StakingContract, m': $Mutation(Table int ($1_staking_contract_StakingContract))) {
    var enc_k: int;
    var t: Table int ($1_staking_contract_StakingContract);
    enc_k := $EncodeKey'address'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        k' := k;
        v := GetTable(t, enc_k);
        m' := $UpdateMutation(m, RemoveTable(t, enc_k));
    }
}
procedure {:inline 2} $1_simple_map_borrow'address_$1_staking_contract_StakingContract'(t: Table int ($1_staking_contract_StakingContract), k: int) returns (v: $1_staking_contract_StakingContract) {
    var enc_k: int;
    enc_k := $EncodeKey'address'(k);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        v := GetTable(t, $EncodeKey'address'(k));
    }
}
procedure {:inline 2} $1_simple_map_borrow_mut'address_$1_staking_contract_StakingContract'(m: $Mutation (Table int ($1_staking_contract_StakingContract)), k: int)
returns (dst: $Mutation ($1_staking_contract_StakingContract), m': $Mutation (Table int ($1_staking_contract_StakingContract))) {
    var enc_k: int;
    var t: Table int ($1_staking_contract_StakingContract);
    enc_k := $EncodeKey'address'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        dst := $Mutation(m->l, ExtendVec(m->p, enc_k), GetTable(t, enc_k));
        m' := m;
    }
}
function {:inline} $1_simple_map_spec_len'address_$1_staking_contract_StakingContract'(t: (Table int ($1_staking_contract_StakingContract))): int {
    LenTable(t)
}
function {:inline} $1_simple_map_spec_contains_key'address_$1_staking_contract_StakingContract'(t: (Table int ($1_staking_contract_StakingContract)), k: int): bool {
    ContainsTable(t, $EncodeKey'address'(k))
}
function {:inline} $1_simple_map_spec_set'address_$1_staking_contract_StakingContract'(t: Table int ($1_staking_contract_StakingContract), k: int, v: $1_staking_contract_StakingContract): Table int ($1_staking_contract_StakingContract) {
    (var enc_k := $EncodeKey'address'(k);
    if (ContainsTable(t, enc_k)) then
        UpdateTable(t, enc_k, v)
    else
        AddTable(t, enc_k, v))
}
function {:inline} $1_simple_map_spec_remove'address_$1_staking_contract_StakingContract'(t: Table int ($1_staking_contract_StakingContract), k: int): Table int ($1_staking_contract_StakingContract) {
    RemoveTable(t, $EncodeKey'address'(k))
}
function {:inline} $1_simple_map_spec_get'address_$1_staking_contract_StakingContract'(t: Table int ($1_staking_contract_StakingContract), k: int): $1_staking_contract_StakingContract {
    GetTable(t, $EncodeKey'address'(k))
}



// ----------------------------------------------------------------------------------
// Native Table implementation for type `($1_string_String,address)`

function $IsEqual'$1_simple_map_SimpleMap'$1_string_String_address''(t1: Table int (int), t2: Table int (int)): bool {
    LenTable(t1) == LenTable(t2) &&
    (forall k: int :: ContainsTable(t1, k) <==> ContainsTable(t2, k)) &&
    (forall k: int :: ContainsTable(t1, k) ==> GetTable(t1, k) == GetTable(t2, k)) &&
    (forall k: int :: ContainsTable(t2, k) ==> GetTable(t1, k) == GetTable(t2, k))
}

// Not inlined.
function $IsValid'$1_simple_map_SimpleMap'$1_string_String_address''(t: Table int (int)): bool {
    $IsValid'u64'(LenTable(t)) &&
    (forall i: int:: ContainsTable(t, i) ==> $IsValid'address'(GetTable(t, i)))
}
procedure {:inline 2} $1_simple_map_create'$1_string_String_address'() returns (v: Table int (int)) {
    v := EmptyTable();
}
procedure {:inline 2} $1_simple_map_destroy_empty'$1_string_String_address'(t: Table int (int)) {
    if (LenTable(t) != 0) {
        call $Abort($StdError(1/*INVALID_STATE*/, 102/*ENOT_EMPTY*/));
    }
}
procedure {:inline 2} $1_simple_map_length'$1_string_String_address'(t: (Table int (int))) returns (l: int) {
    l := LenTable(t);
}
procedure {:inline 2} $1_simple_map_contains_key'$1_string_String_address'(t: (Table int (int)), k: $1_string_String) returns (r: bool) {
    r := ContainsTable(t, $EncodeKey'$1_string_String'(k));
}
procedure {:inline 2} $1_simple_map_add'$1_string_String_address'(m: $Mutation (Table int (int)), k: $1_string_String, v: int) returns (m': $Mutation(Table int (int))) {
    var enc_k: int;
    var t: Table int (int);
    enc_k := $EncodeKey'$1_string_String'(k);
    t := $Dereference(m);
    if (ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 100/*EALREADY_EXISTS*/));
    } else {
        m' := $UpdateMutation(m, AddTable(t, enc_k, v));
    }
}
procedure {:inline 2} $1_simple_map_remove'$1_string_String_address'(m: $Mutation (Table int (int)), k: $1_string_String)
returns (k': $1_string_String, v: int, m': $Mutation(Table int (int))) {
    var enc_k: int;
    var t: Table int (int);
    enc_k := $EncodeKey'$1_string_String'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        k' := k;
        v := GetTable(t, enc_k);
        m' := $UpdateMutation(m, RemoveTable(t, enc_k));
    }
}
procedure {:inline 2} $1_simple_map_borrow'$1_string_String_address'(t: Table int (int), k: $1_string_String) returns (v: int) {
    var enc_k: int;
    enc_k := $EncodeKey'$1_string_String'(k);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        v := GetTable(t, $EncodeKey'$1_string_String'(k));
    }
}
procedure {:inline 2} $1_simple_map_borrow_mut'$1_string_String_address'(m: $Mutation (Table int (int)), k: $1_string_String)
returns (dst: $Mutation (int), m': $Mutation (Table int (int))) {
    var enc_k: int;
    var t: Table int (int);
    enc_k := $EncodeKey'$1_string_String'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        dst := $Mutation(m->l, ExtendVec(m->p, enc_k), GetTable(t, enc_k));
        m' := m;
    }
}
function {:inline} $1_simple_map_spec_len'$1_string_String_address'(t: (Table int (int))): int {
    LenTable(t)
}
function {:inline} $1_simple_map_spec_contains_key'$1_string_String_address'(t: (Table int (int)), k: $1_string_String): bool {
    ContainsTable(t, $EncodeKey'$1_string_String'(k))
}
function {:inline} $1_simple_map_spec_set'$1_string_String_address'(t: Table int (int), k: $1_string_String, v: int): Table int (int) {
    (var enc_k := $EncodeKey'$1_string_String'(k);
    if (ContainsTable(t, enc_k)) then
        UpdateTable(t, enc_k, v)
    else
        AddTable(t, enc_k, v))
}
function {:inline} $1_simple_map_spec_remove'$1_string_String_address'(t: Table int (int), k: $1_string_String): Table int (int) {
    RemoveTable(t, $EncodeKey'$1_string_String'(k))
}
function {:inline} $1_simple_map_spec_get'$1_string_String_address'(t: Table int (int), k: $1_string_String): int {
    GetTable(t, $EncodeKey'$1_string_String'(k))
}



// ==================================================================================
// Native Hash

// Hash is modeled as an otherwise uninterpreted injection.
// In truth, it is not an injection since the domain has greater cardinality
// (arbitrary length vectors) than the co-domain (vectors of length 32).  But it is
// common to assume in code there are no hash collisions in practice.  Fortunately,
// Boogie is not smart enough to recognized that there is an inconsistency.
// FIXME: If we were using a reliable extensional theory of arrays, and if we could use ==
// instead of $IsEqual, we might be able to avoid so many quantified formulas by
// using a sha2_inverse function in the ensures conditions of Hash_sha2_256 to
// assert that sha2/3 are injections without using global quantified axioms.


function $1_hash_sha2(val: Vec int): Vec int;

// This says that Hash_sha2 is bijective.
axiom (forall v1,v2: Vec int :: {$1_hash_sha2(v1), $1_hash_sha2(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_hash_sha2(v1), $1_hash_sha2(v2)));

procedure $1_hash_sha2_256(val: Vec int) returns (res: Vec int);
ensures res == $1_hash_sha2(val);     // returns Hash_sha2 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_hash_$sha2_256(val: Vec int): Vec int {
    $1_hash_sha2(val)
}

// similarly for Hash_sha3
function $1_hash_sha3(val: Vec int): Vec int;

axiom (forall v1,v2: Vec int :: {$1_hash_sha3(v1), $1_hash_sha3(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_hash_sha3(v1), $1_hash_sha3(v2)));

procedure $1_hash_sha3_256(val: Vec int) returns (res: Vec int);
ensures res == $1_hash_sha3(val);     // returns Hash_sha3 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_hash_$sha3_256(val: Vec int): Vec int {
    $1_hash_sha3(val)
}

// ==================================================================================
// Native string

// TODO: correct implementation of strings

procedure {:inline 1} $1_string_internal_check_utf8(x: Vec int) returns (r: bool) {
}

procedure {:inline 1} $1_string_internal_sub_string(x: Vec int, i: int, j: int) returns (r: Vec int) {
}

procedure {:inline 1} $1_string_internal_index_of(x: Vec int, y: Vec int) returns (r: int) {
}

procedure {:inline 1} $1_string_internal_is_char_boundary(x: Vec int, i: int) returns (r: bool) {
}




// ==================================================================================
// Native diem_account

procedure {:inline 1} $1_DiemAccount_create_signer(
  addr: int
) returns (signer: $signer) {
    // A signer is currently identical to an address.
    signer := $signer(addr);
}

procedure {:inline 1} $1_DiemAccount_destroy_signer(
  signer: $signer
) {
  return;
}

// ==================================================================================
// Native account

procedure {:inline 1} $1_Account_create_signer(
  addr: int
) returns (signer: $signer) {
    // A signer is currently identical to an address.
    signer := $signer(addr);
}

// ==================================================================================
// Native Signer

datatype $signer {
    $signer($addr: int)
}
function {:inline} $IsValid'signer'(s: $signer): bool {
    $IsValid'address'(s->$addr)
}
function {:inline} $IsEqual'signer'(s1: $signer, s2: $signer): bool {
    s1 == s2
}

procedure {:inline 1} $1_signer_borrow_address(signer: $signer) returns (res: int) {
    res := signer->$addr;
}

function {:inline} $1_signer_$borrow_address(signer: $signer): int
{
    signer->$addr
}

function $1_signer_is_txn_signer(s: $signer): bool;

function $1_signer_is_txn_signer_addr(a: int): bool;


// ==================================================================================
// Native signature

// Signature related functionality is handled via uninterpreted functions. This is sound
// currently because we verify every code path based on signature verification with
// an arbitrary interpretation.

function $1_Signature_$ed25519_validate_pubkey(public_key: Vec int): bool;
function $1_Signature_$ed25519_verify(signature: Vec int, public_key: Vec int, message: Vec int): bool;

// Needed because we do not have extensional equality:
axiom (forall k1, k2: Vec int ::
    {$1_Signature_$ed25519_validate_pubkey(k1), $1_Signature_$ed25519_validate_pubkey(k2)}
    $IsEqual'vec'u8''(k1, k2) ==> $1_Signature_$ed25519_validate_pubkey(k1) == $1_Signature_$ed25519_validate_pubkey(k2));
axiom (forall s1, s2, k1, k2, m1, m2: Vec int ::
    {$1_Signature_$ed25519_verify(s1, k1, m1), $1_Signature_$ed25519_verify(s2, k2, m2)}
    $IsEqual'vec'u8''(s1, s2) && $IsEqual'vec'u8''(k1, k2) && $IsEqual'vec'u8''(m1, m2)
    ==> $1_Signature_$ed25519_verify(s1, k1, m1) == $1_Signature_$ed25519_verify(s2, k2, m2));


procedure {:inline 1} $1_Signature_ed25519_validate_pubkey(public_key: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_validate_pubkey(public_key);
}

procedure {:inline 1} $1_Signature_ed25519_verify(
        signature: Vec int, public_key: Vec int, message: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_verify(signature, public_key, message);
}


// ==================================================================================
// Native bcs::serialize

// ----------------------------------------------------------------------------------
// Native BCS implementation for element type `address`

// Serialize is modeled as an uninterpreted function, with an additional
// axiom to say it's an injection.

function $1_bcs_serialize'address'(v: int): Vec int;

axiom (forall v1, v2: int :: {$1_bcs_serialize'address'(v1), $1_bcs_serialize'address'(v2)}
   $IsEqual'address'(v1, v2) <==> $IsEqual'vec'u8''($1_bcs_serialize'address'(v1), $1_bcs_serialize'address'(v2)));

// This says that serialize returns a non-empty vec<u8>

axiom (forall v: int :: {$1_bcs_serialize'address'(v)}
     ( var r := $1_bcs_serialize'address'(v); $IsValid'vec'u8''(r) && LenVec(r) > 0 ));


procedure $1_bcs_to_bytes'address'(v: int) returns (res: Vec int);
ensures res == $1_bcs_serialize'address'(v);

function {:inline} $1_bcs_$to_bytes'address'(v: int): Vec int {
    $1_bcs_serialize'address'(v)
}

// Serialized addresses should have the same length.
const $serialized_address_len: int;
// Serialized addresses should have the same length
axiom (forall v: int :: {$1_bcs_serialize'address'(v)}
     ( var r := $1_bcs_serialize'address'(v); LenVec(r) == $serialized_address_len));



// ----------------------------------------------------------------------------------
// Native BCS implementation for element type `u64`

// Serialize is modeled as an uninterpreted function, with an additional
// axiom to say it's an injection.

function $1_bcs_serialize'u64'(v: int): Vec int;

axiom (forall v1, v2: int :: {$1_bcs_serialize'u64'(v1), $1_bcs_serialize'u64'(v2)}
   $IsEqual'u64'(v1, v2) <==> $IsEqual'vec'u8''($1_bcs_serialize'u64'(v1), $1_bcs_serialize'u64'(v2)));

// This says that serialize returns a non-empty vec<u8>

axiom (forall v: int :: {$1_bcs_serialize'u64'(v)}
     ( var r := $1_bcs_serialize'u64'(v); $IsValid'vec'u8''(r) && LenVec(r) > 0 ));


procedure $1_bcs_to_bytes'u64'(v: int) returns (res: Vec int);
ensures res == $1_bcs_serialize'u64'(v);

function {:inline} $1_bcs_$to_bytes'u64'(v: int): Vec int {
    $1_bcs_serialize'u64'(v)
}





// ==================================================================================
// Native Event module



procedure {:inline 1} $InitEventStore() {
}

// ============================================================================================
// Type Reflection on Type Parameters

datatype $TypeParamInfo {
    $TypeParamBool(),
    $TypeParamU8(),
    $TypeParamU16(),
    $TypeParamU32(),
    $TypeParamU64(),
    $TypeParamU128(),
    $TypeParamU256(),
    $TypeParamAddress(),
    $TypeParamSigner(),
    $TypeParamVector(e: $TypeParamInfo),
    $TypeParamStruct(a: int, m: Vec int, s: Vec int)
}



//==================================
// Begin Translation

function $TypeName(t: $TypeParamInfo): Vec int;
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamBool ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 98][1 := 111][2 := 111][3 := 108], 4)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 98][1 := 111][2 := 111][3 := 108], 4)) ==> t is $TypeParamBool);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU8 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 56], 2)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 56], 2)) ==> t is $TypeParamU8);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU16 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 49][2 := 54], 3)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 49][2 := 54], 3)) ==> t is $TypeParamU16);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU32 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 51][2 := 50], 3)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 51][2 := 50], 3)) ==> t is $TypeParamU32);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU64 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 54][2 := 52], 3)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 54][2 := 52], 3)) ==> t is $TypeParamU64);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU128 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 49][2 := 50][3 := 56], 4)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 49][2 := 50][3 := 56], 4)) ==> t is $TypeParamU128);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU256 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 50][2 := 53][3 := 54], 4)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 50][2 := 53][3 := 54], 4)) ==> t is $TypeParamU256);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamAddress ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 97][1 := 100][2 := 100][3 := 114][4 := 101][5 := 115][6 := 115], 7)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 97][1 := 100][2 := 100][3 := 114][4 := 101][5 := 115][6 := 115], 7)) ==> t is $TypeParamAddress);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamSigner ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 115][1 := 105][2 := 103][3 := 110][4 := 101][5 := 114], 6)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 115][1 := 105][2 := 103][3 := 110][4 := 101][5 := 114], 6)) ==> t is $TypeParamSigner);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamVector ==> $IsEqual'vec'u8''($TypeName(t), ConcatVec(ConcatVec(Vec(DefaultVecMap()[0 := 118][1 := 101][2 := 99][3 := 116][4 := 111][5 := 114][6 := 60], 7), $TypeName(t->e)), Vec(DefaultVecMap()[0 := 62], 1))));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} ($IsPrefix'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 118][1 := 101][2 := 99][3 := 116][4 := 111][5 := 114][6 := 60], 7)) && $IsSuffix'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 62], 1))) ==> t is $TypeParamVector);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamStruct ==> $IsEqual'vec'u8''($TypeName(t), ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(Vec(DefaultVecMap()[0 := 48][1 := 120], 2), MakeVec1(t->a)), Vec(DefaultVecMap()[0 := 58][1 := 58], 2)), t->m), Vec(DefaultVecMap()[0 := 58][1 := 58], 2)), t->s)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsPrefix'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 48][1 := 120], 2)) ==> t is $TypeParamVector);


// Given Types for Type Parameters

type #0;
function {:inline} $IsEqual'#0'(x1: #0, x2: #0): bool { x1 == x2 }
function {:inline} $IsValid'#0'(x: #0): bool { true }
var #0_info: $TypeParamInfo;
var #0_$memory: $Memory #0;

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <bool>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'bool'(b1), $1_from_bcs_deserializable'bool'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <u8>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'u8'(b1), $1_from_bcs_deserializable'u8'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <u64>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'u64'(b1), $1_from_bcs_deserializable'u64'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <u128>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'u128'(b1), $1_from_bcs_deserializable'u128'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <u256>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'u256'(b1), $1_from_bcs_deserializable'u256'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <address>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'address'(b1), $1_from_bcs_deserializable'address'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <signer>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'signer'(b1), $1_from_bcs_deserializable'signer'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<u8>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'u8''(b1), $1_from_bcs_deserializable'vec'u8''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<address>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'address''(b1), $1_from_bcs_deserializable'vec'address''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<aggregator::Aggregator>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_aggregator_Aggregator''(b1), $1_from_bcs_deserializable'vec'$1_aggregator_Aggregator''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<optional_aggregator::Integer>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_optional_aggregator_Integer''(b1), $1_from_bcs_deserializable'vec'$1_optional_aggregator_Integer''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<optional_aggregator::OptionalAggregator>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_optional_aggregator_OptionalAggregator''(b1), $1_from_bcs_deserializable'vec'$1_optional_aggregator_OptionalAggregator''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<fixed_point32::FixedPoint32>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_fixed_point32_FixedPoint32''(b1), $1_from_bcs_deserializable'vec'$1_fixed_point32_FixedPoint32''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<stake::IndividualValidatorPerformance>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_stake_IndividualValidatorPerformance''(b1), $1_from_bcs_deserializable'vec'$1_stake_IndividualValidatorPerformance''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<stake::ValidatorInfo>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_stake_ValidatorInfo''(b1), $1_from_bcs_deserializable'vec'$1_stake_ValidatorInfo''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<#0>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'#0''(b1), $1_from_bcs_deserializable'vec'#0''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <option::Option<address>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_option_Option'address''(b1), $1_from_bcs_deserializable'$1_option_Option'address''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <option::Option<aggregator::Aggregator>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_option_Option'$1_aggregator_Aggregator''(b1), $1_from_bcs_deserializable'$1_option_Option'$1_aggregator_Aggregator''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <option::Option<optional_aggregator::Integer>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_option_Option'$1_optional_aggregator_Integer''(b1), $1_from_bcs_deserializable'$1_option_Option'$1_optional_aggregator_Integer''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <option::Option<optional_aggregator::OptionalAggregator>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(b1), $1_from_bcs_deserializable'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <string::String>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_string_String'(b1), $1_from_bcs_deserializable'$1_string_String'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <type_info::TypeInfo>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_type_info_TypeInfo'(b1), $1_from_bcs_deserializable'$1_type_info_TypeInfo'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <guid::GUID>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_guid_GUID'(b1), $1_from_bcs_deserializable'$1_guid_GUID'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <guid::ID>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_guid_ID'(b1), $1_from_bcs_deserializable'$1_guid_ID'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<account::CoinRegisterEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_account_CoinRegisterEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_account_CoinRegisterEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<account::KeyRotationEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_account_KeyRotationEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_account_KeyRotationEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<coin::DepositEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_coin_DepositEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_coin_DepositEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<coin::WithdrawEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_coin_WithdrawEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_coin_WithdrawEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<stake::AddStakeEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_AddStakeEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_AddStakeEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<stake::DistributeRewardsEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_DistributeRewardsEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_DistributeRewardsEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<stake::IncreaseLockupEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_IncreaseLockupEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_IncreaseLockupEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<stake::JoinValidatorSetEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_JoinValidatorSetEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_JoinValidatorSetEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<stake::LeaveValidatorSetEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_LeaveValidatorSetEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_LeaveValidatorSetEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<stake::ReactivateStakeEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_ReactivateStakeEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_ReactivateStakeEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<stake::RegisterValidatorCandidateEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<stake::RotateConsensusKeyEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_RotateConsensusKeyEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_RotateConsensusKeyEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<stake::SetOperatorEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_SetOperatorEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_SetOperatorEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<stake::UnlockStakeEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_UnlockStakeEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_UnlockStakeEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<stake::UpdateNetworkAndFullnodeAddressesEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<stake::WithdrawStakeEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_WithdrawStakeEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_WithdrawStakeEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<reconfiguration::NewEpochEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<staking_contract::AddStakeEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_AddStakeEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_AddStakeEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<staking_contract::UnlockStakeEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_UnlockStakeEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_UnlockStakeEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<staking_contract::AddDistributionEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<staking_contract::CreateStakingContractEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<staking_contract::DistributeEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_DistributeEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_DistributeEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<staking_contract::RequestCommissionEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<staking_contract::ResetLockupEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_ResetLockupEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_ResetLockupEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<staking_contract::SwitchOperatorEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<staking_contract::UpdateVoterEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_UpdateVoterEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_UpdateVoterEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<vesting::DistributeEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_DistributeEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_DistributeEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<vesting::ResetLockupEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_ResetLockupEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_ResetLockupEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<vesting::UpdateVoterEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_UpdateVoterEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_UpdateVoterEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<vesting::AdminWithdrawEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_AdminWithdrawEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_AdminWithdrawEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<vesting::CreateVestingContractEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_CreateVestingContractEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_CreateVestingContractEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<vesting::SetBeneficiaryEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_SetBeneficiaryEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_SetBeneficiaryEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<vesting::TerminateEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_TerminateEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_TerminateEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<vesting::UnlockRewardsEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_UnlockRewardsEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_UnlockRewardsEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<vesting::UpdateOperatorEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_UpdateOperatorEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_UpdateOperatorEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<vesting::VestEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_VestEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_VestEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <account::Account>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_account_Account'(b1), $1_from_bcs_deserializable'$1_account_Account'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <account::CapabilityOffer<account::RotationCapability>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_account_CapabilityOffer'$1_account_RotationCapability''(b1), $1_from_bcs_deserializable'$1_account_CapabilityOffer'$1_account_RotationCapability''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <account::CapabilityOffer<account::SignerCapability>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_account_CapabilityOffer'$1_account_SignerCapability''(b1), $1_from_bcs_deserializable'$1_account_CapabilityOffer'$1_account_SignerCapability''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <account::CoinRegisterEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_account_CoinRegisterEvent'(b1), $1_from_bcs_deserializable'$1_account_CoinRegisterEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <account::SignerCapability>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_account_SignerCapability'(b1), $1_from_bcs_deserializable'$1_account_SignerCapability'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <aggregator::Aggregator>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_aggregator_Aggregator'(b1), $1_from_bcs_deserializable'$1_aggregator_Aggregator'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <optional_aggregator::Integer>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_optional_aggregator_Integer'(b1), $1_from_bcs_deserializable'$1_optional_aggregator_Integer'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <optional_aggregator::OptionalAggregator>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_optional_aggregator_OptionalAggregator'(b1), $1_from_bcs_deserializable'$1_optional_aggregator_OptionalAggregator'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <coin::Coin<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_coin_Coin'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserializable'$1_coin_Coin'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <coin::CoinInfo<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserializable'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <coin::CoinStore<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserializable'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <coin::Ghost$supply<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserializable'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserializable'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <aptos_coin::AptosCoin>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_aptos_coin_AptosCoin'(b1), $1_from_bcs_deserializable'$1_aptos_coin_AptosCoin'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <chain_status::GenesisEndMarker>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_chain_status_GenesisEndMarker'(b1), $1_from_bcs_deserializable'$1_chain_status_GenesisEndMarker'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <timestamp::CurrentTimeMicroseconds>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_timestamp_CurrentTimeMicroseconds'(b1), $1_from_bcs_deserializable'$1_timestamp_CurrentTimeMicroseconds'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <simple_map::SimpleMap<address, u64>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_simple_map_SimpleMap'address_u64''(b1), $1_from_bcs_deserializable'$1_simple_map_SimpleMap'address_u64''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <simple_map::SimpleMap<address, address>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_simple_map_SimpleMap'address_address''(b1), $1_from_bcs_deserializable'$1_simple_map_SimpleMap'address_address''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <simple_map::SimpleMap<address, staking_contract::StakingContract>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_simple_map_SimpleMap'address_$1_staking_contract_StakingContract''(b1), $1_from_bcs_deserializable'$1_simple_map_SimpleMap'address_$1_staking_contract_StakingContract''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <simple_map::SimpleMap<string::String, address>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_simple_map_SimpleMap'$1_string_String_address''(b1), $1_from_bcs_deserializable'$1_simple_map_SimpleMap'$1_string_String_address''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <fixed_point32::FixedPoint32>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fixed_point32_FixedPoint32'(b1), $1_from_bcs_deserializable'$1_fixed_point32_FixedPoint32'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <staking_config::StakingConfig>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_staking_config_StakingConfig'(b1), $1_from_bcs_deserializable'$1_staking_config_StakingConfig'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <stake::IncreaseLockupEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_stake_IncreaseLockupEvent'(b1), $1_from_bcs_deserializable'$1_stake_IncreaseLockupEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <stake::OwnerCapability>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_stake_OwnerCapability'(b1), $1_from_bcs_deserializable'$1_stake_OwnerCapability'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <stake::StakePool>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_stake_StakePool'(b1), $1_from_bcs_deserializable'$1_stake_StakePool'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <stake::ValidatorConfig>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_stake_ValidatorConfig'(b1), $1_from_bcs_deserializable'$1_stake_ValidatorConfig'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <stake::ValidatorPerformance>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_stake_ValidatorPerformance'(b1), $1_from_bcs_deserializable'$1_stake_ValidatorPerformance'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <stake::ValidatorSet>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_stake_ValidatorSet'(b1), $1_from_bcs_deserializable'$1_stake_ValidatorSet'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <reconfiguration::Configuration>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_reconfiguration_Configuration'(b1), $1_from_bcs_deserializable'$1_reconfiguration_Configuration'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <pool_u64::Pool>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_pool_u64_Pool'(b1), $1_from_bcs_deserializable'$1_pool_u64_Pool'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <staking_contract::ResetLockupEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_staking_contract_ResetLockupEvent'(b1), $1_from_bcs_deserializable'$1_staking_contract_ResetLockupEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <staking_contract::StakingContract>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_staking_contract_StakingContract'(b1), $1_from_bcs_deserializable'$1_staking_contract_StakingContract'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <staking_contract::Store>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_staking_contract_Store'(b1), $1_from_bcs_deserializable'$1_staking_contract_Store'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <staking_contract::UpdateVoterEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_staking_contract_UpdateVoterEvent'(b1), $1_from_bcs_deserializable'$1_staking_contract_UpdateVoterEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vesting::ResetLockupEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_vesting_ResetLockupEvent'(b1), $1_from_bcs_deserializable'$1_vesting_ResetLockupEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vesting::UpdateVoterEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_vesting_UpdateVoterEvent'(b1), $1_from_bcs_deserializable'$1_vesting_UpdateVoterEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vesting::AdminStore>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_vesting_AdminStore'(b1), $1_from_bcs_deserializable'$1_vesting_AdminStore'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vesting::SetBeneficiaryEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_vesting_SetBeneficiaryEvent'(b1), $1_from_bcs_deserializable'$1_vesting_SetBeneficiaryEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vesting::StakingInfo>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_vesting_StakingInfo'(b1), $1_from_bcs_deserializable'$1_vesting_StakingInfo'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vesting::VestingAccountManagement>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_vesting_VestingAccountManagement'(b1), $1_from_bcs_deserializable'$1_vesting_VestingAccountManagement'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vesting::VestingContract>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_vesting_VestingContract'(b1), $1_from_bcs_deserializable'$1_vesting_VestingContract'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vesting::VestingSchedule>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_vesting_VestingSchedule'(b1), $1_from_bcs_deserializable'$1_vesting_VestingSchedule'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <#0>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'#0'(b1), $1_from_bcs_deserializable'#0'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <bool>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserialize'bool'(b1), $1_from_bcs_deserialize'bool'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <u8>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'u8'($1_from_bcs_deserialize'u8'(b1), $1_from_bcs_deserialize'u8'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <u64>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'u64'($1_from_bcs_deserialize'u64'(b1), $1_from_bcs_deserialize'u64'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <u128>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'u128'($1_from_bcs_deserialize'u128'(b1), $1_from_bcs_deserialize'u128'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <u256>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'u256'($1_from_bcs_deserialize'u256'(b1), $1_from_bcs_deserialize'u256'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <address>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'address'($1_from_bcs_deserialize'address'(b1), $1_from_bcs_deserialize'address'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <signer>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'signer'($1_from_bcs_deserialize'signer'(b1), $1_from_bcs_deserialize'signer'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<u8>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'u8''($1_from_bcs_deserialize'vec'u8''(b1), $1_from_bcs_deserialize'vec'u8''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<address>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'address''($1_from_bcs_deserialize'vec'address''(b1), $1_from_bcs_deserialize'vec'address''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<aggregator::Aggregator>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_aggregator_Aggregator''($1_from_bcs_deserialize'vec'$1_aggregator_Aggregator''(b1), $1_from_bcs_deserialize'vec'$1_aggregator_Aggregator''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<optional_aggregator::Integer>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_optional_aggregator_Integer''($1_from_bcs_deserialize'vec'$1_optional_aggregator_Integer''(b1), $1_from_bcs_deserialize'vec'$1_optional_aggregator_Integer''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<optional_aggregator::OptionalAggregator>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_optional_aggregator_OptionalAggregator''($1_from_bcs_deserialize'vec'$1_optional_aggregator_OptionalAggregator''(b1), $1_from_bcs_deserialize'vec'$1_optional_aggregator_OptionalAggregator''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<fixed_point32::FixedPoint32>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_fixed_point32_FixedPoint32''($1_from_bcs_deserialize'vec'$1_fixed_point32_FixedPoint32''(b1), $1_from_bcs_deserialize'vec'$1_fixed_point32_FixedPoint32''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<stake::IndividualValidatorPerformance>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_stake_IndividualValidatorPerformance''($1_from_bcs_deserialize'vec'$1_stake_IndividualValidatorPerformance''(b1), $1_from_bcs_deserialize'vec'$1_stake_IndividualValidatorPerformance''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<stake::ValidatorInfo>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_stake_ValidatorInfo''($1_from_bcs_deserialize'vec'$1_stake_ValidatorInfo''(b1), $1_from_bcs_deserialize'vec'$1_stake_ValidatorInfo''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<#0>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'#0''($1_from_bcs_deserialize'vec'#0''(b1), $1_from_bcs_deserialize'vec'#0''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <option::Option<address>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_option_Option'address''($1_from_bcs_deserialize'$1_option_Option'address''(b1), $1_from_bcs_deserialize'$1_option_Option'address''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <option::Option<aggregator::Aggregator>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_option_Option'$1_aggregator_Aggregator''($1_from_bcs_deserialize'$1_option_Option'$1_aggregator_Aggregator''(b1), $1_from_bcs_deserialize'$1_option_Option'$1_aggregator_Aggregator''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <option::Option<optional_aggregator::Integer>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_option_Option'$1_optional_aggregator_Integer''($1_from_bcs_deserialize'$1_option_Option'$1_optional_aggregator_Integer''(b1), $1_from_bcs_deserialize'$1_option_Option'$1_optional_aggregator_Integer''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <option::Option<optional_aggregator::OptionalAggregator>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_option_Option'$1_optional_aggregator_OptionalAggregator''($1_from_bcs_deserialize'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(b1), $1_from_bcs_deserialize'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <string::String>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_string_String'($1_from_bcs_deserialize'$1_string_String'(b1), $1_from_bcs_deserialize'$1_string_String'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <type_info::TypeInfo>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_type_info_TypeInfo'($1_from_bcs_deserialize'$1_type_info_TypeInfo'(b1), $1_from_bcs_deserialize'$1_type_info_TypeInfo'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <guid::GUID>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_guid_GUID'($1_from_bcs_deserialize'$1_guid_GUID'(b1), $1_from_bcs_deserialize'$1_guid_GUID'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <guid::ID>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_guid_ID'($1_from_bcs_deserialize'$1_guid_ID'(b1), $1_from_bcs_deserialize'$1_guid_ID'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<account::CoinRegisterEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_account_CoinRegisterEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_account_CoinRegisterEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_account_CoinRegisterEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<account::KeyRotationEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_account_KeyRotationEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_account_KeyRotationEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_account_KeyRotationEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<coin::DepositEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_coin_DepositEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_coin_DepositEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_coin_DepositEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<coin::WithdrawEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_coin_WithdrawEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_coin_WithdrawEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_coin_WithdrawEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<stake::AddStakeEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_stake_AddStakeEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_AddStakeEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_AddStakeEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<stake::DistributeRewardsEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_stake_DistributeRewardsEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_DistributeRewardsEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_DistributeRewardsEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<stake::IncreaseLockupEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_stake_IncreaseLockupEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_IncreaseLockupEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_IncreaseLockupEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<stake::JoinValidatorSetEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_stake_JoinValidatorSetEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_JoinValidatorSetEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_JoinValidatorSetEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<stake::LeaveValidatorSetEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_stake_LeaveValidatorSetEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_LeaveValidatorSetEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_LeaveValidatorSetEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<stake::ReactivateStakeEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_stake_ReactivateStakeEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_ReactivateStakeEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_ReactivateStakeEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<stake::RegisterValidatorCandidateEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<stake::RotateConsensusKeyEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_stake_RotateConsensusKeyEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_RotateConsensusKeyEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_RotateConsensusKeyEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<stake::SetOperatorEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_stake_SetOperatorEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_SetOperatorEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_SetOperatorEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<stake::UnlockStakeEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_stake_UnlockStakeEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_UnlockStakeEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_UnlockStakeEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<stake::UpdateNetworkAndFullnodeAddressesEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<stake::WithdrawStakeEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_stake_WithdrawStakeEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_WithdrawStakeEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_WithdrawStakeEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<reconfiguration::NewEpochEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<staking_contract::AddStakeEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_staking_contract_AddStakeEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_AddStakeEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_AddStakeEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<staking_contract::UnlockStakeEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_staking_contract_UnlockStakeEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_UnlockStakeEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_UnlockStakeEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<staking_contract::AddDistributionEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<staking_contract::CreateStakingContractEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<staking_contract::DistributeEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_staking_contract_DistributeEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_DistributeEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_DistributeEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<staking_contract::RequestCommissionEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<staking_contract::ResetLockupEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_staking_contract_ResetLockupEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_ResetLockupEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_ResetLockupEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<staking_contract::SwitchOperatorEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<staking_contract::UpdateVoterEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_staking_contract_UpdateVoterEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_UpdateVoterEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_UpdateVoterEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<vesting::DistributeEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_vesting_DistributeEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_DistributeEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_DistributeEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<vesting::ResetLockupEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_vesting_ResetLockupEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_ResetLockupEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_ResetLockupEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<vesting::UpdateVoterEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_vesting_UpdateVoterEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_UpdateVoterEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_UpdateVoterEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<vesting::AdminWithdrawEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_vesting_AdminWithdrawEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_AdminWithdrawEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_AdminWithdrawEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<vesting::CreateVestingContractEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_vesting_CreateVestingContractEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_CreateVestingContractEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_CreateVestingContractEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<vesting::SetBeneficiaryEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_vesting_SetBeneficiaryEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_SetBeneficiaryEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_SetBeneficiaryEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<vesting::TerminateEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_vesting_TerminateEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_TerminateEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_TerminateEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<vesting::UnlockRewardsEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_vesting_UnlockRewardsEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_UnlockRewardsEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_UnlockRewardsEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<vesting::UpdateOperatorEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_vesting_UpdateOperatorEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_UpdateOperatorEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_UpdateOperatorEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<vesting::VestEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_vesting_VestEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_VestEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_VestEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <account::Account>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_account_Account'($1_from_bcs_deserialize'$1_account_Account'(b1), $1_from_bcs_deserialize'$1_account_Account'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <account::CapabilityOffer<account::RotationCapability>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_account_CapabilityOffer'$1_account_RotationCapability''($1_from_bcs_deserialize'$1_account_CapabilityOffer'$1_account_RotationCapability''(b1), $1_from_bcs_deserialize'$1_account_CapabilityOffer'$1_account_RotationCapability''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <account::CapabilityOffer<account::SignerCapability>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_account_CapabilityOffer'$1_account_SignerCapability''($1_from_bcs_deserialize'$1_account_CapabilityOffer'$1_account_SignerCapability''(b1), $1_from_bcs_deserialize'$1_account_CapabilityOffer'$1_account_SignerCapability''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <account::CoinRegisterEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_account_CoinRegisterEvent'($1_from_bcs_deserialize'$1_account_CoinRegisterEvent'(b1), $1_from_bcs_deserialize'$1_account_CoinRegisterEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <account::SignerCapability>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_account_SignerCapability'($1_from_bcs_deserialize'$1_account_SignerCapability'(b1), $1_from_bcs_deserialize'$1_account_SignerCapability'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <aggregator::Aggregator>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_aggregator_Aggregator'($1_from_bcs_deserialize'$1_aggregator_Aggregator'(b1), $1_from_bcs_deserialize'$1_aggregator_Aggregator'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <optional_aggregator::Integer>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_optional_aggregator_Integer'($1_from_bcs_deserialize'$1_optional_aggregator_Integer'(b1), $1_from_bcs_deserialize'$1_optional_aggregator_Integer'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <optional_aggregator::OptionalAggregator>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_optional_aggregator_OptionalAggregator'($1_from_bcs_deserialize'$1_optional_aggregator_OptionalAggregator'(b1), $1_from_bcs_deserialize'$1_optional_aggregator_OptionalAggregator'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <coin::Coin<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_coin_Coin'$1_aptos_coin_AptosCoin''($1_from_bcs_deserialize'$1_coin_Coin'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserialize'$1_coin_Coin'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <coin::CoinInfo<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''($1_from_bcs_deserialize'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserialize'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <coin::CoinStore<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''($1_from_bcs_deserialize'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserialize'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <coin::Ghost$supply<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''($1_from_bcs_deserialize'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserialize'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''($1_from_bcs_deserialize'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserialize'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <aptos_coin::AptosCoin>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_aptos_coin_AptosCoin'($1_from_bcs_deserialize'$1_aptos_coin_AptosCoin'(b1), $1_from_bcs_deserialize'$1_aptos_coin_AptosCoin'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <chain_status::GenesisEndMarker>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_chain_status_GenesisEndMarker'($1_from_bcs_deserialize'$1_chain_status_GenesisEndMarker'(b1), $1_from_bcs_deserialize'$1_chain_status_GenesisEndMarker'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <timestamp::CurrentTimeMicroseconds>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_timestamp_CurrentTimeMicroseconds'($1_from_bcs_deserialize'$1_timestamp_CurrentTimeMicroseconds'(b1), $1_from_bcs_deserialize'$1_timestamp_CurrentTimeMicroseconds'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <simple_map::SimpleMap<address, u64>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_simple_map_SimpleMap'address_u64''($1_from_bcs_deserialize'$1_simple_map_SimpleMap'address_u64''(b1), $1_from_bcs_deserialize'$1_simple_map_SimpleMap'address_u64''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <simple_map::SimpleMap<address, address>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_simple_map_SimpleMap'address_address''($1_from_bcs_deserialize'$1_simple_map_SimpleMap'address_address''(b1), $1_from_bcs_deserialize'$1_simple_map_SimpleMap'address_address''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <simple_map::SimpleMap<address, staking_contract::StakingContract>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_simple_map_SimpleMap'address_$1_staking_contract_StakingContract''($1_from_bcs_deserialize'$1_simple_map_SimpleMap'address_$1_staking_contract_StakingContract''(b1), $1_from_bcs_deserialize'$1_simple_map_SimpleMap'address_$1_staking_contract_StakingContract''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <simple_map::SimpleMap<string::String, address>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_simple_map_SimpleMap'$1_string_String_address''($1_from_bcs_deserialize'$1_simple_map_SimpleMap'$1_string_String_address''(b1), $1_from_bcs_deserialize'$1_simple_map_SimpleMap'$1_string_String_address''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <fixed_point32::FixedPoint32>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fixed_point32_FixedPoint32'($1_from_bcs_deserialize'$1_fixed_point32_FixedPoint32'(b1), $1_from_bcs_deserialize'$1_fixed_point32_FixedPoint32'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <staking_config::StakingConfig>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_staking_config_StakingConfig'($1_from_bcs_deserialize'$1_staking_config_StakingConfig'(b1), $1_from_bcs_deserialize'$1_staking_config_StakingConfig'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <stake::IncreaseLockupEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_stake_IncreaseLockupEvent'($1_from_bcs_deserialize'$1_stake_IncreaseLockupEvent'(b1), $1_from_bcs_deserialize'$1_stake_IncreaseLockupEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <stake::OwnerCapability>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_stake_OwnerCapability'($1_from_bcs_deserialize'$1_stake_OwnerCapability'(b1), $1_from_bcs_deserialize'$1_stake_OwnerCapability'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <stake::StakePool>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_stake_StakePool'($1_from_bcs_deserialize'$1_stake_StakePool'(b1), $1_from_bcs_deserialize'$1_stake_StakePool'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <stake::ValidatorConfig>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_stake_ValidatorConfig'($1_from_bcs_deserialize'$1_stake_ValidatorConfig'(b1), $1_from_bcs_deserialize'$1_stake_ValidatorConfig'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <stake::ValidatorPerformance>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_stake_ValidatorPerformance'($1_from_bcs_deserialize'$1_stake_ValidatorPerformance'(b1), $1_from_bcs_deserialize'$1_stake_ValidatorPerformance'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <stake::ValidatorSet>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_stake_ValidatorSet'($1_from_bcs_deserialize'$1_stake_ValidatorSet'(b1), $1_from_bcs_deserialize'$1_stake_ValidatorSet'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <reconfiguration::Configuration>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_reconfiguration_Configuration'($1_from_bcs_deserialize'$1_reconfiguration_Configuration'(b1), $1_from_bcs_deserialize'$1_reconfiguration_Configuration'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <pool_u64::Pool>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_pool_u64_Pool'($1_from_bcs_deserialize'$1_pool_u64_Pool'(b1), $1_from_bcs_deserialize'$1_pool_u64_Pool'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <staking_contract::ResetLockupEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_staking_contract_ResetLockupEvent'($1_from_bcs_deserialize'$1_staking_contract_ResetLockupEvent'(b1), $1_from_bcs_deserialize'$1_staking_contract_ResetLockupEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <staking_contract::StakingContract>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_staking_contract_StakingContract'($1_from_bcs_deserialize'$1_staking_contract_StakingContract'(b1), $1_from_bcs_deserialize'$1_staking_contract_StakingContract'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <staking_contract::Store>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_staking_contract_Store'($1_from_bcs_deserialize'$1_staking_contract_Store'(b1), $1_from_bcs_deserialize'$1_staking_contract_Store'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <staking_contract::UpdateVoterEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_staking_contract_UpdateVoterEvent'($1_from_bcs_deserialize'$1_staking_contract_UpdateVoterEvent'(b1), $1_from_bcs_deserialize'$1_staking_contract_UpdateVoterEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vesting::ResetLockupEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_vesting_ResetLockupEvent'($1_from_bcs_deserialize'$1_vesting_ResetLockupEvent'(b1), $1_from_bcs_deserialize'$1_vesting_ResetLockupEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vesting::UpdateVoterEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_vesting_UpdateVoterEvent'($1_from_bcs_deserialize'$1_vesting_UpdateVoterEvent'(b1), $1_from_bcs_deserialize'$1_vesting_UpdateVoterEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vesting::AdminStore>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_vesting_AdminStore'($1_from_bcs_deserialize'$1_vesting_AdminStore'(b1), $1_from_bcs_deserialize'$1_vesting_AdminStore'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vesting::SetBeneficiaryEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_vesting_SetBeneficiaryEvent'($1_from_bcs_deserialize'$1_vesting_SetBeneficiaryEvent'(b1), $1_from_bcs_deserialize'$1_vesting_SetBeneficiaryEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vesting::StakingInfo>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_vesting_StakingInfo'($1_from_bcs_deserialize'$1_vesting_StakingInfo'(b1), $1_from_bcs_deserialize'$1_vesting_StakingInfo'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vesting::VestingAccountManagement>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_vesting_VestingAccountManagement'($1_from_bcs_deserialize'$1_vesting_VestingAccountManagement'(b1), $1_from_bcs_deserialize'$1_vesting_VestingAccountManagement'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vesting::VestingContract>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_vesting_VestingContract'($1_from_bcs_deserialize'$1_vesting_VestingContract'(b1), $1_from_bcs_deserialize'$1_vesting_VestingContract'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vesting::VestingSchedule>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_vesting_VestingSchedule'($1_from_bcs_deserialize'$1_vesting_VestingSchedule'(b1), $1_from_bcs_deserialize'$1_vesting_VestingSchedule'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <#0>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'#0'($1_from_bcs_deserialize'#0'(b1), $1_from_bcs_deserialize'#0'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:8:9+113
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''($1_aptos_hash_spec_keccak256(b1), $1_aptos_hash_spec_keccak256(b2)) ==> $IsEqual'vec'u8''(b1, b2))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:13:9+129
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''($1_aptos_hash_spec_sha2_512_internal(b1), $1_aptos_hash_spec_sha2_512_internal(b2)) ==> $IsEqual'vec'u8''(b1, b2))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:18:9+129
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''($1_aptos_hash_spec_sha3_512_internal(b1), $1_aptos_hash_spec_sha3_512_internal(b2)) ==> $IsEqual'vec'u8''(b1, b2))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:23:9+131
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''($1_aptos_hash_spec_ripemd160_internal(b1), $1_aptos_hash_spec_ripemd160_internal(b2)) ==> $IsEqual'vec'u8''(b1, b2))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:28:9+135
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''($1_aptos_hash_spec_blake2b_256_internal(b1), $1_aptos_hash_spec_blake2b_256_internal(b2)) ==> $IsEqual'vec'u8''(b1, b2))));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:146:5+86
function {:inline} $1_vector_$is_empty'address'(v: Vec (int)): bool {
    $IsEqual'u64'($1_vector_$length'address'(v), 0)
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:146:5+86
function {:inline} $1_vector_$is_empty'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator)): bool {
    $IsEqual'u64'($1_vector_$length'$1_aggregator_Aggregator'(v), 0)
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:146:5+86
function {:inline} $1_vector_$is_empty'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer)): bool {
    $IsEqual'u64'($1_vector_$length'$1_optional_aggregator_Integer'(v), 0)
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:628:9+110
function {:inline} $1_vector_spec_contains'address'(v: Vec (int), e: int): bool {
    (var $range_0 := v; (exists $i_1: int :: InRangeVec($range_0, $i_1) && (var x := ReadVec($range_0, $i_1);
    ($IsEqual'address'(x, e)))))
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:102:5+145
function {:inline} $1_option_$borrow'$1_aggregator_Aggregator'(t: $1_option_Option'$1_aggregator_Aggregator'): $1_aggregator_Aggregator {
    $1_vector_$borrow'$1_aggregator_Aggregator'(t->$vec, 0)
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:102:5+145
function {:inline} $1_option_$borrow'$1_optional_aggregator_Integer'(t: $1_option_Option'$1_optional_aggregator_Integer'): $1_optional_aggregator_Integer {
    $1_vector_$borrow'$1_optional_aggregator_Integer'(t->$vec, 0)
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:61:5+95
function {:inline} $1_option_$is_none'$1_aggregator_Aggregator'(t: $1_option_Option'$1_aggregator_Aggregator'): bool {
    $1_vector_$is_empty'$1_aggregator_Aggregator'(t->$vec)
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:61:5+95
function {:inline} $1_option_$is_none'$1_optional_aggregator_Integer'(t: $1_option_Option'$1_optional_aggregator_Integer'): bool {
    $1_vector_$is_empty'$1_optional_aggregator_Integer'(t->$vec)
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:74:5+96
function {:inline} $1_option_$is_some'$1_aggregator_Aggregator'(t: $1_option_Option'$1_aggregator_Aggregator'): bool {
    !$1_vector_$is_empty'$1_aggregator_Aggregator'(t->$vec)
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:74:5+96
function {:inline} $1_option_$is_some'$1_optional_aggregator_Integer'(t: $1_option_Option'$1_optional_aggregator_Integer'): bool {
    !$1_vector_$is_empty'$1_optional_aggregator_Integer'(t->$vec)
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:34:10+78
function {:inline} $1_option_spec_none'address'(): $1_option_Option'address' {
    $1_option_Option'address'($EmptyVec'address'())
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:47:10+89
function {:inline} $1_option_spec_some'address'(e: int): $1_option_Option'address' {
    $1_option_Option'address'(MakeVec1(e))
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:69:10+91
function {:inline} $1_option_spec_is_none'address'(t: $1_option_Option'address'): bool {
    $1_vector_$is_empty'address'(t->$vec)
}

// struct option::Option<address> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:7:5+81
datatype $1_option_Option'address' {
    $1_option_Option'address'($vec: Vec (int))
}
function {:inline} $Update'$1_option_Option'address''_vec(s: $1_option_Option'address', x: Vec (int)): $1_option_Option'address' {
    $1_option_Option'address'(x)
}
function $IsValid'$1_option_Option'address''(s: $1_option_Option'address'): bool {
    $IsValid'vec'address''(s->$vec)
}
function {:inline} $IsEqual'$1_option_Option'address''(s1: $1_option_Option'address', s2: $1_option_Option'address'): bool {
    $IsEqual'vec'address''(s1->$vec, s2->$vec)}

// struct option::Option<aggregator::Aggregator> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:7:5+81
datatype $1_option_Option'$1_aggregator_Aggregator' {
    $1_option_Option'$1_aggregator_Aggregator'($vec: Vec ($1_aggregator_Aggregator))
}
function {:inline} $Update'$1_option_Option'$1_aggregator_Aggregator''_vec(s: $1_option_Option'$1_aggregator_Aggregator', x: Vec ($1_aggregator_Aggregator)): $1_option_Option'$1_aggregator_Aggregator' {
    $1_option_Option'$1_aggregator_Aggregator'(x)
}
function $IsValid'$1_option_Option'$1_aggregator_Aggregator''(s: $1_option_Option'$1_aggregator_Aggregator'): bool {
    $IsValid'vec'$1_aggregator_Aggregator''(s->$vec)
}
function {:inline} $IsEqual'$1_option_Option'$1_aggregator_Aggregator''(s1: $1_option_Option'$1_aggregator_Aggregator', s2: $1_option_Option'$1_aggregator_Aggregator'): bool {
    $IsEqual'vec'$1_aggregator_Aggregator''(s1->$vec, s2->$vec)}

// struct option::Option<optional_aggregator::Integer> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:7:5+81
datatype $1_option_Option'$1_optional_aggregator_Integer' {
    $1_option_Option'$1_optional_aggregator_Integer'($vec: Vec ($1_optional_aggregator_Integer))
}
function {:inline} $Update'$1_option_Option'$1_optional_aggregator_Integer''_vec(s: $1_option_Option'$1_optional_aggregator_Integer', x: Vec ($1_optional_aggregator_Integer)): $1_option_Option'$1_optional_aggregator_Integer' {
    $1_option_Option'$1_optional_aggregator_Integer'(x)
}
function $IsValid'$1_option_Option'$1_optional_aggregator_Integer''(s: $1_option_Option'$1_optional_aggregator_Integer'): bool {
    $IsValid'vec'$1_optional_aggregator_Integer''(s->$vec)
}
function {:inline} $IsEqual'$1_option_Option'$1_optional_aggregator_Integer''(s1: $1_option_Option'$1_optional_aggregator_Integer', s2: $1_option_Option'$1_optional_aggregator_Integer'): bool {
    $IsEqual'vec'$1_optional_aggregator_Integer''(s1->$vec, s2->$vec)}

// struct option::Option<optional_aggregator::OptionalAggregator> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:7:5+81
datatype $1_option_Option'$1_optional_aggregator_OptionalAggregator' {
    $1_option_Option'$1_optional_aggregator_OptionalAggregator'($vec: Vec ($1_optional_aggregator_OptionalAggregator))
}
function {:inline} $Update'$1_option_Option'$1_optional_aggregator_OptionalAggregator''_vec(s: $1_option_Option'$1_optional_aggregator_OptionalAggregator', x: Vec ($1_optional_aggregator_OptionalAggregator)): $1_option_Option'$1_optional_aggregator_OptionalAggregator' {
    $1_option_Option'$1_optional_aggregator_OptionalAggregator'(x)
}
function $IsValid'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(s: $1_option_Option'$1_optional_aggregator_OptionalAggregator'): bool {
    $IsValid'vec'$1_optional_aggregator_OptionalAggregator''(s->$vec)
}
function {:inline} $IsEqual'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(s1: $1_option_Option'$1_optional_aggregator_OptionalAggregator', s2: $1_option_Option'$1_optional_aggregator_OptionalAggregator'): bool {
    $IsEqual'vec'$1_optional_aggregator_OptionalAggregator''(s1->$vec, s2->$vec)}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.spec.move:23:10+70
function {:inline} $1_string_spec_utf8(bytes: Vec (int)): $1_string_String {
    $1_string_String(bytes)
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.spec.move:28:9+50
function  $1_string_spec_internal_check_utf8(v: Vec (int)): bool;
axiom (forall v: Vec (int) ::
(var $$res := $1_string_spec_internal_check_utf8(v);
$IsValid'bool'($$res)));

// struct string::String at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:13:5+70
datatype $1_string_String {
    $1_string_String($bytes: Vec (int))
}
function {:inline} $Update'$1_string_String'_bytes(s: $1_string_String, x: Vec (int)): $1_string_String {
    $1_string_String(x)
}
function $IsValid'$1_string_String'(s: $1_string_String): bool {
    $IsValid'vec'u8''(s->$bytes)
}
function {:inline} $IsEqual'$1_string_String'(s1: $1_string_String, s2: $1_string_String): bool {
    $IsEqual'vec'u8''(s1->$bytes, s2->$bytes)}

// fun string::utf8 [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:18:5+133
procedure {:inline 1} $1_string_utf8(_$t0: Vec (int)) returns ($ret0: $1_string_String)
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: $1_string_String;
    var $t0: Vec (int);
    var $temp_0'$1_string_String': $1_string_String;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[bytes]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:18:5+1
    assume {:print "$at(15,573,574)"} true;
    assume {:print "$track_local(2,13,0):", $t0} $t0 == $t0;

    // $t1 := opaque begin: string::internal_check_utf8($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:19:17+27
    assume {:print "$at(15,634,661)"} true;

    // assume WellFormed($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:19:17+27
    assume $IsValid'bool'($t1);

    // assume Eq<bool>($t1, string::spec_internal_check_utf8($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:19:17+27
    assume $IsEqual'bool'($t1, $1_string_spec_internal_check_utf8($t0));

    // $t1 := opaque end: string::internal_check_utf8($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:19:17+27

    // if ($t1) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:19:9+51
    if ($t1) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:19:9+51
L1:

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:19:9+51
    assume {:print "$at(15,626,677)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:19:46+13
L0:

    // $t2 := 1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:19:46+13
    assume {:print "$at(15,663,676)"} true;
    $t2 := 1;
    assume $IsValid'u64'($t2);

    // trace_abort($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:19:9+51
    assume {:print "$at(15,626,677)"} true;
    assume {:print "$track_abort(2,13):", $t2} $t2 == $t2;

    // goto L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:19:9+51
    goto L4;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:20:16+5
    assume {:print "$at(15,694,699)"} true;
L2:

    // $t3 := pack string::String($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:20:9+13
    assume {:print "$at(15,687,700)"} true;
    $t3 := $1_string_String($t0);

    // trace_return[0]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:20:9+13
    assume {:print "$track_return(2,13,0):", $t3} $t3 == $t3;

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:21:5+1
    assume {:print "$at(15,705,706)"} true;
L3:

    // return $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:21:5+1
    assume {:print "$at(15,705,706)"} true;
    $ret0 := $t3;
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:21:5+1
L4:

    // abort($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:21:5+1
    assume {:print "$at(15,705,706)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:12:5+77
function {:inline} $1_signer_$address_of(s: $signer): int {
    $1_signer_$borrow_address(s)
}

// fun signer::address_of [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:12:5+77
procedure {:inline 1} $1_signer_address_of(_$t0: $signer) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t0: $signer;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[s]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:12:5+1
    assume {:print "$at(14,395,396)"} true;
    assume {:print "$track_local(3,0,0):", $t0} $t0 == $t0;

    // $t1 := signer::borrow_address($t0) on_abort goto L2 with $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:13:10+17
    assume {:print "$at(14,449,466)"} true;
    call $t1 := $1_signer_borrow_address($t0);
    if ($abort_flag) {
        assume {:print "$at(14,449,466)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(3,0):", $t2} $t2 == $t2;
        goto L2;
    }

    // trace_return[0]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:13:9+18
    assume {:print "$track_return(3,0,0):", $t1} $t1 == $t1;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:14:5+1
    assume {:print "$at(14,471,472)"} true;
L1:

    // return $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:14:5+1
    assume {:print "$at(14,471,472)"} true;
    $ret0 := $t1;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:14:5+1
L2:

    // abort($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:14:5+1
    assume {:print "$at(14,471,472)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun error::already_exists [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:83:3+71
procedure {:inline 1} $1_error_already_exists(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:83:3+1
    assume {:print "$at(10,3585,3586)"} true;
    assume {:print "$track_local(4,1,0):", $t0} $t0 == $t0;

    // $t1 := 8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:83:54+14
    $t1 := 8;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:69:5+29
    assume {:print "$at(10,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:83:44+28
    assume {:print "$at(10,3626,3654)"} true;

    // assume WellFormed($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:83:44+28
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:83:44+28
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:83:44+28

    // trace_return[0]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:83:44+28
    assume {:print "$track_return(4,1,0):", $t3} $t3 == $t3;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:83:73+1
L1:

    // return $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:83:73+1
    assume {:print "$at(10,3655,3656)"} true;
    $ret0 := $t3;
    return;

}

// fun error::invalid_argument [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:3+76
procedure {:inline 1} $1_error_invalid_argument(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:3+1
    assume {:print "$at(10,3082,3083)"} true;
    assume {:print "$track_local(4,4,0):", $t0} $t0 == $t0;

    // $t1 := 1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:57+16
    $t1 := 1;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:69:5+29
    assume {:print "$at(10,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:47+30
    assume {:print "$at(10,3126,3156)"} true;

    // assume WellFormed($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:47+30
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:47+30
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:47+30

    // trace_return[0]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:47+30
    assume {:print "$track_return(4,4,0):", $t3} $t3 == $t3;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:78+1
L1:

    // return $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:78+1
    assume {:print "$at(10,3157,3158)"} true;
    $ret0 := $t3;
    return;

}

// fun error::invalid_state [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:3+70
procedure {:inline 1} $1_error_invalid_state(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:3+1
    assume {:print "$at(10,3232,3233)"} true;
    assume {:print "$track_local(4,5,0):", $t0} $t0 == $t0;

    // $t1 := 3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:54+13
    $t1 := 3;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:69:5+29
    assume {:print "$at(10,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:44+27
    assume {:print "$at(10,3273,3300)"} true;

    // assume WellFormed($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:44+27
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:44+27
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:44+27

    // trace_return[0]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:44+27
    assume {:print "$track_return(4,5,0):", $t3} $t3 == $t3;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:72+1
L1:

    // return $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:72+1
    assume {:print "$at(10,3301,3302)"} true;
    $ret0 := $t3;
    return;

}

// fun error::not_found [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:3+61
procedure {:inline 1} $1_error_not_found(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:3+1
    assume {:print "$at(10,3461,3462)"} true;
    assume {:print "$track_local(4,6,0):", $t0} $t0 == $t0;

    // $t1 := 6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:49+9
    $t1 := 6;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:69:5+29
    assume {:print "$at(10,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:39+23
    assume {:print "$at(10,3497,3520)"} true;

    // assume WellFormed($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:39+23
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:39+23
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:39+23

    // trace_return[0]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:39+23
    assume {:print "$track_return(4,6,0):", $t3} $t3 == $t3;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:63+1
L1:

    // return $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:63+1
    assume {:print "$at(10,3521,3522)"} true;
    $ret0 := $t3;
    return;

}

// fun error::out_of_range [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:77:3+68
procedure {:inline 1} $1_error_out_of_range(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:77:3+1
    assume {:print "$at(10,3161,3162)"} true;
    assume {:print "$track_local(4,8,0):", $t0} $t0 == $t0;

    // $t1 := 2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:77:53+12
    $t1 := 2;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:69:5+29
    assume {:print "$at(10,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:77:43+26
    assume {:print "$at(10,3201,3227)"} true;

    // assume WellFormed($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:77:43+26
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:77:43+26
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:77:43+26

    // trace_return[0]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:77:43+26
    assume {:print "$track_return(4,8,0):", $t3} $t3 == $t3;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:77:70+1
L1:

    // return $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:77:70+1
    assume {:print "$at(10,3228,3229)"} true;
    $ret0 := $t3;
    return;

}

// fun error::permission_denied [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:3+77
procedure {:inline 1} $1_error_permission_denied(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:3+1
    assume {:print "$at(10,3381,3382)"} true;
    assume {:print "$track_local(4,9,0):", $t0} $t0 == $t0;

    // $t1 := 5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:57+17
    $t1 := 5;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:69:5+29
    assume {:print "$at(10,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:47+31
    assume {:print "$at(10,3425,3456)"} true;

    // assume WellFormed($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:47+31
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:47+31
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:47+31

    // trace_return[0]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:47+31
    assume {:print "$track_return(4,9,0):", $t3} $t3 == $t3;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:79+1
L1:

    // return $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:79+1
    assume {:print "$at(10,3457,3458)"} true;
    $ret0 := $t3;
    return;

}

// fun error::unauthenticated [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:79:3+73
procedure {:inline 1} $1_error_unauthenticated(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:79:3+1
    assume {:print "$at(10,3305,3306)"} true;
    assume {:print "$track_local(4,11,0):", $t0} $t0 == $t0;

    // $t1 := 4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:79:55+15
    $t1 := 4;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:69:5+29
    assume {:print "$at(10,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:79:45+29
    assume {:print "$at(10,3347,3376)"} true;

    // assume WellFormed($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:79:45+29
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:79:45+29
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:79:45+29

    // trace_return[0]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:79:45+29
    assume {:print "$track_return(4,11,0):", $t3} $t3 == $t3;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:79:75+1
L1:

    // return $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:79:75+1
    assume {:print "$at(10,3377,3378)"} true;
    $ret0 := $t3;
    return;

}

// struct type_info::TypeInfo at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/type_info.move:17:5+145
datatype $1_type_info_TypeInfo {
    $1_type_info_TypeInfo($account_address: int, $module_name: Vec (int), $struct_name: Vec (int))
}
function {:inline} $Update'$1_type_info_TypeInfo'_account_address(s: $1_type_info_TypeInfo, x: int): $1_type_info_TypeInfo {
    $1_type_info_TypeInfo(x, s->$module_name, s->$struct_name)
}
function {:inline} $Update'$1_type_info_TypeInfo'_module_name(s: $1_type_info_TypeInfo, x: Vec (int)): $1_type_info_TypeInfo {
    $1_type_info_TypeInfo(s->$account_address, x, s->$struct_name)
}
function {:inline} $Update'$1_type_info_TypeInfo'_struct_name(s: $1_type_info_TypeInfo, x: Vec (int)): $1_type_info_TypeInfo {
    $1_type_info_TypeInfo(s->$account_address, s->$module_name, x)
}
function $IsValid'$1_type_info_TypeInfo'(s: $1_type_info_TypeInfo): bool {
    $IsValid'address'(s->$account_address)
      && $IsValid'vec'u8''(s->$module_name)
      && $IsValid'vec'u8''(s->$struct_name)
}
function {:inline} $IsEqual'$1_type_info_TypeInfo'(s1: $1_type_info_TypeInfo, s2: $1_type_info_TypeInfo): bool {
    $IsEqual'address'(s1->$account_address, s2->$account_address)
    && $IsEqual'vec'u8''(s1->$module_name, s2->$module_name)
    && $IsEqual'vec'u8''(s1->$struct_name, s2->$struct_name)}

// struct guid::GUID at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:7:5+50
datatype $1_guid_GUID {
    $1_guid_GUID($id: $1_guid_ID)
}
function {:inline} $Update'$1_guid_GUID'_id(s: $1_guid_GUID, x: $1_guid_ID): $1_guid_GUID {
    $1_guid_GUID(x)
}
function $IsValid'$1_guid_GUID'(s: $1_guid_GUID): bool {
    $IsValid'$1_guid_ID'(s->$id)
}
function {:inline} $IsEqual'$1_guid_GUID'(s1: $1_guid_GUID, s2: $1_guid_GUID): bool {
    s1 == s2
}

// struct guid::ID at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:12:5+209
datatype $1_guid_ID {
    $1_guid_ID($creation_num: int, $addr: int)
}
function {:inline} $Update'$1_guid_ID'_creation_num(s: $1_guid_ID, x: int): $1_guid_ID {
    $1_guid_ID(x, s->$addr)
}
function {:inline} $Update'$1_guid_ID'_addr(s: $1_guid_ID, x: int): $1_guid_ID {
    $1_guid_ID(s->$creation_num, x)
}
function $IsValid'$1_guid_ID'(s: $1_guid_ID): bool {
    $IsValid'u64'(s->$creation_num)
      && $IsValid'address'(s->$addr)
}
function {:inline} $IsEqual'$1_guid_ID'(s1: $1_guid_ID, s2: $1_guid_ID): bool {
    s1 == s2
}

// fun guid::create [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:23:5+286
procedure {:inline 1} $1_guid_create(_$t0: int, _$t1: $Mutation (int)) returns ($ret0: $1_guid_GUID, $ret1: $Mutation (int))
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $1_guid_ID;
    var $t8: $1_guid_GUID;
    var $t0: int;
    var $t1: $Mutation (int);
    var $temp_0'$1_guid_GUID': $1_guid_GUID;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[addr]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:23:5+1
    assume {:print "$at(129,836,837)"} true;
    assume {:print "$track_local(13,0,0):", $t0} $t0 == $t0;

    // trace_local[creation_num_ref]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:23:5+1
    $temp_0'u64' := $Dereference($t1);
    assume {:print "$track_local(13,0,1):", $temp_0'u64'} $temp_0'u64' == $temp_0'u64';

    // $t3 := read_ref($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:24:28+17
    assume {:print "$at(129,940,957)"} true;
    $t3 := $Dereference($t1);

    // trace_local[creation_num]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:24:13+12
    assume {:print "$track_local(13,0,2):", $t3} $t3 == $t3;

    // $t4 := 1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:25:44+1
    assume {:print "$at(129,1002,1003)"} true;
    $t4 := 1;
    assume $IsValid'u64'($t4);

    // $t5 := +($t3, $t4) on_abort goto L2 with $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:25:42+1
    call $t5 := $AddU64($t3, $t4);
    if ($abort_flag) {
        assume {:print "$at(129,1000,1001)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(13,0):", $t6} $t6 == $t6;
        goto L2;
    }

    // write_ref($t1, $t5) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:25:9+36
    $t1 := $UpdateMutation($t1, $t5);

    // $t7 := pack guid::ID($t3, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:27:17+70
    assume {:print "$at(129,1036,1106)"} true;
    $t7 := $1_guid_ID($t3, $t0);

    // $t8 := pack guid::GUID($t7) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:26:9+103
    assume {:print "$at(129,1013,1116)"} true;
    $t8 := $1_guid_GUID($t7);

    // trace_return[0]($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:26:9+103
    assume {:print "$track_return(13,0,0):", $t8} $t8 == $t8;

    // trace_local[creation_num_ref]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:26:9+103
    $temp_0'u64' := $Dereference($t1);
    assume {:print "$track_local(13,0,1):", $temp_0'u64'} $temp_0'u64' == $temp_0'u64';

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:32:5+1
    assume {:print "$at(129,1121,1122)"} true;
L1:

    // return $t8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:32:5+1
    assume {:print "$at(129,1121,1122)"} true;
    $ret0 := $t8;
    $ret1 := $t1;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:32:5+1
L2:

    // abort($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:32:5+1
    assume {:print "$at(129,1121,1122)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'bool'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'bool'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'u8'(bytes: Vec (int)): int;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'u8'(bytes);
$IsValid'u8'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'u64'(bytes: Vec (int)): int;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'u64'(bytes);
$IsValid'u64'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'u128'(bytes: Vec (int)): int;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'u128'(bytes);
$IsValid'u128'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'u256'(bytes: Vec (int)): int;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'u256'(bytes);
$IsValid'u256'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'address'(bytes: Vec (int)): int;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'address'(bytes);
$IsValid'address'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'signer'(bytes: Vec (int)): $signer;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'signer'(bytes);
$IsValid'signer'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'u8''(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'u8''(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'address''(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'address''(bytes);
$IsValid'vec'address''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_aggregator_Aggregator''(bytes: Vec (int)): Vec ($1_aggregator_Aggregator);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_aggregator_Aggregator''(bytes);
$IsValid'vec'$1_aggregator_Aggregator''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_optional_aggregator_Integer''(bytes: Vec (int)): Vec ($1_optional_aggregator_Integer);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_optional_aggregator_Integer''(bytes);
$IsValid'vec'$1_optional_aggregator_Integer''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_optional_aggregator_OptionalAggregator''(bytes: Vec (int)): Vec ($1_optional_aggregator_OptionalAggregator);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_optional_aggregator_OptionalAggregator''(bytes);
$IsValid'vec'$1_optional_aggregator_OptionalAggregator''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_fixed_point32_FixedPoint32''(bytes: Vec (int)): Vec ($1_fixed_point32_FixedPoint32);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_fixed_point32_FixedPoint32''(bytes);
$IsValid'vec'$1_fixed_point32_FixedPoint32''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_stake_IndividualValidatorPerformance''(bytes: Vec (int)): Vec ($1_stake_IndividualValidatorPerformance);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_stake_IndividualValidatorPerformance''(bytes);
$IsValid'vec'$1_stake_IndividualValidatorPerformance''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_stake_ValidatorInfo''(bytes: Vec (int)): Vec ($1_stake_ValidatorInfo);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_stake_ValidatorInfo''(bytes);
$IsValid'vec'$1_stake_ValidatorInfo''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'#0''(bytes: Vec (int)): Vec (#0);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'#0''(bytes);
$IsValid'vec'#0''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_option_Option'address''(bytes: Vec (int)): $1_option_Option'address';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_option_Option'address''(bytes);
$IsValid'$1_option_Option'address''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_option_Option'$1_aggregator_Aggregator''(bytes: Vec (int)): $1_option_Option'$1_aggregator_Aggregator';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_option_Option'$1_aggregator_Aggregator''(bytes);
$IsValid'$1_option_Option'$1_aggregator_Aggregator''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_option_Option'$1_optional_aggregator_Integer''(bytes: Vec (int)): $1_option_Option'$1_optional_aggregator_Integer';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_option_Option'$1_optional_aggregator_Integer''(bytes);
$IsValid'$1_option_Option'$1_optional_aggregator_Integer''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(bytes: Vec (int)): $1_option_Option'$1_optional_aggregator_OptionalAggregator';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(bytes);
$IsValid'$1_option_Option'$1_optional_aggregator_OptionalAggregator''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_string_String'(bytes: Vec (int)): $1_string_String;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_string_String'(bytes);
$IsValid'$1_string_String'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_type_info_TypeInfo'(bytes: Vec (int)): $1_type_info_TypeInfo;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_type_info_TypeInfo'(bytes);
$IsValid'$1_type_info_TypeInfo'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_guid_GUID'(bytes: Vec (int)): $1_guid_GUID;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_guid_GUID'(bytes);
$IsValid'$1_guid_GUID'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_guid_ID'(bytes: Vec (int)): $1_guid_ID;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_guid_ID'(bytes);
$IsValid'$1_guid_ID'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_account_CoinRegisterEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_account_CoinRegisterEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_account_CoinRegisterEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_account_CoinRegisterEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_account_KeyRotationEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_account_KeyRotationEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_account_KeyRotationEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_account_KeyRotationEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_coin_DepositEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_coin_DepositEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_coin_DepositEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_coin_DepositEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_coin_WithdrawEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_coin_WithdrawEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_coin_WithdrawEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_coin_WithdrawEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_AddStakeEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_stake_AddStakeEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_AddStakeEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_stake_AddStakeEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_DistributeRewardsEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_stake_DistributeRewardsEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_DistributeRewardsEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_stake_DistributeRewardsEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_IncreaseLockupEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_stake_IncreaseLockupEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_IncreaseLockupEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_stake_IncreaseLockupEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_JoinValidatorSetEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_stake_JoinValidatorSetEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_JoinValidatorSetEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_stake_JoinValidatorSetEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_LeaveValidatorSetEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_stake_LeaveValidatorSetEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_LeaveValidatorSetEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_stake_LeaveValidatorSetEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_ReactivateStakeEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_stake_ReactivateStakeEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_ReactivateStakeEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_stake_ReactivateStakeEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_RotateConsensusKeyEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_stake_RotateConsensusKeyEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_RotateConsensusKeyEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_stake_RotateConsensusKeyEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_SetOperatorEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_stake_SetOperatorEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_SetOperatorEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_stake_SetOperatorEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_UnlockStakeEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_stake_UnlockStakeEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_UnlockStakeEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_stake_UnlockStakeEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_WithdrawStakeEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_stake_WithdrawStakeEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_WithdrawStakeEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_stake_WithdrawStakeEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_reconfiguration_NewEpochEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_AddStakeEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_staking_contract_AddStakeEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_AddStakeEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_staking_contract_AddStakeEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_UnlockStakeEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_staking_contract_UnlockStakeEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_UnlockStakeEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_staking_contract_UnlockStakeEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_staking_contract_AddDistributionEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_DistributeEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_staking_contract_DistributeEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_DistributeEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_staking_contract_DistributeEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_staking_contract_RequestCommissionEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_ResetLockupEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_staking_contract_ResetLockupEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_ResetLockupEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_staking_contract_ResetLockupEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_UpdateVoterEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_staking_contract_UpdateVoterEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_UpdateVoterEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_staking_contract_UpdateVoterEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_DistributeEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_vesting_DistributeEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_DistributeEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_vesting_DistributeEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_ResetLockupEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_vesting_ResetLockupEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_ResetLockupEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_vesting_ResetLockupEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_UpdateVoterEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_vesting_UpdateVoterEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_UpdateVoterEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_vesting_UpdateVoterEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_AdminWithdrawEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_vesting_AdminWithdrawEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_AdminWithdrawEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_vesting_AdminWithdrawEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_CreateVestingContractEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_vesting_CreateVestingContractEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_CreateVestingContractEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_vesting_CreateVestingContractEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_SetBeneficiaryEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_vesting_SetBeneficiaryEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_SetBeneficiaryEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_vesting_SetBeneficiaryEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_TerminateEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_vesting_TerminateEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_TerminateEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_vesting_TerminateEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_UnlockRewardsEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_vesting_UnlockRewardsEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_UnlockRewardsEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_vesting_UnlockRewardsEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_UpdateOperatorEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_vesting_UpdateOperatorEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_UpdateOperatorEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_vesting_UpdateOperatorEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_VestEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_vesting_VestEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_VestEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_vesting_VestEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_account_Account'(bytes: Vec (int)): $1_account_Account;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_account_Account'(bytes);
$IsValid'$1_account_Account'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_account_CapabilityOffer'$1_account_RotationCapability''(bytes: Vec (int)): $1_account_CapabilityOffer'$1_account_RotationCapability';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_account_CapabilityOffer'$1_account_RotationCapability''(bytes);
$IsValid'$1_account_CapabilityOffer'$1_account_RotationCapability''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_account_CapabilityOffer'$1_account_SignerCapability''(bytes: Vec (int)): $1_account_CapabilityOffer'$1_account_SignerCapability';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_account_CapabilityOffer'$1_account_SignerCapability''(bytes);
$IsValid'$1_account_CapabilityOffer'$1_account_SignerCapability''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_account_CoinRegisterEvent'(bytes: Vec (int)): $1_account_CoinRegisterEvent;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_account_CoinRegisterEvent'(bytes);
$IsValid'$1_account_CoinRegisterEvent'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_account_SignerCapability'(bytes: Vec (int)): $1_account_SignerCapability;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_account_SignerCapability'(bytes);
$IsValid'$1_account_SignerCapability'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_aggregator_Aggregator'(bytes: Vec (int)): $1_aggregator_Aggregator;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_aggregator_Aggregator'(bytes);
$IsValid'$1_aggregator_Aggregator'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_optional_aggregator_Integer'(bytes: Vec (int)): $1_optional_aggregator_Integer;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_optional_aggregator_Integer'(bytes);
$IsValid'$1_optional_aggregator_Integer'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_optional_aggregator_OptionalAggregator'(bytes: Vec (int)): $1_optional_aggregator_OptionalAggregator;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_optional_aggregator_OptionalAggregator'(bytes);
$IsValid'$1_optional_aggregator_OptionalAggregator'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_coin_Coin'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): $1_coin_Coin'$1_aptos_coin_AptosCoin';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_coin_Coin'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'$1_coin_Coin'$1_aptos_coin_AptosCoin''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): $1_coin_CoinInfo'$1_aptos_coin_AptosCoin';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): $1_coin_CoinStore'$1_aptos_coin_AptosCoin';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_aptos_coin_AptosCoin'(bytes: Vec (int)): $1_aptos_coin_AptosCoin;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_aptos_coin_AptosCoin'(bytes);
$IsValid'$1_aptos_coin_AptosCoin'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_chain_status_GenesisEndMarker'(bytes: Vec (int)): $1_chain_status_GenesisEndMarker;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_chain_status_GenesisEndMarker'(bytes);
$IsValid'$1_chain_status_GenesisEndMarker'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_timestamp_CurrentTimeMicroseconds'(bytes: Vec (int)): $1_timestamp_CurrentTimeMicroseconds;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_timestamp_CurrentTimeMicroseconds'(bytes);
$IsValid'$1_timestamp_CurrentTimeMicroseconds'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_simple_map_SimpleMap'address_u64''(bytes: Vec (int)): Table int (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_simple_map_SimpleMap'address_u64''(bytes);
$IsValid'$1_simple_map_SimpleMap'address_u64''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_simple_map_SimpleMap'address_address''(bytes: Vec (int)): Table int (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_simple_map_SimpleMap'address_address''(bytes);
$IsValid'$1_simple_map_SimpleMap'address_address''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_simple_map_SimpleMap'address_$1_staking_contract_StakingContract''(bytes: Vec (int)): Table int ($1_staking_contract_StakingContract);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_simple_map_SimpleMap'address_$1_staking_contract_StakingContract''(bytes);
$IsValid'$1_simple_map_SimpleMap'address_$1_staking_contract_StakingContract''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_simple_map_SimpleMap'$1_string_String_address''(bytes: Vec (int)): Table int (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_simple_map_SimpleMap'$1_string_String_address''(bytes);
$IsValid'$1_simple_map_SimpleMap'$1_string_String_address''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fixed_point32_FixedPoint32'(bytes: Vec (int)): $1_fixed_point32_FixedPoint32;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fixed_point32_FixedPoint32'(bytes);
$IsValid'$1_fixed_point32_FixedPoint32'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_staking_config_StakingConfig'(bytes: Vec (int)): $1_staking_config_StakingConfig;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_staking_config_StakingConfig'(bytes);
$IsValid'$1_staking_config_StakingConfig'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_stake_IncreaseLockupEvent'(bytes: Vec (int)): $1_stake_IncreaseLockupEvent;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_stake_IncreaseLockupEvent'(bytes);
$IsValid'$1_stake_IncreaseLockupEvent'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_stake_OwnerCapability'(bytes: Vec (int)): $1_stake_OwnerCapability;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_stake_OwnerCapability'(bytes);
$IsValid'$1_stake_OwnerCapability'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_stake_StakePool'(bytes: Vec (int)): $1_stake_StakePool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_stake_StakePool'(bytes);
$IsValid'$1_stake_StakePool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_stake_ValidatorConfig'(bytes: Vec (int)): $1_stake_ValidatorConfig;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_stake_ValidatorConfig'(bytes);
$IsValid'$1_stake_ValidatorConfig'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_stake_ValidatorPerformance'(bytes: Vec (int)): $1_stake_ValidatorPerformance;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_stake_ValidatorPerformance'(bytes);
$IsValid'$1_stake_ValidatorPerformance'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_stake_ValidatorSet'(bytes: Vec (int)): $1_stake_ValidatorSet;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_stake_ValidatorSet'(bytes);
$IsValid'$1_stake_ValidatorSet'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_reconfiguration_Configuration'(bytes: Vec (int)): $1_reconfiguration_Configuration;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_reconfiguration_Configuration'(bytes);
$IsValid'$1_reconfiguration_Configuration'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_pool_u64_Pool'(bytes: Vec (int)): $1_pool_u64_Pool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_pool_u64_Pool'(bytes);
$IsValid'$1_pool_u64_Pool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_staking_contract_ResetLockupEvent'(bytes: Vec (int)): $1_staking_contract_ResetLockupEvent;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_staking_contract_ResetLockupEvent'(bytes);
$IsValid'$1_staking_contract_ResetLockupEvent'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_staking_contract_StakingContract'(bytes: Vec (int)): $1_staking_contract_StakingContract;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_staking_contract_StakingContract'(bytes);
$IsValid'$1_staking_contract_StakingContract'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_staking_contract_Store'(bytes: Vec (int)): $1_staking_contract_Store;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_staking_contract_Store'(bytes);
$IsValid'$1_staking_contract_Store'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_staking_contract_UpdateVoterEvent'(bytes: Vec (int)): $1_staking_contract_UpdateVoterEvent;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_staking_contract_UpdateVoterEvent'(bytes);
$IsValid'$1_staking_contract_UpdateVoterEvent'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_vesting_ResetLockupEvent'(bytes: Vec (int)): $1_vesting_ResetLockupEvent;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_vesting_ResetLockupEvent'(bytes);
$IsValid'$1_vesting_ResetLockupEvent'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_vesting_UpdateVoterEvent'(bytes: Vec (int)): $1_vesting_UpdateVoterEvent;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_vesting_UpdateVoterEvent'(bytes);
$IsValid'$1_vesting_UpdateVoterEvent'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_vesting_AdminStore'(bytes: Vec (int)): $1_vesting_AdminStore;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_vesting_AdminStore'(bytes);
$IsValid'$1_vesting_AdminStore'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_vesting_SetBeneficiaryEvent'(bytes: Vec (int)): $1_vesting_SetBeneficiaryEvent;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_vesting_SetBeneficiaryEvent'(bytes);
$IsValid'$1_vesting_SetBeneficiaryEvent'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_vesting_StakingInfo'(bytes: Vec (int)): $1_vesting_StakingInfo;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_vesting_StakingInfo'(bytes);
$IsValid'$1_vesting_StakingInfo'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_vesting_VestingAccountManagement'(bytes: Vec (int)): $1_vesting_VestingAccountManagement;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_vesting_VestingAccountManagement'(bytes);
$IsValid'$1_vesting_VestingAccountManagement'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_vesting_VestingContract'(bytes: Vec (int)): $1_vesting_VestingContract;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_vesting_VestingContract'(bytes);
$IsValid'$1_vesting_VestingContract'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_vesting_VestingSchedule'(bytes: Vec (int)): $1_vesting_VestingSchedule;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_vesting_VestingSchedule'(bytes);
$IsValid'$1_vesting_VestingSchedule'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'#0'(bytes: Vec (int)): #0;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'#0'(bytes);
$IsValid'#0'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'bool'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'bool'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'u8'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'u8'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'u64'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'u64'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'u128'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'u128'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'u256'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'u256'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'address'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'address'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'signer'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'signer'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'u8''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'u8''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'address''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'address''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_aggregator_Aggregator''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_aggregator_Aggregator''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_optional_aggregator_Integer''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_optional_aggregator_Integer''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_optional_aggregator_OptionalAggregator''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_optional_aggregator_OptionalAggregator''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_fixed_point32_FixedPoint32''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_fixed_point32_FixedPoint32''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_stake_IndividualValidatorPerformance''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_stake_IndividualValidatorPerformance''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_stake_ValidatorInfo''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_stake_ValidatorInfo''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'#0''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'#0''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_option_Option'address''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_option_Option'address''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_option_Option'$1_aggregator_Aggregator''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_option_Option'$1_aggregator_Aggregator''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_option_Option'$1_optional_aggregator_Integer''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_option_Option'$1_optional_aggregator_Integer''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_string_String'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_string_String'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_type_info_TypeInfo'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_type_info_TypeInfo'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_guid_GUID'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_guid_GUID'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_guid_ID'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_guid_ID'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_account_CoinRegisterEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_account_CoinRegisterEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_account_KeyRotationEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_account_KeyRotationEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_coin_DepositEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_coin_DepositEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_coin_WithdrawEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_coin_WithdrawEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_AddStakeEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_AddStakeEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_DistributeRewardsEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_DistributeRewardsEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_IncreaseLockupEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_IncreaseLockupEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_JoinValidatorSetEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_JoinValidatorSetEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_LeaveValidatorSetEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_LeaveValidatorSetEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_ReactivateStakeEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_ReactivateStakeEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_RotateConsensusKeyEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_RotateConsensusKeyEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_SetOperatorEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_SetOperatorEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_UnlockStakeEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_UnlockStakeEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_WithdrawStakeEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_WithdrawStakeEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_AddStakeEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_AddStakeEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_UnlockStakeEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_UnlockStakeEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_DistributeEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_DistributeEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_ResetLockupEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_ResetLockupEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_UpdateVoterEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_UpdateVoterEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_DistributeEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_DistributeEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_ResetLockupEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_ResetLockupEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_UpdateVoterEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_UpdateVoterEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_AdminWithdrawEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_AdminWithdrawEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_CreateVestingContractEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_CreateVestingContractEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_SetBeneficiaryEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_SetBeneficiaryEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_TerminateEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_TerminateEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_UnlockRewardsEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_UnlockRewardsEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_UpdateOperatorEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_UpdateOperatorEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_VestEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_VestEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_account_Account'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_account_Account'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_account_CapabilityOffer'$1_account_RotationCapability''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_account_CapabilityOffer'$1_account_RotationCapability''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_account_CapabilityOffer'$1_account_SignerCapability''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_account_CapabilityOffer'$1_account_SignerCapability''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_account_CoinRegisterEvent'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_account_CoinRegisterEvent'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_account_SignerCapability'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_account_SignerCapability'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_aggregator_Aggregator'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_aggregator_Aggregator'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_optional_aggregator_Integer'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_optional_aggregator_Integer'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_optional_aggregator_OptionalAggregator'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_optional_aggregator_OptionalAggregator'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_coin_Coin'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_coin_Coin'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_aptos_coin_AptosCoin'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_aptos_coin_AptosCoin'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_chain_status_GenesisEndMarker'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_chain_status_GenesisEndMarker'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_timestamp_CurrentTimeMicroseconds'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_timestamp_CurrentTimeMicroseconds'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_simple_map_SimpleMap'address_u64''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_simple_map_SimpleMap'address_u64''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_simple_map_SimpleMap'address_address''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_simple_map_SimpleMap'address_address''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_simple_map_SimpleMap'address_$1_staking_contract_StakingContract''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_simple_map_SimpleMap'address_$1_staking_contract_StakingContract''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_simple_map_SimpleMap'$1_string_String_address''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_simple_map_SimpleMap'$1_string_String_address''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fixed_point32_FixedPoint32'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fixed_point32_FixedPoint32'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_staking_config_StakingConfig'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_staking_config_StakingConfig'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_stake_IncreaseLockupEvent'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_stake_IncreaseLockupEvent'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_stake_OwnerCapability'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_stake_OwnerCapability'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_stake_StakePool'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_stake_StakePool'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_stake_ValidatorConfig'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_stake_ValidatorConfig'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_stake_ValidatorPerformance'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_stake_ValidatorPerformance'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_stake_ValidatorSet'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_stake_ValidatorSet'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_reconfiguration_Configuration'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_reconfiguration_Configuration'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_pool_u64_Pool'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_pool_u64_Pool'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_staking_contract_ResetLockupEvent'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_staking_contract_ResetLockupEvent'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_staking_contract_StakingContract'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_staking_contract_StakingContract'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_staking_contract_Store'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_staking_contract_Store'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_staking_contract_UpdateVoterEvent'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_staking_contract_UpdateVoterEvent'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_vesting_ResetLockupEvent'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_vesting_ResetLockupEvent'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_vesting_UpdateVoterEvent'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_vesting_UpdateVoterEvent'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_vesting_AdminStore'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_vesting_AdminStore'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_vesting_SetBeneficiaryEvent'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_vesting_SetBeneficiaryEvent'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_vesting_StakingInfo'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_vesting_StakingInfo'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_vesting_VestingAccountManagement'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_vesting_VestingAccountManagement'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_vesting_VestingContract'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_vesting_VestingContract'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_vesting_VestingSchedule'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_vesting_VestingSchedule'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'#0'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'#0'(bytes);
$IsValid'bool'($$res)));

// struct event::EventHandle<account::CoinRegisterEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_account_CoinRegisterEvent' {
    $1_event_EventHandle'$1_account_CoinRegisterEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_account_CoinRegisterEvent''_counter(s: $1_event_EventHandle'$1_account_CoinRegisterEvent', x: int): $1_event_EventHandle'$1_account_CoinRegisterEvent' {
    $1_event_EventHandle'$1_account_CoinRegisterEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_account_CoinRegisterEvent''_guid(s: $1_event_EventHandle'$1_account_CoinRegisterEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_account_CoinRegisterEvent' {
    $1_event_EventHandle'$1_account_CoinRegisterEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_account_CoinRegisterEvent''(s: $1_event_EventHandle'$1_account_CoinRegisterEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_account_CoinRegisterEvent''(s1: $1_event_EventHandle'$1_account_CoinRegisterEvent', s2: $1_event_EventHandle'$1_account_CoinRegisterEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<account::KeyRotationEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_account_KeyRotationEvent' {
    $1_event_EventHandle'$1_account_KeyRotationEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_account_KeyRotationEvent''_counter(s: $1_event_EventHandle'$1_account_KeyRotationEvent', x: int): $1_event_EventHandle'$1_account_KeyRotationEvent' {
    $1_event_EventHandle'$1_account_KeyRotationEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_account_KeyRotationEvent''_guid(s: $1_event_EventHandle'$1_account_KeyRotationEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_account_KeyRotationEvent' {
    $1_event_EventHandle'$1_account_KeyRotationEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_account_KeyRotationEvent''(s: $1_event_EventHandle'$1_account_KeyRotationEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_account_KeyRotationEvent''(s1: $1_event_EventHandle'$1_account_KeyRotationEvent', s2: $1_event_EventHandle'$1_account_KeyRotationEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<coin::DepositEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_coin_DepositEvent' {
    $1_event_EventHandle'$1_coin_DepositEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_coin_DepositEvent''_counter(s: $1_event_EventHandle'$1_coin_DepositEvent', x: int): $1_event_EventHandle'$1_coin_DepositEvent' {
    $1_event_EventHandle'$1_coin_DepositEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_coin_DepositEvent''_guid(s: $1_event_EventHandle'$1_coin_DepositEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_coin_DepositEvent' {
    $1_event_EventHandle'$1_coin_DepositEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_coin_DepositEvent''(s: $1_event_EventHandle'$1_coin_DepositEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_coin_DepositEvent''(s1: $1_event_EventHandle'$1_coin_DepositEvent', s2: $1_event_EventHandle'$1_coin_DepositEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<coin::WithdrawEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_coin_WithdrawEvent' {
    $1_event_EventHandle'$1_coin_WithdrawEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_coin_WithdrawEvent''_counter(s: $1_event_EventHandle'$1_coin_WithdrawEvent', x: int): $1_event_EventHandle'$1_coin_WithdrawEvent' {
    $1_event_EventHandle'$1_coin_WithdrawEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_coin_WithdrawEvent''_guid(s: $1_event_EventHandle'$1_coin_WithdrawEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_coin_WithdrawEvent' {
    $1_event_EventHandle'$1_coin_WithdrawEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_coin_WithdrawEvent''(s: $1_event_EventHandle'$1_coin_WithdrawEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_coin_WithdrawEvent''(s1: $1_event_EventHandle'$1_coin_WithdrawEvent', s2: $1_event_EventHandle'$1_coin_WithdrawEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<stake::AddStakeEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_stake_AddStakeEvent' {
    $1_event_EventHandle'$1_stake_AddStakeEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_AddStakeEvent''_counter(s: $1_event_EventHandle'$1_stake_AddStakeEvent', x: int): $1_event_EventHandle'$1_stake_AddStakeEvent' {
    $1_event_EventHandle'$1_stake_AddStakeEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_AddStakeEvent''_guid(s: $1_event_EventHandle'$1_stake_AddStakeEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_stake_AddStakeEvent' {
    $1_event_EventHandle'$1_stake_AddStakeEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_stake_AddStakeEvent''(s: $1_event_EventHandle'$1_stake_AddStakeEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_stake_AddStakeEvent''(s1: $1_event_EventHandle'$1_stake_AddStakeEvent', s2: $1_event_EventHandle'$1_stake_AddStakeEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<stake::DistributeRewardsEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_stake_DistributeRewardsEvent' {
    $1_event_EventHandle'$1_stake_DistributeRewardsEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_DistributeRewardsEvent''_counter(s: $1_event_EventHandle'$1_stake_DistributeRewardsEvent', x: int): $1_event_EventHandle'$1_stake_DistributeRewardsEvent' {
    $1_event_EventHandle'$1_stake_DistributeRewardsEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_DistributeRewardsEvent''_guid(s: $1_event_EventHandle'$1_stake_DistributeRewardsEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_stake_DistributeRewardsEvent' {
    $1_event_EventHandle'$1_stake_DistributeRewardsEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_stake_DistributeRewardsEvent''(s: $1_event_EventHandle'$1_stake_DistributeRewardsEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_stake_DistributeRewardsEvent''(s1: $1_event_EventHandle'$1_stake_DistributeRewardsEvent', s2: $1_event_EventHandle'$1_stake_DistributeRewardsEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<stake::IncreaseLockupEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_stake_IncreaseLockupEvent' {
    $1_event_EventHandle'$1_stake_IncreaseLockupEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_IncreaseLockupEvent''_counter(s: $1_event_EventHandle'$1_stake_IncreaseLockupEvent', x: int): $1_event_EventHandle'$1_stake_IncreaseLockupEvent' {
    $1_event_EventHandle'$1_stake_IncreaseLockupEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_IncreaseLockupEvent''_guid(s: $1_event_EventHandle'$1_stake_IncreaseLockupEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_stake_IncreaseLockupEvent' {
    $1_event_EventHandle'$1_stake_IncreaseLockupEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_stake_IncreaseLockupEvent''(s: $1_event_EventHandle'$1_stake_IncreaseLockupEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_stake_IncreaseLockupEvent''(s1: $1_event_EventHandle'$1_stake_IncreaseLockupEvent', s2: $1_event_EventHandle'$1_stake_IncreaseLockupEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<stake::JoinValidatorSetEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_stake_JoinValidatorSetEvent' {
    $1_event_EventHandle'$1_stake_JoinValidatorSetEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_JoinValidatorSetEvent''_counter(s: $1_event_EventHandle'$1_stake_JoinValidatorSetEvent', x: int): $1_event_EventHandle'$1_stake_JoinValidatorSetEvent' {
    $1_event_EventHandle'$1_stake_JoinValidatorSetEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_JoinValidatorSetEvent''_guid(s: $1_event_EventHandle'$1_stake_JoinValidatorSetEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_stake_JoinValidatorSetEvent' {
    $1_event_EventHandle'$1_stake_JoinValidatorSetEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_stake_JoinValidatorSetEvent''(s: $1_event_EventHandle'$1_stake_JoinValidatorSetEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_stake_JoinValidatorSetEvent''(s1: $1_event_EventHandle'$1_stake_JoinValidatorSetEvent', s2: $1_event_EventHandle'$1_stake_JoinValidatorSetEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<stake::LeaveValidatorSetEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_stake_LeaveValidatorSetEvent' {
    $1_event_EventHandle'$1_stake_LeaveValidatorSetEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_LeaveValidatorSetEvent''_counter(s: $1_event_EventHandle'$1_stake_LeaveValidatorSetEvent', x: int): $1_event_EventHandle'$1_stake_LeaveValidatorSetEvent' {
    $1_event_EventHandle'$1_stake_LeaveValidatorSetEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_LeaveValidatorSetEvent''_guid(s: $1_event_EventHandle'$1_stake_LeaveValidatorSetEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_stake_LeaveValidatorSetEvent' {
    $1_event_EventHandle'$1_stake_LeaveValidatorSetEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_stake_LeaveValidatorSetEvent''(s: $1_event_EventHandle'$1_stake_LeaveValidatorSetEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_stake_LeaveValidatorSetEvent''(s1: $1_event_EventHandle'$1_stake_LeaveValidatorSetEvent', s2: $1_event_EventHandle'$1_stake_LeaveValidatorSetEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<stake::ReactivateStakeEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_stake_ReactivateStakeEvent' {
    $1_event_EventHandle'$1_stake_ReactivateStakeEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_ReactivateStakeEvent''_counter(s: $1_event_EventHandle'$1_stake_ReactivateStakeEvent', x: int): $1_event_EventHandle'$1_stake_ReactivateStakeEvent' {
    $1_event_EventHandle'$1_stake_ReactivateStakeEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_ReactivateStakeEvent''_guid(s: $1_event_EventHandle'$1_stake_ReactivateStakeEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_stake_ReactivateStakeEvent' {
    $1_event_EventHandle'$1_stake_ReactivateStakeEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_stake_ReactivateStakeEvent''(s: $1_event_EventHandle'$1_stake_ReactivateStakeEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_stake_ReactivateStakeEvent''(s1: $1_event_EventHandle'$1_stake_ReactivateStakeEvent', s2: $1_event_EventHandle'$1_stake_ReactivateStakeEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<stake::RegisterValidatorCandidateEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent' {
    $1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent''_counter(s: $1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent', x: int): $1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent' {
    $1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent''_guid(s: $1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent' {
    $1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent''(s: $1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent''(s1: $1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent', s2: $1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<stake::RotateConsensusKeyEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_stake_RotateConsensusKeyEvent' {
    $1_event_EventHandle'$1_stake_RotateConsensusKeyEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_RotateConsensusKeyEvent''_counter(s: $1_event_EventHandle'$1_stake_RotateConsensusKeyEvent', x: int): $1_event_EventHandle'$1_stake_RotateConsensusKeyEvent' {
    $1_event_EventHandle'$1_stake_RotateConsensusKeyEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_RotateConsensusKeyEvent''_guid(s: $1_event_EventHandle'$1_stake_RotateConsensusKeyEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_stake_RotateConsensusKeyEvent' {
    $1_event_EventHandle'$1_stake_RotateConsensusKeyEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_stake_RotateConsensusKeyEvent''(s: $1_event_EventHandle'$1_stake_RotateConsensusKeyEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_stake_RotateConsensusKeyEvent''(s1: $1_event_EventHandle'$1_stake_RotateConsensusKeyEvent', s2: $1_event_EventHandle'$1_stake_RotateConsensusKeyEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<stake::SetOperatorEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_stake_SetOperatorEvent' {
    $1_event_EventHandle'$1_stake_SetOperatorEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_SetOperatorEvent''_counter(s: $1_event_EventHandle'$1_stake_SetOperatorEvent', x: int): $1_event_EventHandle'$1_stake_SetOperatorEvent' {
    $1_event_EventHandle'$1_stake_SetOperatorEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_SetOperatorEvent''_guid(s: $1_event_EventHandle'$1_stake_SetOperatorEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_stake_SetOperatorEvent' {
    $1_event_EventHandle'$1_stake_SetOperatorEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_stake_SetOperatorEvent''(s: $1_event_EventHandle'$1_stake_SetOperatorEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_stake_SetOperatorEvent''(s1: $1_event_EventHandle'$1_stake_SetOperatorEvent', s2: $1_event_EventHandle'$1_stake_SetOperatorEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<stake::UnlockStakeEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_stake_UnlockStakeEvent' {
    $1_event_EventHandle'$1_stake_UnlockStakeEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_UnlockStakeEvent''_counter(s: $1_event_EventHandle'$1_stake_UnlockStakeEvent', x: int): $1_event_EventHandle'$1_stake_UnlockStakeEvent' {
    $1_event_EventHandle'$1_stake_UnlockStakeEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_UnlockStakeEvent''_guid(s: $1_event_EventHandle'$1_stake_UnlockStakeEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_stake_UnlockStakeEvent' {
    $1_event_EventHandle'$1_stake_UnlockStakeEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_stake_UnlockStakeEvent''(s: $1_event_EventHandle'$1_stake_UnlockStakeEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_stake_UnlockStakeEvent''(s1: $1_event_EventHandle'$1_stake_UnlockStakeEvent', s2: $1_event_EventHandle'$1_stake_UnlockStakeEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<stake::UpdateNetworkAndFullnodeAddressesEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent' {
    $1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent''_counter(s: $1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent', x: int): $1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent' {
    $1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent''_guid(s: $1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent' {
    $1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent''(s: $1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent''(s1: $1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent', s2: $1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<stake::WithdrawStakeEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_stake_WithdrawStakeEvent' {
    $1_event_EventHandle'$1_stake_WithdrawStakeEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_WithdrawStakeEvent''_counter(s: $1_event_EventHandle'$1_stake_WithdrawStakeEvent', x: int): $1_event_EventHandle'$1_stake_WithdrawStakeEvent' {
    $1_event_EventHandle'$1_stake_WithdrawStakeEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_WithdrawStakeEvent''_guid(s: $1_event_EventHandle'$1_stake_WithdrawStakeEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_stake_WithdrawStakeEvent' {
    $1_event_EventHandle'$1_stake_WithdrawStakeEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_stake_WithdrawStakeEvent''(s: $1_event_EventHandle'$1_stake_WithdrawStakeEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_stake_WithdrawStakeEvent''(s1: $1_event_EventHandle'$1_stake_WithdrawStakeEvent', s2: $1_event_EventHandle'$1_stake_WithdrawStakeEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<reconfiguration::NewEpochEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_reconfiguration_NewEpochEvent' {
    $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''_counter(s: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent', x: int): $1_event_EventHandle'$1_reconfiguration_NewEpochEvent' {
    $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''_guid(s: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_reconfiguration_NewEpochEvent' {
    $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(s: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(s1: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent', s2: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<staking_contract::AddStakeEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_staking_contract_AddStakeEvent' {
    $1_event_EventHandle'$1_staking_contract_AddStakeEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_AddStakeEvent''_counter(s: $1_event_EventHandle'$1_staking_contract_AddStakeEvent', x: int): $1_event_EventHandle'$1_staking_contract_AddStakeEvent' {
    $1_event_EventHandle'$1_staking_contract_AddStakeEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_AddStakeEvent''_guid(s: $1_event_EventHandle'$1_staking_contract_AddStakeEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_staking_contract_AddStakeEvent' {
    $1_event_EventHandle'$1_staking_contract_AddStakeEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_staking_contract_AddStakeEvent''(s: $1_event_EventHandle'$1_staking_contract_AddStakeEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_staking_contract_AddStakeEvent''(s1: $1_event_EventHandle'$1_staking_contract_AddStakeEvent', s2: $1_event_EventHandle'$1_staking_contract_AddStakeEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<staking_contract::UnlockStakeEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_staking_contract_UnlockStakeEvent' {
    $1_event_EventHandle'$1_staking_contract_UnlockStakeEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_UnlockStakeEvent''_counter(s: $1_event_EventHandle'$1_staking_contract_UnlockStakeEvent', x: int): $1_event_EventHandle'$1_staking_contract_UnlockStakeEvent' {
    $1_event_EventHandle'$1_staking_contract_UnlockStakeEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_UnlockStakeEvent''_guid(s: $1_event_EventHandle'$1_staking_contract_UnlockStakeEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_staking_contract_UnlockStakeEvent' {
    $1_event_EventHandle'$1_staking_contract_UnlockStakeEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_staking_contract_UnlockStakeEvent''(s: $1_event_EventHandle'$1_staking_contract_UnlockStakeEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_staking_contract_UnlockStakeEvent''(s1: $1_event_EventHandle'$1_staking_contract_UnlockStakeEvent', s2: $1_event_EventHandle'$1_staking_contract_UnlockStakeEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<staking_contract::AddDistributionEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_staking_contract_AddDistributionEvent' {
    $1_event_EventHandle'$1_staking_contract_AddDistributionEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''_counter(s: $1_event_EventHandle'$1_staking_contract_AddDistributionEvent', x: int): $1_event_EventHandle'$1_staking_contract_AddDistributionEvent' {
    $1_event_EventHandle'$1_staking_contract_AddDistributionEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''_guid(s: $1_event_EventHandle'$1_staking_contract_AddDistributionEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_staking_contract_AddDistributionEvent' {
    $1_event_EventHandle'$1_staking_contract_AddDistributionEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''(s: $1_event_EventHandle'$1_staking_contract_AddDistributionEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''(s1: $1_event_EventHandle'$1_staking_contract_AddDistributionEvent', s2: $1_event_EventHandle'$1_staking_contract_AddDistributionEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<staking_contract::CreateStakingContractEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent' {
    $1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent''_counter(s: $1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent', x: int): $1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent' {
    $1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent''_guid(s: $1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent' {
    $1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent''(s: $1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent''(s1: $1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent', s2: $1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<staking_contract::DistributeEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_staking_contract_DistributeEvent' {
    $1_event_EventHandle'$1_staking_contract_DistributeEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_DistributeEvent''_counter(s: $1_event_EventHandle'$1_staking_contract_DistributeEvent', x: int): $1_event_EventHandle'$1_staking_contract_DistributeEvent' {
    $1_event_EventHandle'$1_staking_contract_DistributeEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_DistributeEvent''_guid(s: $1_event_EventHandle'$1_staking_contract_DistributeEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_staking_contract_DistributeEvent' {
    $1_event_EventHandle'$1_staking_contract_DistributeEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_staking_contract_DistributeEvent''(s: $1_event_EventHandle'$1_staking_contract_DistributeEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_staking_contract_DistributeEvent''(s1: $1_event_EventHandle'$1_staking_contract_DistributeEvent', s2: $1_event_EventHandle'$1_staking_contract_DistributeEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<staking_contract::RequestCommissionEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_staking_contract_RequestCommissionEvent' {
    $1_event_EventHandle'$1_staking_contract_RequestCommissionEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''_counter(s: $1_event_EventHandle'$1_staking_contract_RequestCommissionEvent', x: int): $1_event_EventHandle'$1_staking_contract_RequestCommissionEvent' {
    $1_event_EventHandle'$1_staking_contract_RequestCommissionEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''_guid(s: $1_event_EventHandle'$1_staking_contract_RequestCommissionEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_staking_contract_RequestCommissionEvent' {
    $1_event_EventHandle'$1_staking_contract_RequestCommissionEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''(s: $1_event_EventHandle'$1_staking_contract_RequestCommissionEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''(s1: $1_event_EventHandle'$1_staking_contract_RequestCommissionEvent', s2: $1_event_EventHandle'$1_staking_contract_RequestCommissionEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<staking_contract::ResetLockupEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_staking_contract_ResetLockupEvent' {
    $1_event_EventHandle'$1_staking_contract_ResetLockupEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_ResetLockupEvent''_counter(s: $1_event_EventHandle'$1_staking_contract_ResetLockupEvent', x: int): $1_event_EventHandle'$1_staking_contract_ResetLockupEvent' {
    $1_event_EventHandle'$1_staking_contract_ResetLockupEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_ResetLockupEvent''_guid(s: $1_event_EventHandle'$1_staking_contract_ResetLockupEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_staking_contract_ResetLockupEvent' {
    $1_event_EventHandle'$1_staking_contract_ResetLockupEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_staking_contract_ResetLockupEvent''(s: $1_event_EventHandle'$1_staking_contract_ResetLockupEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_staking_contract_ResetLockupEvent''(s1: $1_event_EventHandle'$1_staking_contract_ResetLockupEvent', s2: $1_event_EventHandle'$1_staking_contract_ResetLockupEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<staking_contract::SwitchOperatorEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent' {
    $1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent''_counter(s: $1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent', x: int): $1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent' {
    $1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent''_guid(s: $1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent' {
    $1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent''(s: $1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent''(s1: $1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent', s2: $1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<staking_contract::UpdateVoterEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_staking_contract_UpdateVoterEvent' {
    $1_event_EventHandle'$1_staking_contract_UpdateVoterEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_UpdateVoterEvent''_counter(s: $1_event_EventHandle'$1_staking_contract_UpdateVoterEvent', x: int): $1_event_EventHandle'$1_staking_contract_UpdateVoterEvent' {
    $1_event_EventHandle'$1_staking_contract_UpdateVoterEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_UpdateVoterEvent''_guid(s: $1_event_EventHandle'$1_staking_contract_UpdateVoterEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_staking_contract_UpdateVoterEvent' {
    $1_event_EventHandle'$1_staking_contract_UpdateVoterEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_staking_contract_UpdateVoterEvent''(s: $1_event_EventHandle'$1_staking_contract_UpdateVoterEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_staking_contract_UpdateVoterEvent''(s1: $1_event_EventHandle'$1_staking_contract_UpdateVoterEvent', s2: $1_event_EventHandle'$1_staking_contract_UpdateVoterEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<vesting::DistributeEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_vesting_DistributeEvent' {
    $1_event_EventHandle'$1_vesting_DistributeEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_DistributeEvent''_counter(s: $1_event_EventHandle'$1_vesting_DistributeEvent', x: int): $1_event_EventHandle'$1_vesting_DistributeEvent' {
    $1_event_EventHandle'$1_vesting_DistributeEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_DistributeEvent''_guid(s: $1_event_EventHandle'$1_vesting_DistributeEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_vesting_DistributeEvent' {
    $1_event_EventHandle'$1_vesting_DistributeEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_vesting_DistributeEvent''(s: $1_event_EventHandle'$1_vesting_DistributeEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_vesting_DistributeEvent''(s1: $1_event_EventHandle'$1_vesting_DistributeEvent', s2: $1_event_EventHandle'$1_vesting_DistributeEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<vesting::ResetLockupEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_vesting_ResetLockupEvent' {
    $1_event_EventHandle'$1_vesting_ResetLockupEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_ResetLockupEvent''_counter(s: $1_event_EventHandle'$1_vesting_ResetLockupEvent', x: int): $1_event_EventHandle'$1_vesting_ResetLockupEvent' {
    $1_event_EventHandle'$1_vesting_ResetLockupEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_ResetLockupEvent''_guid(s: $1_event_EventHandle'$1_vesting_ResetLockupEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_vesting_ResetLockupEvent' {
    $1_event_EventHandle'$1_vesting_ResetLockupEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_vesting_ResetLockupEvent''(s: $1_event_EventHandle'$1_vesting_ResetLockupEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_vesting_ResetLockupEvent''(s1: $1_event_EventHandle'$1_vesting_ResetLockupEvent', s2: $1_event_EventHandle'$1_vesting_ResetLockupEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<vesting::UpdateVoterEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_vesting_UpdateVoterEvent' {
    $1_event_EventHandle'$1_vesting_UpdateVoterEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_UpdateVoterEvent''_counter(s: $1_event_EventHandle'$1_vesting_UpdateVoterEvent', x: int): $1_event_EventHandle'$1_vesting_UpdateVoterEvent' {
    $1_event_EventHandle'$1_vesting_UpdateVoterEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_UpdateVoterEvent''_guid(s: $1_event_EventHandle'$1_vesting_UpdateVoterEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_vesting_UpdateVoterEvent' {
    $1_event_EventHandle'$1_vesting_UpdateVoterEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_vesting_UpdateVoterEvent''(s: $1_event_EventHandle'$1_vesting_UpdateVoterEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_vesting_UpdateVoterEvent''(s1: $1_event_EventHandle'$1_vesting_UpdateVoterEvent', s2: $1_event_EventHandle'$1_vesting_UpdateVoterEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<vesting::AdminWithdrawEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_vesting_AdminWithdrawEvent' {
    $1_event_EventHandle'$1_vesting_AdminWithdrawEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_AdminWithdrawEvent''_counter(s: $1_event_EventHandle'$1_vesting_AdminWithdrawEvent', x: int): $1_event_EventHandle'$1_vesting_AdminWithdrawEvent' {
    $1_event_EventHandle'$1_vesting_AdminWithdrawEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_AdminWithdrawEvent''_guid(s: $1_event_EventHandle'$1_vesting_AdminWithdrawEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_vesting_AdminWithdrawEvent' {
    $1_event_EventHandle'$1_vesting_AdminWithdrawEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_vesting_AdminWithdrawEvent''(s: $1_event_EventHandle'$1_vesting_AdminWithdrawEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_vesting_AdminWithdrawEvent''(s1: $1_event_EventHandle'$1_vesting_AdminWithdrawEvent', s2: $1_event_EventHandle'$1_vesting_AdminWithdrawEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<vesting::CreateVestingContractEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_vesting_CreateVestingContractEvent' {
    $1_event_EventHandle'$1_vesting_CreateVestingContractEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_CreateVestingContractEvent''_counter(s: $1_event_EventHandle'$1_vesting_CreateVestingContractEvent', x: int): $1_event_EventHandle'$1_vesting_CreateVestingContractEvent' {
    $1_event_EventHandle'$1_vesting_CreateVestingContractEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_CreateVestingContractEvent''_guid(s: $1_event_EventHandle'$1_vesting_CreateVestingContractEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_vesting_CreateVestingContractEvent' {
    $1_event_EventHandle'$1_vesting_CreateVestingContractEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_vesting_CreateVestingContractEvent''(s: $1_event_EventHandle'$1_vesting_CreateVestingContractEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_vesting_CreateVestingContractEvent''(s1: $1_event_EventHandle'$1_vesting_CreateVestingContractEvent', s2: $1_event_EventHandle'$1_vesting_CreateVestingContractEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<vesting::SetBeneficiaryEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_vesting_SetBeneficiaryEvent' {
    $1_event_EventHandle'$1_vesting_SetBeneficiaryEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_SetBeneficiaryEvent''_counter(s: $1_event_EventHandle'$1_vesting_SetBeneficiaryEvent', x: int): $1_event_EventHandle'$1_vesting_SetBeneficiaryEvent' {
    $1_event_EventHandle'$1_vesting_SetBeneficiaryEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_SetBeneficiaryEvent''_guid(s: $1_event_EventHandle'$1_vesting_SetBeneficiaryEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_vesting_SetBeneficiaryEvent' {
    $1_event_EventHandle'$1_vesting_SetBeneficiaryEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_vesting_SetBeneficiaryEvent''(s: $1_event_EventHandle'$1_vesting_SetBeneficiaryEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_vesting_SetBeneficiaryEvent''(s1: $1_event_EventHandle'$1_vesting_SetBeneficiaryEvent', s2: $1_event_EventHandle'$1_vesting_SetBeneficiaryEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<vesting::TerminateEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_vesting_TerminateEvent' {
    $1_event_EventHandle'$1_vesting_TerminateEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_TerminateEvent''_counter(s: $1_event_EventHandle'$1_vesting_TerminateEvent', x: int): $1_event_EventHandle'$1_vesting_TerminateEvent' {
    $1_event_EventHandle'$1_vesting_TerminateEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_TerminateEvent''_guid(s: $1_event_EventHandle'$1_vesting_TerminateEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_vesting_TerminateEvent' {
    $1_event_EventHandle'$1_vesting_TerminateEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_vesting_TerminateEvent''(s: $1_event_EventHandle'$1_vesting_TerminateEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_vesting_TerminateEvent''(s1: $1_event_EventHandle'$1_vesting_TerminateEvent', s2: $1_event_EventHandle'$1_vesting_TerminateEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<vesting::UnlockRewardsEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_vesting_UnlockRewardsEvent' {
    $1_event_EventHandle'$1_vesting_UnlockRewardsEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_UnlockRewardsEvent''_counter(s: $1_event_EventHandle'$1_vesting_UnlockRewardsEvent', x: int): $1_event_EventHandle'$1_vesting_UnlockRewardsEvent' {
    $1_event_EventHandle'$1_vesting_UnlockRewardsEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_UnlockRewardsEvent''_guid(s: $1_event_EventHandle'$1_vesting_UnlockRewardsEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_vesting_UnlockRewardsEvent' {
    $1_event_EventHandle'$1_vesting_UnlockRewardsEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_vesting_UnlockRewardsEvent''(s: $1_event_EventHandle'$1_vesting_UnlockRewardsEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_vesting_UnlockRewardsEvent''(s1: $1_event_EventHandle'$1_vesting_UnlockRewardsEvent', s2: $1_event_EventHandle'$1_vesting_UnlockRewardsEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<vesting::UpdateOperatorEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_vesting_UpdateOperatorEvent' {
    $1_event_EventHandle'$1_vesting_UpdateOperatorEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_UpdateOperatorEvent''_counter(s: $1_event_EventHandle'$1_vesting_UpdateOperatorEvent', x: int): $1_event_EventHandle'$1_vesting_UpdateOperatorEvent' {
    $1_event_EventHandle'$1_vesting_UpdateOperatorEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_UpdateOperatorEvent''_guid(s: $1_event_EventHandle'$1_vesting_UpdateOperatorEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_vesting_UpdateOperatorEvent' {
    $1_event_EventHandle'$1_vesting_UpdateOperatorEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_vesting_UpdateOperatorEvent''(s: $1_event_EventHandle'$1_vesting_UpdateOperatorEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_vesting_UpdateOperatorEvent''(s1: $1_event_EventHandle'$1_vesting_UpdateOperatorEvent', s2: $1_event_EventHandle'$1_vesting_UpdateOperatorEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<vesting::VestEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_vesting_VestEvent' {
    $1_event_EventHandle'$1_vesting_VestEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_VestEvent''_counter(s: $1_event_EventHandle'$1_vesting_VestEvent', x: int): $1_event_EventHandle'$1_vesting_VestEvent' {
    $1_event_EventHandle'$1_vesting_VestEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_VestEvent''_guid(s: $1_event_EventHandle'$1_vesting_VestEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_vesting_VestEvent' {
    $1_event_EventHandle'$1_vesting_VestEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_vesting_VestEvent''(s: $1_event_EventHandle'$1_vesting_VestEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_vesting_VestEvent''(s1: $1_event_EventHandle'$1_vesting_VestEvent', s2: $1_event_EventHandle'$1_vesting_VestEvent'): bool {
    s1 == s2
}

// fun event::new_event_handle<account::CoinRegisterEvent> [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:43:5+165
procedure {:inline 1} $1_event_new_event_handle'$1_account_CoinRegisterEvent'(_$t0: $1_guid_GUID) returns ($ret0: $1_event_EventHandle'$1_account_CoinRegisterEvent')
{
    // declare local variables
    var $t1: int;
    var $t2: $1_event_EventHandle'$1_account_CoinRegisterEvent';
    var $t0: $1_guid_GUID;
    var $temp_0'$1_event_EventHandle'$1_account_CoinRegisterEvent'': $1_event_EventHandle'$1_account_CoinRegisterEvent';
    var $temp_0'$1_guid_GUID': $1_guid_GUID;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[guid]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:43:5+1
    assume {:print "$at(121,1543,1544)"} true;
    assume {:print "$track_local(15,5,0):", $t0} $t0 == $t0;

    // $t1 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:45:22+1
    assume {:print "$at(121,1672,1673)"} true;
    $t1 := 0;
    assume $IsValid'u64'($t1);

    // $t2 := pack event::EventHandle<#0>($t1, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:44:9+68
    assume {:print "$at(121,1634,1702)"} true;
    $t2 := $1_event_EventHandle'$1_account_CoinRegisterEvent'($t1, $t0);

    // trace_return[0]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:44:9+68
    assume {:print "$track_return(15,5,0):", $t2} $t2 == $t2;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:48:5+1
    assume {:print "$at(121,1707,1708)"} true;
L1:

    // return $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:48:5+1
    assume {:print "$at(121,1707,1708)"} true;
    $ret0 := $t2;
    return;

}

// fun event::new_event_handle<account::KeyRotationEvent> [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:43:5+165
procedure {:inline 1} $1_event_new_event_handle'$1_account_KeyRotationEvent'(_$t0: $1_guid_GUID) returns ($ret0: $1_event_EventHandle'$1_account_KeyRotationEvent')
{
    // declare local variables
    var $t1: int;
    var $t2: $1_event_EventHandle'$1_account_KeyRotationEvent';
    var $t0: $1_guid_GUID;
    var $temp_0'$1_event_EventHandle'$1_account_KeyRotationEvent'': $1_event_EventHandle'$1_account_KeyRotationEvent';
    var $temp_0'$1_guid_GUID': $1_guid_GUID;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[guid]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:43:5+1
    assume {:print "$at(121,1543,1544)"} true;
    assume {:print "$track_local(15,5,0):", $t0} $t0 == $t0;

    // $t1 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:45:22+1
    assume {:print "$at(121,1672,1673)"} true;
    $t1 := 0;
    assume $IsValid'u64'($t1);

    // $t2 := pack event::EventHandle<#0>($t1, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:44:9+68
    assume {:print "$at(121,1634,1702)"} true;
    $t2 := $1_event_EventHandle'$1_account_KeyRotationEvent'($t1, $t0);

    // trace_return[0]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:44:9+68
    assume {:print "$track_return(15,5,0):", $t2} $t2 == $t2;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:48:5+1
    assume {:print "$at(121,1707,1708)"} true;
L1:

    // return $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:48:5+1
    assume {:print "$at(121,1707,1708)"} true;
    $ret0 := $t2;
    return;

}

// fun event::new_event_handle<coin::DepositEvent> [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:43:5+165
procedure {:inline 1} $1_event_new_event_handle'$1_coin_DepositEvent'(_$t0: $1_guid_GUID) returns ($ret0: $1_event_EventHandle'$1_coin_DepositEvent')
{
    // declare local variables
    var $t1: int;
    var $t2: $1_event_EventHandle'$1_coin_DepositEvent';
    var $t0: $1_guid_GUID;
    var $temp_0'$1_event_EventHandle'$1_coin_DepositEvent'': $1_event_EventHandle'$1_coin_DepositEvent';
    var $temp_0'$1_guid_GUID': $1_guid_GUID;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[guid]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:43:5+1
    assume {:print "$at(121,1543,1544)"} true;
    assume {:print "$track_local(15,5,0):", $t0} $t0 == $t0;

    // $t1 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:45:22+1
    assume {:print "$at(121,1672,1673)"} true;
    $t1 := 0;
    assume $IsValid'u64'($t1);

    // $t2 := pack event::EventHandle<#0>($t1, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:44:9+68
    assume {:print "$at(121,1634,1702)"} true;
    $t2 := $1_event_EventHandle'$1_coin_DepositEvent'($t1, $t0);

    // trace_return[0]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:44:9+68
    assume {:print "$track_return(15,5,0):", $t2} $t2 == $t2;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:48:5+1
    assume {:print "$at(121,1707,1708)"} true;
L1:

    // return $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:48:5+1
    assume {:print "$at(121,1707,1708)"} true;
    $ret0 := $t2;
    return;

}

// fun event::new_event_handle<coin::WithdrawEvent> [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:43:5+165
procedure {:inline 1} $1_event_new_event_handle'$1_coin_WithdrawEvent'(_$t0: $1_guid_GUID) returns ($ret0: $1_event_EventHandle'$1_coin_WithdrawEvent')
{
    // declare local variables
    var $t1: int;
    var $t2: $1_event_EventHandle'$1_coin_WithdrawEvent';
    var $t0: $1_guid_GUID;
    var $temp_0'$1_event_EventHandle'$1_coin_WithdrawEvent'': $1_event_EventHandle'$1_coin_WithdrawEvent';
    var $temp_0'$1_guid_GUID': $1_guid_GUID;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[guid]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:43:5+1
    assume {:print "$at(121,1543,1544)"} true;
    assume {:print "$track_local(15,5,0):", $t0} $t0 == $t0;

    // $t1 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:45:22+1
    assume {:print "$at(121,1672,1673)"} true;
    $t1 := 0;
    assume $IsValid'u64'($t1);

    // $t2 := pack event::EventHandle<#0>($t1, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:44:9+68
    assume {:print "$at(121,1634,1702)"} true;
    $t2 := $1_event_EventHandle'$1_coin_WithdrawEvent'($t1, $t0);

    // trace_return[0]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:44:9+68
    assume {:print "$track_return(15,5,0):", $t2} $t2 == $t2;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:48:5+1
    assume {:print "$at(121,1707,1708)"} true;
L1:

    // return $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:48:5+1
    assume {:print "$at(121,1707,1708)"} true;
    $ret0 := $t2;
    return;

}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:231:5+79
function {:inline} $1_account_$exists_at($1_account_Account_$memory: $Memory $1_account_Account, addr: int): bool {
    $ResourceExists($1_account_Account_$memory, addr)
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.spec.move:447:10+77
function  $1_account_spec_create_resource_address(source: int, seed: Vec (int)): int;
axiom (forall source: int, seed: Vec (int) ::
(var $$res := $1_account_spec_create_resource_address(source, seed);
$IsValid'address'($$res)));

// struct account::Account at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:27:5+401
datatype $1_account_Account {
    $1_account_Account($authentication_key: Vec (int), $sequence_number: int, $guid_creation_num: int, $coin_register_events: $1_event_EventHandle'$1_account_CoinRegisterEvent', $key_rotation_events: $1_event_EventHandle'$1_account_KeyRotationEvent', $rotation_capability_offer: $1_account_CapabilityOffer'$1_account_RotationCapability', $signer_capability_offer: $1_account_CapabilityOffer'$1_account_SignerCapability')
}
function {:inline} $Update'$1_account_Account'_authentication_key(s: $1_account_Account, x: Vec (int)): $1_account_Account {
    $1_account_Account(x, s->$sequence_number, s->$guid_creation_num, s->$coin_register_events, s->$key_rotation_events, s->$rotation_capability_offer, s->$signer_capability_offer)
}
function {:inline} $Update'$1_account_Account'_sequence_number(s: $1_account_Account, x: int): $1_account_Account {
    $1_account_Account(s->$authentication_key, x, s->$guid_creation_num, s->$coin_register_events, s->$key_rotation_events, s->$rotation_capability_offer, s->$signer_capability_offer)
}
function {:inline} $Update'$1_account_Account'_guid_creation_num(s: $1_account_Account, x: int): $1_account_Account {
    $1_account_Account(s->$authentication_key, s->$sequence_number, x, s->$coin_register_events, s->$key_rotation_events, s->$rotation_capability_offer, s->$signer_capability_offer)
}
function {:inline} $Update'$1_account_Account'_coin_register_events(s: $1_account_Account, x: $1_event_EventHandle'$1_account_CoinRegisterEvent'): $1_account_Account {
    $1_account_Account(s->$authentication_key, s->$sequence_number, s->$guid_creation_num, x, s->$key_rotation_events, s->$rotation_capability_offer, s->$signer_capability_offer)
}
function {:inline} $Update'$1_account_Account'_key_rotation_events(s: $1_account_Account, x: $1_event_EventHandle'$1_account_KeyRotationEvent'): $1_account_Account {
    $1_account_Account(s->$authentication_key, s->$sequence_number, s->$guid_creation_num, s->$coin_register_events, x, s->$rotation_capability_offer, s->$signer_capability_offer)
}
function {:inline} $Update'$1_account_Account'_rotation_capability_offer(s: $1_account_Account, x: $1_account_CapabilityOffer'$1_account_RotationCapability'): $1_account_Account {
    $1_account_Account(s->$authentication_key, s->$sequence_number, s->$guid_creation_num, s->$coin_register_events, s->$key_rotation_events, x, s->$signer_capability_offer)
}
function {:inline} $Update'$1_account_Account'_signer_capability_offer(s: $1_account_Account, x: $1_account_CapabilityOffer'$1_account_SignerCapability'): $1_account_Account {
    $1_account_Account(s->$authentication_key, s->$sequence_number, s->$guid_creation_num, s->$coin_register_events, s->$key_rotation_events, s->$rotation_capability_offer, x)
}
function $IsValid'$1_account_Account'(s: $1_account_Account): bool {
    $IsValid'vec'u8''(s->$authentication_key)
      && $IsValid'u64'(s->$sequence_number)
      && $IsValid'u64'(s->$guid_creation_num)
      && $IsValid'$1_event_EventHandle'$1_account_CoinRegisterEvent''(s->$coin_register_events)
      && $IsValid'$1_event_EventHandle'$1_account_KeyRotationEvent''(s->$key_rotation_events)
      && $IsValid'$1_account_CapabilityOffer'$1_account_RotationCapability''(s->$rotation_capability_offer)
      && $IsValid'$1_account_CapabilityOffer'$1_account_SignerCapability''(s->$signer_capability_offer)
}
function {:inline} $IsEqual'$1_account_Account'(s1: $1_account_Account, s2: $1_account_Account): bool {
    $IsEqual'vec'u8''(s1->$authentication_key, s2->$authentication_key)
    && $IsEqual'u64'(s1->$sequence_number, s2->$sequence_number)
    && $IsEqual'u64'(s1->$guid_creation_num, s2->$guid_creation_num)
    && $IsEqual'$1_event_EventHandle'$1_account_CoinRegisterEvent''(s1->$coin_register_events, s2->$coin_register_events)
    && $IsEqual'$1_event_EventHandle'$1_account_KeyRotationEvent''(s1->$key_rotation_events, s2->$key_rotation_events)
    && $IsEqual'$1_account_CapabilityOffer'$1_account_RotationCapability''(s1->$rotation_capability_offer, s2->$rotation_capability_offer)
    && $IsEqual'$1_account_CapabilityOffer'$1_account_SignerCapability''(s1->$signer_capability_offer, s2->$signer_capability_offer)}
var $1_account_Account_$memory: $Memory $1_account_Account;

// struct account::CapabilityOffer<account::RotationCapability> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:46:5+68
datatype $1_account_CapabilityOffer'$1_account_RotationCapability' {
    $1_account_CapabilityOffer'$1_account_RotationCapability'($for: $1_option_Option'address')
}
function {:inline} $Update'$1_account_CapabilityOffer'$1_account_RotationCapability''_for(s: $1_account_CapabilityOffer'$1_account_RotationCapability', x: $1_option_Option'address'): $1_account_CapabilityOffer'$1_account_RotationCapability' {
    $1_account_CapabilityOffer'$1_account_RotationCapability'(x)
}
function $IsValid'$1_account_CapabilityOffer'$1_account_RotationCapability''(s: $1_account_CapabilityOffer'$1_account_RotationCapability'): bool {
    $IsValid'$1_option_Option'address''(s->$for)
}
function {:inline} $IsEqual'$1_account_CapabilityOffer'$1_account_RotationCapability''(s1: $1_account_CapabilityOffer'$1_account_RotationCapability', s2: $1_account_CapabilityOffer'$1_account_RotationCapability'): bool {
    $IsEqual'$1_option_Option'address''(s1->$for, s2->$for)}

// struct account::CapabilityOffer<account::SignerCapability> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:46:5+68
datatype $1_account_CapabilityOffer'$1_account_SignerCapability' {
    $1_account_CapabilityOffer'$1_account_SignerCapability'($for: $1_option_Option'address')
}
function {:inline} $Update'$1_account_CapabilityOffer'$1_account_SignerCapability''_for(s: $1_account_CapabilityOffer'$1_account_SignerCapability', x: $1_option_Option'address'): $1_account_CapabilityOffer'$1_account_SignerCapability' {
    $1_account_CapabilityOffer'$1_account_SignerCapability'(x)
}
function $IsValid'$1_account_CapabilityOffer'$1_account_SignerCapability''(s: $1_account_CapabilityOffer'$1_account_SignerCapability'): bool {
    $IsValid'$1_option_Option'address''(s->$for)
}
function {:inline} $IsEqual'$1_account_CapabilityOffer'$1_account_SignerCapability''(s1: $1_account_CapabilityOffer'$1_account_SignerCapability', s2: $1_account_CapabilityOffer'$1_account_SignerCapability'): bool {
    $IsEqual'$1_option_Option'address''(s1->$for, s2->$for)}

// struct account::CoinRegisterEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:42:5+77
datatype $1_account_CoinRegisterEvent {
    $1_account_CoinRegisterEvent($type_info: $1_type_info_TypeInfo)
}
function {:inline} $Update'$1_account_CoinRegisterEvent'_type_info(s: $1_account_CoinRegisterEvent, x: $1_type_info_TypeInfo): $1_account_CoinRegisterEvent {
    $1_account_CoinRegisterEvent(x)
}
function $IsValid'$1_account_CoinRegisterEvent'(s: $1_account_CoinRegisterEvent): bool {
    $IsValid'$1_type_info_TypeInfo'(s->$type_info)
}
function {:inline} $IsEqual'$1_account_CoinRegisterEvent'(s1: $1_account_CoinRegisterEvent, s2: $1_account_CoinRegisterEvent): bool {
    $IsEqual'$1_type_info_TypeInfo'(s1->$type_info, s2->$type_info)}

// struct account::KeyRotationEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:37:5+135
datatype $1_account_KeyRotationEvent {
    $1_account_KeyRotationEvent($old_authentication_key: Vec (int), $new_authentication_key: Vec (int))
}
function {:inline} $Update'$1_account_KeyRotationEvent'_old_authentication_key(s: $1_account_KeyRotationEvent, x: Vec (int)): $1_account_KeyRotationEvent {
    $1_account_KeyRotationEvent(x, s->$new_authentication_key)
}
function {:inline} $Update'$1_account_KeyRotationEvent'_new_authentication_key(s: $1_account_KeyRotationEvent, x: Vec (int)): $1_account_KeyRotationEvent {
    $1_account_KeyRotationEvent(s->$old_authentication_key, x)
}
function $IsValid'$1_account_KeyRotationEvent'(s: $1_account_KeyRotationEvent): bool {
    $IsValid'vec'u8''(s->$old_authentication_key)
      && $IsValid'vec'u8''(s->$new_authentication_key)
}
function {:inline} $IsEqual'$1_account_KeyRotationEvent'(s1: $1_account_KeyRotationEvent, s2: $1_account_KeyRotationEvent): bool {
    $IsEqual'vec'u8''(s1->$old_authentication_key, s2->$old_authentication_key)
    && $IsEqual'vec'u8''(s1->$new_authentication_key, s2->$new_authentication_key)}

// struct account::RotationCapability at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:48:5+62
datatype $1_account_RotationCapability {
    $1_account_RotationCapability($account: int)
}
function {:inline} $Update'$1_account_RotationCapability'_account(s: $1_account_RotationCapability, x: int): $1_account_RotationCapability {
    $1_account_RotationCapability(x)
}
function $IsValid'$1_account_RotationCapability'(s: $1_account_RotationCapability): bool {
    $IsValid'address'(s->$account)
}
function {:inline} $IsEqual'$1_account_RotationCapability'(s1: $1_account_RotationCapability, s2: $1_account_RotationCapability): bool {
    s1 == s2
}

// struct account::SignerCapability at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:50:5+60
datatype $1_account_SignerCapability {
    $1_account_SignerCapability($account: int)
}
function {:inline} $Update'$1_account_SignerCapability'_account(s: $1_account_SignerCapability, x: int): $1_account_SignerCapability {
    $1_account_SignerCapability(x)
}
function $IsValid'$1_account_SignerCapability'(s: $1_account_SignerCapability): bool {
    $IsValid'address'(s->$account)
}
function {:inline} $IsEqual'$1_account_SignerCapability'(s1: $1_account_SignerCapability, s2: $1_account_SignerCapability): bool {
    s1 == s2
}

// fun account::new_event_handle<coin::DepositEvent> [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:697:5+157
procedure {:inline 1} $1_account_new_event_handle'$1_coin_DepositEvent'(_$t0: $signer) returns ($ret0: $1_event_EventHandle'$1_coin_DepositEvent')
{
    // declare local variables
    var $t1: int;
    var $t2: $1_account_Account;
    var $t3: int;
    var $t4: int;
    var $t5: $1_account_Account;
    var $t6: $1_guid_GUID;
    var $t7: int;
    var $t8: $1_event_EventHandle'$1_coin_DepositEvent';
    var $t0: $signer;
    var $temp_0'$1_event_EventHandle'$1_coin_DepositEvent'': $1_event_EventHandle'$1_coin_DepositEvent';
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t1, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.spec.move:504:9+39
    assume {:print "$at(82,24284,24323)"} true;
    assume ($t1 == $1_signer_$address_of($t0));

    // assume Identical($t2, global<account::Account>($t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.spec.move:505:9+36
    assume {:print "$at(82,24332,24368)"} true;
    assume ($t2 == $ResourceValue($1_account_Account_$memory, $t1));

    // trace_local[account]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:697:5+1
    assume {:print "$at(81,39402,39403)"} true;
    assume {:print "$track_local(18,21,0):", $t0} $t0 == $t0;

    // assume Identical($t3, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.spec.move:489:9+46
    assume {:print "$at(82,23683,23729)"} true;
    assume ($t3 == $1_signer_$address_of($t0));

    // assume Identical($t4, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.spec.move:504:9+39
    assume {:print "$at(82,24284,24323)"} true;
    assume ($t4 == $1_signer_$address_of($t0));

    // assume Identical($t5, global<account::Account>($t4)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.spec.move:505:9+36
    assume {:print "$at(82,24332,24368)"} true;
    assume ($t5 == $ResourceValue($1_account_Account_$memory, $t4));

    // $t6 := account::create_guid($t0) on_abort goto L2 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:698:33+20
    assume {:print "$at(81,39532,39552)"} true;
    call $t6 := $1_account_create_guid($t0);
    if ($abort_flag) {
        assume {:print "$at(81,39532,39552)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(18,21):", $t7} $t7 == $t7;
        goto L2;
    }

    // $t8 := event::new_event_handle<#0>($t6) on_abort goto L2 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:698:9+45
    call $t8 := $1_event_new_event_handle'$1_coin_DepositEvent'($t6);
    if ($abort_flag) {
        assume {:print "$at(81,39508,39553)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(18,21):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_return[0]($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:698:9+45
    assume {:print "$track_return(18,21,0):", $t8} $t8 == $t8;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:699:5+1
    assume {:print "$at(81,39558,39559)"} true;
L1:

    // return $t8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:699:5+1
    assume {:print "$at(81,39558,39559)"} true;
    $ret0 := $t8;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:699:5+1
L2:

    // abort($t7) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:699:5+1
    assume {:print "$at(81,39558,39559)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun account::new_event_handle<coin::WithdrawEvent> [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:697:5+157
procedure {:inline 1} $1_account_new_event_handle'$1_coin_WithdrawEvent'(_$t0: $signer) returns ($ret0: $1_event_EventHandle'$1_coin_WithdrawEvent')
{
    // declare local variables
    var $t1: int;
    var $t2: $1_account_Account;
    var $t3: int;
    var $t4: int;
    var $t5: $1_account_Account;
    var $t6: $1_guid_GUID;
    var $t7: int;
    var $t8: $1_event_EventHandle'$1_coin_WithdrawEvent';
    var $t0: $signer;
    var $temp_0'$1_event_EventHandle'$1_coin_WithdrawEvent'': $1_event_EventHandle'$1_coin_WithdrawEvent';
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t1, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.spec.move:504:9+39
    assume {:print "$at(82,24284,24323)"} true;
    assume ($t1 == $1_signer_$address_of($t0));

    // assume Identical($t2, global<account::Account>($t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.spec.move:505:9+36
    assume {:print "$at(82,24332,24368)"} true;
    assume ($t2 == $ResourceValue($1_account_Account_$memory, $t1));

    // trace_local[account]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:697:5+1
    assume {:print "$at(81,39402,39403)"} true;
    assume {:print "$track_local(18,21,0):", $t0} $t0 == $t0;

    // assume Identical($t3, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.spec.move:489:9+46
    assume {:print "$at(82,23683,23729)"} true;
    assume ($t3 == $1_signer_$address_of($t0));

    // assume Identical($t4, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.spec.move:504:9+39
    assume {:print "$at(82,24284,24323)"} true;
    assume ($t4 == $1_signer_$address_of($t0));

    // assume Identical($t5, global<account::Account>($t4)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.spec.move:505:9+36
    assume {:print "$at(82,24332,24368)"} true;
    assume ($t5 == $ResourceValue($1_account_Account_$memory, $t4));

    // $t6 := account::create_guid($t0) on_abort goto L2 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:698:33+20
    assume {:print "$at(81,39532,39552)"} true;
    call $t6 := $1_account_create_guid($t0);
    if ($abort_flag) {
        assume {:print "$at(81,39532,39552)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(18,21):", $t7} $t7 == $t7;
        goto L2;
    }

    // $t8 := event::new_event_handle<#0>($t6) on_abort goto L2 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:698:9+45
    call $t8 := $1_event_new_event_handle'$1_coin_WithdrawEvent'($t6);
    if ($abort_flag) {
        assume {:print "$at(81,39508,39553)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(18,21):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_return[0]($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:698:9+45
    assume {:print "$track_return(18,21,0):", $t8} $t8 == $t8;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:699:5+1
    assume {:print "$at(81,39558,39559)"} true;
L1:

    // return $t8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:699:5+1
    assume {:print "$at(81,39558,39559)"} true;
    $ret0 := $t8;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:699:5+1
L2:

    // abort($t7) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:699:5+1
    assume {:print "$at(81,39558,39559)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun account::create_account_unchecked [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:198:5+1182
procedure {:inline 1} $1_account_create_account_unchecked(_$t0: int) returns ($ret0: $signer)
{
    // declare local variables
    var $t1: Vec (int);
    var $t2: $1_event_EventHandle'$1_account_CoinRegisterEvent';
    var $t3: int;
    var $t4: $1_event_EventHandle'$1_account_KeyRotationEvent';
    var $t5: $signer;
    var $t6: Vec (int);
    var $t7: $signer;
    var $t8: Vec (int);
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: $Mutation (int);
    var $t17: $1_guid_GUID;
    var $t18: $1_event_EventHandle'$1_account_CoinRegisterEvent';
    var $t19: $Mutation (int);
    var $t20: $1_guid_GUID;
    var $t21: $1_event_EventHandle'$1_account_KeyRotationEvent';
    var $t22: int;
    var $t23: int;
    var $t24: $1_option_Option'address';
    var $t25: $1_account_CapabilityOffer'$1_account_RotationCapability';
    var $t26: $1_option_Option'address';
    var $t27: $1_account_CapabilityOffer'$1_account_SignerCapability';
    var $t28: $1_account_Account;
    var $t0: int;
    var $temp_0'$1_event_EventHandle'$1_account_CoinRegisterEvent'': $1_event_EventHandle'$1_account_CoinRegisterEvent';
    var $temp_0'$1_event_EventHandle'$1_account_KeyRotationEvent'': $1_event_EventHandle'$1_account_KeyRotationEvent';
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t6, bcs::$to_bytes<address>($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.spec.move:54:9+45
    assume {:print "$at(82,2155,2200)"} true;
    assume ($t6 == $1_bcs_$to_bytes'address'($t0));

    // trace_local[new_address]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:198:5+1
    assume {:print "$at(81,10394,10395)"} true;
    assume {:print "$track_local(18,3,0):", $t0} $t0 == $t0;

    // $t7 := opaque begin: create_signer::create_signer($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:199:27+26
    assume {:print "$at(81,10481,10507)"} true;

    // assume WellFormed($t7) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:199:27+26
    assume $IsValid'signer'($t7) && $1_signer_is_txn_signer($t7) && $1_signer_is_txn_signer_addr($t7->$addr);

    // assume Eq<address>(signer::$address_of($t7), $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:199:27+26
    assume $IsEqual'address'($1_signer_$address_of($t7), $t0);

    // $t7 := opaque end: create_signer::create_signer($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:199:27+26

    // trace_local[new_account]($t7) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:199:13+11
    assume {:print "$track_local(18,3,5):", $t7} $t7 == $t7;

    // $t8 := bcs::to_bytes<address>($t0) on_abort goto L4 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:200:34+27
    assume {:print "$at(81,10542,10569)"} true;
    call $t8 := $1_bcs_to_bytes'address'($t0);
    if ($abort_flag) {
        assume {:print "$at(81,10542,10569)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(18,3):", $t9} $t9 == $t9;
        goto L4;
    }

    // trace_local[authentication_key]($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:200:13+18
    assume {:print "$track_local(18,3,1):", $t8} $t8 == $t8;

    // $t10 := vector::length<u8>($t8) on_abort goto L4 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:202:13+35
    assume {:print "$at(81,10600,10635)"} true;
    call $t10 := $1_vector_length'u8'($t8);
    if ($abort_flag) {
        assume {:print "$at(81,10600,10635)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(18,3):", $t9} $t9 == $t9;
        goto L4;
    }

    // $t11 := 32 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:202:52+2
    $t11 := 32;
    assume $IsValid'u64'($t11);

    // $t12 := ==($t10, $t11) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:202:49+2
    $t12 := $IsEqual'u64'($t10, $t11);

    // if ($t12) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:201:9+140
    assume {:print "$at(81,10579,10719)"} true;
    if ($t12) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:201:9+140
L1:

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:201:9+140
    assume {:print "$at(81,10579,10719)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:203:37+29
    assume {:print "$at(81,10679,10708)"} true;
L0:

    // $t13 := 4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:203:37+29
    assume {:print "$at(81,10679,10708)"} true;
    $t13 := 4;
    assume $IsValid'u64'($t13);

    // $t14 := error::invalid_argument($t13) on_abort goto L4 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:203:13+54
    call $t14 := $1_error_invalid_argument($t13);
    if ($abort_flag) {
        assume {:print "$at(81,10655,10709)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(18,3):", $t9} $t9 == $t9;
        goto L4;
    }

    // trace_abort($t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:201:9+140
    assume {:print "$at(81,10579,10719)"} true;
    assume {:print "$track_abort(18,3):", $t14} $t14 == $t14;

    // $t9 := move($t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:201:9+140
    $t9 := $t14;

    // goto L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:201:9+140
    goto L4;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:206:33+1
    assume {:print "$at(81,10754,10755)"} true;
L2:

    // $t15 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:206:33+1
    assume {:print "$at(81,10754,10755)"} true;
    $t15 := 0;
    assume $IsValid'u64'($t15);

    // $t3 := $t15 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:206:13+17
    $t3 := $t15;

    // trace_local[guid_creation_num]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:206:13+17
    assume {:print "$track_local(18,3,3):", $t3} $t3 == $t3;

    // $t16 := borrow_local($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:208:55+22
    assume {:print "$at(81,10812,10834)"} true;
    $t16 := $Mutation($Local(3), EmptyVec(), $t3);

    // $t17 := guid::create($t0, $t16) on_abort goto L4 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:208:29+49
    call $t17,$t16 := $1_guid_create($t0, $t16);
    if ($abort_flag) {
        assume {:print "$at(81,10786,10835)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(18,3):", $t9} $t9 == $t9;
        goto L4;
    }

    // write_back[LocalRoot($t3)@]($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:208:29+49
    $t3 := $Dereference($t16);

    // trace_local[guid_creation_num]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:208:29+49
    assume {:print "$track_local(18,3,3):", $t3} $t3 == $t3;

    // $t18 := event::new_event_handle<account::CoinRegisterEvent>($t17) on_abort goto L4 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:209:36+57
    assume {:print "$at(81,10872,10929)"} true;
    call $t18 := $1_event_new_event_handle'$1_account_CoinRegisterEvent'($t17);
    if ($abort_flag) {
        assume {:print "$at(81,10872,10929)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(18,3):", $t9} $t9 == $t9;
        goto L4;
    }

    // trace_local[coin_register_events]($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:209:13+20
    assume {:print "$track_local(18,3,2):", $t18} $t18 == $t18;

    // $t19 := borrow_local($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:211:59+22
    assume {:print "$at(81,10990,11012)"} true;
    $t19 := $Mutation($Local(3), EmptyVec(), $t3);

    // $t20 := guid::create($t0, $t19) on_abort goto L4 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:211:33+49
    call $t20,$t19 := $1_guid_create($t0, $t19);
    if ($abort_flag) {
        assume {:print "$at(81,10964,11013)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(18,3):", $t9} $t9 == $t9;
        goto L4;
    }

    // write_back[LocalRoot($t3)@]($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:211:33+49
    $t3 := $Dereference($t19);

    // trace_local[guid_creation_num]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:211:33+49
    assume {:print "$track_local(18,3,3):", $t3} $t3 == $t3;

    // $t21 := event::new_event_handle<account::KeyRotationEvent>($t20) on_abort goto L4 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:212:35+60
    assume {:print "$at(81,11049,11109)"} true;
    call $t21 := $1_event_new_event_handle'$1_account_KeyRotationEvent'($t20);
    if ($abort_flag) {
        assume {:print "$at(81,11049,11109)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(18,3):", $t9} $t9 == $t9;
        goto L4;
    }

    // trace_local[key_rotation_events]($t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:212:13+19
    assume {:print "$track_local(18,3,4):", $t21} $t21 == $t21;

    // $t22 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:218:34+1
    assume {:print "$at(81,11246,11247)"} true;
    $t22 := 0;
    assume $IsValid'u64'($t22);

    // $t23 := move($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:219:17+17
    assume {:print "$at(81,11265,11282)"} true;
    $t23 := $t3;

    // $t24 := opaque begin: option::none<address>() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:222:67+14
    assume {:print "$at(81,11425,11439)"} true;

    // assume And(WellFormed($t24), Le(Len<address>(select option::Option.vec($t24)), 1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:222:67+14
    assume ($IsValid'$1_option_Option'address''($t24) && (LenVec($t24->$vec) <= 1));

    // assume Eq<option::Option<address>>($t24, option::spec_none<address>()) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:222:67+14
    assume $IsEqual'$1_option_Option'address''($t24, $1_option_spec_none'address'());

    // $t24 := opaque end: option::none<address>() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:222:67+14

    // $t25 := pack account::CapabilityOffer<account::RotationCapability>($t24) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:222:44+39
    $t25 := $1_account_CapabilityOffer'$1_account_RotationCapability'($t24);

    // $t26 := opaque begin: option::none<address>() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:223:65+14
    assume {:print "$at(81,11507,11521)"} true;

    // assume And(WellFormed($t26), Le(Len<address>(select option::Option.vec($t26)), 1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:223:65+14
    assume ($IsValid'$1_option_Option'address''($t26) && (LenVec($t26->$vec) <= 1));

    // assume Eq<option::Option<address>>($t26, option::spec_none<address>()) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:223:65+14
    assume $IsEqual'$1_option_Option'address''($t26, $1_option_spec_none'address'());

    // $t26 := opaque end: option::none<address>() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:223:65+14

    // $t27 := pack account::CapabilityOffer<account::SignerCapability>($t26) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:223:42+39
    $t27 := $1_account_CapabilityOffer'$1_account_SignerCapability'($t26);

    // $t28 := pack account::Account($t8, $t22, $t23, $t18, $t21, $t25, $t27) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:216:13+371
    assume {:print "$at(81,11167,11538)"} true;
    $t28 := $1_account_Account($t8, $t22, $t23, $t18, $t21, $t25, $t27);

    // move_to<account::Account>($t28, $t7) on_abort goto L4 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:214:9+7
    assume {:print "$at(81,11120,11127)"} true;
    if ($ResourceExists($1_account_Account_$memory, $t7->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_account_Account_$memory := $ResourceUpdate($1_account_Account_$memory, $t7->$addr, $t28);
    }
    if ($abort_flag) {
        assume {:print "$at(81,11120,11127)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(18,3):", $t9} $t9 == $t9;
        goto L4;
    }

    // trace_return[0]($t7) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:227:9+11
    assume {:print "$at(81,11559,11570)"} true;
    assume {:print "$track_return(18,3,0):", $t7} $t7 == $t7;

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:228:5+1
    assume {:print "$at(81,11575,11576)"} true;
L3:

    // return $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:228:5+1
    assume {:print "$at(81,11575,11576)"} true;
    $ret0 := $t7;
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:228:5+1
L4:

    // abort($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:228:5+1
    assume {:print "$at(81,11575,11576)"} true;
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun account::create_guid [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:682:5+436
procedure {:inline 1} $1_account_create_guid(_$t0: $signer) returns ($ret0: $1_guid_GUID)
{
    // declare local variables
    var $t1: $Mutation ($1_account_Account);
    var $t2: int;
    var $t3: $1_guid_GUID;
    var $t4: int;
    var $t5: int;
    var $t6: $1_account_Account;
    var $t7: int;
    var $t8: int;
    var $t9: $Mutation ($1_account_Account);
    var $t10: $Mutation (int);
    var $t11: $1_guid_GUID;
    var $t12: int;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t0: $signer;
    var $1_account_Account_$modifies: [int]bool;
    var $temp_0'$1_account_Account': $1_account_Account;
    var $temp_0'$1_guid_GUID': $1_guid_GUID;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t4, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.spec.move:489:9+46
    assume {:print "$at(82,23683,23729)"} true;
    assume ($t4 == $1_signer_$address_of($t0));

    // assume Identical($t5, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.spec.move:504:9+39
    assume {:print "$at(82,24284,24323)"} true;
    assume ($t5 == $1_signer_$address_of($t0));

    // assume Identical($t6, global<account::Account>($t5)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.spec.move:505:9+36
    assume {:print "$at(82,24332,24368)"} true;
    assume ($t6 == $ResourceValue($1_account_Account_$memory, $t5));

    // trace_local[account_signer]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:682:5+1
    assume {:print "$at(81,38766,38767)"} true;
    assume {:print "$track_local(18,6,0):", $t0} $t0 == $t0;

    // $t7 := signer::address_of($t0) on_abort goto L4 with $t8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:683:20+34
    assume {:print "$at(81,38864,38898)"} true;
    call $t7 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(81,38864,38898)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(18,6):", $t8} $t8 == $t8;
        goto L4;
    }

    // trace_local[addr]($t7) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:683:13+4
    assume {:print "$track_local(18,6,2):", $t7} $t7 == $t7;

    // $t9 := borrow_global<account::Account>($t7) on_abort goto L4 with $t8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:684:23+17
    assume {:print "$at(81,38922,38939)"} true;
    if (!$ResourceExists($1_account_Account_$memory, $t7)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $Mutation($Global($t7), EmptyVec(), $ResourceValue($1_account_Account_$memory, $t7));
    }
    if ($abort_flag) {
        assume {:print "$at(81,38922,38939)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(18,6):", $t8} $t8 == $t8;
        goto L4;
    }

    // trace_local[account]($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:684:13+7
    $temp_0'$1_account_Account' := $Dereference($t9);
    assume {:print "$track_local(18,6,1):", $temp_0'$1_account_Account'} $temp_0'$1_account_Account' == $temp_0'$1_account_Account';

    // $t10 := borrow_field<account::Account>.guid_creation_num($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:685:39+30
    assume {:print "$at(81,38994,39024)"} true;
    $t10 := $ChildMutation($t9, 2, $Dereference($t9)->$guid_creation_num);

    // $t11 := guid::create($t7, $t10) on_abort goto L4 with $t8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:685:20+50
    call $t11,$t10 := $1_guid_create($t7, $t10);
    if ($abort_flag) {
        assume {:print "$at(81,38975,39025)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(18,6):", $t8} $t8 == $t8;
        goto L4;
    }

    // write_back[Reference($t9).guid_creation_num (u64)]($t10) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:685:20+50
    $t9 := $UpdateMutation($t9, $Update'$1_account_Account'_guid_creation_num($Dereference($t9), $Dereference($t10)));

    // trace_local[guid]($t11) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:685:13+4
    assume {:print "$track_local(18,6,3):", $t11} $t11 == $t11;

    // $t12 := get_field<account::Account>.guid_creation_num($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:687:13+25
    assume {:print "$at(81,39056,39081)"} true;
    $t12 := $Dereference($t9)->$guid_creation_num;

    // pack_ref_deep($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:687:13+25

    // write_back[account::Account@]($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:687:13+25
    $1_account_Account_$memory := $ResourceUpdate($1_account_Account_$memory, $GlobalLocationAddress($t9),
        $Dereference($t9));

    // $t13 := 1125899906842624 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:687:41+21
    $t13 := 1125899906842624;
    assume $IsValid'u64'($t13);

    // $t14 := <($t12, $t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:687:39+1
    call $t14 := $Lt($t12, $t13);

    // if ($t14) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:686:9+147
    assume {:print "$at(81,39035,39182)"} true;
    if ($t14) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:686:9+147
L1:

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:686:9+147
    assume {:print "$at(81,39035,39182)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:688:33+31
    assume {:print "$at(81,39139,39170)"} true;
L0:

    // $t15 := 20 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:688:33+31
    assume {:print "$at(81,39139,39170)"} true;
    $t15 := 20;
    assume $IsValid'u64'($t15);

    // $t16 := error::out_of_range($t15) on_abort goto L4 with $t8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:688:13+52
    call $t16 := $1_error_out_of_range($t15);
    if ($abort_flag) {
        assume {:print "$at(81,39119,39171)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(18,6):", $t8} $t8 == $t8;
        goto L4;
    }

    // trace_abort($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:686:9+147
    assume {:print "$at(81,39035,39182)"} true;
    assume {:print "$track_abort(18,6):", $t16} $t16 == $t16;

    // $t8 := move($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:686:9+147
    $t8 := $t16;

    // goto L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:686:9+147
    goto L4;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:690:9+4
    assume {:print "$at(81,39192,39196)"} true;
L2:

    // trace_return[0]($t11) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:690:9+4
    assume {:print "$at(81,39192,39196)"} true;
    assume {:print "$track_return(18,6,0):", $t11} $t11 == $t11;

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:691:5+1
    assume {:print "$at(81,39201,39202)"} true;
L3:

    // return $t11 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:691:5+1
    assume {:print "$at(81,39201,39202)"} true;
    $ret0 := $t11;
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:691:5+1
L4:

    // abort($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:691:5+1
    assume {:print "$at(81,39201,39202)"} true;
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun account::create_resource_account [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:630:5+1378
procedure {:inline 1} $1_account_create_resource_account(_$t0: $signer, _$t1: Vec (int)) returns ($ret0: $signer, $ret1: $1_account_SignerCapability)
{
    // declare local variables
    var $t2: int;
    var $t3: $signer;
    var $t4: $1_account_Account;
    var $t5: $Mutation ($1_account_Account);
    var $t6: $signer;
    var $t7: int;
    var $t8: $1_account_SignerCapability;
    var $t9: int;
    var $t10: int;
    var $t11: $1_account_Account;
    var $t12: Vec (int);
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: $1_account_Account;
    var $t18: $1_account_CapabilityOffer'$1_account_SignerCapability';
    var $t19: $1_option_Option'address';
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: bool;
    var $t26: int;
    var $t27: int;
    var $t28: Vec (int);
    var $t29: Vec (int);
    var $t30: int;
    var $t31: $Mutation ($1_account_Account);
    var $t32: $1_option_Option'address';
    var $t33: $Mutation ($1_account_CapabilityOffer'$1_account_SignerCapability');
    var $t34: $Mutation ($1_option_Option'address');
    var $t35: $1_account_SignerCapability;
    var $t0: $signer;
    var $t1: Vec (int);
    var $temp_0'$1_account_Account': $1_account_Account;
    var $temp_0'$1_account_SignerCapability': $1_account_SignerCapability;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t9, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.spec.move:450:9+45
    assume {:print "$at(82,22000,22045)"} true;
    assume ($t9 == $1_signer_$address_of($t0));

    // assume Identical($t10, account::spec_create_resource_address($t9, $t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.spec.move:451:9+68
    assume {:print "$at(82,22054,22122)"} true;
    assume ($t10 == $1_account_spec_create_resource_address($t9, $t1));

    // assume Identical($t11, global<account::Account>($t10)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.spec.move:524:9+45
    assume {:print "$at(82,25038,25083)"} true;
    assume ($t11 == $ResourceValue($1_account_Account_$memory, $t10));

    // assume Identical($t12, bcs::$to_bytes<address>($t10)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.spec.move:54:9+45
    assume {:print "$at(82,2155,2200)"} true;
    assume ($t12 == $1_bcs_$to_bytes'address'($t10));

    // trace_local[source]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:630:5+1
    assume {:print "$at(81,36461,36462)"} true;
    assume {:print "$track_local(18,7,0):", $t0} $t0 == $t0;

    // trace_local[seed]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:630:5+1
    assume {:print "$track_local(18,7,1):", $t1} $t1 == $t1;

    // $t13 := signer::address_of($t0) on_abort goto L10 with $t14 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:631:54+26
    assume {:print "$at(81,36631,36657)"} true;
    call $t13 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(81,36631,36657)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(18,7):", $t14} $t14 == $t14;
        goto L10;
    }

    // $t15 := opaque begin: account::create_resource_address($t13, $t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:631:29+58

    // assume WellFormed($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:631:29+58
    assume $IsValid'address'($t15);

    // assume Eq<address>($t15, account::spec_create_resource_address($t13, $t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:631:29+58
    assume $IsEqual'address'($t15, $1_account_spec_create_resource_address($t13, $t1));

    // $t15 := opaque end: account::create_resource_address($t13, $t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:631:29+58

    // trace_local[resource_addr]($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:631:13+13
    assume {:print "$track_local(18,7,7):", $t15} $t15 == $t15;

    // $t16 := account::exists_at($t15) on_abort goto L10 with $t14 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:632:28+24
    assume {:print "$at(81,36693,36717)"} true;
    call $t16 := $1_account_exists_at($t15);
    if ($abort_flag) {
        assume {:print "$at(81,36693,36717)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(18,7):", $t14} $t14 == $t14;
        goto L10;
    }

    // if ($t16) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:632:24+532
    if ($t16) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:633:50+13
    assume {:print "$at(81,36770,36783)"} true;
L1:

    // $t17 := get_global<account::Account>($t15) on_abort goto L10 with $t14 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:633:27+13
    assume {:print "$at(81,36747,36760)"} true;
    if (!$ResourceExists($1_account_Account_$memory, $t15)) {
        call $ExecFailureAbort();
    } else {
        $t17 := $ResourceValue($1_account_Account_$memory, $t15);
    }
    if ($abort_flag) {
        assume {:print "$at(81,36747,36760)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(18,7):", $t14} $t14 == $t14;
        goto L10;
    }

    // trace_local[account]($t17) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:633:17+7
    assume {:print "$track_local(18,7,4):", $t17} $t17 == $t17;

    // $t18 := get_field<account::Account>.signer_capability_offer($t17) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:635:34+31
    assume {:print "$at(81,36840,36871)"} true;
    $t18 := $t17->$signer_capability_offer;

    // $t19 := get_field<account::CapabilityOffer<account::SignerCapability>>.for($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:635:33+36
    $t19 := $t18->$for;

    // $t20 := opaque begin: option::is_none<address>($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:635:17+53

    // assume WellFormed($t20) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:635:17+53
    assume $IsValid'bool'($t20);

    // assume Eq<bool>($t20, option::spec_is_none<address>($t19)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:635:17+53
    assume $IsEqual'bool'($t20, $1_option_spec_is_none'address'($t19));

    // $t20 := opaque end: option::is_none<address>($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:635:17+53

    // if ($t20) goto L3 else goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:634:13+159
    assume {:print "$at(81,36798,36957)"} true;
    if ($t20) { goto L3; } else { goto L2; }

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:634:13+159
L3:

    // goto L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:634:13+159
    assume {:print "$at(81,36798,36957)"} true;
    goto L4;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:634:13+159
L2:

    // $t21 := 15 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:636:39+25
    assume {:print "$at(81,36916,36941)"} true;
    $t21 := 15;
    assume $IsValid'u64'($t21);

    // $t22 := error::already_exists($t21) on_abort goto L10 with $t14 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:636:17+48
    call $t22 := $1_error_already_exists($t21);
    if ($abort_flag) {
        assume {:print "$at(81,36894,36942)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(18,7):", $t14} $t14 == $t14;
        goto L10;
    }

    // trace_abort($t22) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:634:13+159
    assume {:print "$at(81,36798,36957)"} true;
    assume {:print "$track_abort(18,7):", $t22} $t22 == $t22;

    // $t14 := move($t22) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:634:13+159
    $t14 := $t22;

    // goto L10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:634:13+159
    goto L10;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:639:17+7
    assume {:print "$at(81,36996,37003)"} true;
L4:

    // $t23 := get_field<account::Account>.sequence_number($t17) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:639:17+23
    assume {:print "$at(81,36996,37019)"} true;
    $t23 := $t17->$sequence_number;

    // $t24 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:639:44+1
    $t24 := 0;
    assume $IsValid'u64'($t24);

    // $t25 := ==($t23, $t24) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:639:41+2
    $t25 := $IsEqual'u64'($t23, $t24);

    // if ($t25) goto L6 else goto L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:638:13+129
    assume {:print "$at(81,36971,37100)"} true;
    if ($t25) { goto L6; } else { goto L5; }

    // label L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:638:13+129
L6:

    // goto L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:638:13+129
    assume {:print "$at(81,36971,37100)"} true;
    goto L7;

    // label L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:640:38+21
    assume {:print "$at(81,37063,37084)"} true;
L5:

    // $t26 := 16 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:640:38+21
    assume {:print "$at(81,37063,37084)"} true;
    $t26 := 16;
    assume $IsValid'u64'($t26);

    // $t27 := error::invalid_state($t26) on_abort goto L10 with $t14 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:640:17+43
    call $t27 := $1_error_invalid_state($t26);
    if ($abort_flag) {
        assume {:print "$at(81,37042,37085)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(18,7):", $t14} $t14 == $t14;
        goto L10;
    }

    // trace_abort($t27) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:638:13+129
    assume {:print "$at(81,36971,37100)"} true;
    assume {:print "$track_abort(18,7):", $t27} $t27 == $t27;

    // $t14 := move($t27) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:638:13+129
    $t14 := $t27;

    // goto L10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:638:13+129
    goto L10;

    // label L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:642:27+13
    assume {:print "$at(81,37128,37141)"} true;
L7:

    // $t3 := opaque begin: create_signer::create_signer($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:642:13+28
    assume {:print "$at(81,37114,37142)"} true;

    // assume WellFormed($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:642:13+28
    assume $IsValid'signer'($t3) && $1_signer_is_txn_signer($t3) && $1_signer_is_txn_signer_addr($t3->$addr);

    // assume Eq<address>(signer::$address_of($t3), $t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:642:13+28
    assume $IsEqual'address'($1_signer_$address_of($t3), $t15);

    // $t3 := opaque end: create_signer::create_signer($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:642:13+28

    // goto L8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:632:24+532
    assume {:print "$at(81,36689,37221)"} true;
    goto L8;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:644:38+13
    assume {:print "$at(81,37197,37210)"} true;
L0:

    // assume Identical($t28, bcs::$to_bytes<address>($t15)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.spec.move:54:9+45
    assume {:print "$at(82,2155,2200)"} true;
    assume ($t28 == $1_bcs_$to_bytes'address'($t15));

    // $t3 := account::create_account_unchecked($t15) on_abort goto L10 with $t14 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:644:13+39
    assume {:print "$at(81,37172,37211)"} true;
    call $t3 := $1_account_create_account_unchecked($t15);
    if ($abort_flag) {
        assume {:print "$at(81,37172,37211)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(18,7):", $t14} $t14 == $t14;
        goto L10;
    }

    // label L8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:632:24+532
    assume {:print "$at(81,36689,37221)"} true;
L8:

    // trace_local[resource]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:632:13+8
    assume {:print "$at(81,36678,36686)"} true;
    assume {:print "$track_local(18,7,6):", $t3} $t3 == $t3;

    // $t29 := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:650:55+13
    assume {:print "$at(81,37576,37589)"} true;
    $t29 := ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(0, 0, 0, 0), MakeVec4(0, 0, 0, 0)), MakeVec4(0, 0, 0, 0)), MakeVec4(0, 0, 0, 0)), MakeVec4(0, 0, 0, 0)), MakeVec4(0, 0, 0, 0)), MakeVec4(0, 0, 0, 0)), MakeVec4(0, 0, 0, 0));
    assume $IsValid'vec'u8''($t29);

    // assume Identical($t30, signer::$address_of($t3)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.spec.move:89:9+39
    assume {:print "$at(82,3568,3607)"} true;
    assume ($t30 == $1_signer_$address_of($t3));

    // account::rotate_authentication_key_internal($t3, $t29) on_abort goto L10 with $t14 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:650:9+60
    assume {:print "$at(81,37530,37590)"} true;
    call $1_account_rotate_authentication_key_internal($t3, $t29);
    if ($abort_flag) {
        assume {:print "$at(81,37530,37590)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(18,7):", $t14} $t14 == $t14;
        goto L10;
    }

    // $t31 := borrow_global<account::Account>($t15) on_abort goto L10 with $t14 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:652:23+17
    assume {:print "$at(81,37615,37632)"} true;
    if (!$ResourceExists($1_account_Account_$memory, $t15)) {
        call $ExecFailureAbort();
    } else {
        $t31 := $Mutation($Global($t15), EmptyVec(), $ResourceValue($1_account_Account_$memory, $t15));
    }
    if ($abort_flag) {
        assume {:print "$at(81,37615,37632)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(18,7):", $t14} $t14 == $t14;
        goto L10;
    }

    // trace_local[account#3]($t31) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:652:13+7
    $temp_0'$1_account_Account' := $Dereference($t31);
    assume {:print "$track_local(18,7,5):", $temp_0'$1_account_Account'} $temp_0'$1_account_Account' == $temp_0'$1_account_Account';

    // $t32 := opaque begin: option::some<address>($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:653:47+27
    assume {:print "$at(81,37704,37731)"} true;

    // assume And(WellFormed($t32), Le(Len<address>(select option::Option.vec($t32)), 1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:653:47+27
    assume ($IsValid'$1_option_Option'address''($t32) && (LenVec($t32->$vec) <= 1));

    // assume Eq<option::Option<address>>($t32, option::spec_some<address>($t15)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:653:47+27
    assume $IsEqual'$1_option_Option'address''($t32, $1_option_spec_some'address'($t15));

    // $t32 := opaque end: option::some<address>($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:653:47+27

    // $t33 := borrow_field<account::Account>.signer_capability_offer($t31) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:653:9+31
    $t33 := $ChildMutation($t31, 6, $Dereference($t31)->$signer_capability_offer);

    // $t34 := borrow_field<account::CapabilityOffer<account::SignerCapability>>.for($t33) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:653:9+35
    $t34 := $ChildMutation($t33, 0, $Dereference($t33)->$for);

    // write_ref($t34, $t32) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:653:9+65
    $t34 := $UpdateMutation($t34, $t32);

    // write_back[Reference($t33).for (option::Option<address>)]($t34) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:653:9+65
    $t33 := $UpdateMutation($t33, $Update'$1_account_CapabilityOffer'$1_account_SignerCapability''_for($Dereference($t33), $Dereference($t34)));

    // write_back[Reference($t31).signer_capability_offer (account::CapabilityOffer<account::SignerCapability>)]($t33) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:653:9+65
    $t31 := $UpdateMutation($t31, $Update'$1_account_Account'_signer_capability_offer($Dereference($t31), $Dereference($t33)));

    // pack_ref_deep($t31) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:653:9+65

    // write_back[account::Account@]($t31) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:653:9+65
    $1_account_Account_$memory := $ResourceUpdate($1_account_Account_$memory, $GlobalLocationAddress($t31),
        $Dereference($t31));

    // $t35 := pack account::SignerCapability($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:654:26+43
    assume {:print "$at(81,37758,37801)"} true;
    $t35 := $1_account_SignerCapability($t15);

    // trace_local[signer_cap]($t35) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:654:13+10
    assume {:print "$track_local(18,7,8):", $t35} $t35 == $t35;

    // trace_return[0]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:655:9+22
    assume {:print "$at(81,37811,37833)"} true;
    assume {:print "$track_return(18,7,0):", $t3} $t3 == $t3;

    // trace_return[1]($t35) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:655:9+22
    assume {:print "$track_return(18,7,1):", $t35} $t35 == $t35;

    // label L9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:656:5+1
    assume {:print "$at(81,37838,37839)"} true;
L9:

    // return ($t3, $t35) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:656:5+1
    assume {:print "$at(81,37838,37839)"} true;
    $ret0 := $t3;
    $ret1 := $t35;
    return;

    // label L10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:656:5+1
L10:

    // abort($t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:656:5+1
    assume {:print "$at(81,37838,37839)"} true;
    $abort_code := $t14;
    $abort_flag := true;
    return;

}

// fun account::create_signer_with_capability [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:735:5+156
procedure {:inline 1} $1_account_create_signer_with_capability(_$t0: $1_account_SignerCapability) returns ($ret0: $signer)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: $signer;
    var $t0: $1_account_SignerCapability;
    var $temp_0'$1_account_SignerCapability': $1_account_SignerCapability;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t1, select account::SignerCapability.account($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.spec.move:518:9+30
    assume {:print "$at(82,24860,24890)"} true;
    assume ($t1 == $t0->$account);

    // trace_local[capability]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:735:5+1
    assume {:print "$at(81,41007,41008)"} true;
    assume {:print "$track_local(18,9,0):", $t0} $t0 == $t0;

    // $t2 := get_field<account::SignerCapability>.account($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:736:20+19
    assume {:print "$at(81,41108,41127)"} true;
    $t2 := $t0->$account;

    // $t3 := opaque begin: create_signer::create_signer($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:737:9+20
    assume {:print "$at(81,41137,41157)"} true;

    // assume WellFormed($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:737:9+20
    assume $IsValid'signer'($t3) && $1_signer_is_txn_signer($t3) && $1_signer_is_txn_signer_addr($t3->$addr);

    // assume Eq<address>(signer::$address_of($t3), $t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:737:9+20
    assume $IsEqual'address'($1_signer_$address_of($t3), $t2);

    // $t3 := opaque end: create_signer::create_signer($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:737:9+20

    // trace_return[0]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:737:9+20
    assume {:print "$track_return(18,9,0):", $t3} $t3 == $t3;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:738:5+1
    assume {:print "$at(81,41162,41163)"} true;
L1:

    // return $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:738:5+1
    assume {:print "$at(81,41162,41163)"} true;
    $ret0 := $t3;
    return;

}

// fun account::exists_at [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:231:5+79
procedure {:inline 1} $1_account_exists_at(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[addr]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:231:5+1
    assume {:print "$at(81,11594,11595)"} true;
    assume {:print "$track_local(18,10,0):", $t0} $t0 == $t0;

    // $t1 := exists<account::Account>($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:232:9+6
    assume {:print "$at(81,11646,11652)"} true;
    $t1 := $ResourceExists($1_account_Account_$memory, $t0);

    // trace_return[0]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:232:9+21
    assume {:print "$track_return(18,10,0):", $t1} $t1 == $t1;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:233:5+1
    assume {:print "$at(81,11672,11673)"} true;
L1:

    // return $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:233:5+1
    assume {:print "$at(81,11672,11673)"} true;
    $ret0 := $t1;
    return;

}

// fun account::register_coin<aptos_coin::AptosCoin> [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:705:5+364
procedure {:inline 1} $1_account_register_coin'$1_aptos_coin_AptosCoin'(_$t0: int) returns ()
{
    // declare local variables
    var $t1: $Mutation ($1_account_Account);
    var $t2: int;
    var $t3: $Mutation ($1_event_EventHandle'$1_account_CoinRegisterEvent');
    var $t4: $1_type_info_TypeInfo;
    var $t5: $1_account_CoinRegisterEvent;
    var $t0: int;
    var $1_account_Account_$modifies: [int]bool;
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[account_addr]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:705:5+1
    assume {:print "$at(81,39759,39760)"} true;
    assume {:print "$track_local(18,24,0):", $t0} $t0 == $t0;

    // $t1 := borrow_global<account::Account>($t0) on_abort goto L2 with $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:706:23+17
    assume {:print "$at(81,39866,39883)"} true;
    if (!$ResourceExists($1_account_Account_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t1 := $Mutation($Global($t0), EmptyVec(), $ResourceValue($1_account_Account_$memory, $t0));
    }
    if ($abort_flag) {
        assume {:print "$at(81,39866,39883)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(18,24):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := borrow_field<account::Account>.coin_register_events($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:708:13+33
    assume {:print "$at(81,39966,39999)"} true;
    $t3 := $ChildMutation($t1, 3, $Dereference($t1)->$coin_register_events);

    // $t4 := type_info::type_of<#0>() on_abort goto L2 with $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:710:28+30
    assume {:print "$at(81,40060,40090)"} true;
    if (!true) {
        call $ExecFailureAbort();
    }
    else {
        $t4 := $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9));
    }
    if ($abort_flag) {
        assume {:print "$at(81,40060,40090)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(18,24):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t5 := pack account::CoinRegisterEvent($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:709:13+92
    assume {:print "$at(81,40013,40105)"} true;
    $t5 := $1_account_CoinRegisterEvent($t4);

    // opaque begin: event::emit_event<account::CoinRegisterEvent>($t3, $t5) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:707:9+200
    assume {:print "$at(81,39916,40116)"} true;

    // opaque end: event::emit_event<account::CoinRegisterEvent>($t3, $t5) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:707:9+200

    // write_back[Reference($t1).coin_register_events (event::EventHandle<account::CoinRegisterEvent>)]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:707:9+200
    $t1 := $UpdateMutation($t1, $Update'$1_account_Account'_coin_register_events($Dereference($t1), $Dereference($t3)));

    // pack_ref_deep($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:707:9+200

    // write_back[account::Account@]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:707:9+200
    $1_account_Account_$memory := $ResourceUpdate($1_account_Account_$memory, $GlobalLocationAddress($t1),
        $Dereference($t1));

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:713:5+1
    assume {:print "$at(81,40122,40123)"} true;
L1:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:713:5+1
    assume {:print "$at(81,40122,40123)"} true;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:713:5+1
L2:

    // abort($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:713:5+1
    assume {:print "$at(81,40122,40123)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun account::rotate_authentication_key_internal [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:263:5+516
procedure {:inline 1} $1_account_rotate_authentication_key_internal(_$t0: $signer, _$t1: Vec (int)) returns ()
{
    // declare local variables
    var $t2: $Mutation ($1_account_Account);
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: $Mutation ($1_account_Account);
    var $t16: $Mutation (Vec (int));
    var $t0: $signer;
    var $t1: Vec (int);
    var $1_account_Account_$modifies: [int]bool;
    var $temp_0'$1_account_Account': $1_account_Account;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t4, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.spec.move:89:9+39
    assume {:print "$at(82,3568,3607)"} true;
    assume ($t4 == $1_signer_$address_of($t0));

    // trace_local[account]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:263:5+1
    assume {:print "$at(81,12652,12653)"} true;
    assume {:print "$track_local(18,30,0):", $t0} $t0 == $t0;

    // trace_local[new_auth_key]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:263:5+1
    assume {:print "$track_local(18,30,1):", $t1} $t1 == $t1;

    // $t5 := signer::address_of($t0) on_abort goto L7 with $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:264:20+27
    assume {:print "$at(81,12788,12815)"} true;
    call $t5 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(81,12788,12815)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(18,30):", $t6} $t6 == $t6;
        goto L7;
    }

    // trace_local[addr]($t5) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:264:13+4
    assume {:print "$track_local(18,30,3):", $t5} $t5 == $t5;

    // $t7 := account::exists_at($t5) on_abort goto L7 with $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:265:17+15
    assume {:print "$at(81,12833,12848)"} true;
    call $t7 := $1_account_exists_at($t5);
    if ($abort_flag) {
        assume {:print "$at(81,12833,12848)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(18,30):", $t6} $t6 == $t6;
        goto L7;
    }

    // if ($t7) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:265:9+67
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:265:9+67
L1:

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:265:9+67
    assume {:print "$at(81,12825,12892)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:265:51+23
L0:

    // $t8 := 2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:265:51+23
    assume {:print "$at(81,12867,12890)"} true;
    $t8 := 2;
    assume $IsValid'u64'($t8);

    // $t9 := error::not_found($t8) on_abort goto L7 with $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:265:34+41
    call $t9 := $1_error_not_found($t8);
    if ($abort_flag) {
        assume {:print "$at(81,12850,12891)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(18,30):", $t6} $t6 == $t6;
        goto L7;
    }

    // trace_abort($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:265:9+67
    assume {:print "$at(81,12825,12892)"} true;
    assume {:print "$track_abort(18,30):", $t9} $t9 == $t9;

    // $t6 := move($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:265:9+67
    $t6 := $t9;

    // goto L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:265:9+67
    goto L7;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:267:28+13
    assume {:print "$at(81,12938,12951)"} true;
L2:

    // $t10 := vector::length<u8>($t1) on_abort goto L7 with $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:267:13+29
    assume {:print "$at(81,12923,12952)"} true;
    call $t10 := $1_vector_length'u8'($t1);
    if ($abort_flag) {
        assume {:print "$at(81,12923,12952)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(18,30):", $t6} $t6 == $t6;
        goto L7;
    }

    // $t11 := 32 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:267:46+2
    $t11 := 32;
    assume $IsValid'u64'($t11);

    // $t12 := ==($t10, $t11) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:267:43+2
    $t12 := $IsEqual'u64'($t10, $t11);

    // if ($t12) goto L4 else goto L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:266:9+134
    assume {:print "$at(81,12902,13036)"} true;
    if ($t12) { goto L4; } else { goto L3; }

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:266:9+134
L4:

    // goto L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:266:9+134
    assume {:print "$at(81,12902,13036)"} true;
    goto L5;

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:268:37+29
    assume {:print "$at(81,12996,13025)"} true;
L3:

    // $t13 := 4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:268:37+29
    assume {:print "$at(81,12996,13025)"} true;
    $t13 := 4;
    assume $IsValid'u64'($t13);

    // $t14 := error::invalid_argument($t13) on_abort goto L7 with $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:268:13+54
    call $t14 := $1_error_invalid_argument($t13);
    if ($abort_flag) {
        assume {:print "$at(81,12972,13026)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(18,30):", $t6} $t6 == $t6;
        goto L7;
    }

    // trace_abort($t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:266:9+134
    assume {:print "$at(81,12902,13036)"} true;
    assume {:print "$track_abort(18,30):", $t14} $t14 == $t14;

    // $t6 := move($t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:266:9+134
    $t6 := $t14;

    // goto L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:266:9+134
    goto L7;

    // label L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:270:59+4
    assume {:print "$at(81,13096,13100)"} true;
L5:

    // $t15 := borrow_global<account::Account>($t5) on_abort goto L7 with $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:270:32+17
    assume {:print "$at(81,13069,13086)"} true;
    if (!$ResourceExists($1_account_Account_$memory, $t5)) {
        call $ExecFailureAbort();
    } else {
        $t15 := $Mutation($Global($t5), EmptyVec(), $ResourceValue($1_account_Account_$memory, $t5));
    }
    if ($abort_flag) {
        assume {:print "$at(81,13069,13086)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(18,30):", $t6} $t6 == $t6;
        goto L7;
    }

    // trace_local[account_resource]($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:270:13+16
    $temp_0'$1_account_Account' := $Dereference($t15);
    assume {:print "$track_local(18,30,2):", $temp_0'$1_account_Account'} $temp_0'$1_account_Account' == $temp_0'$1_account_Account';

    // $t16 := borrow_field<account::Account>.authentication_key($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:271:9+35
    assume {:print "$at(81,13111,13146)"} true;
    $t16 := $ChildMutation($t15, 0, $Dereference($t15)->$authentication_key);

    // write_ref($t16, $t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:271:9+50
    $t16 := $UpdateMutation($t16, $t1);

    // write_back[Reference($t15).authentication_key (vector<u8>)]($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:271:9+50
    $t15 := $UpdateMutation($t15, $Update'$1_account_Account'_authentication_key($Dereference($t15), $Dereference($t16)));

    // pack_ref_deep($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:271:9+50

    // write_back[account::Account@]($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:271:9+50
    $1_account_Account_$memory := $ResourceUpdate($1_account_Account_$memory, $GlobalLocationAddress($t15),
        $Dereference($t15));

    // label L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:272:5+1
    assume {:print "$at(81,13167,13168)"} true;
L6:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:272:5+1
    assume {:print "$at(81,13167,13168)"} true;
    return;

    // label L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:272:5+1
L7:

    // abort($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:272:5+1
    assume {:print "$at(81,13167,13168)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// struct optional_aggregator::Integer at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:20:5+74
datatype $1_optional_aggregator_Integer {
    $1_optional_aggregator_Integer($value: int, $limit: int)
}
function {:inline} $Update'$1_optional_aggregator_Integer'_value(s: $1_optional_aggregator_Integer, x: int): $1_optional_aggregator_Integer {
    $1_optional_aggregator_Integer(x, s->$limit)
}
function {:inline} $Update'$1_optional_aggregator_Integer'_limit(s: $1_optional_aggregator_Integer, x: int): $1_optional_aggregator_Integer {
    $1_optional_aggregator_Integer(s->$value, x)
}
function $IsValid'$1_optional_aggregator_Integer'(s: $1_optional_aggregator_Integer): bool {
    $IsValid'u128'(s->$value)
      && $IsValid'u128'(s->$limit)
}
function {:inline} $IsEqual'$1_optional_aggregator_Integer'(s1: $1_optional_aggregator_Integer, s2: $1_optional_aggregator_Integer): bool {
    s1 == s2
}

// struct optional_aggregator::OptionalAggregator at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:64:5+175
datatype $1_optional_aggregator_OptionalAggregator {
    $1_optional_aggregator_OptionalAggregator($aggregator: $1_option_Option'$1_aggregator_Aggregator', $integer: $1_option_Option'$1_optional_aggregator_Integer')
}
function {:inline} $Update'$1_optional_aggregator_OptionalAggregator'_aggregator(s: $1_optional_aggregator_OptionalAggregator, x: $1_option_Option'$1_aggregator_Aggregator'): $1_optional_aggregator_OptionalAggregator {
    $1_optional_aggregator_OptionalAggregator(x, s->$integer)
}
function {:inline} $Update'$1_optional_aggregator_OptionalAggregator'_integer(s: $1_optional_aggregator_OptionalAggregator, x: $1_option_Option'$1_optional_aggregator_Integer'): $1_optional_aggregator_OptionalAggregator {
    $1_optional_aggregator_OptionalAggregator(s->$aggregator, x)
}
function $IsValid'$1_optional_aggregator_OptionalAggregator'(s: $1_optional_aggregator_OptionalAggregator): bool {
    $IsValid'$1_option_Option'$1_aggregator_Aggregator''(s->$aggregator)
      && $IsValid'$1_option_Option'$1_optional_aggregator_Integer''(s->$integer)
}
function {:inline} $IsEqual'$1_optional_aggregator_OptionalAggregator'(s1: $1_optional_aggregator_OptionalAggregator, s2: $1_optional_aggregator_OptionalAggregator): bool {
    $IsEqual'$1_option_Option'$1_aggregator_Aggregator''(s1->$aggregator, s2->$aggregator)
    && $IsEqual'$1_option_Option'$1_optional_aggregator_Integer''(s1->$integer, s2->$integer)}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:266:5+129
function {:inline} $1_coin_$is_account_registered'$1_aptos_coin_AptosCoin'($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory: $Memory $1_coin_CoinStore'$1_aptos_coin_AptosCoin', account_addr: int): bool {
    $ResourceExists($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, account_addr)
}

// struct coin::Coin<aptos_coin::AptosCoin> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:74:5+112
datatype $1_coin_Coin'$1_aptos_coin_AptosCoin' {
    $1_coin_Coin'$1_aptos_coin_AptosCoin'($value: int)
}
function {:inline} $Update'$1_coin_Coin'$1_aptos_coin_AptosCoin''_value(s: $1_coin_Coin'$1_aptos_coin_AptosCoin', x: int): $1_coin_Coin'$1_aptos_coin_AptosCoin' {
    $1_coin_Coin'$1_aptos_coin_AptosCoin'(x)
}
function $IsValid'$1_coin_Coin'$1_aptos_coin_AptosCoin''(s: $1_coin_Coin'$1_aptos_coin_AptosCoin'): bool {
    $IsValid'u64'(s->$value)
}
function {:inline} $IsEqual'$1_coin_Coin'$1_aptos_coin_AptosCoin''(s1: $1_coin_Coin'$1_aptos_coin_AptosCoin', s2: $1_coin_Coin'$1_aptos_coin_AptosCoin'): bool {
    s1 == s2
}

// struct coin::CoinInfo<aptos_coin::AptosCoin> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:109:5+564
datatype $1_coin_CoinInfo'$1_aptos_coin_AptosCoin' {
    $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'($name: $1_string_String, $symbol: $1_string_String, $decimals: int, $supply: $1_option_Option'$1_optional_aggregator_OptionalAggregator')
}
function {:inline} $Update'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''_name(s: $1_coin_CoinInfo'$1_aptos_coin_AptosCoin', x: $1_string_String): $1_coin_CoinInfo'$1_aptos_coin_AptosCoin' {
    $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'(x, s->$symbol, s->$decimals, s->$supply)
}
function {:inline} $Update'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''_symbol(s: $1_coin_CoinInfo'$1_aptos_coin_AptosCoin', x: $1_string_String): $1_coin_CoinInfo'$1_aptos_coin_AptosCoin' {
    $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'(s->$name, x, s->$decimals, s->$supply)
}
function {:inline} $Update'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''_decimals(s: $1_coin_CoinInfo'$1_aptos_coin_AptosCoin', x: int): $1_coin_CoinInfo'$1_aptos_coin_AptosCoin' {
    $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'(s->$name, s->$symbol, x, s->$supply)
}
function {:inline} $Update'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''_supply(s: $1_coin_CoinInfo'$1_aptos_coin_AptosCoin', x: $1_option_Option'$1_optional_aggregator_OptionalAggregator'): $1_coin_CoinInfo'$1_aptos_coin_AptosCoin' {
    $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'(s->$name, s->$symbol, s->$decimals, x)
}
function $IsValid'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''(s: $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'): bool {
    $IsValid'$1_string_String'(s->$name)
      && $IsValid'$1_string_String'(s->$symbol)
      && $IsValid'u8'(s->$decimals)
      && $IsValid'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(s->$supply)
}
function {:inline} $IsEqual'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''(s1: $1_coin_CoinInfo'$1_aptos_coin_AptosCoin', s2: $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'): bool {
    $IsEqual'$1_string_String'(s1->$name, s2->$name)
    && $IsEqual'$1_string_String'(s1->$symbol, s2->$symbol)
    && $IsEqual'u8'(s1->$decimals, s2->$decimals)
    && $IsEqual'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(s1->$supply, s2->$supply)}
var $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory: $Memory $1_coin_CoinInfo'$1_aptos_coin_AptosCoin';

// struct coin::CoinStore<aptos_coin::AptosCoin> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:92:5+206
datatype $1_coin_CoinStore'$1_aptos_coin_AptosCoin' {
    $1_coin_CoinStore'$1_aptos_coin_AptosCoin'($coin: $1_coin_Coin'$1_aptos_coin_AptosCoin', $frozen: bool, $deposit_events: $1_event_EventHandle'$1_coin_DepositEvent', $withdraw_events: $1_event_EventHandle'$1_coin_WithdrawEvent')
}
function {:inline} $Update'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''_coin(s: $1_coin_CoinStore'$1_aptos_coin_AptosCoin', x: $1_coin_Coin'$1_aptos_coin_AptosCoin'): $1_coin_CoinStore'$1_aptos_coin_AptosCoin' {
    $1_coin_CoinStore'$1_aptos_coin_AptosCoin'(x, s->$frozen, s->$deposit_events, s->$withdraw_events)
}
function {:inline} $Update'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''_frozen(s: $1_coin_CoinStore'$1_aptos_coin_AptosCoin', x: bool): $1_coin_CoinStore'$1_aptos_coin_AptosCoin' {
    $1_coin_CoinStore'$1_aptos_coin_AptosCoin'(s->$coin, x, s->$deposit_events, s->$withdraw_events)
}
function {:inline} $Update'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''_deposit_events(s: $1_coin_CoinStore'$1_aptos_coin_AptosCoin', x: $1_event_EventHandle'$1_coin_DepositEvent'): $1_coin_CoinStore'$1_aptos_coin_AptosCoin' {
    $1_coin_CoinStore'$1_aptos_coin_AptosCoin'(s->$coin, s->$frozen, x, s->$withdraw_events)
}
function {:inline} $Update'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''_withdraw_events(s: $1_coin_CoinStore'$1_aptos_coin_AptosCoin', x: $1_event_EventHandle'$1_coin_WithdrawEvent'): $1_coin_CoinStore'$1_aptos_coin_AptosCoin' {
    $1_coin_CoinStore'$1_aptos_coin_AptosCoin'(s->$coin, s->$frozen, s->$deposit_events, x)
}
function $IsValid'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''(s: $1_coin_CoinStore'$1_aptos_coin_AptosCoin'): bool {
    $IsValid'$1_coin_Coin'$1_aptos_coin_AptosCoin''(s->$coin)
      && $IsValid'bool'(s->$frozen)
      && $IsValid'$1_event_EventHandle'$1_coin_DepositEvent''(s->$deposit_events)
      && $IsValid'$1_event_EventHandle'$1_coin_WithdrawEvent''(s->$withdraw_events)
}
function {:inline} $IsEqual'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''(s1: $1_coin_CoinStore'$1_aptos_coin_AptosCoin', s2: $1_coin_CoinStore'$1_aptos_coin_AptosCoin'): bool {
    s1 == s2
}
var $1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory: $Memory $1_coin_CoinStore'$1_aptos_coin_AptosCoin';

// struct coin::DepositEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:123:5+64
datatype $1_coin_DepositEvent {
    $1_coin_DepositEvent($amount: int)
}
function {:inline} $Update'$1_coin_DepositEvent'_amount(s: $1_coin_DepositEvent, x: int): $1_coin_DepositEvent {
    $1_coin_DepositEvent(x)
}
function $IsValid'$1_coin_DepositEvent'(s: $1_coin_DepositEvent): bool {
    $IsValid'u64'(s->$amount)
}
function {:inline} $IsEqual'$1_coin_DepositEvent'(s1: $1_coin_DepositEvent, s2: $1_coin_DepositEvent): bool {
    s1 == s2
}

// struct coin::WithdrawEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:128:5+65
datatype $1_coin_WithdrawEvent {
    $1_coin_WithdrawEvent($amount: int)
}
function {:inline} $Update'$1_coin_WithdrawEvent'_amount(s: $1_coin_WithdrawEvent, x: int): $1_coin_WithdrawEvent {
    $1_coin_WithdrawEvent(x)
}
function $IsValid'$1_coin_WithdrawEvent'(s: $1_coin_WithdrawEvent): bool {
    $IsValid'u64'(s->$amount)
}
function {:inline} $IsEqual'$1_coin_WithdrawEvent'(s1: $1_coin_WithdrawEvent, s2: $1_coin_WithdrawEvent): bool {
    s1 == s2
}

// struct coin::Ghost$supply<aptos_coin::AptosCoin> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:4:9+29
datatype $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin' {
    $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'($v: int)
}
function {:inline} $Update'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''_v(s: $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin', x: int): $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin' {
    $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'(x)
}
function $IsValid'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''(s: $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'): bool {
    $IsValid'num'(s->$v)
}
function {:inline} $IsEqual'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''(s1: $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin', s2: $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'): bool {
    s1 == s2
}
var $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory: $Memory $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin';

// struct coin::Ghost$aggregate_supply<aptos_coin::AptosCoin> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:5:9+39
datatype $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin' {
    $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'($v: int)
}
function {:inline} $Update'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''_v(s: $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin', x: int): $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin' {
    $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'(x)
}
function $IsValid'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''(s: $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'): bool {
    $IsValid'num'(s->$v)
}
function {:inline} $IsEqual'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''(s1: $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin', s2: $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'): bool {
    s1 == s2
}
var $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory: $Memory $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin';

// fun coin::is_account_registered<aptos_coin::AptosCoin> [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:266:5+129
procedure {:inline 1} $1_coin_is_account_registered'$1_aptos_coin_AptosCoin'(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t2: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t1, select coin::CoinInfo.supply(global<coin::CoinInfo<#0>>(select type_info::TypeInfo.account_address(type_info::$type_of<#0>())))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:32:9+99
    assume {:print "$at(106,1664,1763)"} true;
    assume ($t1 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply);

    // trace_local[account_addr]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:266:5+1
    assume {:print "$at(105,9762,9763)"} true;
    assume {:print "$track_local(24,22,0):", $t0} $t0 == $t0;

    // $t2 := exists<coin::CoinStore<#0>>($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:267:9+6
    assume {:print "$at(105,9844,9850)"} true;
    $t2 := $ResourceExists($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $t0);

    // trace_return[0]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:267:9+41
    assume {:print "$track_return(24,22,0):", $t2} $t2 == $t2;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:268:5+1
    assume {:print "$at(105,9890,9891)"} true;
L1:

    // return $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:268:5+1
    assume {:print "$at(105,9890,9891)"} true;
    $ret0 := $t2;
    return;

}

// fun coin::register<aptos_coin::AptosCoin> [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:573:5+664
procedure {:inline 1} $1_coin_register'$1_aptos_coin_AptosCoin'(_$t0: $signer) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: $1_coin_CoinStore'$1_aptos_coin_AptosCoin';
    var $t3: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t4: int;
    var $t5: $1_account_Account;
    var $t6: int;
    var $t7: int;
    var $t8: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t9: bool;
    var $t10: int;
    var $t11: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $t12: bool;
    var $t13: int;
    var $t14: $1_account_Account;
    var $t15: $1_event_EventHandle'$1_coin_DepositEvent';
    var $t16: int;
    var $t17: $1_account_Account;
    var $t18: $1_event_EventHandle'$1_coin_WithdrawEvent';
    var $t19: $1_coin_CoinStore'$1_aptos_coin_AptosCoin';
    var $t0: $signer;
    var $temp_0'$1_coin_CoinStore'$1_aptos_coin_AptosCoin'': $1_coin_CoinStore'$1_aptos_coin_AptosCoin';
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t3, select coin::CoinInfo.supply(global<coin::CoinInfo<#0>>(select type_info::TypeInfo.account_address(type_info::$type_of<#0>())))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:32:9+99
    assume {:print "$at(106,1664,1763)"} true;
    assume ($t3 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply);

    // assume Identical($t4, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:358:9+47
    assume {:print "$at(106,15424,15471)"} true;
    assume ($t4 == $1_signer_$address_of($t0));

    // assume Identical($t5, global<account::Account>($t4)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:359:9+49
    assume {:print "$at(106,15480,15529)"} true;
    assume ($t5 == $ResourceValue($1_account_Account_$memory, $t4));

    // trace_local[account]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:573:5+1
    assume {:print "$at(105,22139,22140)"} true;
    assume {:print "$track_local(24,30,0):", $t0} $t0 == $t0;

    // $t6 := signer::address_of($t0) on_abort goto L3 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:574:28+27
    assume {:print "$at(105,22216,22243)"} true;
    call $t6 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(105,22216,22243)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(24,30):", $t7} $t7 == $t7;
        goto L3;
    }

    // trace_local[account_addr]($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:574:13+12
    assume {:print "$track_local(24,30,1):", $t6} $t6 == $t6;

    // assume Identical($t8, select coin::CoinInfo.supply(global<coin::CoinInfo<#0>>(select type_info::TypeInfo.account_address(type_info::$type_of<#0>())))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:32:9+99
    assume {:print "$at(106,1664,1763)"} true;
    assume ($t8 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply);

    // $t9 := coin::is_account_registered<#0>($t6) on_abort goto L3 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:576:13+45
    assume {:print "$at(105,22344,22389)"} true;
    call $t9 := $1_coin_is_account_registered'$1_aptos_coin_AptosCoin'($t6);
    if ($abort_flag) {
        assume {:print "$at(105,22344,22389)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(24,30):", $t7} $t7 == $t7;
        goto L3;
    }

    // if ($t9) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:576:9+81
    if ($t9) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:577:13+6
    assume {:print "$at(105,22405,22411)"} true;
L1:

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:577:13+6
    assume {:print "$at(105,22405,22411)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:580:42+12
    assume {:print "$at(105,22465,22477)"} true;
L0:

    // account::register_coin<#0>($t6) on_abort goto L3 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:580:9+46
    assume {:print "$at(105,22432,22478)"} true;
    call $1_account_register_coin'$1_aptos_coin_AptosCoin'($t6);
    if ($abort_flag) {
        assume {:print "$at(105,22432,22478)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(24,30):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t10 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:582:33+1
    assume {:print "$at(105,22559,22560)"} true;
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // $t11 := pack coin::Coin<#0>($t10) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:582:19+17
    $t11 := $1_coin_Coin'$1_aptos_coin_AptosCoin'($t10);

    // $t12 := false at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:583:21+5
    assume {:print "$at(105,22584,22589)"} true;
    $t12 := false;
    assume $IsValid'bool'($t12);

    // assume Identical($t13, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.spec.move:504:9+39
    assume {:print "$at(82,24284,24323)"} true;
    assume ($t13 == $1_signer_$address_of($t0));

    // assume Identical($t14, global<account::Account>($t13)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.spec.move:505:9+36
    assume {:print "$at(82,24332,24368)"} true;
    assume ($t14 == $ResourceValue($1_account_Account_$memory, $t13));

    // $t15 := account::new_event_handle<coin::DepositEvent>($t0) on_abort goto L3 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:584:29+48
    assume {:print "$at(105,22619,22667)"} true;
    call $t15 := $1_account_new_event_handle'$1_coin_DepositEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(105,22619,22667)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(24,30):", $t7} $t7 == $t7;
        goto L3;
    }

    // assume Identical($t16, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.spec.move:504:9+39
    assume {:print "$at(82,24284,24323)"} true;
    assume ($t16 == $1_signer_$address_of($t0));

    // assume Identical($t17, global<account::Account>($t16)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.spec.move:505:9+36
    assume {:print "$at(82,24332,24368)"} true;
    assume ($t17 == $ResourceValue($1_account_Account_$memory, $t16));

    // $t18 := account::new_event_handle<coin::WithdrawEvent>($t0) on_abort goto L3 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:585:30+49
    assume {:print "$at(105,22698,22747)"} true;
    call $t18 := $1_account_new_event_handle'$1_coin_WithdrawEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(105,22698,22747)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(24,30):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t19 := pack coin::CoinStore<#0>($t11, $t12, $t15, $t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:581:26+253
    assume {:print "$at(105,22505,22758)"} true;
    $t19 := $1_coin_CoinStore'$1_aptos_coin_AptosCoin'($t11, $t12, $t15, $t18);

    // trace_local[coin_store]($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:581:13+10
    assume {:print "$track_local(24,30,2):", $t19} $t19 == $t19;

    // move_to<coin::CoinStore<#0>>($t19, $t0) on_abort goto L3 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:587:9+7
    assume {:print "$at(105,22768,22775)"} true;
    if ($ResourceExists($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $t0->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory := $ResourceUpdate($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $t0->$addr, $t19);
    }
    if ($abort_flag) {
        assume {:print "$at(105,22768,22775)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(24,30):", $t7} $t7 == $t7;
        goto L3;
    }

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:588:5+1
    assume {:print "$at(105,22802,22803)"} true;
L2:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:588:5+1
    assume {:print "$at(105,22802,22803)"} true;
    return;

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:588:5+1
L3:

    // abort($t7) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:588:5+1
    assume {:print "$at(105,22802,22803)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// struct aptos_coin::AptosCoin at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_coin.move:22:5+27
datatype $1_aptos_coin_AptosCoin {
    $1_aptos_coin_AptosCoin($dummy_field: bool)
}
function {:inline} $Update'$1_aptos_coin_AptosCoin'_dummy_field(s: $1_aptos_coin_AptosCoin, x: bool): $1_aptos_coin_AptosCoin {
    $1_aptos_coin_AptosCoin(x)
}
function $IsValid'$1_aptos_coin_AptosCoin'(s: $1_aptos_coin_AptosCoin): bool {
    $IsValid'bool'(s->$dummy_field)
}
function {:inline} $IsEqual'$1_aptos_coin_AptosCoin'(s1: $1_aptos_coin_AptosCoin, s2: $1_aptos_coin_AptosCoin): bool {
    s1 == s2
}
var $1_aptos_coin_AptosCoin_$memory: $Memory $1_aptos_coin_AptosCoin;

// fun aptos_account::assert_account_exists [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:117:5+136
procedure {:inline 1} $1_aptos_account_assert_account_exists(_$t0: int) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t0: int;
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[addr]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:117:5+1
    assume {:print "$at(91,5296,5297)"} true;
    assume {:print "$track_local(26,0,0):", $t0} $t0 == $t0;

    // $t1 := account::exists_at($t0) on_abort goto L4 with $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:118:17+24
    assume {:print "$at(91,5362,5386)"} true;
    call $t1 := $1_account_exists_at($t0);
    if ($abort_flag) {
        assume {:print "$at(91,5362,5386)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(26,0):", $t2} $t2 == $t2;
        goto L4;
    }

    // if ($t1) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:118:9+71
    if ($t1) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:118:9+71
L1:

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:118:9+71
    assume {:print "$at(91,5354,5425)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:118:60+18
L0:

    // $t3 := 1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:118:60+18
    assume {:print "$at(91,5405,5423)"} true;
    $t3 := 1;
    assume $IsValid'u64'($t3);

    // $t4 := error::not_found($t3) on_abort goto L4 with $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:118:43+36
    call $t4 := $1_error_not_found($t3);
    if ($abort_flag) {
        assume {:print "$at(91,5388,5424)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(26,0):", $t2} $t2 == $t2;
        goto L4;
    }

    // trace_abort($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:118:9+71
    assume {:print "$at(91,5354,5425)"} true;
    assume {:print "$track_abort(26,0):", $t4} $t4 == $t4;

    // $t2 := move($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:118:9+71
    $t2 := $t4;

    // goto L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:118:9+71
    goto L4;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:118:80+1
L2:

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:119:5+1
    assume {:print "$at(91,5431,5432)"} true;
L3:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:119:5+1
    assume {:print "$at(91,5431,5432)"} true;
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:119:5+1
L4:

    // abort($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:119:5+1
    assume {:print "$at(91,5431,5432)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun aptos_account::assert_account_is_registered_for_apt [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:121:5+221
procedure {:inline 1} $1_aptos_account_assert_account_is_registered_for_apt(_$t0: int) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t0: int;
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[addr]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:121:5+1
    assume {:print "$at(91,5438,5439)"} true;
    assume {:print "$track_local(26,1,0):", $t0} $t0 == $t0;

    // aptos_account::assert_account_exists($t0) on_abort goto L4 with $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:122:9+27
    assume {:print "$at(91,5511,5538)"} true;
    call $1_aptos_account_assert_account_exists($t0);
    if ($abort_flag) {
        assume {:print "$at(91,5511,5538)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(26,1):", $t1} $t1 == $t1;
        goto L4;
    }

    // assume Identical($t2, select coin::CoinInfo.supply(global<coin::CoinInfo<aptos_coin::AptosCoin>>(select type_info::TypeInfo.account_address(type_info::$type_of<aptos_coin::AptosCoin>())))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:32:9+99
    assume {:print "$at(106,1664,1763)"} true;
    assume ($t2 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply);

    // $t3 := coin::is_account_registered<aptos_coin::AptosCoin>($t0) on_abort goto L4 with $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:123:17+44
    assume {:print "$at(91,5556,5600)"} true;
    call $t3 := $1_coin_is_account_registered'$1_aptos_coin_AptosCoin'($t0);
    if ($abort_flag) {
        assume {:print "$at(91,5556,5600)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(26,1):", $t1} $t1 == $t1;
        goto L4;
    }

    // if ($t3) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:123:9+104
    if ($t3) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:123:9+104
L1:

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:123:9+104
    assume {:print "$at(91,5548,5652)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:123:80+31
L0:

    // $t4 := 2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:123:80+31
    assume {:print "$at(91,5619,5650)"} true;
    $t4 := 2;
    assume $IsValid'u64'($t4);

    // $t5 := error::not_found($t4) on_abort goto L4 with $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:123:63+49
    call $t5 := $1_error_not_found($t4);
    if ($abort_flag) {
        assume {:print "$at(91,5602,5651)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(26,1):", $t1} $t1 == $t1;
        goto L4;
    }

    // trace_abort($t5) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:123:9+104
    assume {:print "$at(91,5548,5652)"} true;
    assume {:print "$track_abort(26,1):", $t5} $t5 == $t5;

    // $t1 := move($t5) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:123:9+104
    $t1 := $t5;

    // goto L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:123:9+104
    goto L4;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:123:113+1
L2:

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:124:5+1
    assume {:print "$at(91,5658,5659)"} true;
L3:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:124:5+1
    assume {:print "$at(91,5658,5659)"} true;
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:124:5+1
L4:

    // abort($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_account.move:124:5+1
    assume {:print "$at(91,5658,5659)"} true;
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/chain_status.move:35:5+90
function {:inline} $1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory: $Memory $1_chain_status_GenesisEndMarker): bool {
    $ResourceExists($1_chain_status_GenesisEndMarker_$memory, 1)
}

// struct chain_status::GenesisEndMarker at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/chain_status.move:12:5+34
datatype $1_chain_status_GenesisEndMarker {
    $1_chain_status_GenesisEndMarker($dummy_field: bool)
}
function {:inline} $Update'$1_chain_status_GenesisEndMarker'_dummy_field(s: $1_chain_status_GenesisEndMarker, x: bool): $1_chain_status_GenesisEndMarker {
    $1_chain_status_GenesisEndMarker(x)
}
function $IsValid'$1_chain_status_GenesisEndMarker'(s: $1_chain_status_GenesisEndMarker): bool {
    $IsValid'bool'(s->$dummy_field)
}
function {:inline} $IsEqual'$1_chain_status_GenesisEndMarker'(s1: $1_chain_status_GenesisEndMarker, s2: $1_chain_status_GenesisEndMarker): bool {
    s1 == s2
}
var $1_chain_status_GenesisEndMarker_$memory: $Memory $1_chain_status_GenesisEndMarker;

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:61:5+153
function {:inline} $1_timestamp_$now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory: $Memory $1_timestamp_CurrentTimeMicroseconds): int {
    $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, 1)->$microseconds
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:67:5+123
function {:inline} $1_timestamp_$now_seconds($1_timestamp_CurrentTimeMicroseconds_$memory: $Memory $1_timestamp_CurrentTimeMicroseconds): int {
    ($1_timestamp_$now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) div 1000000)
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.spec.move:23:10+111
function {:inline} $1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory: $Memory $1_timestamp_CurrentTimeMicroseconds): int {
    $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, 1)->$microseconds
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.spec.move:27:10+93
function {:inline} $1_timestamp_spec_now_seconds($1_timestamp_CurrentTimeMicroseconds_$memory: $Memory $1_timestamp_CurrentTimeMicroseconds): int {
    ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) div 1000000)
}

// struct timestamp::CurrentTimeMicroseconds at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:12:5+73
datatype $1_timestamp_CurrentTimeMicroseconds {
    $1_timestamp_CurrentTimeMicroseconds($microseconds: int)
}
function {:inline} $Update'$1_timestamp_CurrentTimeMicroseconds'_microseconds(s: $1_timestamp_CurrentTimeMicroseconds, x: int): $1_timestamp_CurrentTimeMicroseconds {
    $1_timestamp_CurrentTimeMicroseconds(x)
}
function $IsValid'$1_timestamp_CurrentTimeMicroseconds'(s: $1_timestamp_CurrentTimeMicroseconds): bool {
    $IsValid'u64'(s->$microseconds)
}
function {:inline} $IsEqual'$1_timestamp_CurrentTimeMicroseconds'(s1: $1_timestamp_CurrentTimeMicroseconds, s2: $1_timestamp_CurrentTimeMicroseconds): bool {
    s1 == s2
}
var $1_timestamp_CurrentTimeMicroseconds_$memory: $Memory $1_timestamp_CurrentTimeMicroseconds;

// fun timestamp::now_microseconds [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:61:5+153
procedure {:inline 1} $1_timestamp_now_microseconds() returns ($ret0: int)
{
    // declare local variables
    var $t0: int;
    var $t1: $1_timestamp_CurrentTimeMicroseconds;
    var $t2: int;
    var $t3: int;
    var $temp_0'u64': int;

    // bytecode translation starts here
    // $t0 := 0x1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:62:48+16
    assume {:print "$at(154,2511,2527)"} true;
    $t0 := 1;
    assume $IsValid'address'($t0);

    // $t1 := get_global<timestamp::CurrentTimeMicroseconds>($t0) on_abort goto L2 with $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:62:9+13
    if (!$ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t1 := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(154,2472,2485)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(29,0):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_field<timestamp::CurrentTimeMicroseconds>.microseconds($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:62:9+69
    $t3 := $t1->$microseconds;

    // trace_return[0]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:62:9+69
    assume {:print "$track_return(29,0,0):", $t3} $t3 == $t3;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:63:5+1
    assume {:print "$at(154,2546,2547)"} true;
L1:

    // return $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:63:5+1
    assume {:print "$at(154,2546,2547)"} true;
    $ret0 := $t3;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:63:5+1
L2:

    // abort($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:63:5+1
    assume {:print "$at(154,2546,2547)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun timestamp::now_seconds [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:67:5+123
procedure {:inline 1} $1_timestamp_now_seconds() returns ($ret0: int)
{
    // declare local variables
    var $t0: int;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $temp_0'u64': int;

    // bytecode translation starts here
    // $t0 := timestamp::now_microseconds() on_abort goto L2 with $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:68:9+18
    assume {:print "$at(154,2680,2698)"} true;
    call $t0 := $1_timestamp_now_microseconds();
    if ($abort_flag) {
        assume {:print "$at(154,2680,2698)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(29,1):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := 1000000 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:68:30+23
    $t2 := 1000000;
    assume $IsValid'u64'($t2);

    // $t3 := /($t0, $t2) on_abort goto L2 with $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:68:28+1
    call $t3 := $Div($t0, $t2);
    if ($abort_flag) {
        assume {:print "$at(154,2699,2700)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(29,1):", $t1} $t1 == $t1;
        goto L2;
    }

    // trace_return[0]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:68:9+44
    assume {:print "$track_return(29,1,0):", $t3} $t3 == $t3;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:69:5+1
    assume {:print "$at(154,2729,2730)"} true;
L1:

    // return $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:69:5+1
    assume {:print "$at(154,2729,2730)"} true;
    $ret0 := $t3;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:69:5+1
L2:

    // abort($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:69:5+1
    assume {:print "$at(154,2729,2730)"} true;
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// struct fixed_point32::FixedPoint32 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/fixed_point32.move:15:5+56
datatype $1_fixed_point32_FixedPoint32 {
    $1_fixed_point32_FixedPoint32($value: int)
}
function {:inline} $Update'$1_fixed_point32_FixedPoint32'_value(s: $1_fixed_point32_FixedPoint32, x: int): $1_fixed_point32_FixedPoint32 {
    $1_fixed_point32_FixedPoint32(x)
}
function $IsValid'$1_fixed_point32_FixedPoint32'(s: $1_fixed_point32_FixedPoint32): bool {
    $IsValid'u64'(s->$value)
}
function {:inline} $IsEqual'$1_fixed_point32_FixedPoint32'(s1: $1_fixed_point32_FixedPoint32, s2: $1_fixed_point32_FixedPoint32): bool {
    s1 == s2
}

// struct staking_config::StakingConfig at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/configs/staking_config.move:49:5+1753
datatype $1_staking_config_StakingConfig {
    $1_staking_config_StakingConfig($minimum_stake: int, $maximum_stake: int, $recurring_lockup_duration_secs: int, $allow_validator_set_change: bool, $rewards_rate: int, $rewards_rate_denominator: int, $voting_power_increase_limit: int)
}
function {:inline} $Update'$1_staking_config_StakingConfig'_minimum_stake(s: $1_staking_config_StakingConfig, x: int): $1_staking_config_StakingConfig {
    $1_staking_config_StakingConfig(x, s->$maximum_stake, s->$recurring_lockup_duration_secs, s->$allow_validator_set_change, s->$rewards_rate, s->$rewards_rate_denominator, s->$voting_power_increase_limit)
}
function {:inline} $Update'$1_staking_config_StakingConfig'_maximum_stake(s: $1_staking_config_StakingConfig, x: int): $1_staking_config_StakingConfig {
    $1_staking_config_StakingConfig(s->$minimum_stake, x, s->$recurring_lockup_duration_secs, s->$allow_validator_set_change, s->$rewards_rate, s->$rewards_rate_denominator, s->$voting_power_increase_limit)
}
function {:inline} $Update'$1_staking_config_StakingConfig'_recurring_lockup_duration_secs(s: $1_staking_config_StakingConfig, x: int): $1_staking_config_StakingConfig {
    $1_staking_config_StakingConfig(s->$minimum_stake, s->$maximum_stake, x, s->$allow_validator_set_change, s->$rewards_rate, s->$rewards_rate_denominator, s->$voting_power_increase_limit)
}
function {:inline} $Update'$1_staking_config_StakingConfig'_allow_validator_set_change(s: $1_staking_config_StakingConfig, x: bool): $1_staking_config_StakingConfig {
    $1_staking_config_StakingConfig(s->$minimum_stake, s->$maximum_stake, s->$recurring_lockup_duration_secs, x, s->$rewards_rate, s->$rewards_rate_denominator, s->$voting_power_increase_limit)
}
function {:inline} $Update'$1_staking_config_StakingConfig'_rewards_rate(s: $1_staking_config_StakingConfig, x: int): $1_staking_config_StakingConfig {
    $1_staking_config_StakingConfig(s->$minimum_stake, s->$maximum_stake, s->$recurring_lockup_duration_secs, s->$allow_validator_set_change, x, s->$rewards_rate_denominator, s->$voting_power_increase_limit)
}
function {:inline} $Update'$1_staking_config_StakingConfig'_rewards_rate_denominator(s: $1_staking_config_StakingConfig, x: int): $1_staking_config_StakingConfig {
    $1_staking_config_StakingConfig(s->$minimum_stake, s->$maximum_stake, s->$recurring_lockup_duration_secs, s->$allow_validator_set_change, s->$rewards_rate, x, s->$voting_power_increase_limit)
}
function {:inline} $Update'$1_staking_config_StakingConfig'_voting_power_increase_limit(s: $1_staking_config_StakingConfig, x: int): $1_staking_config_StakingConfig {
    $1_staking_config_StakingConfig(s->$minimum_stake, s->$maximum_stake, s->$recurring_lockup_duration_secs, s->$allow_validator_set_change, s->$rewards_rate, s->$rewards_rate_denominator, x)
}
function $IsValid'$1_staking_config_StakingConfig'(s: $1_staking_config_StakingConfig): bool {
    $IsValid'u64'(s->$minimum_stake)
      && $IsValid'u64'(s->$maximum_stake)
      && $IsValid'u64'(s->$recurring_lockup_duration_secs)
      && $IsValid'bool'(s->$allow_validator_set_change)
      && $IsValid'u64'(s->$rewards_rate)
      && $IsValid'u64'(s->$rewards_rate_denominator)
      && $IsValid'u64'(s->$voting_power_increase_limit)
}
function {:inline} $IsEqual'$1_staking_config_StakingConfig'(s1: $1_staking_config_StakingConfig, s2: $1_staking_config_StakingConfig): bool {
    s1 == s2
}
var $1_staking_config_StakingConfig_$memory: $Memory $1_staking_config_StakingConfig;

// fun staking_config::get [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/configs/staking_config.move:169:5+118
procedure {:inline 1} $1_staking_config_get() returns ($ret0: $1_staking_config_StakingConfig)
{
    // declare local variables
    var $t0: int;
    var $t1: $1_staking_config_StakingConfig;
    var $t2: int;
    var $temp_0'$1_staking_config_StakingConfig': $1_staking_config_StakingConfig;

    // bytecode translation starts here
    // $t0 := 0x1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/configs/staking_config.move:170:39+16
    assume {:print "$at(113,8290,8306)"} true;
    $t0 := 1;
    assume $IsValid'address'($t0);

    // $t1 := get_global<staking_config::StakingConfig>($t0) on_abort goto L2 with $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/configs/staking_config.move:170:10+13
    if (!$ResourceExists($1_staking_config_StakingConfig_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t1 := $ResourceValue($1_staking_config_StakingConfig_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(113,8261,8274)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(36,2):", $t2} $t2 == $t2;
        goto L2;
    }

    // trace_return[0]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/configs/staking_config.move:170:9+47
    assume {:print "$track_return(36,2,0):", $t1} $t1 == $t1;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/configs/staking_config.move:171:5+1
    assume {:print "$at(113,8312,8313)"} true;
L1:

    // return $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/configs/staking_config.move:171:5+1
    assume {:print "$at(113,8312,8313)"} true;
    $ret0 := $t1;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/configs/staking_config.move:171:5+1
L2:

    // abort($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/configs/staking_config.move:171:5+1
    assume {:print "$at(113,8312,8313)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun staking_config::get_recurring_lockup_duration [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/configs/staking_config.move:185:5+123
procedure {:inline 1} $1_staking_config_get_recurring_lockup_duration(_$t0: $1_staking_config_StakingConfig) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $1_staking_config_StakingConfig;
    var $temp_0'$1_staking_config_StakingConfig': $1_staking_config_StakingConfig;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[config]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/configs/staking_config.move:185:5+1
    assume {:print "$at(113,8826,8827)"} true;
    assume {:print "$track_local(36,4,0):", $t0} $t0 == $t0;

    // $t1 := get_field<staking_config::StakingConfig>.recurring_lockup_duration_secs($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/configs/staking_config.move:186:9+37
    assume {:print "$at(113,8906,8943)"} true;
    $t1 := $t0->$recurring_lockup_duration_secs;

    // trace_return[0]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/configs/staking_config.move:186:9+37
    assume {:print "$track_return(36,4,0):", $t1} $t1 == $t1;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/configs/staking_config.move:187:5+1
    assume {:print "$at(113,8948,8949)"} true;
L1:

    // return $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/configs/staking_config.move:187:5+1
    assume {:print "$at(113,8948,8949)"} true;
    $ret0 := $t1;
    return;

}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:400:5+89
function {:inline} $1_stake_$stake_pool_exists($1_stake_StakePool_$memory: $Memory $1_stake_StakePool, addr: int): bool {
    $ResourceExists($1_stake_StakePool_$memory, addr)
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:43:10+500
function {:inline} $1_stake_validator_set_is_valid($1_stake_StakePool_$memory: $Memory $1_stake_StakePool, $1_stake_ValidatorConfig_$memory: $Memory $1_stake_ValidatorConfig, $1_stake_ValidatorPerformance_$memory: $Memory $1_stake_ValidatorPerformance, $1_stake_ValidatorSet_$memory: $Memory $1_stake_ValidatorSet): bool {
    (var validator_set := $ResourceValue($1_stake_ValidatorSet_$memory, 1); (((($1_stake_spec_validators_are_initialized($1_stake_StakePool_$memory, $1_stake_ValidatorConfig_$memory, validator_set->$active_validators) && $1_stake_spec_validators_are_initialized($1_stake_StakePool_$memory, $1_stake_ValidatorConfig_$memory, validator_set->$pending_inactive)) && $1_stake_spec_validators_are_initialized($1_stake_StakePool_$memory, $1_stake_ValidatorConfig_$memory, validator_set->$pending_active)) && $1_stake_spec_validator_indices_are_valid($1_stake_ValidatorConfig_$memory, $1_stake_ValidatorPerformance_$memory, validator_set->$active_validators)) && $1_stake_spec_validator_indices_are_valid($1_stake_ValidatorConfig_$memory, $1_stake_ValidatorPerformance_$memory, validator_set->$pending_inactive)))
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:536:10+241
function {:inline} $1_stake_spec_validators_are_initialized($1_stake_StakePool_$memory: $Memory $1_stake_StakePool, $1_stake_ValidatorConfig_$memory: $Memory $1_stake_ValidatorConfig, validators: Vec ($1_stake_ValidatorInfo)): bool {
    (var $range_0 := $Range(0, LenVec(validators)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (($1_stake_spec_has_stake_pool($1_stake_StakePool_$memory, ReadVec(validators, i)->$addr) && $1_stake_spec_has_validator_config($1_stake_ValidatorConfig_$memory, ReadVec(validators, i)->$addr))))))
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:543:10+234
function {:inline} $1_stake_spec_validator_indices_are_valid($1_stake_ValidatorConfig_$memory: $Memory $1_stake_ValidatorConfig, $1_stake_ValidatorPerformance_$memory: $Memory $1_stake_ValidatorPerformance, validators: Vec ($1_stake_ValidatorInfo)): bool {
    (var $range_2 := $Range(0, LenVec(validators)); (forall $i_3: int :: $InRange($range_2, $i_3) ==> (var i := $i_3;
    (($ResourceValue($1_stake_ValidatorConfig_$memory, ReadVec(validators, i)->$addr)->$validator_index < $1_stake_spec_validator_index_upper_bound($1_stake_ValidatorPerformance_$memory))))))
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:549:10+122
function {:inline} $1_stake_spec_validator_index_upper_bound($1_stake_ValidatorPerformance_$memory: $Memory $1_stake_ValidatorPerformance): int {
    LenVec($ResourceValue($1_stake_ValidatorPerformance_$memory, 1)->$validators)
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:553:10+78
function {:inline} $1_stake_spec_has_stake_pool($1_stake_StakePool_$memory: $Memory $1_stake_StakePool, a: int): bool {
    $ResourceExists($1_stake_StakePool_$memory, a)
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:557:10+90
function {:inline} $1_stake_spec_has_validator_config($1_stake_ValidatorConfig_$memory: $Memory $1_stake_ValidatorConfig, a: int): bool {
    $ResourceExists($1_stake_ValidatorConfig_$memory, a)
}

// struct stake::AddStakeEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:210:5+102
datatype $1_stake_AddStakeEvent {
    $1_stake_AddStakeEvent($pool_address: int, $amount_added: int)
}
function {:inline} $Update'$1_stake_AddStakeEvent'_pool_address(s: $1_stake_AddStakeEvent, x: int): $1_stake_AddStakeEvent {
    $1_stake_AddStakeEvent(x, s->$amount_added)
}
function {:inline} $Update'$1_stake_AddStakeEvent'_amount_added(s: $1_stake_AddStakeEvent, x: int): $1_stake_AddStakeEvent {
    $1_stake_AddStakeEvent(s->$pool_address, x)
}
function $IsValid'$1_stake_AddStakeEvent'(s: $1_stake_AddStakeEvent): bool {
    $IsValid'address'(s->$pool_address)
      && $IsValid'u64'(s->$amount_added)
}
function {:inline} $IsEqual'$1_stake_AddStakeEvent'(s1: $1_stake_AddStakeEvent, s2: $1_stake_AddStakeEvent): bool {
    s1 == s2
}

// struct stake::DistributeRewardsEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:244:5+113
datatype $1_stake_DistributeRewardsEvent {
    $1_stake_DistributeRewardsEvent($pool_address: int, $rewards_amount: int)
}
function {:inline} $Update'$1_stake_DistributeRewardsEvent'_pool_address(s: $1_stake_DistributeRewardsEvent, x: int): $1_stake_DistributeRewardsEvent {
    $1_stake_DistributeRewardsEvent(x, s->$rewards_amount)
}
function {:inline} $Update'$1_stake_DistributeRewardsEvent'_rewards_amount(s: $1_stake_DistributeRewardsEvent, x: int): $1_stake_DistributeRewardsEvent {
    $1_stake_DistributeRewardsEvent(s->$pool_address, x)
}
function $IsValid'$1_stake_DistributeRewardsEvent'(s: $1_stake_DistributeRewardsEvent): bool {
    $IsValid'address'(s->$pool_address)
      && $IsValid'u64'(s->$rewards_amount)
}
function {:inline} $IsEqual'$1_stake_DistributeRewardsEvent'(s1: $1_stake_DistributeRewardsEvent, s2: $1_stake_DistributeRewardsEvent): bool {
    s1 == s2
}

// struct stake::IncreaseLockupEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:234:5+153
datatype $1_stake_IncreaseLockupEvent {
    $1_stake_IncreaseLockupEvent($pool_address: int, $old_locked_until_secs: int, $new_locked_until_secs: int)
}
function {:inline} $Update'$1_stake_IncreaseLockupEvent'_pool_address(s: $1_stake_IncreaseLockupEvent, x: int): $1_stake_IncreaseLockupEvent {
    $1_stake_IncreaseLockupEvent(x, s->$old_locked_until_secs, s->$new_locked_until_secs)
}
function {:inline} $Update'$1_stake_IncreaseLockupEvent'_old_locked_until_secs(s: $1_stake_IncreaseLockupEvent, x: int): $1_stake_IncreaseLockupEvent {
    $1_stake_IncreaseLockupEvent(s->$pool_address, x, s->$new_locked_until_secs)
}
function {:inline} $Update'$1_stake_IncreaseLockupEvent'_new_locked_until_secs(s: $1_stake_IncreaseLockupEvent, x: int): $1_stake_IncreaseLockupEvent {
    $1_stake_IncreaseLockupEvent(s->$pool_address, s->$old_locked_until_secs, x)
}
function $IsValid'$1_stake_IncreaseLockupEvent'(s: $1_stake_IncreaseLockupEvent): bool {
    $IsValid'address'(s->$pool_address)
      && $IsValid'u64'(s->$old_locked_until_secs)
      && $IsValid'u64'(s->$new_locked_until_secs)
}
function {:inline} $IsEqual'$1_stake_IncreaseLockupEvent'(s1: $1_stake_IncreaseLockupEvent, s2: $1_stake_IncreaseLockupEvent): bool {
    s1 == s2
}

// struct stake::IndividualValidatorPerformance at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:191:5+127
datatype $1_stake_IndividualValidatorPerformance {
    $1_stake_IndividualValidatorPerformance($successful_proposals: int, $failed_proposals: int)
}
function {:inline} $Update'$1_stake_IndividualValidatorPerformance'_successful_proposals(s: $1_stake_IndividualValidatorPerformance, x: int): $1_stake_IndividualValidatorPerformance {
    $1_stake_IndividualValidatorPerformance(x, s->$failed_proposals)
}
function {:inline} $Update'$1_stake_IndividualValidatorPerformance'_failed_proposals(s: $1_stake_IndividualValidatorPerformance, x: int): $1_stake_IndividualValidatorPerformance {
    $1_stake_IndividualValidatorPerformance(s->$successful_proposals, x)
}
function $IsValid'$1_stake_IndividualValidatorPerformance'(s: $1_stake_IndividualValidatorPerformance): bool {
    $IsValid'u64'(s->$successful_proposals)
      && $IsValid'u64'(s->$failed_proposals)
}
function {:inline} $IsEqual'$1_stake_IndividualValidatorPerformance'(s1: $1_stake_IndividualValidatorPerformance, s2: $1_stake_IndividualValidatorPerformance): bool {
    s1 == s2
}

// struct stake::JoinValidatorSetEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:240:5+83
datatype $1_stake_JoinValidatorSetEvent {
    $1_stake_JoinValidatorSetEvent($pool_address: int)
}
function {:inline} $Update'$1_stake_JoinValidatorSetEvent'_pool_address(s: $1_stake_JoinValidatorSetEvent, x: int): $1_stake_JoinValidatorSetEvent {
    $1_stake_JoinValidatorSetEvent(x)
}
function $IsValid'$1_stake_JoinValidatorSetEvent'(s: $1_stake_JoinValidatorSetEvent): bool {
    $IsValid'address'(s->$pool_address)
}
function {:inline} $IsEqual'$1_stake_JoinValidatorSetEvent'(s1: $1_stake_JoinValidatorSetEvent, s2: $1_stake_JoinValidatorSetEvent): bool {
    s1 == s2
}

// struct stake::LeaveValidatorSetEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:259:5+84
datatype $1_stake_LeaveValidatorSetEvent {
    $1_stake_LeaveValidatorSetEvent($pool_address: int)
}
function {:inline} $Update'$1_stake_LeaveValidatorSetEvent'_pool_address(s: $1_stake_LeaveValidatorSetEvent, x: int): $1_stake_LeaveValidatorSetEvent {
    $1_stake_LeaveValidatorSetEvent(x)
}
function $IsValid'$1_stake_LeaveValidatorSetEvent'(s: $1_stake_LeaveValidatorSetEvent): bool {
    $IsValid'address'(s->$pool_address)
}
function {:inline} $IsEqual'$1_stake_LeaveValidatorSetEvent'(s1: $1_stake_LeaveValidatorSetEvent, s2: $1_stake_LeaveValidatorSetEvent): bool {
    s1 == s2
}

// struct stake::OwnerCapability at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:100:5+76
datatype $1_stake_OwnerCapability {
    $1_stake_OwnerCapability($pool_address: int)
}
function {:inline} $Update'$1_stake_OwnerCapability'_pool_address(s: $1_stake_OwnerCapability, x: int): $1_stake_OwnerCapability {
    $1_stake_OwnerCapability(x)
}
function $IsValid'$1_stake_OwnerCapability'(s: $1_stake_OwnerCapability): bool {
    $IsValid'address'(s->$pool_address)
}
function {:inline} $IsEqual'$1_stake_OwnerCapability'(s1: $1_stake_OwnerCapability, s2: $1_stake_OwnerCapability): bool {
    s1 == s2
}
var $1_stake_OwnerCapability_$memory: $Memory $1_stake_OwnerCapability;

// struct stake::ReactivateStakeEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:215:5+103
datatype $1_stake_ReactivateStakeEvent {
    $1_stake_ReactivateStakeEvent($pool_address: int, $amount: int)
}
function {:inline} $Update'$1_stake_ReactivateStakeEvent'_pool_address(s: $1_stake_ReactivateStakeEvent, x: int): $1_stake_ReactivateStakeEvent {
    $1_stake_ReactivateStakeEvent(x, s->$amount)
}
function {:inline} $Update'$1_stake_ReactivateStakeEvent'_amount(s: $1_stake_ReactivateStakeEvent, x: int): $1_stake_ReactivateStakeEvent {
    $1_stake_ReactivateStakeEvent(s->$pool_address, x)
}
function $IsValid'$1_stake_ReactivateStakeEvent'(s: $1_stake_ReactivateStakeEvent): bool {
    $IsValid'address'(s->$pool_address)
      && $IsValid'u64'(s->$amount)
}
function {:inline} $IsEqual'$1_stake_ReactivateStakeEvent'(s1: $1_stake_ReactivateStakeEvent, s2: $1_stake_ReactivateStakeEvent): bool {
    s1 == s2
}

// struct stake::RegisterValidatorCandidateEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:200:5+93
datatype $1_stake_RegisterValidatorCandidateEvent {
    $1_stake_RegisterValidatorCandidateEvent($pool_address: int)
}
function {:inline} $Update'$1_stake_RegisterValidatorCandidateEvent'_pool_address(s: $1_stake_RegisterValidatorCandidateEvent, x: int): $1_stake_RegisterValidatorCandidateEvent {
    $1_stake_RegisterValidatorCandidateEvent(x)
}
function $IsValid'$1_stake_RegisterValidatorCandidateEvent'(s: $1_stake_RegisterValidatorCandidateEvent): bool {
    $IsValid'address'(s->$pool_address)
}
function {:inline} $IsEqual'$1_stake_RegisterValidatorCandidateEvent'(s1: $1_stake_RegisterValidatorCandidateEvent, s2: $1_stake_RegisterValidatorCandidateEvent): bool {
    s1 == s2
}

// struct stake::RotateConsensusKeyEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:220:5+169
datatype $1_stake_RotateConsensusKeyEvent {
    $1_stake_RotateConsensusKeyEvent($pool_address: int, $old_consensus_pubkey: Vec (int), $new_consensus_pubkey: Vec (int))
}
function {:inline} $Update'$1_stake_RotateConsensusKeyEvent'_pool_address(s: $1_stake_RotateConsensusKeyEvent, x: int): $1_stake_RotateConsensusKeyEvent {
    $1_stake_RotateConsensusKeyEvent(x, s->$old_consensus_pubkey, s->$new_consensus_pubkey)
}
function {:inline} $Update'$1_stake_RotateConsensusKeyEvent'_old_consensus_pubkey(s: $1_stake_RotateConsensusKeyEvent, x: Vec (int)): $1_stake_RotateConsensusKeyEvent {
    $1_stake_RotateConsensusKeyEvent(s->$pool_address, x, s->$new_consensus_pubkey)
}
function {:inline} $Update'$1_stake_RotateConsensusKeyEvent'_new_consensus_pubkey(s: $1_stake_RotateConsensusKeyEvent, x: Vec (int)): $1_stake_RotateConsensusKeyEvent {
    $1_stake_RotateConsensusKeyEvent(s->$pool_address, s->$old_consensus_pubkey, x)
}
function $IsValid'$1_stake_RotateConsensusKeyEvent'(s: $1_stake_RotateConsensusKeyEvent): bool {
    $IsValid'address'(s->$pool_address)
      && $IsValid'vec'u8''(s->$old_consensus_pubkey)
      && $IsValid'vec'u8''(s->$new_consensus_pubkey)
}
function {:inline} $IsEqual'$1_stake_RotateConsensusKeyEvent'(s1: $1_stake_RotateConsensusKeyEvent, s2: $1_stake_RotateConsensusKeyEvent): bool {
    $IsEqual'address'(s1->$pool_address, s2->$pool_address)
    && $IsEqual'vec'u8''(s1->$old_consensus_pubkey, s2->$old_consensus_pubkey)
    && $IsEqual'vec'u8''(s1->$new_consensus_pubkey, s2->$new_consensus_pubkey)}

// struct stake::SetOperatorEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:204:5+140
datatype $1_stake_SetOperatorEvent {
    $1_stake_SetOperatorEvent($pool_address: int, $old_operator: int, $new_operator: int)
}
function {:inline} $Update'$1_stake_SetOperatorEvent'_pool_address(s: $1_stake_SetOperatorEvent, x: int): $1_stake_SetOperatorEvent {
    $1_stake_SetOperatorEvent(x, s->$old_operator, s->$new_operator)
}
function {:inline} $Update'$1_stake_SetOperatorEvent'_old_operator(s: $1_stake_SetOperatorEvent, x: int): $1_stake_SetOperatorEvent {
    $1_stake_SetOperatorEvent(s->$pool_address, x, s->$new_operator)
}
function {:inline} $Update'$1_stake_SetOperatorEvent'_new_operator(s: $1_stake_SetOperatorEvent, x: int): $1_stake_SetOperatorEvent {
    $1_stake_SetOperatorEvent(s->$pool_address, s->$old_operator, x)
}
function $IsValid'$1_stake_SetOperatorEvent'(s: $1_stake_SetOperatorEvent): bool {
    $IsValid'address'(s->$pool_address)
      && $IsValid'address'(s->$old_operator)
      && $IsValid'address'(s->$new_operator)
}
function {:inline} $IsEqual'$1_stake_SetOperatorEvent'(s1: $1_stake_SetOperatorEvent, s2: $1_stake_SetOperatorEvent): bool {
    s1 == s2
}

// struct stake::StakePool at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:115:5+1829
datatype $1_stake_StakePool {
    $1_stake_StakePool($active: $1_coin_Coin'$1_aptos_coin_AptosCoin', $inactive: $1_coin_Coin'$1_aptos_coin_AptosCoin', $pending_active: $1_coin_Coin'$1_aptos_coin_AptosCoin', $pending_inactive: $1_coin_Coin'$1_aptos_coin_AptosCoin', $locked_until_secs: int, $operator_address: int, $delegated_voter: int, $initialize_validator_events: $1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent', $set_operator_events: $1_event_EventHandle'$1_stake_SetOperatorEvent', $add_stake_events: $1_event_EventHandle'$1_stake_AddStakeEvent', $reactivate_stake_events: $1_event_EventHandle'$1_stake_ReactivateStakeEvent', $rotate_consensus_key_events: $1_event_EventHandle'$1_stake_RotateConsensusKeyEvent', $update_network_and_fullnode_addresses_events: $1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent', $increase_lockup_events: $1_event_EventHandle'$1_stake_IncreaseLockupEvent', $join_validator_set_events: $1_event_EventHandle'$1_stake_JoinValidatorSetEvent', $distribute_rewards_events: $1_event_EventHandle'$1_stake_DistributeRewardsEvent', $unlock_stake_events: $1_event_EventHandle'$1_stake_UnlockStakeEvent', $withdraw_stake_events: $1_event_EventHandle'$1_stake_WithdrawStakeEvent', $leave_validator_set_events: $1_event_EventHandle'$1_stake_LeaveValidatorSetEvent')
}
function {:inline} $Update'$1_stake_StakePool'_active(s: $1_stake_StakePool, x: $1_coin_Coin'$1_aptos_coin_AptosCoin'): $1_stake_StakePool {
    $1_stake_StakePool(x, s->$inactive, s->$pending_active, s->$pending_inactive, s->$locked_until_secs, s->$operator_address, s->$delegated_voter, s->$initialize_validator_events, s->$set_operator_events, s->$add_stake_events, s->$reactivate_stake_events, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, s->$join_validator_set_events, s->$distribute_rewards_events, s->$unlock_stake_events, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_inactive(s: $1_stake_StakePool, x: $1_coin_Coin'$1_aptos_coin_AptosCoin'): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, x, s->$pending_active, s->$pending_inactive, s->$locked_until_secs, s->$operator_address, s->$delegated_voter, s->$initialize_validator_events, s->$set_operator_events, s->$add_stake_events, s->$reactivate_stake_events, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, s->$join_validator_set_events, s->$distribute_rewards_events, s->$unlock_stake_events, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_pending_active(s: $1_stake_StakePool, x: $1_coin_Coin'$1_aptos_coin_AptosCoin'): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, x, s->$pending_inactive, s->$locked_until_secs, s->$operator_address, s->$delegated_voter, s->$initialize_validator_events, s->$set_operator_events, s->$add_stake_events, s->$reactivate_stake_events, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, s->$join_validator_set_events, s->$distribute_rewards_events, s->$unlock_stake_events, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_pending_inactive(s: $1_stake_StakePool, x: $1_coin_Coin'$1_aptos_coin_AptosCoin'): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, s->$pending_active, x, s->$locked_until_secs, s->$operator_address, s->$delegated_voter, s->$initialize_validator_events, s->$set_operator_events, s->$add_stake_events, s->$reactivate_stake_events, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, s->$join_validator_set_events, s->$distribute_rewards_events, s->$unlock_stake_events, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_locked_until_secs(s: $1_stake_StakePool, x: int): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, s->$pending_active, s->$pending_inactive, x, s->$operator_address, s->$delegated_voter, s->$initialize_validator_events, s->$set_operator_events, s->$add_stake_events, s->$reactivate_stake_events, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, s->$join_validator_set_events, s->$distribute_rewards_events, s->$unlock_stake_events, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_operator_address(s: $1_stake_StakePool, x: int): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, s->$pending_active, s->$pending_inactive, s->$locked_until_secs, x, s->$delegated_voter, s->$initialize_validator_events, s->$set_operator_events, s->$add_stake_events, s->$reactivate_stake_events, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, s->$join_validator_set_events, s->$distribute_rewards_events, s->$unlock_stake_events, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_delegated_voter(s: $1_stake_StakePool, x: int): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, s->$pending_active, s->$pending_inactive, s->$locked_until_secs, s->$operator_address, x, s->$initialize_validator_events, s->$set_operator_events, s->$add_stake_events, s->$reactivate_stake_events, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, s->$join_validator_set_events, s->$distribute_rewards_events, s->$unlock_stake_events, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_initialize_validator_events(s: $1_stake_StakePool, x: $1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent'): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, s->$pending_active, s->$pending_inactive, s->$locked_until_secs, s->$operator_address, s->$delegated_voter, x, s->$set_operator_events, s->$add_stake_events, s->$reactivate_stake_events, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, s->$join_validator_set_events, s->$distribute_rewards_events, s->$unlock_stake_events, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_set_operator_events(s: $1_stake_StakePool, x: $1_event_EventHandle'$1_stake_SetOperatorEvent'): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, s->$pending_active, s->$pending_inactive, s->$locked_until_secs, s->$operator_address, s->$delegated_voter, s->$initialize_validator_events, x, s->$add_stake_events, s->$reactivate_stake_events, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, s->$join_validator_set_events, s->$distribute_rewards_events, s->$unlock_stake_events, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_add_stake_events(s: $1_stake_StakePool, x: $1_event_EventHandle'$1_stake_AddStakeEvent'): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, s->$pending_active, s->$pending_inactive, s->$locked_until_secs, s->$operator_address, s->$delegated_voter, s->$initialize_validator_events, s->$set_operator_events, x, s->$reactivate_stake_events, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, s->$join_validator_set_events, s->$distribute_rewards_events, s->$unlock_stake_events, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_reactivate_stake_events(s: $1_stake_StakePool, x: $1_event_EventHandle'$1_stake_ReactivateStakeEvent'): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, s->$pending_active, s->$pending_inactive, s->$locked_until_secs, s->$operator_address, s->$delegated_voter, s->$initialize_validator_events, s->$set_operator_events, s->$add_stake_events, x, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, s->$join_validator_set_events, s->$distribute_rewards_events, s->$unlock_stake_events, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_rotate_consensus_key_events(s: $1_stake_StakePool, x: $1_event_EventHandle'$1_stake_RotateConsensusKeyEvent'): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, s->$pending_active, s->$pending_inactive, s->$locked_until_secs, s->$operator_address, s->$delegated_voter, s->$initialize_validator_events, s->$set_operator_events, s->$add_stake_events, s->$reactivate_stake_events, x, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, s->$join_validator_set_events, s->$distribute_rewards_events, s->$unlock_stake_events, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_update_network_and_fullnode_addresses_events(s: $1_stake_StakePool, x: $1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent'): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, s->$pending_active, s->$pending_inactive, s->$locked_until_secs, s->$operator_address, s->$delegated_voter, s->$initialize_validator_events, s->$set_operator_events, s->$add_stake_events, s->$reactivate_stake_events, s->$rotate_consensus_key_events, x, s->$increase_lockup_events, s->$join_validator_set_events, s->$distribute_rewards_events, s->$unlock_stake_events, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_increase_lockup_events(s: $1_stake_StakePool, x: $1_event_EventHandle'$1_stake_IncreaseLockupEvent'): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, s->$pending_active, s->$pending_inactive, s->$locked_until_secs, s->$operator_address, s->$delegated_voter, s->$initialize_validator_events, s->$set_operator_events, s->$add_stake_events, s->$reactivate_stake_events, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, x, s->$join_validator_set_events, s->$distribute_rewards_events, s->$unlock_stake_events, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_join_validator_set_events(s: $1_stake_StakePool, x: $1_event_EventHandle'$1_stake_JoinValidatorSetEvent'): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, s->$pending_active, s->$pending_inactive, s->$locked_until_secs, s->$operator_address, s->$delegated_voter, s->$initialize_validator_events, s->$set_operator_events, s->$add_stake_events, s->$reactivate_stake_events, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, x, s->$distribute_rewards_events, s->$unlock_stake_events, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_distribute_rewards_events(s: $1_stake_StakePool, x: $1_event_EventHandle'$1_stake_DistributeRewardsEvent'): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, s->$pending_active, s->$pending_inactive, s->$locked_until_secs, s->$operator_address, s->$delegated_voter, s->$initialize_validator_events, s->$set_operator_events, s->$add_stake_events, s->$reactivate_stake_events, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, s->$join_validator_set_events, x, s->$unlock_stake_events, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_unlock_stake_events(s: $1_stake_StakePool, x: $1_event_EventHandle'$1_stake_UnlockStakeEvent'): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, s->$pending_active, s->$pending_inactive, s->$locked_until_secs, s->$operator_address, s->$delegated_voter, s->$initialize_validator_events, s->$set_operator_events, s->$add_stake_events, s->$reactivate_stake_events, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, s->$join_validator_set_events, s->$distribute_rewards_events, x, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_withdraw_stake_events(s: $1_stake_StakePool, x: $1_event_EventHandle'$1_stake_WithdrawStakeEvent'): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, s->$pending_active, s->$pending_inactive, s->$locked_until_secs, s->$operator_address, s->$delegated_voter, s->$initialize_validator_events, s->$set_operator_events, s->$add_stake_events, s->$reactivate_stake_events, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, s->$join_validator_set_events, s->$distribute_rewards_events, s->$unlock_stake_events, x, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_leave_validator_set_events(s: $1_stake_StakePool, x: $1_event_EventHandle'$1_stake_LeaveValidatorSetEvent'): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, s->$pending_active, s->$pending_inactive, s->$locked_until_secs, s->$operator_address, s->$delegated_voter, s->$initialize_validator_events, s->$set_operator_events, s->$add_stake_events, s->$reactivate_stake_events, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, s->$join_validator_set_events, s->$distribute_rewards_events, s->$unlock_stake_events, s->$withdraw_stake_events, x)
}
function $IsValid'$1_stake_StakePool'(s: $1_stake_StakePool): bool {
    $IsValid'$1_coin_Coin'$1_aptos_coin_AptosCoin''(s->$active)
      && $IsValid'$1_coin_Coin'$1_aptos_coin_AptosCoin''(s->$inactive)
      && $IsValid'$1_coin_Coin'$1_aptos_coin_AptosCoin''(s->$pending_active)
      && $IsValid'$1_coin_Coin'$1_aptos_coin_AptosCoin''(s->$pending_inactive)
      && $IsValid'u64'(s->$locked_until_secs)
      && $IsValid'address'(s->$operator_address)
      && $IsValid'address'(s->$delegated_voter)
      && $IsValid'$1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent''(s->$initialize_validator_events)
      && $IsValid'$1_event_EventHandle'$1_stake_SetOperatorEvent''(s->$set_operator_events)
      && $IsValid'$1_event_EventHandle'$1_stake_AddStakeEvent''(s->$add_stake_events)
      && $IsValid'$1_event_EventHandle'$1_stake_ReactivateStakeEvent''(s->$reactivate_stake_events)
      && $IsValid'$1_event_EventHandle'$1_stake_RotateConsensusKeyEvent''(s->$rotate_consensus_key_events)
      && $IsValid'$1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent''(s->$update_network_and_fullnode_addresses_events)
      && $IsValid'$1_event_EventHandle'$1_stake_IncreaseLockupEvent''(s->$increase_lockup_events)
      && $IsValid'$1_event_EventHandle'$1_stake_JoinValidatorSetEvent''(s->$join_validator_set_events)
      && $IsValid'$1_event_EventHandle'$1_stake_DistributeRewardsEvent''(s->$distribute_rewards_events)
      && $IsValid'$1_event_EventHandle'$1_stake_UnlockStakeEvent''(s->$unlock_stake_events)
      && $IsValid'$1_event_EventHandle'$1_stake_WithdrawStakeEvent''(s->$withdraw_stake_events)
      && $IsValid'$1_event_EventHandle'$1_stake_LeaveValidatorSetEvent''(s->$leave_validator_set_events)
}
function {:inline} $IsEqual'$1_stake_StakePool'(s1: $1_stake_StakePool, s2: $1_stake_StakePool): bool {
    s1 == s2
}
var $1_stake_StakePool_$memory: $Memory $1_stake_StakePool;

// struct stake::UnlockStakeEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:249:5+108
datatype $1_stake_UnlockStakeEvent {
    $1_stake_UnlockStakeEvent($pool_address: int, $amount_unlocked: int)
}
function {:inline} $Update'$1_stake_UnlockStakeEvent'_pool_address(s: $1_stake_UnlockStakeEvent, x: int): $1_stake_UnlockStakeEvent {
    $1_stake_UnlockStakeEvent(x, s->$amount_unlocked)
}
function {:inline} $Update'$1_stake_UnlockStakeEvent'_amount_unlocked(s: $1_stake_UnlockStakeEvent, x: int): $1_stake_UnlockStakeEvent {
    $1_stake_UnlockStakeEvent(s->$pool_address, x)
}
function $IsValid'$1_stake_UnlockStakeEvent'(s: $1_stake_UnlockStakeEvent): bool {
    $IsValid'address'(s->$pool_address)
      && $IsValid'u64'(s->$amount_unlocked)
}
function {:inline} $IsEqual'$1_stake_UnlockStakeEvent'(s1: $1_stake_UnlockStakeEvent, s2: $1_stake_UnlockStakeEvent): bool {
    s1 == s2
}

// struct stake::UpdateNetworkAndFullnodeAddressesEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:226:5+274
datatype $1_stake_UpdateNetworkAndFullnodeAddressesEvent {
    $1_stake_UpdateNetworkAndFullnodeAddressesEvent($pool_address: int, $old_network_addresses: Vec (int), $new_network_addresses: Vec (int), $old_fullnode_addresses: Vec (int), $new_fullnode_addresses: Vec (int))
}
function {:inline} $Update'$1_stake_UpdateNetworkAndFullnodeAddressesEvent'_pool_address(s: $1_stake_UpdateNetworkAndFullnodeAddressesEvent, x: int): $1_stake_UpdateNetworkAndFullnodeAddressesEvent {
    $1_stake_UpdateNetworkAndFullnodeAddressesEvent(x, s->$old_network_addresses, s->$new_network_addresses, s->$old_fullnode_addresses, s->$new_fullnode_addresses)
}
function {:inline} $Update'$1_stake_UpdateNetworkAndFullnodeAddressesEvent'_old_network_addresses(s: $1_stake_UpdateNetworkAndFullnodeAddressesEvent, x: Vec (int)): $1_stake_UpdateNetworkAndFullnodeAddressesEvent {
    $1_stake_UpdateNetworkAndFullnodeAddressesEvent(s->$pool_address, x, s->$new_network_addresses, s->$old_fullnode_addresses, s->$new_fullnode_addresses)
}
function {:inline} $Update'$1_stake_UpdateNetworkAndFullnodeAddressesEvent'_new_network_addresses(s: $1_stake_UpdateNetworkAndFullnodeAddressesEvent, x: Vec (int)): $1_stake_UpdateNetworkAndFullnodeAddressesEvent {
    $1_stake_UpdateNetworkAndFullnodeAddressesEvent(s->$pool_address, s->$old_network_addresses, x, s->$old_fullnode_addresses, s->$new_fullnode_addresses)
}
function {:inline} $Update'$1_stake_UpdateNetworkAndFullnodeAddressesEvent'_old_fullnode_addresses(s: $1_stake_UpdateNetworkAndFullnodeAddressesEvent, x: Vec (int)): $1_stake_UpdateNetworkAndFullnodeAddressesEvent {
    $1_stake_UpdateNetworkAndFullnodeAddressesEvent(s->$pool_address, s->$old_network_addresses, s->$new_network_addresses, x, s->$new_fullnode_addresses)
}
function {:inline} $Update'$1_stake_UpdateNetworkAndFullnodeAddressesEvent'_new_fullnode_addresses(s: $1_stake_UpdateNetworkAndFullnodeAddressesEvent, x: Vec (int)): $1_stake_UpdateNetworkAndFullnodeAddressesEvent {
    $1_stake_UpdateNetworkAndFullnodeAddressesEvent(s->$pool_address, s->$old_network_addresses, s->$new_network_addresses, s->$old_fullnode_addresses, x)
}
function $IsValid'$1_stake_UpdateNetworkAndFullnodeAddressesEvent'(s: $1_stake_UpdateNetworkAndFullnodeAddressesEvent): bool {
    $IsValid'address'(s->$pool_address)
      && $IsValid'vec'u8''(s->$old_network_addresses)
      && $IsValid'vec'u8''(s->$new_network_addresses)
      && $IsValid'vec'u8''(s->$old_fullnode_addresses)
      && $IsValid'vec'u8''(s->$new_fullnode_addresses)
}
function {:inline} $IsEqual'$1_stake_UpdateNetworkAndFullnodeAddressesEvent'(s1: $1_stake_UpdateNetworkAndFullnodeAddressesEvent, s2: $1_stake_UpdateNetworkAndFullnodeAddressesEvent): bool {
    $IsEqual'address'(s1->$pool_address, s2->$pool_address)
    && $IsEqual'vec'u8''(s1->$old_network_addresses, s2->$old_network_addresses)
    && $IsEqual'vec'u8''(s1->$new_network_addresses, s2->$new_network_addresses)
    && $IsEqual'vec'u8''(s1->$old_fullnode_addresses, s2->$old_fullnode_addresses)
    && $IsEqual'vec'u8''(s1->$new_fullnode_addresses, s2->$new_fullnode_addresses)}

// struct stake::ValidatorConfig at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:151:5+372
datatype $1_stake_ValidatorConfig {
    $1_stake_ValidatorConfig($consensus_pubkey: Vec (int), $network_addresses: Vec (int), $fullnode_addresses: Vec (int), $validator_index: int)
}
function {:inline} $Update'$1_stake_ValidatorConfig'_consensus_pubkey(s: $1_stake_ValidatorConfig, x: Vec (int)): $1_stake_ValidatorConfig {
    $1_stake_ValidatorConfig(x, s->$network_addresses, s->$fullnode_addresses, s->$validator_index)
}
function {:inline} $Update'$1_stake_ValidatorConfig'_network_addresses(s: $1_stake_ValidatorConfig, x: Vec (int)): $1_stake_ValidatorConfig {
    $1_stake_ValidatorConfig(s->$consensus_pubkey, x, s->$fullnode_addresses, s->$validator_index)
}
function {:inline} $Update'$1_stake_ValidatorConfig'_fullnode_addresses(s: $1_stake_ValidatorConfig, x: Vec (int)): $1_stake_ValidatorConfig {
    $1_stake_ValidatorConfig(s->$consensus_pubkey, s->$network_addresses, x, s->$validator_index)
}
function {:inline} $Update'$1_stake_ValidatorConfig'_validator_index(s: $1_stake_ValidatorConfig, x: int): $1_stake_ValidatorConfig {
    $1_stake_ValidatorConfig(s->$consensus_pubkey, s->$network_addresses, s->$fullnode_addresses, x)
}
function $IsValid'$1_stake_ValidatorConfig'(s: $1_stake_ValidatorConfig): bool {
    $IsValid'vec'u8''(s->$consensus_pubkey)
      && $IsValid'vec'u8''(s->$network_addresses)
      && $IsValid'vec'u8''(s->$fullnode_addresses)
      && $IsValid'u64'(s->$validator_index)
}
function {:inline} $IsEqual'$1_stake_ValidatorConfig'(s1: $1_stake_ValidatorConfig, s2: $1_stake_ValidatorConfig): bool {
    $IsEqual'vec'u8''(s1->$consensus_pubkey, s2->$consensus_pubkey)
    && $IsEqual'vec'u8''(s1->$network_addresses, s2->$network_addresses)
    && $IsEqual'vec'u8''(s1->$fullnode_addresses, s2->$fullnode_addresses)
    && $IsEqual'u64'(s1->$validator_index, s2->$validator_index)}
var $1_stake_ValidatorConfig_$memory: $Memory $1_stake_ValidatorConfig;

// struct stake::ValidatorInfo at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:161:5+133
datatype $1_stake_ValidatorInfo {
    $1_stake_ValidatorInfo($addr: int, $voting_power: int, $config: $1_stake_ValidatorConfig)
}
function {:inline} $Update'$1_stake_ValidatorInfo'_addr(s: $1_stake_ValidatorInfo, x: int): $1_stake_ValidatorInfo {
    $1_stake_ValidatorInfo(x, s->$voting_power, s->$config)
}
function {:inline} $Update'$1_stake_ValidatorInfo'_voting_power(s: $1_stake_ValidatorInfo, x: int): $1_stake_ValidatorInfo {
    $1_stake_ValidatorInfo(s->$addr, x, s->$config)
}
function {:inline} $Update'$1_stake_ValidatorInfo'_config(s: $1_stake_ValidatorInfo, x: $1_stake_ValidatorConfig): $1_stake_ValidatorInfo {
    $1_stake_ValidatorInfo(s->$addr, s->$voting_power, x)
}
function $IsValid'$1_stake_ValidatorInfo'(s: $1_stake_ValidatorInfo): bool {
    $IsValid'address'(s->$addr)
      && $IsValid'u64'(s->$voting_power)
      && $IsValid'$1_stake_ValidatorConfig'(s->$config)
}
function {:inline} $IsEqual'$1_stake_ValidatorInfo'(s1: $1_stake_ValidatorInfo, s2: $1_stake_ValidatorInfo): bool {
    $IsEqual'address'(s1->$addr, s2->$addr)
    && $IsEqual'u64'(s1->$voting_power, s2->$voting_power)
    && $IsEqual'$1_stake_ValidatorConfig'(s1->$config, s2->$config)}

// struct stake::ValidatorPerformance at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:196:5+103
datatype $1_stake_ValidatorPerformance {
    $1_stake_ValidatorPerformance($validators: Vec ($1_stake_IndividualValidatorPerformance))
}
function {:inline} $Update'$1_stake_ValidatorPerformance'_validators(s: $1_stake_ValidatorPerformance, x: Vec ($1_stake_IndividualValidatorPerformance)): $1_stake_ValidatorPerformance {
    $1_stake_ValidatorPerformance(x)
}
function $IsValid'$1_stake_ValidatorPerformance'(s: $1_stake_ValidatorPerformance): bool {
    $IsValid'vec'$1_stake_IndividualValidatorPerformance''(s->$validators)
}
function {:inline} $IsEqual'$1_stake_ValidatorPerformance'(s1: $1_stake_ValidatorPerformance, s2: $1_stake_ValidatorPerformance): bool {
    $IsEqual'vec'$1_stake_IndividualValidatorPerformance''(s1->$validators, s2->$validators)}
var $1_stake_ValidatorPerformance_$memory: $Memory $1_stake_ValidatorPerformance;

// struct stake::ValidatorSet at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:171:5+558
datatype $1_stake_ValidatorSet {
    $1_stake_ValidatorSet($consensus_scheme: int, $active_validators: Vec ($1_stake_ValidatorInfo), $pending_inactive: Vec ($1_stake_ValidatorInfo), $pending_active: Vec ($1_stake_ValidatorInfo), $total_voting_power: int, $total_joining_power: int)
}
function {:inline} $Update'$1_stake_ValidatorSet'_consensus_scheme(s: $1_stake_ValidatorSet, x: int): $1_stake_ValidatorSet {
    $1_stake_ValidatorSet(x, s->$active_validators, s->$pending_inactive, s->$pending_active, s->$total_voting_power, s->$total_joining_power)
}
function {:inline} $Update'$1_stake_ValidatorSet'_active_validators(s: $1_stake_ValidatorSet, x: Vec ($1_stake_ValidatorInfo)): $1_stake_ValidatorSet {
    $1_stake_ValidatorSet(s->$consensus_scheme, x, s->$pending_inactive, s->$pending_active, s->$total_voting_power, s->$total_joining_power)
}
function {:inline} $Update'$1_stake_ValidatorSet'_pending_inactive(s: $1_stake_ValidatorSet, x: Vec ($1_stake_ValidatorInfo)): $1_stake_ValidatorSet {
    $1_stake_ValidatorSet(s->$consensus_scheme, s->$active_validators, x, s->$pending_active, s->$total_voting_power, s->$total_joining_power)
}
function {:inline} $Update'$1_stake_ValidatorSet'_pending_active(s: $1_stake_ValidatorSet, x: Vec ($1_stake_ValidatorInfo)): $1_stake_ValidatorSet {
    $1_stake_ValidatorSet(s->$consensus_scheme, s->$active_validators, s->$pending_inactive, x, s->$total_voting_power, s->$total_joining_power)
}
function {:inline} $Update'$1_stake_ValidatorSet'_total_voting_power(s: $1_stake_ValidatorSet, x: int): $1_stake_ValidatorSet {
    $1_stake_ValidatorSet(s->$consensus_scheme, s->$active_validators, s->$pending_inactive, s->$pending_active, x, s->$total_joining_power)
}
function {:inline} $Update'$1_stake_ValidatorSet'_total_joining_power(s: $1_stake_ValidatorSet, x: int): $1_stake_ValidatorSet {
    $1_stake_ValidatorSet(s->$consensus_scheme, s->$active_validators, s->$pending_inactive, s->$pending_active, s->$total_voting_power, x)
}
function $IsValid'$1_stake_ValidatorSet'(s: $1_stake_ValidatorSet): bool {
    $IsValid'u8'(s->$consensus_scheme)
      && $IsValid'vec'$1_stake_ValidatorInfo''(s->$active_validators)
      && $IsValid'vec'$1_stake_ValidatorInfo''(s->$pending_inactive)
      && $IsValid'vec'$1_stake_ValidatorInfo''(s->$pending_active)
      && $IsValid'u128'(s->$total_voting_power)
      && $IsValid'u128'(s->$total_joining_power)
}
function {:inline} $IsEqual'$1_stake_ValidatorSet'(s1: $1_stake_ValidatorSet, s2: $1_stake_ValidatorSet): bool {
    $IsEqual'u8'(s1->$consensus_scheme, s2->$consensus_scheme)
    && $IsEqual'vec'$1_stake_ValidatorInfo''(s1->$active_validators, s2->$active_validators)
    && $IsEqual'vec'$1_stake_ValidatorInfo''(s1->$pending_inactive, s2->$pending_inactive)
    && $IsEqual'vec'$1_stake_ValidatorInfo''(s1->$pending_active, s2->$pending_active)
    && $IsEqual'u128'(s1->$total_voting_power, s2->$total_voting_power)
    && $IsEqual'u128'(s1->$total_joining_power, s2->$total_joining_power)}
var $1_stake_ValidatorSet_$memory: $Memory $1_stake_ValidatorSet;

// struct stake::WithdrawStakeEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:254:5+111
datatype $1_stake_WithdrawStakeEvent {
    $1_stake_WithdrawStakeEvent($pool_address: int, $amount_withdrawn: int)
}
function {:inline} $Update'$1_stake_WithdrawStakeEvent'_pool_address(s: $1_stake_WithdrawStakeEvent, x: int): $1_stake_WithdrawStakeEvent {
    $1_stake_WithdrawStakeEvent(x, s->$amount_withdrawn)
}
function {:inline} $Update'$1_stake_WithdrawStakeEvent'_amount_withdrawn(s: $1_stake_WithdrawStakeEvent, x: int): $1_stake_WithdrawStakeEvent {
    $1_stake_WithdrawStakeEvent(s->$pool_address, x)
}
function $IsValid'$1_stake_WithdrawStakeEvent'(s: $1_stake_WithdrawStakeEvent): bool {
    $IsValid'address'(s->$pool_address)
      && $IsValid'u64'(s->$amount_withdrawn)
}
function {:inline} $IsEqual'$1_stake_WithdrawStakeEvent'(s1: $1_stake_WithdrawStakeEvent, s2: $1_stake_WithdrawStakeEvent): bool {
    s1 == s2
}

// fun stake::assert_stake_pool_exists [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1327:5+162
procedure {:inline 1} $1_stake_assert_stake_pool_exists(_$t0: int) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t0: int;
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[pool_address]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1327:5+1
    assume {:print "$at(142,63496,63497)"} true;
    assume {:print "$track_local(39,5,0):", $t0} $t0 == $t0;

    // $t1 := stake::stake_pool_exists($t0) on_abort goto L4 with $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1328:17+31
    assume {:print "$at(142,63566,63597)"} true;
    call $t1 := $1_stake_stake_pool_exists($t0);
    if ($abort_flag) {
        assume {:print "$at(142,63566,63597)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(39,5):", $t2} $t2 == $t2;
        goto L4;
    }

    // if ($t1) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1328:9+93
    if ($t1) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1328:9+93
L1:

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1328:9+93
    assume {:print "$at(142,63558,63651)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1328:74+26
L0:

    // $t3 := 14 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1328:74+26
    assume {:print "$at(142,63623,63649)"} true;
    $t3 := 14;
    assume $IsValid'u64'($t3);

    // $t4 := error::invalid_argument($t3) on_abort goto L4 with $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1328:50+51
    call $t4 := $1_error_invalid_argument($t3);
    if ($abort_flag) {
        assume {:print "$at(142,63599,63650)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(39,5):", $t2} $t2 == $t2;
        goto L4;
    }

    // trace_abort($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1328:9+93
    assume {:print "$at(142,63558,63651)"} true;
    assume {:print "$track_abort(39,5):", $t4} $t4 == $t4;

    // $t2 := move($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1328:9+93
    $t2 := $t4;

    // goto L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1328:9+93
    goto L4;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1328:102+1
L2:

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1329:5+1
    assume {:print "$at(142,63657,63658)"} true;
L3:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1329:5+1
    assume {:print "$at(142,63657,63658)"} true;
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1329:5+1
L4:

    // abort($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1329:5+1
    assume {:print "$at(142,63657,63658)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun stake::get_delegated_voter [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:359:5+200
procedure {:inline 1} $1_stake_get_delegated_voter(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: $1_stake_StakePool;
    var $t3: int;
    var $t0: int;
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[pool_address]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:359:5+1
    assume {:print "$at(142,16317,16318)"} true;
    assume {:print "$track_local(39,16,0):", $t0} $t0 == $t0;

    // stake::assert_stake_pool_exists($t0) on_abort goto L2 with $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:360:9+38
    assume {:print "$at(142,16409,16447)"} true;
    call $1_stake_assert_stake_pool_exists($t0);
    if ($abort_flag) {
        assume {:print "$at(142,16409,16447)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(39,16):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := get_global<stake::StakePool>($t0) on_abort goto L2 with $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:361:9+13
    assume {:print "$at(142,16457,16470)"} true;
    if (!$ResourceExists($1_stake_StakePool_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t2 := $ResourceValue($1_stake_StakePool_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(142,16457,16470)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(39,16):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t3 := get_field<stake::StakePool>.delegated_voter($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:361:9+54
    $t3 := $t2->$delegated_voter;

    // trace_return[0]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:361:9+54
    assume {:print "$track_return(39,16,0):", $t3} $t3 == $t3;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:362:5+1
    assume {:print "$at(142,16516,16517)"} true;
L1:

    // return $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:362:5+1
    assume {:print "$at(142,16516,16517)"} true;
    $ret0 := $t3;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:362:5+1
L2:

    // abort($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:362:5+1
    assume {:print "$at(142,16516,16517)"} true;
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun stake::get_lockup_secs [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:294:5+194
procedure {:inline 1} $1_stake_get_lockup_secs(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: $1_stake_StakePool;
    var $t3: int;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[pool_address]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:294:5+1
    assume {:print "$at(142,13232,13233)"} true;
    assume {:print "$track_local(39,17,0):", $t0} $t0 == $t0;

    // stake::assert_stake_pool_exists($t0) on_abort goto L2 with $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:295:9+38
    assume {:print "$at(142,13316,13354)"} true;
    call $1_stake_assert_stake_pool_exists($t0);
    if ($abort_flag) {
        assume {:print "$at(142,13316,13354)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(39,17):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := get_global<stake::StakePool>($t0) on_abort goto L2 with $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:296:9+13
    assume {:print "$at(142,13364,13377)"} true;
    if (!$ResourceExists($1_stake_StakePool_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t2 := $ResourceValue($1_stake_StakePool_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(142,13364,13377)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(39,17):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t3 := get_field<stake::StakePool>.locked_until_secs($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:296:9+56
    $t3 := $t2->$locked_until_secs;

    // trace_return[0]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:296:9+56
    assume {:print "$track_return(39,17,0):", $t3} $t3 == $t3;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:297:5+1
    assume {:print "$at(142,13425,13426)"} true;
L1:

    // return $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:297:5+1
    assume {:print "$at(142,13425,13426)"} true;
    $ret0 := $t3;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:297:5+1
L2:

    // abort($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:297:5+1
    assume {:print "$at(142,13425,13426)"} true;
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun stake::increase_lockup_with_cap [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:764:5+905
procedure {:inline 1} $1_stake_increase_lockup_with_cap(_$t0: $1_stake_OwnerCapability) returns ()
{
    // declare local variables
    var $t1: $1_staking_config_StakingConfig;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: $Mutation ($1_stake_StakePool);
    var $t6: $1_staking_config_StakingConfig;
    var $t7: int;
    var $t8: $1_stake_StakePool;
    var $t9: int;
    var $t10: int;
    var $t11: $1_stake_StakePool;
    var $t12: int;
    var $t13: int;
    var $t14: $1_staking_config_StakingConfig;
    var $t15: $Mutation ($1_stake_StakePool);
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: $Mutation (int);
    var $t24: $Mutation ($1_event_EventHandle'$1_stake_IncreaseLockupEvent');
    var $t25: $1_stake_IncreaseLockupEvent;
    var $t0: $1_stake_OwnerCapability;
    var $1_stake_StakePool_$modifies: [int]bool;
    var $temp_0'$1_stake_OwnerCapability': $1_stake_OwnerCapability;
    var $temp_0'$1_stake_StakePool': $1_stake_StakePool;
    var $temp_0'$1_staking_config_StakingConfig': $1_staking_config_StakingConfig;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t6, global<staking_config::StakingConfig>(0x1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:103:9+69
    assume {:print "$at(143,4949,5018)"} true;
    assume ($t6 == $ResourceValue($1_staking_config_StakingConfig_$memory, 1));

    // assume Identical($t7, select stake::OwnerCapability.pool_address($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:104:9+42
    assume {:print "$at(143,5027,5069)"} true;
    assume ($t7 == $t0->$pool_address);

    // assume Identical($t8, global<stake::StakePool>($t7)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:105:9+53
    assume {:print "$at(143,5078,5131)"} true;
    assume ($t8 == $ResourceValue($1_stake_StakePool_$memory, $t7));

    // assume Identical($t9, timestamp::spec_now_seconds()) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:107:9+48
    assume {:print "$at(143,5203,5251)"} true;
    assume ($t9 == $1_timestamp_spec_now_seconds($1_timestamp_CurrentTimeMicroseconds_$memory));

    // assume Identical($t10, select staking_config::StakingConfig.recurring_lockup_duration_secs($t6)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:108:9+51
    assume {:print "$at(143,5260,5311)"} true;
    assume ($t10 == $t6->$recurring_lockup_duration_secs);

    // assume Identical($t11, global<stake::StakePool>($t7)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:36:9+49
    assume {:print "$at(143,1661,1710)"} true;
    assume ($t11 == $ResourceValue($1_stake_StakePool_$memory, $t7));

    // trace_local[owner_cap]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:764:5+1
    assume {:print "$at(142,35334,35335)"} true;
    assume {:print "$track_local(39,27,0):", $t0} $t0 == $t0;

    // $t12 := get_field<stake::OwnerCapability>.pool_address($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:765:28+22
    assume {:print "$at(142,35447,35469)"} true;
    $t12 := $t0->$pool_address;

    // trace_local[pool_address]($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:765:13+12
    assume {:print "$track_local(39,27,4):", $t12} $t12 == $t12;

    // stake::assert_stake_pool_exists($t12) on_abort goto L4 with $t13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:766:9+38
    assume {:print "$at(142,35479,35517)"} true;
    call $1_stake_assert_stake_pool_exists($t12);
    if ($abort_flag) {
        assume {:print "$at(142,35479,35517)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(39,27):", $t13} $t13 == $t13;
        goto L4;
    }

    // $t14 := staking_config::get() on_abort goto L4 with $t13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:767:22+21
    assume {:print "$at(142,35540,35561)"} true;
    call $t14 := $1_staking_config_get();
    if ($abort_flag) {
        assume {:print "$at(142,35540,35561)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(39,27):", $t13} $t13 == $t13;
        goto L4;
    }

    // trace_local[config]($t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:767:13+6
    assume {:print "$track_local(39,27,1):", $t14} $t14 == $t14;

    // $t15 := borrow_global<stake::StakePool>($t12) on_abort goto L4 with $t13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:769:26+17
    assume {:print "$at(142,35589,35606)"} true;
    if (!$ResourceExists($1_stake_StakePool_$memory, $t12)) {
        call $ExecFailureAbort();
    } else {
        $t15 := $Mutation($Global($t12), EmptyVec(), $ResourceValue($1_stake_StakePool_$memory, $t12));
    }
    if ($abort_flag) {
        assume {:print "$at(142,35589,35606)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(39,27):", $t13} $t13 == $t13;
        goto L4;
    }

    // trace_local[stake_pool]($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:769:13+10
    $temp_0'$1_stake_StakePool' := $Dereference($t15);
    assume {:print "$track_local(39,27,5):", $temp_0'$1_stake_StakePool'} $temp_0'$1_stake_StakePool' == $temp_0'$1_stake_StakePool';

    // $t16 := get_field<stake::StakePool>.locked_until_secs($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:770:37+28
    assume {:print "$at(142,35669,35697)"} true;
    $t16 := $Dereference($t15)->$locked_until_secs;

    // trace_local[old_locked_until_secs]($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:770:13+21
    assume {:print "$track_local(39,27,3):", $t16} $t16 == $t16;

    // $t17 := timestamp::now_seconds() on_abort goto L4 with $t13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:771:37+24
    assume {:print "$at(142,35735,35759)"} true;
    call $t17 := $1_timestamp_now_seconds();
    if ($abort_flag) {
        assume {:print "$at(142,35735,35759)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(39,27):", $t13} $t13 == $t13;
        goto L4;
    }

    // $t18 := staking_config::get_recurring_lockup_duration($t14) on_abort goto L4 with $t13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:771:64+54
    call $t18 := $1_staking_config_get_recurring_lockup_duration($t14);
    if ($abort_flag) {
        assume {:print "$at(142,35762,35816)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(39,27):", $t13} $t13 == $t13;
        goto L4;
    }

    // $t19 := +($t17, $t18) on_abort goto L4 with $t13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:771:62+1
    call $t19 := $AddU64($t17, $t18);
    if ($abort_flag) {
        assume {:print "$at(142,35760,35761)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(39,27):", $t13} $t13 == $t13;
        goto L4;
    }

    // trace_local[new_locked_until_secs]($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:771:13+21
    assume {:print "$track_local(39,27,2):", $t19} $t19 == $t19;

    // $t20 := <($t16, $t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:772:39+1
    assume {:print "$at(142,35856,35857)"} true;
    call $t20 := $Lt($t16, $t19);

    // if ($t20) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:772:9+96
    if ($t20) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:772:9+96
L1:

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:772:9+96
    assume {:print "$at(142,35826,35922)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:772:9+96
L0:

    // destroy($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:772:9+96
    assume {:print "$at(142,35826,35922)"} true;

    // $t21 := 18 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:772:88+15
    $t21 := 18;
    assume $IsValid'u64'($t21);

    // $t22 := error::invalid_argument($t21) on_abort goto L4 with $t13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:772:64+40
    call $t22 := $1_error_invalid_argument($t21);
    if ($abort_flag) {
        assume {:print "$at(142,35881,35921)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(39,27):", $t13} $t13 == $t13;
        goto L4;
    }

    // trace_abort($t22) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:772:9+96
    assume {:print "$at(142,35826,35922)"} true;
    assume {:print "$track_abort(39,27):", $t22} $t22 == $t22;

    // $t13 := move($t22) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:772:9+96
    $t13 := $t22;

    // goto L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:772:9+96
    goto L4;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:773:40+21
    assume {:print "$at(142,35963,35984)"} true;
L2:

    // $t23 := borrow_field<stake::StakePool>.locked_until_secs($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:773:9+28
    assume {:print "$at(142,35932,35960)"} true;
    $t23 := $ChildMutation($t15, 4, $Dereference($t15)->$locked_until_secs);

    // write_ref($t23, $t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:773:9+52
    $t23 := $UpdateMutation($t23, $t19);

    // write_back[Reference($t15).locked_until_secs (u64)]($t23) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:773:9+52
    $t15 := $UpdateMutation($t15, $Update'$1_stake_StakePool'_locked_until_secs($Dereference($t15), $Dereference($t23)));

    // $t24 := borrow_field<stake::StakePool>.increase_lockup_events($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:776:13+38
    assume {:print "$at(142,36026,36064)"} true;
    $t24 := $ChildMutation($t15, 13, $Dereference($t15)->$increase_lockup_events);

    // $t25 := pack stake::IncreaseLockupEvent($t12, $t16, $t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:777:13+143
    assume {:print "$at(142,36078,36221)"} true;
    $t25 := $1_stake_IncreaseLockupEvent($t12, $t16, $t19);

    // opaque begin: event::emit_event<stake::IncreaseLockupEvent>($t24, $t25) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:775:9+237
    assume {:print "$at(142,35995,36232)"} true;

    // opaque end: event::emit_event<stake::IncreaseLockupEvent>($t24, $t25) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:775:9+237

    // write_back[Reference($t15).increase_lockup_events (event::EventHandle<stake::IncreaseLockupEvent>)]($t24) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:775:9+237
    $t15 := $UpdateMutation($t15, $Update'$1_stake_StakePool'_increase_lockup_events($Dereference($t15), $Dereference($t24)));

    // write_back[stake::StakePool@]($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:775:9+237
    $1_stake_StakePool_$memory := $ResourceUpdate($1_stake_StakePool_$memory, $GlobalLocationAddress($t15),
        $Dereference($t15));

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:783:5+1
    assume {:print "$at(142,36238,36239)"} true;
L3:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:783:5+1
    assume {:print "$at(142,36238,36239)"} true;
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:783:5+1
L4:

    // abort($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:783:5+1
    assume {:print "$at(142,36238,36239)"} true;
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// fun stake::set_delegated_voter_with_cap [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:602:5+331
procedure {:inline 1} $1_stake_set_delegated_voter_with_cap(_$t0: $1_stake_OwnerCapability, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: $Mutation ($1_stake_StakePool);
    var $t4: int;
    var $t5: $1_stake_StakePool;
    var $t6: int;
    var $t7: int;
    var $t8: $Mutation ($1_stake_StakePool);
    var $t9: $Mutation (int);
    var $t0: $1_stake_OwnerCapability;
    var $t1: int;
    var $1_stake_StakePool_$modifies: [int]bool;
    var $temp_0'$1_stake_OwnerCapability': $1_stake_OwnerCapability;
    var $temp_0'$1_stake_StakePool': $1_stake_StakePool;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t4, select stake::OwnerCapability.pool_address($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:184:9+42
    assume {:print "$at(143,8574,8616)"} true;
    assume ($t4 == $t0->$pool_address);

    // assume Identical($t5, global<stake::StakePool>($t4)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:36:9+49
    assume {:print "$at(143,1661,1710)"} true;
    assume ($t5 == $ResourceValue($1_stake_StakePool_$memory, $t4));

    // trace_local[owner_cap]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:602:5+1
    assume {:print "$at(142,27337,27338)"} true;
    assume {:print "$track_local(39,44,0):", $t0} $t0 == $t0;

    // trace_local[new_voter]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:602:5+1
    assume {:print "$track_local(39,44,1):", $t1} $t1 == $t1;

    // $t6 := get_field<stake::OwnerCapability>.pool_address($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:603:28+22
    assume {:print "$at(142,27474,27496)"} true;
    $t6 := $t0->$pool_address;

    // trace_local[pool_address]($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:603:13+12
    assume {:print "$track_local(39,44,2):", $t6} $t6 == $t6;

    // stake::assert_stake_pool_exists($t6) on_abort goto L2 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:604:9+38
    assume {:print "$at(142,27506,27544)"} true;
    call $1_stake_assert_stake_pool_exists($t6);
    if ($abort_flag) {
        assume {:print "$at(142,27506,27544)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(39,44):", $t7} $t7 == $t7;
        goto L2;
    }

    // $t8 := borrow_global<stake::StakePool>($t6) on_abort goto L2 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:605:26+17
    assume {:print "$at(142,27571,27588)"} true;
    if (!$ResourceExists($1_stake_StakePool_$memory, $t6)) {
        call $ExecFailureAbort();
    } else {
        $t8 := $Mutation($Global($t6), EmptyVec(), $ResourceValue($1_stake_StakePool_$memory, $t6));
    }
    if ($abort_flag) {
        assume {:print "$at(142,27571,27588)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(39,44):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_local[stake_pool]($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:605:13+10
    $temp_0'$1_stake_StakePool' := $Dereference($t8);
    assume {:print "$track_local(39,44,3):", $temp_0'$1_stake_StakePool'} $temp_0'$1_stake_StakePool' == $temp_0'$1_stake_StakePool';

    // $t9 := borrow_field<stake::StakePool>.delegated_voter($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:606:9+26
    assume {:print "$at(142,27623,27649)"} true;
    $t9 := $ChildMutation($t8, 6, $Dereference($t8)->$delegated_voter);

    // write_ref($t9, $t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:606:9+38
    $t9 := $UpdateMutation($t9, $t1);

    // write_back[Reference($t8).delegated_voter (address)]($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:606:9+38
    $t8 := $UpdateMutation($t8, $Update'$1_stake_StakePool'_delegated_voter($Dereference($t8), $Dereference($t9)));

    // write_back[stake::StakePool@]($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:606:9+38
    $1_stake_StakePool_$memory := $ResourceUpdate($1_stake_StakePool_$memory, $GlobalLocationAddress($t8),
        $Dereference($t8));

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:607:5+1
    assume {:print "$at(142,27667,27668)"} true;
L1:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:607:5+1
    assume {:print "$at(142,27667,27668)"} true;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:607:5+1
L2:

    // abort($t7) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:607:5+1
    assume {:print "$at(142,27667,27668)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun stake::stake_pool_exists [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:400:5+89
procedure {:inline 1} $1_stake_stake_pool_exists(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[addr]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:400:5+1
    assume {:print "$at(142,18212,18213)"} true;
    assume {:print "$track_local(39,47,0):", $t0} $t0 == $t0;

    // $t1 := exists<stake::StakePool>($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:401:9+6
    assume {:print "$at(142,18272,18278)"} true;
    $t1 := $ResourceExists($1_stake_StakePool_$memory, $t0);

    // trace_return[0]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:401:9+23
    assume {:print "$track_return(39,47,0):", $t1} $t1 == $t1;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:402:5+1
    assume {:print "$at(142,18300,18301)"} true;
L1:

    // return $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:402:5+1
    assume {:print "$at(142,18300,18301)"} true;
    $ret0 := $t1;
    return;

}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:7:9+50
function  $1_aptos_hash_spec_keccak256(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_aptos_hash_spec_keccak256(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:12:9+58
function  $1_aptos_hash_spec_sha2_512_internal(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_aptos_hash_spec_sha2_512_internal(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:17:9+58
function  $1_aptos_hash_spec_sha3_512_internal(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_aptos_hash_spec_sha3_512_internal(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:22:9+59
function  $1_aptos_hash_spec_ripemd160_internal(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_aptos_hash_spec_ripemd160_internal(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:27:9+61
function  $1_aptos_hash_spec_blake2b_256_internal(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_aptos_hash_spec_blake2b_256_internal(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.move:154:5+155
function {:inline} $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory: $Memory $1_reconfiguration_Configuration): int {
    $ResourceValue($1_reconfiguration_Configuration_$memory, 1)->$last_reconfiguration_time
}

// struct reconfiguration::Configuration at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.move:33:5+306
datatype $1_reconfiguration_Configuration {
    $1_reconfiguration_Configuration($epoch: int, $last_reconfiguration_time: int, $events: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent')
}
function {:inline} $Update'$1_reconfiguration_Configuration'_epoch(s: $1_reconfiguration_Configuration, x: int): $1_reconfiguration_Configuration {
    $1_reconfiguration_Configuration(x, s->$last_reconfiguration_time, s->$events)
}
function {:inline} $Update'$1_reconfiguration_Configuration'_last_reconfiguration_time(s: $1_reconfiguration_Configuration, x: int): $1_reconfiguration_Configuration {
    $1_reconfiguration_Configuration(s->$epoch, x, s->$events)
}
function {:inline} $Update'$1_reconfiguration_Configuration'_events(s: $1_reconfiguration_Configuration, x: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'): $1_reconfiguration_Configuration {
    $1_reconfiguration_Configuration(s->$epoch, s->$last_reconfiguration_time, x)
}
function $IsValid'$1_reconfiguration_Configuration'(s: $1_reconfiguration_Configuration): bool {
    $IsValid'u64'(s->$epoch)
      && $IsValid'u64'(s->$last_reconfiguration_time)
      && $IsValid'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(s->$events)
}
function {:inline} $IsEqual'$1_reconfiguration_Configuration'(s1: $1_reconfiguration_Configuration, s2: $1_reconfiguration_Configuration): bool {
    s1 == s2
}
var $1_reconfiguration_Configuration_$memory: $Memory $1_reconfiguration_Configuration;

// struct reconfiguration::NewEpochEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.move:28:5+64
datatype $1_reconfiguration_NewEpochEvent {
    $1_reconfiguration_NewEpochEvent($epoch: int)
}
function {:inline} $Update'$1_reconfiguration_NewEpochEvent'_epoch(s: $1_reconfiguration_NewEpochEvent, x: int): $1_reconfiguration_NewEpochEvent {
    $1_reconfiguration_NewEpochEvent(x)
}
function $IsValid'$1_reconfiguration_NewEpochEvent'(s: $1_reconfiguration_NewEpochEvent): bool {
    $IsValid'u64'(s->$epoch)
}
function {:inline} $IsEqual'$1_reconfiguration_NewEpochEvent'(s1: $1_reconfiguration_NewEpochEvent, s2: $1_reconfiguration_NewEpochEvent): bool {
    s1 == s2
}

// struct pool_u64::Pool at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:38:5+449
datatype $1_pool_u64_Pool {
    $1_pool_u64_Pool($shareholders_limit: int, $total_coins: int, $total_shares: int, $shares: Table int (int), $shareholders: Vec (int), $scaling_factor: int)
}
function {:inline} $Update'$1_pool_u64_Pool'_shareholders_limit(s: $1_pool_u64_Pool, x: int): $1_pool_u64_Pool {
    $1_pool_u64_Pool(x, s->$total_coins, s->$total_shares, s->$shares, s->$shareholders, s->$scaling_factor)
}
function {:inline} $Update'$1_pool_u64_Pool'_total_coins(s: $1_pool_u64_Pool, x: int): $1_pool_u64_Pool {
    $1_pool_u64_Pool(s->$shareholders_limit, x, s->$total_shares, s->$shares, s->$shareholders, s->$scaling_factor)
}
function {:inline} $Update'$1_pool_u64_Pool'_total_shares(s: $1_pool_u64_Pool, x: int): $1_pool_u64_Pool {
    $1_pool_u64_Pool(s->$shareholders_limit, s->$total_coins, x, s->$shares, s->$shareholders, s->$scaling_factor)
}
function {:inline} $Update'$1_pool_u64_Pool'_shares(s: $1_pool_u64_Pool, x: Table int (int)): $1_pool_u64_Pool {
    $1_pool_u64_Pool(s->$shareholders_limit, s->$total_coins, s->$total_shares, x, s->$shareholders, s->$scaling_factor)
}
function {:inline} $Update'$1_pool_u64_Pool'_shareholders(s: $1_pool_u64_Pool, x: Vec (int)): $1_pool_u64_Pool {
    $1_pool_u64_Pool(s->$shareholders_limit, s->$total_coins, s->$total_shares, s->$shares, x, s->$scaling_factor)
}
function {:inline} $Update'$1_pool_u64_Pool'_scaling_factor(s: $1_pool_u64_Pool, x: int): $1_pool_u64_Pool {
    $1_pool_u64_Pool(s->$shareholders_limit, s->$total_coins, s->$total_shares, s->$shares, s->$shareholders, x)
}
function $IsValid'$1_pool_u64_Pool'(s: $1_pool_u64_Pool): bool {
    $IsValid'u64'(s->$shareholders_limit)
      && $IsValid'u64'(s->$total_coins)
      && $IsValid'u64'(s->$total_shares)
      && $IsValid'$1_simple_map_SimpleMap'address_u64''(s->$shares)
      && $IsValid'vec'address''(s->$shareholders)
      && $IsValid'u64'(s->$scaling_factor)
}
function {:inline} $IsEqual'$1_pool_u64_Pool'(s1: $1_pool_u64_Pool, s2: $1_pool_u64_Pool): bool {
    $IsEqual'u64'(s1->$shareholders_limit, s2->$shareholders_limit)
    && $IsEqual'u64'(s1->$total_coins, s2->$total_coins)
    && $IsEqual'u64'(s1->$total_shares, s2->$total_shares)
    && $IsEqual'$1_simple_map_SimpleMap'address_u64''(s1->$shares, s2->$shares)
    && $IsEqual'vec'address''(s1->$shareholders, s2->$shareholders)
    && $IsEqual'u64'(s1->$scaling_factor, s2->$scaling_factor)}

// fun pool_u64::shareholders [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:118:5+87
procedure {:inline 1} $1_pool_u64_shareholders(_$t0: $1_pool_u64_Pool) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t1: Vec (int);
    var $t0: $1_pool_u64_Pool;
    var $temp_0'$1_pool_u64_Pool': $1_pool_u64_Pool;
    var $temp_0'vec'address'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:118:5+1
    assume {:print "$at(67,4511,4512)"} true;
    assume {:print "$track_local(58,13,0):", $t0} $t0 == $t0;

    // $t1 := get_field<pool_u64::Pool>.shareholders($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:119:9+17
    assume {:print "$at(67,4575,4592)"} true;
    $t1 := $t0->$shareholders;

    // trace_return[0]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:119:9+17
    assume {:print "$track_return(58,13,0):", $t1} $t1 == $t1;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:120:5+1
    assume {:print "$at(67,4597,4598)"} true;
L1:

    // return $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:120:5+1
    assume {:print "$at(67,4597,4598)"} true;
    $ret0 := $t1;
    return;

}

// struct staking_contract::AddStakeEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:137:5+122
datatype $1_staking_contract_AddStakeEvent {
    $1_staking_contract_AddStakeEvent($operator: int, $pool_address: int, $amount: int)
}
function {:inline} $Update'$1_staking_contract_AddStakeEvent'_operator(s: $1_staking_contract_AddStakeEvent, x: int): $1_staking_contract_AddStakeEvent {
    $1_staking_contract_AddStakeEvent(x, s->$pool_address, s->$amount)
}
function {:inline} $Update'$1_staking_contract_AddStakeEvent'_pool_address(s: $1_staking_contract_AddStakeEvent, x: int): $1_staking_contract_AddStakeEvent {
    $1_staking_contract_AddStakeEvent(s->$operator, x, s->$amount)
}
function {:inline} $Update'$1_staking_contract_AddStakeEvent'_amount(s: $1_staking_contract_AddStakeEvent, x: int): $1_staking_contract_AddStakeEvent {
    $1_staking_contract_AddStakeEvent(s->$operator, s->$pool_address, x)
}
function $IsValid'$1_staking_contract_AddStakeEvent'(s: $1_staking_contract_AddStakeEvent): bool {
    $IsValid'address'(s->$operator)
      && $IsValid'address'(s->$pool_address)
      && $IsValid'u64'(s->$amount)
}
function {:inline} $IsEqual'$1_staking_contract_AddStakeEvent'(s1: $1_staking_contract_AddStakeEvent, s2: $1_staking_contract_AddStakeEvent): bool {
    s1 == s2
}

// struct staking_contract::UnlockStakeEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:150:5+156
datatype $1_staking_contract_UnlockStakeEvent {
    $1_staking_contract_UnlockStakeEvent($operator: int, $pool_address: int, $amount: int, $commission_paid: int)
}
function {:inline} $Update'$1_staking_contract_UnlockStakeEvent'_operator(s: $1_staking_contract_UnlockStakeEvent, x: int): $1_staking_contract_UnlockStakeEvent {
    $1_staking_contract_UnlockStakeEvent(x, s->$pool_address, s->$amount, s->$commission_paid)
}
function {:inline} $Update'$1_staking_contract_UnlockStakeEvent'_pool_address(s: $1_staking_contract_UnlockStakeEvent, x: int): $1_staking_contract_UnlockStakeEvent {
    $1_staking_contract_UnlockStakeEvent(s->$operator, x, s->$amount, s->$commission_paid)
}
function {:inline} $Update'$1_staking_contract_UnlockStakeEvent'_amount(s: $1_staking_contract_UnlockStakeEvent, x: int): $1_staking_contract_UnlockStakeEvent {
    $1_staking_contract_UnlockStakeEvent(s->$operator, s->$pool_address, x, s->$commission_paid)
}
function {:inline} $Update'$1_staking_contract_UnlockStakeEvent'_commission_paid(s: $1_staking_contract_UnlockStakeEvent, x: int): $1_staking_contract_UnlockStakeEvent {
    $1_staking_contract_UnlockStakeEvent(s->$operator, s->$pool_address, s->$amount, x)
}
function $IsValid'$1_staking_contract_UnlockStakeEvent'(s: $1_staking_contract_UnlockStakeEvent): bool {
    $IsValid'address'(s->$operator)
      && $IsValid'address'(s->$pool_address)
      && $IsValid'u64'(s->$amount)
      && $IsValid'u64'(s->$commission_paid)
}
function {:inline} $IsEqual'$1_staking_contract_UnlockStakeEvent'(s1: $1_staking_contract_UnlockStakeEvent, s2: $1_staking_contract_UnlockStakeEvent): bool {
    s1 == s2
}

// struct staking_contract::AddDistributionEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:163:5+130
datatype $1_staking_contract_AddDistributionEvent {
    $1_staking_contract_AddDistributionEvent($operator: int, $pool_address: int, $amount: int)
}
function {:inline} $Update'$1_staking_contract_AddDistributionEvent'_operator(s: $1_staking_contract_AddDistributionEvent, x: int): $1_staking_contract_AddDistributionEvent {
    $1_staking_contract_AddDistributionEvent(x, s->$pool_address, s->$amount)
}
function {:inline} $Update'$1_staking_contract_AddDistributionEvent'_pool_address(s: $1_staking_contract_AddDistributionEvent, x: int): $1_staking_contract_AddDistributionEvent {
    $1_staking_contract_AddDistributionEvent(s->$operator, x, s->$amount)
}
function {:inline} $Update'$1_staking_contract_AddDistributionEvent'_amount(s: $1_staking_contract_AddDistributionEvent, x: int): $1_staking_contract_AddDistributionEvent {
    $1_staking_contract_AddDistributionEvent(s->$operator, s->$pool_address, x)
}
function $IsValid'$1_staking_contract_AddDistributionEvent'(s: $1_staking_contract_AddDistributionEvent): bool {
    $IsValid'address'(s->$operator)
      && $IsValid'address'(s->$pool_address)
      && $IsValid'u64'(s->$amount)
}
function {:inline} $IsEqual'$1_staking_contract_AddDistributionEvent'(s1: $1_staking_contract_AddDistributionEvent, s2: $1_staking_contract_AddDistributionEvent): bool {
    s1 == s2
}

// struct staking_contract::CreateStakingContractEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:117:5+199
datatype $1_staking_contract_CreateStakingContractEvent {
    $1_staking_contract_CreateStakingContractEvent($operator: int, $voter: int, $pool_address: int, $principal: int, $commission_percentage: int)
}
function {:inline} $Update'$1_staking_contract_CreateStakingContractEvent'_operator(s: $1_staking_contract_CreateStakingContractEvent, x: int): $1_staking_contract_CreateStakingContractEvent {
    $1_staking_contract_CreateStakingContractEvent(x, s->$voter, s->$pool_address, s->$principal, s->$commission_percentage)
}
function {:inline} $Update'$1_staking_contract_CreateStakingContractEvent'_voter(s: $1_staking_contract_CreateStakingContractEvent, x: int): $1_staking_contract_CreateStakingContractEvent {
    $1_staking_contract_CreateStakingContractEvent(s->$operator, x, s->$pool_address, s->$principal, s->$commission_percentage)
}
function {:inline} $Update'$1_staking_contract_CreateStakingContractEvent'_pool_address(s: $1_staking_contract_CreateStakingContractEvent, x: int): $1_staking_contract_CreateStakingContractEvent {
    $1_staking_contract_CreateStakingContractEvent(s->$operator, s->$voter, x, s->$principal, s->$commission_percentage)
}
function {:inline} $Update'$1_staking_contract_CreateStakingContractEvent'_principal(s: $1_staking_contract_CreateStakingContractEvent, x: int): $1_staking_contract_CreateStakingContractEvent {
    $1_staking_contract_CreateStakingContractEvent(s->$operator, s->$voter, s->$pool_address, x, s->$commission_percentage)
}
function {:inline} $Update'$1_staking_contract_CreateStakingContractEvent'_commission_percentage(s: $1_staking_contract_CreateStakingContractEvent, x: int): $1_staking_contract_CreateStakingContractEvent {
    $1_staking_contract_CreateStakingContractEvent(s->$operator, s->$voter, s->$pool_address, s->$principal, x)
}
function $IsValid'$1_staking_contract_CreateStakingContractEvent'(s: $1_staking_contract_CreateStakingContractEvent): bool {
    $IsValid'address'(s->$operator)
      && $IsValid'address'(s->$voter)
      && $IsValid'address'(s->$pool_address)
      && $IsValid'u64'(s->$principal)
      && $IsValid'u64'(s->$commission_percentage)
}
function {:inline} $IsEqual'$1_staking_contract_CreateStakingContractEvent'(s1: $1_staking_contract_CreateStakingContractEvent, s2: $1_staking_contract_CreateStakingContractEvent): bool {
    s1 == s2
}

// struct staking_contract::DistributeEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:169:5+153
datatype $1_staking_contract_DistributeEvent {
    $1_staking_contract_DistributeEvent($operator: int, $pool_address: int, $recipient: int, $amount: int)
}
function {:inline} $Update'$1_staking_contract_DistributeEvent'_operator(s: $1_staking_contract_DistributeEvent, x: int): $1_staking_contract_DistributeEvent {
    $1_staking_contract_DistributeEvent(x, s->$pool_address, s->$recipient, s->$amount)
}
function {:inline} $Update'$1_staking_contract_DistributeEvent'_pool_address(s: $1_staking_contract_DistributeEvent, x: int): $1_staking_contract_DistributeEvent {
    $1_staking_contract_DistributeEvent(s->$operator, x, s->$recipient, s->$amount)
}
function {:inline} $Update'$1_staking_contract_DistributeEvent'_recipient(s: $1_staking_contract_DistributeEvent, x: int): $1_staking_contract_DistributeEvent {
    $1_staking_contract_DistributeEvent(s->$operator, s->$pool_address, x, s->$amount)
}
function {:inline} $Update'$1_staking_contract_DistributeEvent'_amount(s: $1_staking_contract_DistributeEvent, x: int): $1_staking_contract_DistributeEvent {
    $1_staking_contract_DistributeEvent(s->$operator, s->$pool_address, s->$recipient, x)
}
function $IsValid'$1_staking_contract_DistributeEvent'(s: $1_staking_contract_DistributeEvent): bool {
    $IsValid'address'(s->$operator)
      && $IsValid'address'(s->$pool_address)
      && $IsValid'address'(s->$recipient)
      && $IsValid'u64'(s->$amount)
}
function {:inline} $IsEqual'$1_staking_contract_DistributeEvent'(s1: $1_staking_contract_DistributeEvent, s2: $1_staking_contract_DistributeEvent): bool {
    s1 == s2
}

// struct staking_contract::RequestCommissionEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:143:5+177
datatype $1_staking_contract_RequestCommissionEvent {
    $1_staking_contract_RequestCommissionEvent($operator: int, $pool_address: int, $accumulated_rewards: int, $commission_amount: int)
}
function {:inline} $Update'$1_staking_contract_RequestCommissionEvent'_operator(s: $1_staking_contract_RequestCommissionEvent, x: int): $1_staking_contract_RequestCommissionEvent {
    $1_staking_contract_RequestCommissionEvent(x, s->$pool_address, s->$accumulated_rewards, s->$commission_amount)
}
function {:inline} $Update'$1_staking_contract_RequestCommissionEvent'_pool_address(s: $1_staking_contract_RequestCommissionEvent, x: int): $1_staking_contract_RequestCommissionEvent {
    $1_staking_contract_RequestCommissionEvent(s->$operator, x, s->$accumulated_rewards, s->$commission_amount)
}
function {:inline} $Update'$1_staking_contract_RequestCommissionEvent'_accumulated_rewards(s: $1_staking_contract_RequestCommissionEvent, x: int): $1_staking_contract_RequestCommissionEvent {
    $1_staking_contract_RequestCommissionEvent(s->$operator, s->$pool_address, x, s->$commission_amount)
}
function {:inline} $Update'$1_staking_contract_RequestCommissionEvent'_commission_amount(s: $1_staking_contract_RequestCommissionEvent, x: int): $1_staking_contract_RequestCommissionEvent {
    $1_staking_contract_RequestCommissionEvent(s->$operator, s->$pool_address, s->$accumulated_rewards, x)
}
function $IsValid'$1_staking_contract_RequestCommissionEvent'(s: $1_staking_contract_RequestCommissionEvent): bool {
    $IsValid'address'(s->$operator)
      && $IsValid'address'(s->$pool_address)
      && $IsValid'u64'(s->$accumulated_rewards)
      && $IsValid'u64'(s->$commission_amount)
}
function {:inline} $IsEqual'$1_staking_contract_RequestCommissionEvent'(s1: $1_staking_contract_RequestCommissionEvent, s2: $1_staking_contract_RequestCommissionEvent): bool {
    s1 == s2
}

// struct staking_contract::ResetLockupEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:132:5+105
datatype $1_staking_contract_ResetLockupEvent {
    $1_staking_contract_ResetLockupEvent($operator: int, $pool_address: int)
}
function {:inline} $Update'$1_staking_contract_ResetLockupEvent'_operator(s: $1_staking_contract_ResetLockupEvent, x: int): $1_staking_contract_ResetLockupEvent {
    $1_staking_contract_ResetLockupEvent(x, s->$pool_address)
}
function {:inline} $Update'$1_staking_contract_ResetLockupEvent'_pool_address(s: $1_staking_contract_ResetLockupEvent, x: int): $1_staking_contract_ResetLockupEvent {
    $1_staking_contract_ResetLockupEvent(s->$operator, x)
}
function $IsValid'$1_staking_contract_ResetLockupEvent'(s: $1_staking_contract_ResetLockupEvent): bool {
    $IsValid'address'(s->$operator)
      && $IsValid'address'(s->$pool_address)
}
function {:inline} $IsEqual'$1_staking_contract_ResetLockupEvent'(s1: $1_staking_contract_ResetLockupEvent, s2: $1_staking_contract_ResetLockupEvent): bool {
    s1 == s2
}

// struct staking_contract::StakingContract at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:72:5+692
datatype $1_staking_contract_StakingContract {
    $1_staking_contract_StakingContract($principal: int, $pool_address: int, $owner_cap: $1_stake_OwnerCapability, $commission_percentage: int, $distribution_pool: $1_pool_u64_Pool, $signer_cap: $1_account_SignerCapability)
}
function {:inline} $Update'$1_staking_contract_StakingContract'_principal(s: $1_staking_contract_StakingContract, x: int): $1_staking_contract_StakingContract {
    $1_staking_contract_StakingContract(x, s->$pool_address, s->$owner_cap, s->$commission_percentage, s->$distribution_pool, s->$signer_cap)
}
function {:inline} $Update'$1_staking_contract_StakingContract'_pool_address(s: $1_staking_contract_StakingContract, x: int): $1_staking_contract_StakingContract {
    $1_staking_contract_StakingContract(s->$principal, x, s->$owner_cap, s->$commission_percentage, s->$distribution_pool, s->$signer_cap)
}
function {:inline} $Update'$1_staking_contract_StakingContract'_owner_cap(s: $1_staking_contract_StakingContract, x: $1_stake_OwnerCapability): $1_staking_contract_StakingContract {
    $1_staking_contract_StakingContract(s->$principal, s->$pool_address, x, s->$commission_percentage, s->$distribution_pool, s->$signer_cap)
}
function {:inline} $Update'$1_staking_contract_StakingContract'_commission_percentage(s: $1_staking_contract_StakingContract, x: int): $1_staking_contract_StakingContract {
    $1_staking_contract_StakingContract(s->$principal, s->$pool_address, s->$owner_cap, x, s->$distribution_pool, s->$signer_cap)
}
function {:inline} $Update'$1_staking_contract_StakingContract'_distribution_pool(s: $1_staking_contract_StakingContract, x: $1_pool_u64_Pool): $1_staking_contract_StakingContract {
    $1_staking_contract_StakingContract(s->$principal, s->$pool_address, s->$owner_cap, s->$commission_percentage, x, s->$signer_cap)
}
function {:inline} $Update'$1_staking_contract_StakingContract'_signer_cap(s: $1_staking_contract_StakingContract, x: $1_account_SignerCapability): $1_staking_contract_StakingContract {
    $1_staking_contract_StakingContract(s->$principal, s->$pool_address, s->$owner_cap, s->$commission_percentage, s->$distribution_pool, x)
}
function $IsValid'$1_staking_contract_StakingContract'(s: $1_staking_contract_StakingContract): bool {
    $IsValid'u64'(s->$principal)
      && $IsValid'address'(s->$pool_address)
      && $IsValid'$1_stake_OwnerCapability'(s->$owner_cap)
      && $IsValid'u64'(s->$commission_percentage)
      && $IsValid'$1_pool_u64_Pool'(s->$distribution_pool)
      && $IsValid'$1_account_SignerCapability'(s->$signer_cap)
}
function {:inline} $IsEqual'$1_staking_contract_StakingContract'(s1: $1_staking_contract_StakingContract, s2: $1_staking_contract_StakingContract): bool {
    $IsEqual'u64'(s1->$principal, s2->$principal)
    && $IsEqual'address'(s1->$pool_address, s2->$pool_address)
    && $IsEqual'$1_stake_OwnerCapability'(s1->$owner_cap, s2->$owner_cap)
    && $IsEqual'u64'(s1->$commission_percentage, s2->$commission_percentage)
    && $IsEqual'$1_pool_u64_Pool'(s1->$distribution_pool, s2->$distribution_pool)
    && $IsEqual'$1_account_SignerCapability'(s1->$signer_cap, s2->$signer_cap)}

// struct staking_contract::Store at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:86:5+690
datatype $1_staking_contract_Store {
    $1_staking_contract_Store($staking_contracts: Table int ($1_staking_contract_StakingContract), $create_staking_contract_events: $1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent', $update_voter_events: $1_event_EventHandle'$1_staking_contract_UpdateVoterEvent', $reset_lockup_events: $1_event_EventHandle'$1_staking_contract_ResetLockupEvent', $add_stake_events: $1_event_EventHandle'$1_staking_contract_AddStakeEvent', $request_commission_events: $1_event_EventHandle'$1_staking_contract_RequestCommissionEvent', $unlock_stake_events: $1_event_EventHandle'$1_staking_contract_UnlockStakeEvent', $switch_operator_events: $1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent', $add_distribution_events: $1_event_EventHandle'$1_staking_contract_AddDistributionEvent', $distribute_events: $1_event_EventHandle'$1_staking_contract_DistributeEvent')
}
function {:inline} $Update'$1_staking_contract_Store'_staking_contracts(s: $1_staking_contract_Store, x: Table int ($1_staking_contract_StakingContract)): $1_staking_contract_Store {
    $1_staking_contract_Store(x, s->$create_staking_contract_events, s->$update_voter_events, s->$reset_lockup_events, s->$add_stake_events, s->$request_commission_events, s->$unlock_stake_events, s->$switch_operator_events, s->$add_distribution_events, s->$distribute_events)
}
function {:inline} $Update'$1_staking_contract_Store'_create_staking_contract_events(s: $1_staking_contract_Store, x: $1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent'): $1_staking_contract_Store {
    $1_staking_contract_Store(s->$staking_contracts, x, s->$update_voter_events, s->$reset_lockup_events, s->$add_stake_events, s->$request_commission_events, s->$unlock_stake_events, s->$switch_operator_events, s->$add_distribution_events, s->$distribute_events)
}
function {:inline} $Update'$1_staking_contract_Store'_update_voter_events(s: $1_staking_contract_Store, x: $1_event_EventHandle'$1_staking_contract_UpdateVoterEvent'): $1_staking_contract_Store {
    $1_staking_contract_Store(s->$staking_contracts, s->$create_staking_contract_events, x, s->$reset_lockup_events, s->$add_stake_events, s->$request_commission_events, s->$unlock_stake_events, s->$switch_operator_events, s->$add_distribution_events, s->$distribute_events)
}
function {:inline} $Update'$1_staking_contract_Store'_reset_lockup_events(s: $1_staking_contract_Store, x: $1_event_EventHandle'$1_staking_contract_ResetLockupEvent'): $1_staking_contract_Store {
    $1_staking_contract_Store(s->$staking_contracts, s->$create_staking_contract_events, s->$update_voter_events, x, s->$add_stake_events, s->$request_commission_events, s->$unlock_stake_events, s->$switch_operator_events, s->$add_distribution_events, s->$distribute_events)
}
function {:inline} $Update'$1_staking_contract_Store'_add_stake_events(s: $1_staking_contract_Store, x: $1_event_EventHandle'$1_staking_contract_AddStakeEvent'): $1_staking_contract_Store {
    $1_staking_contract_Store(s->$staking_contracts, s->$create_staking_contract_events, s->$update_voter_events, s->$reset_lockup_events, x, s->$request_commission_events, s->$unlock_stake_events, s->$switch_operator_events, s->$add_distribution_events, s->$distribute_events)
}
function {:inline} $Update'$1_staking_contract_Store'_request_commission_events(s: $1_staking_contract_Store, x: $1_event_EventHandle'$1_staking_contract_RequestCommissionEvent'): $1_staking_contract_Store {
    $1_staking_contract_Store(s->$staking_contracts, s->$create_staking_contract_events, s->$update_voter_events, s->$reset_lockup_events, s->$add_stake_events, x, s->$unlock_stake_events, s->$switch_operator_events, s->$add_distribution_events, s->$distribute_events)
}
function {:inline} $Update'$1_staking_contract_Store'_unlock_stake_events(s: $1_staking_contract_Store, x: $1_event_EventHandle'$1_staking_contract_UnlockStakeEvent'): $1_staking_contract_Store {
    $1_staking_contract_Store(s->$staking_contracts, s->$create_staking_contract_events, s->$update_voter_events, s->$reset_lockup_events, s->$add_stake_events, s->$request_commission_events, x, s->$switch_operator_events, s->$add_distribution_events, s->$distribute_events)
}
function {:inline} $Update'$1_staking_contract_Store'_switch_operator_events(s: $1_staking_contract_Store, x: $1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent'): $1_staking_contract_Store {
    $1_staking_contract_Store(s->$staking_contracts, s->$create_staking_contract_events, s->$update_voter_events, s->$reset_lockup_events, s->$add_stake_events, s->$request_commission_events, s->$unlock_stake_events, x, s->$add_distribution_events, s->$distribute_events)
}
function {:inline} $Update'$1_staking_contract_Store'_add_distribution_events(s: $1_staking_contract_Store, x: $1_event_EventHandle'$1_staking_contract_AddDistributionEvent'): $1_staking_contract_Store {
    $1_staking_contract_Store(s->$staking_contracts, s->$create_staking_contract_events, s->$update_voter_events, s->$reset_lockup_events, s->$add_stake_events, s->$request_commission_events, s->$unlock_stake_events, s->$switch_operator_events, x, s->$distribute_events)
}
function {:inline} $Update'$1_staking_contract_Store'_distribute_events(s: $1_staking_contract_Store, x: $1_event_EventHandle'$1_staking_contract_DistributeEvent'): $1_staking_contract_Store {
    $1_staking_contract_Store(s->$staking_contracts, s->$create_staking_contract_events, s->$update_voter_events, s->$reset_lockup_events, s->$add_stake_events, s->$request_commission_events, s->$unlock_stake_events, s->$switch_operator_events, s->$add_distribution_events, x)
}
function $IsValid'$1_staking_contract_Store'(s: $1_staking_contract_Store): bool {
    $IsValid'$1_simple_map_SimpleMap'address_$1_staking_contract_StakingContract''(s->$staking_contracts)
      && $IsValid'$1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent''(s->$create_staking_contract_events)
      && $IsValid'$1_event_EventHandle'$1_staking_contract_UpdateVoterEvent''(s->$update_voter_events)
      && $IsValid'$1_event_EventHandle'$1_staking_contract_ResetLockupEvent''(s->$reset_lockup_events)
      && $IsValid'$1_event_EventHandle'$1_staking_contract_AddStakeEvent''(s->$add_stake_events)
      && $IsValid'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''(s->$request_commission_events)
      && $IsValid'$1_event_EventHandle'$1_staking_contract_UnlockStakeEvent''(s->$unlock_stake_events)
      && $IsValid'$1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent''(s->$switch_operator_events)
      && $IsValid'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''(s->$add_distribution_events)
      && $IsValid'$1_event_EventHandle'$1_staking_contract_DistributeEvent''(s->$distribute_events)
}
function {:inline} $IsEqual'$1_staking_contract_Store'(s1: $1_staking_contract_Store, s2: $1_staking_contract_Store): bool {
    $IsEqual'$1_simple_map_SimpleMap'address_$1_staking_contract_StakingContract''(s1->$staking_contracts, s2->$staking_contracts)
    && $IsEqual'$1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent''(s1->$create_staking_contract_events, s2->$create_staking_contract_events)
    && $IsEqual'$1_event_EventHandle'$1_staking_contract_UpdateVoterEvent''(s1->$update_voter_events, s2->$update_voter_events)
    && $IsEqual'$1_event_EventHandle'$1_staking_contract_ResetLockupEvent''(s1->$reset_lockup_events, s2->$reset_lockup_events)
    && $IsEqual'$1_event_EventHandle'$1_staking_contract_AddStakeEvent''(s1->$add_stake_events, s2->$add_stake_events)
    && $IsEqual'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''(s1->$request_commission_events, s2->$request_commission_events)
    && $IsEqual'$1_event_EventHandle'$1_staking_contract_UnlockStakeEvent''(s1->$unlock_stake_events, s2->$unlock_stake_events)
    && $IsEqual'$1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent''(s1->$switch_operator_events, s2->$switch_operator_events)
    && $IsEqual'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''(s1->$add_distribution_events, s2->$add_distribution_events)
    && $IsEqual'$1_event_EventHandle'$1_staking_contract_DistributeEvent''(s1->$distribute_events, s2->$distribute_events)}
var $1_staking_contract_Store_$memory: $Memory $1_staking_contract_Store;

// struct staking_contract::SwitchOperatorEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:157:5+143
datatype $1_staking_contract_SwitchOperatorEvent {
    $1_staking_contract_SwitchOperatorEvent($old_operator: int, $new_operator: int, $pool_address: int)
}
function {:inline} $Update'$1_staking_contract_SwitchOperatorEvent'_old_operator(s: $1_staking_contract_SwitchOperatorEvent, x: int): $1_staking_contract_SwitchOperatorEvent {
    $1_staking_contract_SwitchOperatorEvent(x, s->$new_operator, s->$pool_address)
}
function {:inline} $Update'$1_staking_contract_SwitchOperatorEvent'_new_operator(s: $1_staking_contract_SwitchOperatorEvent, x: int): $1_staking_contract_SwitchOperatorEvent {
    $1_staking_contract_SwitchOperatorEvent(s->$old_operator, x, s->$pool_address)
}
function {:inline} $Update'$1_staking_contract_SwitchOperatorEvent'_pool_address(s: $1_staking_contract_SwitchOperatorEvent, x: int): $1_staking_contract_SwitchOperatorEvent {
    $1_staking_contract_SwitchOperatorEvent(s->$old_operator, s->$new_operator, x)
}
function $IsValid'$1_staking_contract_SwitchOperatorEvent'(s: $1_staking_contract_SwitchOperatorEvent): bool {
    $IsValid'address'(s->$old_operator)
      && $IsValid'address'(s->$new_operator)
      && $IsValid'address'(s->$pool_address)
}
function {:inline} $IsEqual'$1_staking_contract_SwitchOperatorEvent'(s1: $1_staking_contract_SwitchOperatorEvent, s2: $1_staking_contract_SwitchOperatorEvent): bool {
    s1 == s2
}

// struct staking_contract::UpdateVoterEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:125:5+161
datatype $1_staking_contract_UpdateVoterEvent {
    $1_staking_contract_UpdateVoterEvent($operator: int, $pool_address: int, $old_voter: int, $new_voter: int)
}
function {:inline} $Update'$1_staking_contract_UpdateVoterEvent'_operator(s: $1_staking_contract_UpdateVoterEvent, x: int): $1_staking_contract_UpdateVoterEvent {
    $1_staking_contract_UpdateVoterEvent(x, s->$pool_address, s->$old_voter, s->$new_voter)
}
function {:inline} $Update'$1_staking_contract_UpdateVoterEvent'_pool_address(s: $1_staking_contract_UpdateVoterEvent, x: int): $1_staking_contract_UpdateVoterEvent {
    $1_staking_contract_UpdateVoterEvent(s->$operator, x, s->$old_voter, s->$new_voter)
}
function {:inline} $Update'$1_staking_contract_UpdateVoterEvent'_old_voter(s: $1_staking_contract_UpdateVoterEvent, x: int): $1_staking_contract_UpdateVoterEvent {
    $1_staking_contract_UpdateVoterEvent(s->$operator, s->$pool_address, x, s->$new_voter)
}
function {:inline} $Update'$1_staking_contract_UpdateVoterEvent'_new_voter(s: $1_staking_contract_UpdateVoterEvent, x: int): $1_staking_contract_UpdateVoterEvent {
    $1_staking_contract_UpdateVoterEvent(s->$operator, s->$pool_address, s->$old_voter, x)
}
function $IsValid'$1_staking_contract_UpdateVoterEvent'(s: $1_staking_contract_UpdateVoterEvent): bool {
    $IsValid'address'(s->$operator)
      && $IsValid'address'(s->$pool_address)
      && $IsValid'address'(s->$old_voter)
      && $IsValid'address'(s->$new_voter)
}
function {:inline} $IsEqual'$1_staking_contract_UpdateVoterEvent'(s1: $1_staking_contract_UpdateVoterEvent, s2: $1_staking_contract_UpdateVoterEvent): bool {
    s1 == s2
}

// fun staking_contract::assert_staking_contract_exists [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:689:5+446
procedure {:inline 1} $1_staking_contract_assert_staking_contract_exists(_$t0: int, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: Table int ($1_staking_contract_StakingContract);
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: $Mutation ($1_staking_contract_Store);
    var $t9: $Mutation (Table int ($1_staking_contract_StakingContract));
    var $t10: Table int ($1_staking_contract_StakingContract);
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t0: int;
    var $t1: int;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t3, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t0))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:380:9+64
    assume {:print "$at(145,17457,17521)"} true;
    assume ($t3 == $ResourceValue($1_staking_contract_Store_$memory, $t0)->$staking_contracts);

    // trace_local[staker]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:689:5+1
    assume {:print "$at(144,32810,32811)"} true;
    assume {:print "$track_local(59,2,0):", $t0} $t0 == $t0;

    // trace_local[operator]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:689:5+1
    assume {:print "$track_local(59,2,1):", $t1} $t1 == $t1;

    // $t4 := exists<staking_contract::Store>($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:690:17+6
    assume {:print "$at(144,32914,32920)"} true;
    $t4 := $ResourceExists($1_staking_contract_Store_$memory, $t0);

    // if ($t4) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:690:9+87
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:690:9+87
L1:

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:690:9+87
    assume {:print "$at(144,32906,32993)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:690:57+37
L0:

    // $t5 := 3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:690:57+37
    assume {:print "$at(144,32954,32991)"} true;
    $t5 := 3;
    assume $IsValid'u64'($t5);

    // $t6 := error::not_found($t5) on_abort goto L7 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:690:40+55
    call $t6 := $1_error_not_found($t5);
    if ($abort_flag) {
        assume {:print "$at(144,32937,32992)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(59,2):", $t7} $t7 == $t7;
        goto L7;
    }

    // trace_abort($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:690:9+87
    assume {:print "$at(144,32906,32993)"} true;
    assume {:print "$track_abort(59,2):", $t6} $t6 == $t6;

    // $t7 := move($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:690:9+87
    $t7 := $t6;

    // goto L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:690:9+87
    goto L7;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:691:63+6
    assume {:print "$at(144,33057,33063)"} true;
L2:

    // $t8 := borrow_global<staking_contract::Store>($t0) on_abort goto L7 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:691:38+17
    assume {:print "$at(144,33032,33049)"} true;
    if (!$ResourceExists($1_staking_contract_Store_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t8 := $Mutation($Global($t0), EmptyVec(), $ResourceValue($1_staking_contract_Store_$memory, $t0));
    }
    if ($abort_flag) {
        assume {:print "$at(144,33032,33049)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(59,2):", $t7} $t7 == $t7;
        goto L7;
    }

    // $t9 := borrow_field<staking_contract::Store>.staking_contracts($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:691:33+55
    $t9 := $ChildMutation($t8, 0, $Dereference($t8)->$staking_contracts);

    // $t10 := read_ref($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:693:37+30
    assume {:print "$at(144,33137,33167)"} true;
    $t10 := $Dereference($t9);

    // pack_ref_deep($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:693:37+30

    // $t11 := simple_map::contains_key<address, staking_contract::StakingContract>($t10, $t1) on_abort goto L7 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:693:13+54
    call $t11 := $1_simple_map_contains_key'address_$1_staking_contract_StakingContract'($t10, $t1);
    if ($abort_flag) {
        assume {:print "$at(144,33113,33167)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(59,2):", $t7} $t7 == $t7;
        goto L7;
    }

    // if ($t11) goto L4 else goto L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:692:9+157
    assume {:print "$at(144,33092,33249)"} true;
    if ($t11) { goto L4; } else { goto L3; }

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:692:9+157
L4:

    // goto L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:692:9+157
    assume {:print "$at(144,33092,33249)"} true;
    goto L5;

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:694:30+39
    assume {:print "$at(144,33198,33237)"} true;
L3:

    // $t12 := 4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:694:30+39
    assume {:print "$at(144,33198,33237)"} true;
    $t12 := 4;
    assume $IsValid'u64'($t12);

    // $t13 := error::not_found($t12) on_abort goto L7 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:694:13+57
    call $t13 := $1_error_not_found($t12);
    if ($abort_flag) {
        assume {:print "$at(144,33181,33238)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(59,2):", $t7} $t7 == $t7;
        goto L7;
    }

    // trace_abort($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:692:9+157
    assume {:print "$at(144,33092,33249)"} true;
    assume {:print "$track_abort(59,2):", $t13} $t13 == $t13;

    // $t7 := move($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:692:9+157
    $t7 := $t13;

    // goto L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:692:9+157
    goto L7;

    // label L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:695:10+1
    assume {:print "$at(144,33249,33250)"} true;
L5:

    // label L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:696:5+1
    assume {:print "$at(144,33255,33256)"} true;
L6:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:696:5+1
    assume {:print "$at(144,33255,33256)"} true;
    return;

    // label L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:696:5+1
L7:

    // abort($t7) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:696:5+1
    assume {:print "$at(144,33255,33256)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun staking_contract::reset_lockup [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:388:5+596
procedure {:inline 1} $1_staking_contract_reset_lockup(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: $Mutation ($1_staking_contract_StakingContract);
    var $t5: $Mutation ($1_staking_contract_Store);
    var $t6: int;
    var $t7: Table int ($1_staking_contract_StakingContract);
    var $t8: $1_staking_contract_Store;
    var $t9: $1_staking_contract_StakingContract;
    var $t10: int;
    var $t11: $1_staking_config_StakingConfig;
    var $t12: $1_stake_StakePool;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: Table int ($1_staking_contract_StakingContract);
    var $t19: $Mutation ($1_staking_contract_Store);
    var $t20: $Mutation (Table int ($1_staking_contract_StakingContract));
    var $t21: $Mutation ($1_staking_contract_StakingContract);
    var $t22: int;
    var $t23: $1_stake_OwnerCapability;
    var $t24: $1_staking_config_StakingConfig;
    var $t25: int;
    var $t26: $1_stake_StakePool;
    var $t27: int;
    var $t28: int;
    var $t29: $1_stake_StakePool;
    var $t30: $Mutation ($1_event_EventHandle'$1_staking_contract_ResetLockupEvent');
    var $t31: $1_staking_contract_ResetLockupEvent;
    var $t0: $signer;
    var $t1: int;
    var $temp_0'$1_staking_contract_StakingContract': $1_staking_contract_StakingContract;
    var $temp_0'$1_staking_contract_Store': $1_staking_contract_Store;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t6, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:162:9+48
    assume {:print "$at(145,7515,7563)"} true;
    assume ($t6 == $1_signer_$address_of($t0));

    // assume Identical($t7, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t6))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:380:9+64
    assume {:print "$at(145,17457,17521)"} true;
    assume ($t7 == $ResourceValue($1_staking_contract_Store_$memory, $t6)->$staking_contracts);

    // assume Identical($t8, global<staking_contract::Store>($t6)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:430:9+34
    assume {:print "$at(145,19493,19527)"} true;
    assume ($t8 == $ResourceValue($1_staking_contract_Store_$memory, $t6));

    // assume Identical($t9, simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t8), $t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:431:9+79
    assume {:print "$at(145,19536,19615)"} true;
    assume ($t9 == $1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($t8->$staking_contracts, $t1));

    // assume Identical($t10, select stake::OwnerCapability.pool_address(select staking_contract::StakingContract.owner_cap($t9))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:432:9+59
    assume {:print "$at(145,19624,19683)"} true;
    assume ($t10 == $t9->$owner_cap->$pool_address);

    // assume Identical($t11, global<staking_config::StakingConfig>(0x1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:438:9+69
    assume {:print "$at(145,19944,20013)"} true;
    assume ($t11 == $ResourceValue($1_staking_config_StakingConfig_$memory, 1));

    // assume Identical($t12, global<stake::StakePool>($t10)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:439:9+56
    assume {:print "$at(145,20022,20078)"} true;
    assume ($t12 == $ResourceValue($1_stake_StakePool_$memory, $t10));

    // assume Identical($t13, select stake::StakePool.locked_until_secs($t12)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:440:9+57
    assume {:print "$at(145,20087,20144)"} true;
    assume ($t13 == $t12->$locked_until_secs);

    // assume Identical($t14, Div(select timestamp::CurrentTimeMicroseconds.microseconds(global<timestamp::CurrentTimeMicroseconds>(0x1)), 1000000)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:441:9+125
    assume {:print "$at(145,20153,20278)"} true;
    assume ($t14 == ($ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, 1)->$microseconds div 1000000));

    // assume Identical($t15, Add($t14, select staking_config::StakingConfig.recurring_lockup_duration_secs($t11))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:442:9+76
    assume {:print "$at(145,20287,20363)"} true;
    assume ($t15 == ($t14 + $t11->$recurring_lockup_duration_secs));

    // trace_local[staker]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:388:5+1
    assume {:print "$at(144,17758,17759)"} true;
    assume {:print "$track_local(59,18,0):", $t0} $t0 == $t0;

    // trace_local[operator]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:388:5+1
    assume {:print "$track_local(59,18,1):", $t1} $t1 == $t1;

    // $t16 := signer::address_of($t0) on_abort goto L2 with $t17 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:389:30+26
    assume {:print "$at(144,17870,17896)"} true;
    call $t16 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(144,17870,17896)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(59,18):", $t17} $t17 == $t17;
        goto L2;
    }

    // trace_local[staker_address]($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:389:13+14
    assume {:print "$track_local(59,18,3):", $t16} $t16 == $t16;

    // assume Identical($t18, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t16))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:380:9+64
    assume {:print "$at(145,17457,17521)"} true;
    assume ($t18 == $ResourceValue($1_staking_contract_Store_$memory, $t16)->$staking_contracts);

    // staking_contract::assert_staking_contract_exists($t16, $t1) on_abort goto L2 with $t17 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:390:9+56
    assume {:print "$at(144,17906,17962)"} true;
    call $1_staking_contract_assert_staking_contract_exists($t16, $t1);
    if ($abort_flag) {
        assume {:print "$at(144,17906,17962)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(59,18):", $t17} $t17 == $t17;
        goto L2;
    }

    // $t19 := borrow_global<staking_contract::Store>($t16) on_abort goto L2 with $t17 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:392:21+17
    assume {:print "$at(144,17985,18002)"} true;
    if (!$ResourceExists($1_staking_contract_Store_$memory, $t16)) {
        call $ExecFailureAbort();
    } else {
        $t19 := $Mutation($Global($t16), EmptyVec(), $ResourceValue($1_staking_contract_Store_$memory, $t16));
    }
    if ($abort_flag) {
        assume {:print "$at(144,17985,18002)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(59,18):", $t17} $t17 == $t17;
        goto L2;
    }

    // trace_local[store]($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:392:13+5
    $temp_0'$1_staking_contract_Store' := $Dereference($t19);
    assume {:print "$track_local(59,18,5):", $temp_0'$1_staking_contract_Store'} $temp_0'$1_staking_contract_Store' == $temp_0'$1_staking_contract_Store';

    // $t20 := borrow_field<staking_contract::Store>.staking_contracts($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:393:55+28
    assume {:print "$at(144,18081,18109)"} true;
    $t20 := $ChildMutation($t19, 0, $Dereference($t19)->$staking_contracts);

    // $t21 := simple_map::borrow_mut<address, staking_contract::StakingContract>($t20, $t1) on_abort goto L2 with $t17 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:393:32+63
    call $t21,$t20 := $1_simple_map_borrow_mut'address_$1_staking_contract_StakingContract'($t20, $t1);
    if ($abort_flag) {
        assume {:print "$at(144,18058,18121)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(59,18):", $t17} $t17 == $t17;
        goto L2;
    }

    // trace_local[staking_contract]($t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:393:13+16
    $temp_0'$1_staking_contract_StakingContract' := $Dereference($t21);
    assume {:print "$track_local(59,18,4):", $temp_0'$1_staking_contract_StakingContract'} $temp_0'$1_staking_contract_StakingContract' == $temp_0'$1_staking_contract_StakingContract';

    // $t22 := get_field<staking_contract::StakingContract>.pool_address($t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:394:28+29
    assume {:print "$at(144,18150,18179)"} true;
    $t22 := $Dereference($t21)->$pool_address;

    // trace_local[pool_address]($t22) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:394:13+12
    assume {:print "$track_local(59,18,2):", $t22} $t22 == $t22;

    // $t23 := get_field<staking_contract::StakingContract>.owner_cap($t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:395:41+27
    assume {:print "$at(144,18221,18248)"} true;
    $t23 := $Dereference($t21)->$owner_cap;

    // assume Identical($t24, global<staking_config::StakingConfig>(0x1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:103:9+69
    assume {:print "$at(143,4949,5018)"} true;
    assume ($t24 == $ResourceValue($1_staking_config_StakingConfig_$memory, 1));

    // assume Identical($t25, select stake::OwnerCapability.pool_address($t23)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:104:9+42
    assume {:print "$at(143,5027,5069)"} true;
    assume ($t25 == $t23->$pool_address);

    // assume Identical($t26, global<stake::StakePool>($t25)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:105:9+53
    assume {:print "$at(143,5078,5131)"} true;
    assume ($t26 == $ResourceValue($1_stake_StakePool_$memory, $t25));

    // assume Identical($t27, timestamp::spec_now_seconds()) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:107:9+48
    assume {:print "$at(143,5203,5251)"} true;
    assume ($t27 == $1_timestamp_spec_now_seconds($1_timestamp_CurrentTimeMicroseconds_$memory));

    // assume Identical($t28, select staking_config::StakingConfig.recurring_lockup_duration_secs($t24)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:108:9+51
    assume {:print "$at(143,5260,5311)"} true;
    assume ($t28 == $t24->$recurring_lockup_duration_secs);

    // assume Identical($t29, global<stake::StakePool>($t25)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:36:9+49
    assume {:print "$at(143,1661,1710)"} true;
    assume ($t29 == $ResourceValue($1_stake_StakePool_$memory, $t25));

    // stake::increase_lockup_with_cap($t23) on_abort goto L2 with $t17 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:395:9+60
    assume {:print "$at(144,18189,18249)"} true;
    call $1_stake_increase_lockup_with_cap($t23);
    if ($abort_flag) {
        assume {:print "$at(144,18189,18249)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(59,18):", $t17} $t17 == $t17;
        goto L2;
    }

    // $t30 := borrow_field<staking_contract::Store>.reset_lockup_events($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:397:20+30
    assume {:print "$at(144,18271,18301)"} true;
    $t30 := $ChildMutation($t19, 3, $Dereference($t19)->$reset_lockup_events);

    // $t31 := pack staking_contract::ResetLockupEvent($t1, $t22) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:397:52+43
    $t31 := $1_staking_contract_ResetLockupEvent($t1, $t22);

    // opaque begin: event::emit_event<staking_contract::ResetLockupEvent>($t30, $t31) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:397:9+87

    // opaque end: event::emit_event<staking_contract::ResetLockupEvent>($t30, $t31) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:397:9+87

    // write_back[Reference($t19).reset_lockup_events (event::EventHandle<staking_contract::ResetLockupEvent>)]($t30) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:397:9+87
    $t19 := $UpdateMutation($t19, $Update'$1_staking_contract_Store'_reset_lockup_events($Dereference($t19), $Dereference($t30)));

    // pack_ref_deep($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:397:9+87

    // write_back[staking_contract::Store@]($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:397:9+87
    $1_staking_contract_Store_$memory := $ResourceUpdate($1_staking_contract_Store_$memory, $GlobalLocationAddress($t19),
        $Dereference($t19));

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:398:5+1
    assume {:print "$at(144,18353,18354)"} true;
L1:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:398:5+1
    assume {:print "$at(144,18353,18354)"} true;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:398:5+1
L2:

    // abort($t17) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:398:5+1
    assume {:print "$at(144,18353,18354)"} true;
    $abort_code := $t17;
    $abort_flag := true;
    return;

}

// fun staking_contract::update_voter [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:371:5+754
procedure {:inline 1} $1_staking_contract_update_voter(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: $Mutation ($1_staking_contract_StakingContract);
    var $t7: $Mutation ($1_staking_contract_Store);
    var $t8: int;
    var $t9: $1_staking_contract_Store;
    var $t10: $1_staking_contract_StakingContract;
    var $t11: int;
    var $t12: Table int ($1_staking_contract_StakingContract);
    var $t13: int;
    var $t14: int;
    var $t15: Table int ($1_staking_contract_StakingContract);
    var $t16: $Mutation ($1_staking_contract_Store);
    var $t17: $Mutation (Table int ($1_staking_contract_StakingContract));
    var $t18: $Mutation ($1_staking_contract_StakingContract);
    var $t19: int;
    var $t20: int;
    var $t21: $1_stake_OwnerCapability;
    var $t22: int;
    var $t23: $1_stake_StakePool;
    var $t24: $Mutation ($1_event_EventHandle'$1_staking_contract_UpdateVoterEvent');
    var $t25: $1_staking_contract_UpdateVoterEvent;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'$1_staking_contract_StakingContract': $1_staking_contract_StakingContract;
    var $temp_0'$1_staking_contract_Store': $1_staking_contract_Store;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // assume Identical($t8, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:147:9+48
    assume {:print "$at(145,6648,6696)"} true;
    assume ($t8 == $1_signer_$address_of($t0));

    // assume Identical($t9, global<staking_contract::Store>($t8)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:389:9+34
    assume {:print "$at(145,17748,17782)"} true;
    assume ($t9 == $ResourceValue($1_staking_contract_Store_$memory, $t8));

    // assume Identical($t10, simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t9), $t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:390:9+79
    assume {:print "$at(145,17791,17870)"} true;
    assume ($t10 == $1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($t9->$staking_contracts, $t1));

    // assume Identical($t11, select staking_contract::StakingContract.pool_address($t10)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:391:9+49
    assume {:print "$at(145,17879,17928)"} true;
    assume ($t11 == $t10->$pool_address);

    // assume Identical($t12, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t8))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:380:9+64
    assume {:print "$at(145,17457,17521)"} true;
    assume ($t12 == $ResourceValue($1_staking_contract_Store_$memory, $t8)->$staking_contracts);

    // trace_local[staker]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:371:5+1
    assume {:print "$at(144,16894,16895)"} true;
    assume {:print "$track_local(59,29,0):", $t0} $t0 == $t0;

    // trace_local[operator]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:371:5+1
    assume {:print "$track_local(59,29,1):", $t1} $t1 == $t1;

    // trace_local[new_voter]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:371:5+1
    assume {:print "$track_local(59,29,2):", $t2} $t2 == $t2;

    // $t13 := signer::address_of($t0) on_abort goto L2 with $t14 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:372:30+26
    assume {:print "$at(144,17026,17052)"} true;
    call $t13 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(144,17026,17052)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(59,29):", $t14} $t14 == $t14;
        goto L2;
    }

    // trace_local[staker_address]($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:372:13+14
    assume {:print "$track_local(59,29,5):", $t13} $t13 == $t13;

    // assume Identical($t15, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t13))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:380:9+64
    assume {:print "$at(145,17457,17521)"} true;
    assume ($t15 == $ResourceValue($1_staking_contract_Store_$memory, $t13)->$staking_contracts);

    // staking_contract::assert_staking_contract_exists($t13, $t1) on_abort goto L2 with $t14 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:373:9+56
    assume {:print "$at(144,17062,17118)"} true;
    call $1_staking_contract_assert_staking_contract_exists($t13, $t1);
    if ($abort_flag) {
        assume {:print "$at(144,17062,17118)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(59,29):", $t14} $t14 == $t14;
        goto L2;
    }

    // $t16 := borrow_global<staking_contract::Store>($t13) on_abort goto L2 with $t14 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:375:21+17
    assume {:print "$at(144,17141,17158)"} true;
    if (!$ResourceExists($1_staking_contract_Store_$memory, $t13)) {
        call $ExecFailureAbort();
    } else {
        $t16 := $Mutation($Global($t13), EmptyVec(), $ResourceValue($1_staking_contract_Store_$memory, $t13));
    }
    if ($abort_flag) {
        assume {:print "$at(144,17141,17158)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(59,29):", $t14} $t14 == $t14;
        goto L2;
    }

    // trace_local[store]($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:375:13+5
    $temp_0'$1_staking_contract_Store' := $Dereference($t16);
    assume {:print "$track_local(59,29,7):", $temp_0'$1_staking_contract_Store'} $temp_0'$1_staking_contract_Store' == $temp_0'$1_staking_contract_Store';

    // $t17 := borrow_field<staking_contract::Store>.staking_contracts($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:376:55+28
    assume {:print "$at(144,17237,17265)"} true;
    $t17 := $ChildMutation($t16, 0, $Dereference($t16)->$staking_contracts);

    // $t18 := simple_map::borrow_mut<address, staking_contract::StakingContract>($t17, $t1) on_abort goto L2 with $t14 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:376:32+63
    call $t18,$t17 := $1_simple_map_borrow_mut'address_$1_staking_contract_StakingContract'($t17, $t1);
    if ($abort_flag) {
        assume {:print "$at(144,17214,17277)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(59,29):", $t14} $t14 == $t14;
        goto L2;
    }

    // trace_local[staking_contract]($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:376:13+16
    $temp_0'$1_staking_contract_StakingContract' := $Dereference($t18);
    assume {:print "$track_local(59,29,6):", $temp_0'$1_staking_contract_StakingContract'} $temp_0'$1_staking_contract_StakingContract' == $temp_0'$1_staking_contract_StakingContract';

    // $t19 := get_field<staking_contract::StakingContract>.pool_address($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:377:28+29
    assume {:print "$at(144,17306,17335)"} true;
    $t19 := $Dereference($t18)->$pool_address;

    // trace_local[pool_address]($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:377:13+12
    assume {:print "$track_local(59,29,4):", $t19} $t19 == $t19;

    // $t20 := stake::get_delegated_voter($t19) on_abort goto L2 with $t14 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:378:25+40
    assume {:print "$at(144,17361,17401)"} true;
    call $t20 := $1_stake_get_delegated_voter($t19);
    if ($abort_flag) {
        assume {:print "$at(144,17361,17401)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(59,29):", $t14} $t14 == $t14;
        goto L2;
    }

    // trace_local[old_voter]($t20) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:378:13+9
    assume {:print "$track_local(59,29,3):", $t20} $t20 == $t20;

    // $t21 := get_field<staking_contract::StakingContract>.owner_cap($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:379:45+27
    assume {:print "$at(144,17447,17474)"} true;
    $t21 := $Dereference($t18)->$owner_cap;

    // assume Identical($t22, select stake::OwnerCapability.pool_address($t21)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:184:9+42
    assume {:print "$at(143,8574,8616)"} true;
    assume ($t22 == $t21->$pool_address);

    // assume Identical($t23, global<stake::StakePool>($t22)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:36:9+49
    assume {:print "$at(143,1661,1710)"} true;
    assume ($t23 == $ResourceValue($1_stake_StakePool_$memory, $t22));

    // stake::set_delegated_voter_with_cap($t21, $t2) on_abort goto L2 with $t14 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:379:9+75
    assume {:print "$at(144,17411,17486)"} true;
    call $1_stake_set_delegated_voter_with_cap($t21, $t2);
    if ($abort_flag) {
        assume {:print "$at(144,17411,17486)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(59,29):", $t14} $t14 == $t14;
        goto L2;
    }

    // $t24 := borrow_field<staking_contract::Store>.update_voter_events($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:382:13+30
    assume {:print "$at(144,17521,17551)"} true;
    $t24 := $ChildMutation($t16, 2, $Dereference($t16)->$update_voter_events);

    // $t25 := pack staking_contract::UpdateVoterEvent($t1, $t19, $t20, $t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:383:13+65
    assume {:print "$at(144,17565,17630)"} true;
    $t25 := $1_staking_contract_UpdateVoterEvent($t1, $t19, $t20, $t2);

    // opaque begin: event::emit_event<staking_contract::UpdateVoterEvent>($t24, $t25) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:381:9+144
    assume {:print "$at(144,17497,17641)"} true;

    // opaque end: event::emit_event<staking_contract::UpdateVoterEvent>($t24, $t25) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:381:9+144

    // write_back[Reference($t16).update_voter_events (event::EventHandle<staking_contract::UpdateVoterEvent>)]($t24) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:381:9+144
    $t16 := $UpdateMutation($t16, $Update'$1_staking_contract_Store'_update_voter_events($Dereference($t16), $Dereference($t24)));

    // pack_ref_deep($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:381:9+144

    // write_back[staking_contract::Store@]($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:381:9+144
    $1_staking_contract_Store_$memory := $ResourceUpdate($1_staking_contract_Store_$memory, $GlobalLocationAddress($t16),
        $Dereference($t16));

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:385:5+1
    assume {:print "$at(144,17647,17648)"} true;
L1:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:385:5+1
    assume {:print "$at(144,17647,17648)"} true;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:385:5+1
L2:

    // abort($t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:385:5+1
    assume {:print "$at(144,17647,17648)"} true;
    $abort_code := $t14;
    $abort_flag := true;
    return;

}

// struct vesting::DistributeEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:230:5+134
datatype $1_vesting_DistributeEvent {
    $1_vesting_DistributeEvent($admin: int, $vesting_contract_address: int, $amount: int)
}
function {:inline} $Update'$1_vesting_DistributeEvent'_admin(s: $1_vesting_DistributeEvent, x: int): $1_vesting_DistributeEvent {
    $1_vesting_DistributeEvent(x, s->$vesting_contract_address, s->$amount)
}
function {:inline} $Update'$1_vesting_DistributeEvent'_vesting_contract_address(s: $1_vesting_DistributeEvent, x: int): $1_vesting_DistributeEvent {
    $1_vesting_DistributeEvent(s->$admin, x, s->$amount)
}
function {:inline} $Update'$1_vesting_DistributeEvent'_amount(s: $1_vesting_DistributeEvent, x: int): $1_vesting_DistributeEvent {
    $1_vesting_DistributeEvent(s->$admin, s->$vesting_contract_address, x)
}
function $IsValid'$1_vesting_DistributeEvent'(s: $1_vesting_DistributeEvent): bool {
    $IsValid'address'(s->$admin)
      && $IsValid'address'(s->$vesting_contract_address)
      && $IsValid'u64'(s->$amount)
}
function {:inline} $IsEqual'$1_vesting_DistributeEvent'(s1: $1_vesting_DistributeEvent, s2: $1_vesting_DistributeEvent): bool {
    s1 == s2
}

// struct vesting::ResetLockupEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:200:5+194
datatype $1_vesting_ResetLockupEvent {
    $1_vesting_ResetLockupEvent($admin: int, $vesting_contract_address: int, $staking_pool_address: int, $new_lockup_expiration_secs: int)
}
function {:inline} $Update'$1_vesting_ResetLockupEvent'_admin(s: $1_vesting_ResetLockupEvent, x: int): $1_vesting_ResetLockupEvent {
    $1_vesting_ResetLockupEvent(x, s->$vesting_contract_address, s->$staking_pool_address, s->$new_lockup_expiration_secs)
}
function {:inline} $Update'$1_vesting_ResetLockupEvent'_vesting_contract_address(s: $1_vesting_ResetLockupEvent, x: int): $1_vesting_ResetLockupEvent {
    $1_vesting_ResetLockupEvent(s->$admin, x, s->$staking_pool_address, s->$new_lockup_expiration_secs)
}
function {:inline} $Update'$1_vesting_ResetLockupEvent'_staking_pool_address(s: $1_vesting_ResetLockupEvent, x: int): $1_vesting_ResetLockupEvent {
    $1_vesting_ResetLockupEvent(s->$admin, s->$vesting_contract_address, x, s->$new_lockup_expiration_secs)
}
function {:inline} $Update'$1_vesting_ResetLockupEvent'_new_lockup_expiration_secs(s: $1_vesting_ResetLockupEvent, x: int): $1_vesting_ResetLockupEvent {
    $1_vesting_ResetLockupEvent(s->$admin, s->$vesting_contract_address, s->$staking_pool_address, x)
}
function $IsValid'$1_vesting_ResetLockupEvent'(s: $1_vesting_ResetLockupEvent): bool {
    $IsValid'address'(s->$admin)
      && $IsValid'address'(s->$vesting_contract_address)
      && $IsValid'address'(s->$staking_pool_address)
      && $IsValid'u64'(s->$new_lockup_expiration_secs)
}
function {:inline} $IsEqual'$1_vesting_ResetLockupEvent'(s1: $1_vesting_ResetLockupEvent, s2: $1_vesting_ResetLockupEvent): bool {
    s1 == s2
}

// struct vesting::UpdateVoterEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:192:5+209
datatype $1_vesting_UpdateVoterEvent {
    $1_vesting_UpdateVoterEvent($admin: int, $vesting_contract_address: int, $staking_pool_address: int, $old_voter: int, $new_voter: int)
}
function {:inline} $Update'$1_vesting_UpdateVoterEvent'_admin(s: $1_vesting_UpdateVoterEvent, x: int): $1_vesting_UpdateVoterEvent {
    $1_vesting_UpdateVoterEvent(x, s->$vesting_contract_address, s->$staking_pool_address, s->$old_voter, s->$new_voter)
}
function {:inline} $Update'$1_vesting_UpdateVoterEvent'_vesting_contract_address(s: $1_vesting_UpdateVoterEvent, x: int): $1_vesting_UpdateVoterEvent {
    $1_vesting_UpdateVoterEvent(s->$admin, x, s->$staking_pool_address, s->$old_voter, s->$new_voter)
}
function {:inline} $Update'$1_vesting_UpdateVoterEvent'_staking_pool_address(s: $1_vesting_UpdateVoterEvent, x: int): $1_vesting_UpdateVoterEvent {
    $1_vesting_UpdateVoterEvent(s->$admin, s->$vesting_contract_address, x, s->$old_voter, s->$new_voter)
}
function {:inline} $Update'$1_vesting_UpdateVoterEvent'_old_voter(s: $1_vesting_UpdateVoterEvent, x: int): $1_vesting_UpdateVoterEvent {
    $1_vesting_UpdateVoterEvent(s->$admin, s->$vesting_contract_address, s->$staking_pool_address, x, s->$new_voter)
}
function {:inline} $Update'$1_vesting_UpdateVoterEvent'_new_voter(s: $1_vesting_UpdateVoterEvent, x: int): $1_vesting_UpdateVoterEvent {
    $1_vesting_UpdateVoterEvent(s->$admin, s->$vesting_contract_address, s->$staking_pool_address, s->$old_voter, x)
}
function $IsValid'$1_vesting_UpdateVoterEvent'(s: $1_vesting_UpdateVoterEvent): bool {
    $IsValid'address'(s->$admin)
      && $IsValid'address'(s->$vesting_contract_address)
      && $IsValid'address'(s->$staking_pool_address)
      && $IsValid'address'(s->$old_voter)
      && $IsValid'address'(s->$new_voter)
}
function {:inline} $IsEqual'$1_vesting_UpdateVoterEvent'(s1: $1_vesting_UpdateVoterEvent, s2: $1_vesting_UpdateVoterEvent): bool {
    s1 == s2
}

// struct vesting::AdminStore at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:165:5+265
datatype $1_vesting_AdminStore {
    $1_vesting_AdminStore($vesting_contracts: Vec (int), $nonce: int, $create_events: $1_event_EventHandle'$1_vesting_CreateVestingContractEvent')
}
function {:inline} $Update'$1_vesting_AdminStore'_vesting_contracts(s: $1_vesting_AdminStore, x: Vec (int)): $1_vesting_AdminStore {
    $1_vesting_AdminStore(x, s->$nonce, s->$create_events)
}
function {:inline} $Update'$1_vesting_AdminStore'_nonce(s: $1_vesting_AdminStore, x: int): $1_vesting_AdminStore {
    $1_vesting_AdminStore(s->$vesting_contracts, x, s->$create_events)
}
function {:inline} $Update'$1_vesting_AdminStore'_create_events(s: $1_vesting_AdminStore, x: $1_event_EventHandle'$1_vesting_CreateVestingContractEvent'): $1_vesting_AdminStore {
    $1_vesting_AdminStore(s->$vesting_contracts, s->$nonce, x)
}
function $IsValid'$1_vesting_AdminStore'(s: $1_vesting_AdminStore): bool {
    $IsValid'vec'address''(s->$vesting_contracts)
      && $IsValid'u64'(s->$nonce)
      && $IsValid'$1_event_EventHandle'$1_vesting_CreateVestingContractEvent''(s->$create_events)
}
function {:inline} $IsEqual'$1_vesting_AdminStore'(s1: $1_vesting_AdminStore, s2: $1_vesting_AdminStore): bool {
    $IsEqual'vec'address''(s1->$vesting_contracts, s2->$vesting_contracts)
    && $IsEqual'u64'(s1->$nonce, s2->$nonce)
    && $IsEqual'$1_event_EventHandle'$1_vesting_CreateVestingContractEvent''(s1->$create_events, s2->$create_events)}
var $1_vesting_AdminStore_$memory: $Memory $1_vesting_AdminStore;

// struct vesting::AdminWithdrawEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:241:5+137
datatype $1_vesting_AdminWithdrawEvent {
    $1_vesting_AdminWithdrawEvent($admin: int, $vesting_contract_address: int, $amount: int)
}
function {:inline} $Update'$1_vesting_AdminWithdrawEvent'_admin(s: $1_vesting_AdminWithdrawEvent, x: int): $1_vesting_AdminWithdrawEvent {
    $1_vesting_AdminWithdrawEvent(x, s->$vesting_contract_address, s->$amount)
}
function {:inline} $Update'$1_vesting_AdminWithdrawEvent'_vesting_contract_address(s: $1_vesting_AdminWithdrawEvent, x: int): $1_vesting_AdminWithdrawEvent {
    $1_vesting_AdminWithdrawEvent(s->$admin, x, s->$amount)
}
function {:inline} $Update'$1_vesting_AdminWithdrawEvent'_amount(s: $1_vesting_AdminWithdrawEvent, x: int): $1_vesting_AdminWithdrawEvent {
    $1_vesting_AdminWithdrawEvent(s->$admin, s->$vesting_contract_address, x)
}
function $IsValid'$1_vesting_AdminWithdrawEvent'(s: $1_vesting_AdminWithdrawEvent): bool {
    $IsValid'address'(s->$admin)
      && $IsValid'address'(s->$vesting_contract_address)
      && $IsValid'u64'(s->$amount)
}
function {:inline} $IsEqual'$1_vesting_AdminWithdrawEvent'(s1: $1_vesting_AdminWithdrawEvent, s2: $1_vesting_AdminWithdrawEvent): bool {
    s1 == s2
}

// struct vesting::CreateVestingContractEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:173:5+290
datatype $1_vesting_CreateVestingContractEvent {
    $1_vesting_CreateVestingContractEvent($operator: int, $voter: int, $grant_amount: int, $withdrawal_address: int, $vesting_contract_address: int, $staking_pool_address: int, $commission_percentage: int)
}
function {:inline} $Update'$1_vesting_CreateVestingContractEvent'_operator(s: $1_vesting_CreateVestingContractEvent, x: int): $1_vesting_CreateVestingContractEvent {
    $1_vesting_CreateVestingContractEvent(x, s->$voter, s->$grant_amount, s->$withdrawal_address, s->$vesting_contract_address, s->$staking_pool_address, s->$commission_percentage)
}
function {:inline} $Update'$1_vesting_CreateVestingContractEvent'_voter(s: $1_vesting_CreateVestingContractEvent, x: int): $1_vesting_CreateVestingContractEvent {
    $1_vesting_CreateVestingContractEvent(s->$operator, x, s->$grant_amount, s->$withdrawal_address, s->$vesting_contract_address, s->$staking_pool_address, s->$commission_percentage)
}
function {:inline} $Update'$1_vesting_CreateVestingContractEvent'_grant_amount(s: $1_vesting_CreateVestingContractEvent, x: int): $1_vesting_CreateVestingContractEvent {
    $1_vesting_CreateVestingContractEvent(s->$operator, s->$voter, x, s->$withdrawal_address, s->$vesting_contract_address, s->$staking_pool_address, s->$commission_percentage)
}
function {:inline} $Update'$1_vesting_CreateVestingContractEvent'_withdrawal_address(s: $1_vesting_CreateVestingContractEvent, x: int): $1_vesting_CreateVestingContractEvent {
    $1_vesting_CreateVestingContractEvent(s->$operator, s->$voter, s->$grant_amount, x, s->$vesting_contract_address, s->$staking_pool_address, s->$commission_percentage)
}
function {:inline} $Update'$1_vesting_CreateVestingContractEvent'_vesting_contract_address(s: $1_vesting_CreateVestingContractEvent, x: int): $1_vesting_CreateVestingContractEvent {
    $1_vesting_CreateVestingContractEvent(s->$operator, s->$voter, s->$grant_amount, s->$withdrawal_address, x, s->$staking_pool_address, s->$commission_percentage)
}
function {:inline} $Update'$1_vesting_CreateVestingContractEvent'_staking_pool_address(s: $1_vesting_CreateVestingContractEvent, x: int): $1_vesting_CreateVestingContractEvent {
    $1_vesting_CreateVestingContractEvent(s->$operator, s->$voter, s->$grant_amount, s->$withdrawal_address, s->$vesting_contract_address, x, s->$commission_percentage)
}
function {:inline} $Update'$1_vesting_CreateVestingContractEvent'_commission_percentage(s: $1_vesting_CreateVestingContractEvent, x: int): $1_vesting_CreateVestingContractEvent {
    $1_vesting_CreateVestingContractEvent(s->$operator, s->$voter, s->$grant_amount, s->$withdrawal_address, s->$vesting_contract_address, s->$staking_pool_address, x)
}
function $IsValid'$1_vesting_CreateVestingContractEvent'(s: $1_vesting_CreateVestingContractEvent): bool {
    $IsValid'address'(s->$operator)
      && $IsValid'address'(s->$voter)
      && $IsValid'u64'(s->$grant_amount)
      && $IsValid'address'(s->$withdrawal_address)
      && $IsValid'address'(s->$vesting_contract_address)
      && $IsValid'address'(s->$staking_pool_address)
      && $IsValid'u64'(s->$commission_percentage)
}
function {:inline} $IsEqual'$1_vesting_CreateVestingContractEvent'(s1: $1_vesting_CreateVestingContractEvent, s2: $1_vesting_CreateVestingContractEvent): bool {
    s1 == s2
}

// struct vesting::SetBeneficiaryEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:207:5+215
datatype $1_vesting_SetBeneficiaryEvent {
    $1_vesting_SetBeneficiaryEvent($admin: int, $vesting_contract_address: int, $shareholder: int, $old_beneficiary: int, $new_beneficiary: int)
}
function {:inline} $Update'$1_vesting_SetBeneficiaryEvent'_admin(s: $1_vesting_SetBeneficiaryEvent, x: int): $1_vesting_SetBeneficiaryEvent {
    $1_vesting_SetBeneficiaryEvent(x, s->$vesting_contract_address, s->$shareholder, s->$old_beneficiary, s->$new_beneficiary)
}
function {:inline} $Update'$1_vesting_SetBeneficiaryEvent'_vesting_contract_address(s: $1_vesting_SetBeneficiaryEvent, x: int): $1_vesting_SetBeneficiaryEvent {
    $1_vesting_SetBeneficiaryEvent(s->$admin, x, s->$shareholder, s->$old_beneficiary, s->$new_beneficiary)
}
function {:inline} $Update'$1_vesting_SetBeneficiaryEvent'_shareholder(s: $1_vesting_SetBeneficiaryEvent, x: int): $1_vesting_SetBeneficiaryEvent {
    $1_vesting_SetBeneficiaryEvent(s->$admin, s->$vesting_contract_address, x, s->$old_beneficiary, s->$new_beneficiary)
}
function {:inline} $Update'$1_vesting_SetBeneficiaryEvent'_old_beneficiary(s: $1_vesting_SetBeneficiaryEvent, x: int): $1_vesting_SetBeneficiaryEvent {
    $1_vesting_SetBeneficiaryEvent(s->$admin, s->$vesting_contract_address, s->$shareholder, x, s->$new_beneficiary)
}
function {:inline} $Update'$1_vesting_SetBeneficiaryEvent'_new_beneficiary(s: $1_vesting_SetBeneficiaryEvent, x: int): $1_vesting_SetBeneficiaryEvent {
    $1_vesting_SetBeneficiaryEvent(s->$admin, s->$vesting_contract_address, s->$shareholder, s->$old_beneficiary, x)
}
function $IsValid'$1_vesting_SetBeneficiaryEvent'(s: $1_vesting_SetBeneficiaryEvent): bool {
    $IsValid'address'(s->$admin)
      && $IsValid'address'(s->$vesting_contract_address)
      && $IsValid'address'(s->$shareholder)
      && $IsValid'address'(s->$old_beneficiary)
      && $IsValid'address'(s->$new_beneficiary)
}
function {:inline} $IsEqual'$1_vesting_SetBeneficiaryEvent'(s1: $1_vesting_SetBeneficiaryEvent, s2: $1_vesting_SetBeneficiaryEvent): bool {
    s1 == s2
}

// struct vesting::StakingInfo at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:123:5+384
datatype $1_vesting_StakingInfo {
    $1_vesting_StakingInfo($pool_address: int, $operator: int, $voter: int, $commission_percentage: int)
}
function {:inline} $Update'$1_vesting_StakingInfo'_pool_address(s: $1_vesting_StakingInfo, x: int): $1_vesting_StakingInfo {
    $1_vesting_StakingInfo(x, s->$operator, s->$voter, s->$commission_percentage)
}
function {:inline} $Update'$1_vesting_StakingInfo'_operator(s: $1_vesting_StakingInfo, x: int): $1_vesting_StakingInfo {
    $1_vesting_StakingInfo(s->$pool_address, x, s->$voter, s->$commission_percentage)
}
function {:inline} $Update'$1_vesting_StakingInfo'_voter(s: $1_vesting_StakingInfo, x: int): $1_vesting_StakingInfo {
    $1_vesting_StakingInfo(s->$pool_address, s->$operator, x, s->$commission_percentage)
}
function {:inline} $Update'$1_vesting_StakingInfo'_commission_percentage(s: $1_vesting_StakingInfo, x: int): $1_vesting_StakingInfo {
    $1_vesting_StakingInfo(s->$pool_address, s->$operator, s->$voter, x)
}
function $IsValid'$1_vesting_StakingInfo'(s: $1_vesting_StakingInfo): bool {
    $IsValid'address'(s->$pool_address)
      && $IsValid'address'(s->$operator)
      && $IsValid'address'(s->$voter)
      && $IsValid'u64'(s->$commission_percentage)
}
function {:inline} $IsEqual'$1_vesting_StakingInfo'(s1: $1_vesting_StakingInfo, s2: $1_vesting_StakingInfo): bool {
    s1 == s2
}

// struct vesting::TerminateEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:236:5+112
datatype $1_vesting_TerminateEvent {
    $1_vesting_TerminateEvent($admin: int, $vesting_contract_address: int)
}
function {:inline} $Update'$1_vesting_TerminateEvent'_admin(s: $1_vesting_TerminateEvent, x: int): $1_vesting_TerminateEvent {
    $1_vesting_TerminateEvent(x, s->$vesting_contract_address)
}
function {:inline} $Update'$1_vesting_TerminateEvent'_vesting_contract_address(s: $1_vesting_TerminateEvent, x: int): $1_vesting_TerminateEvent {
    $1_vesting_TerminateEvent(s->$admin, x)
}
function $IsValid'$1_vesting_TerminateEvent'(s: $1_vesting_TerminateEvent): bool {
    $IsValid'address'(s->$admin)
      && $IsValid'address'(s->$vesting_contract_address)
}
function {:inline} $IsEqual'$1_vesting_TerminateEvent'(s1: $1_vesting_TerminateEvent, s2: $1_vesting_TerminateEvent): bool {
    s1 == s2
}

// struct vesting::UnlockRewardsEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:215:5+176
datatype $1_vesting_UnlockRewardsEvent {
    $1_vesting_UnlockRewardsEvent($admin: int, $vesting_contract_address: int, $staking_pool_address: int, $amount: int)
}
function {:inline} $Update'$1_vesting_UnlockRewardsEvent'_admin(s: $1_vesting_UnlockRewardsEvent, x: int): $1_vesting_UnlockRewardsEvent {
    $1_vesting_UnlockRewardsEvent(x, s->$vesting_contract_address, s->$staking_pool_address, s->$amount)
}
function {:inline} $Update'$1_vesting_UnlockRewardsEvent'_vesting_contract_address(s: $1_vesting_UnlockRewardsEvent, x: int): $1_vesting_UnlockRewardsEvent {
    $1_vesting_UnlockRewardsEvent(s->$admin, x, s->$staking_pool_address, s->$amount)
}
function {:inline} $Update'$1_vesting_UnlockRewardsEvent'_staking_pool_address(s: $1_vesting_UnlockRewardsEvent, x: int): $1_vesting_UnlockRewardsEvent {
    $1_vesting_UnlockRewardsEvent(s->$admin, s->$vesting_contract_address, x, s->$amount)
}
function {:inline} $Update'$1_vesting_UnlockRewardsEvent'_amount(s: $1_vesting_UnlockRewardsEvent, x: int): $1_vesting_UnlockRewardsEvent {
    $1_vesting_UnlockRewardsEvent(s->$admin, s->$vesting_contract_address, s->$staking_pool_address, x)
}
function $IsValid'$1_vesting_UnlockRewardsEvent'(s: $1_vesting_UnlockRewardsEvent): bool {
    $IsValid'address'(s->$admin)
      && $IsValid'address'(s->$vesting_contract_address)
      && $IsValid'address'(s->$staking_pool_address)
      && $IsValid'u64'(s->$amount)
}
function {:inline} $IsEqual'$1_vesting_UnlockRewardsEvent'(s1: $1_vesting_UnlockRewardsEvent, s2: $1_vesting_UnlockRewardsEvent): bool {
    s1 == s2
}

// struct vesting::UpdateOperatorEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:183:5+254
datatype $1_vesting_UpdateOperatorEvent {
    $1_vesting_UpdateOperatorEvent($admin: int, $vesting_contract_address: int, $staking_pool_address: int, $old_operator: int, $new_operator: int, $commission_percentage: int)
}
function {:inline} $Update'$1_vesting_UpdateOperatorEvent'_admin(s: $1_vesting_UpdateOperatorEvent, x: int): $1_vesting_UpdateOperatorEvent {
    $1_vesting_UpdateOperatorEvent(x, s->$vesting_contract_address, s->$staking_pool_address, s->$old_operator, s->$new_operator, s->$commission_percentage)
}
function {:inline} $Update'$1_vesting_UpdateOperatorEvent'_vesting_contract_address(s: $1_vesting_UpdateOperatorEvent, x: int): $1_vesting_UpdateOperatorEvent {
    $1_vesting_UpdateOperatorEvent(s->$admin, x, s->$staking_pool_address, s->$old_operator, s->$new_operator, s->$commission_percentage)
}
function {:inline} $Update'$1_vesting_UpdateOperatorEvent'_staking_pool_address(s: $1_vesting_UpdateOperatorEvent, x: int): $1_vesting_UpdateOperatorEvent {
    $1_vesting_UpdateOperatorEvent(s->$admin, s->$vesting_contract_address, x, s->$old_operator, s->$new_operator, s->$commission_percentage)
}
function {:inline} $Update'$1_vesting_UpdateOperatorEvent'_old_operator(s: $1_vesting_UpdateOperatorEvent, x: int): $1_vesting_UpdateOperatorEvent {
    $1_vesting_UpdateOperatorEvent(s->$admin, s->$vesting_contract_address, s->$staking_pool_address, x, s->$new_operator, s->$commission_percentage)
}
function {:inline} $Update'$1_vesting_UpdateOperatorEvent'_new_operator(s: $1_vesting_UpdateOperatorEvent, x: int): $1_vesting_UpdateOperatorEvent {
    $1_vesting_UpdateOperatorEvent(s->$admin, s->$vesting_contract_address, s->$staking_pool_address, s->$old_operator, x, s->$commission_percentage)
}
function {:inline} $Update'$1_vesting_UpdateOperatorEvent'_commission_percentage(s: $1_vesting_UpdateOperatorEvent, x: int): $1_vesting_UpdateOperatorEvent {
    $1_vesting_UpdateOperatorEvent(s->$admin, s->$vesting_contract_address, s->$staking_pool_address, s->$old_operator, s->$new_operator, x)
}
function $IsValid'$1_vesting_UpdateOperatorEvent'(s: $1_vesting_UpdateOperatorEvent): bool {
    $IsValid'address'(s->$admin)
      && $IsValid'address'(s->$vesting_contract_address)
      && $IsValid'address'(s->$staking_pool_address)
      && $IsValid'address'(s->$old_operator)
      && $IsValid'address'(s->$new_operator)
      && $IsValid'u64'(s->$commission_percentage)
}
function {:inline} $IsEqual'$1_vesting_UpdateOperatorEvent'(s1: $1_vesting_UpdateOperatorEvent, s2: $1_vesting_UpdateOperatorEvent): bool {
    s1 == s2
}

// struct vesting::VestEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:222:5+195
datatype $1_vesting_VestEvent {
    $1_vesting_VestEvent($admin: int, $vesting_contract_address: int, $staking_pool_address: int, $period_vested: int, $amount: int)
}
function {:inline} $Update'$1_vesting_VestEvent'_admin(s: $1_vesting_VestEvent, x: int): $1_vesting_VestEvent {
    $1_vesting_VestEvent(x, s->$vesting_contract_address, s->$staking_pool_address, s->$period_vested, s->$amount)
}
function {:inline} $Update'$1_vesting_VestEvent'_vesting_contract_address(s: $1_vesting_VestEvent, x: int): $1_vesting_VestEvent {
    $1_vesting_VestEvent(s->$admin, x, s->$staking_pool_address, s->$period_vested, s->$amount)
}
function {:inline} $Update'$1_vesting_VestEvent'_staking_pool_address(s: $1_vesting_VestEvent, x: int): $1_vesting_VestEvent {
    $1_vesting_VestEvent(s->$admin, s->$vesting_contract_address, x, s->$period_vested, s->$amount)
}
function {:inline} $Update'$1_vesting_VestEvent'_period_vested(s: $1_vesting_VestEvent, x: int): $1_vesting_VestEvent {
    $1_vesting_VestEvent(s->$admin, s->$vesting_contract_address, s->$staking_pool_address, x, s->$amount)
}
function {:inline} $Update'$1_vesting_VestEvent'_amount(s: $1_vesting_VestEvent, x: int): $1_vesting_VestEvent {
    $1_vesting_VestEvent(s->$admin, s->$vesting_contract_address, s->$staking_pool_address, s->$period_vested, x)
}
function $IsValid'$1_vesting_VestEvent'(s: $1_vesting_VestEvent): bool {
    $IsValid'address'(s->$admin)
      && $IsValid'address'(s->$vesting_contract_address)
      && $IsValid'address'(s->$staking_pool_address)
      && $IsValid'u64'(s->$period_vested)
      && $IsValid'u64'(s->$amount)
}
function {:inline} $IsEqual'$1_vesting_VestEvent'(s1: $1_vesting_VestEvent, s2: $1_vesting_VestEvent): bool {
    s1 == s2
}

// struct vesting::VestingAccountManagement at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:161:5+90
datatype $1_vesting_VestingAccountManagement {
    $1_vesting_VestingAccountManagement($roles: Table int (int))
}
function {:inline} $Update'$1_vesting_VestingAccountManagement'_roles(s: $1_vesting_VestingAccountManagement, x: Table int (int)): $1_vesting_VestingAccountManagement {
    $1_vesting_VestingAccountManagement(x)
}
function $IsValid'$1_vesting_VestingAccountManagement'(s: $1_vesting_VestingAccountManagement): bool {
    $IsValid'$1_simple_map_SimpleMap'$1_string_String_address''(s->$roles)
}
function {:inline} $IsEqual'$1_vesting_VestingAccountManagement'(s1: $1_vesting_VestingAccountManagement, s2: $1_vesting_VestingAccountManagement): bool {
    $IsEqual'$1_simple_map_SimpleMap'$1_string_String_address''(s1->$roles, s2->$roles)}
var $1_vesting_VestingAccountManagement_$memory: $Memory $1_vesting_VestingAccountManagement;

// struct vesting::VestingContract at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:134:5+1189
datatype $1_vesting_VestingContract {
    $1_vesting_VestingContract($state: int, $admin: int, $grant_pool: $1_pool_u64_Pool, $beneficiaries: Table int (int), $vesting_schedule: $1_vesting_VestingSchedule, $withdrawal_address: int, $staking: $1_vesting_StakingInfo, $remaining_grant: int, $signer_cap: $1_account_SignerCapability, $update_operator_events: $1_event_EventHandle'$1_vesting_UpdateOperatorEvent', $update_voter_events: $1_event_EventHandle'$1_vesting_UpdateVoterEvent', $reset_lockup_events: $1_event_EventHandle'$1_vesting_ResetLockupEvent', $set_beneficiary_events: $1_event_EventHandle'$1_vesting_SetBeneficiaryEvent', $unlock_rewards_events: $1_event_EventHandle'$1_vesting_UnlockRewardsEvent', $vest_events: $1_event_EventHandle'$1_vesting_VestEvent', $distribute_events: $1_event_EventHandle'$1_vesting_DistributeEvent', $terminate_events: $1_event_EventHandle'$1_vesting_TerminateEvent', $admin_withdraw_events: $1_event_EventHandle'$1_vesting_AdminWithdrawEvent')
}
function {:inline} $Update'$1_vesting_VestingContract'_state(s: $1_vesting_VestingContract, x: int): $1_vesting_VestingContract {
    $1_vesting_VestingContract(x, s->$admin, s->$grant_pool, s->$beneficiaries, s->$vesting_schedule, s->$withdrawal_address, s->$staking, s->$remaining_grant, s->$signer_cap, s->$update_operator_events, s->$update_voter_events, s->$reset_lockup_events, s->$set_beneficiary_events, s->$unlock_rewards_events, s->$vest_events, s->$distribute_events, s->$terminate_events, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_admin(s: $1_vesting_VestingContract, x: int): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, x, s->$grant_pool, s->$beneficiaries, s->$vesting_schedule, s->$withdrawal_address, s->$staking, s->$remaining_grant, s->$signer_cap, s->$update_operator_events, s->$update_voter_events, s->$reset_lockup_events, s->$set_beneficiary_events, s->$unlock_rewards_events, s->$vest_events, s->$distribute_events, s->$terminate_events, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_grant_pool(s: $1_vesting_VestingContract, x: $1_pool_u64_Pool): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, s->$admin, x, s->$beneficiaries, s->$vesting_schedule, s->$withdrawal_address, s->$staking, s->$remaining_grant, s->$signer_cap, s->$update_operator_events, s->$update_voter_events, s->$reset_lockup_events, s->$set_beneficiary_events, s->$unlock_rewards_events, s->$vest_events, s->$distribute_events, s->$terminate_events, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_beneficiaries(s: $1_vesting_VestingContract, x: Table int (int)): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, s->$admin, s->$grant_pool, x, s->$vesting_schedule, s->$withdrawal_address, s->$staking, s->$remaining_grant, s->$signer_cap, s->$update_operator_events, s->$update_voter_events, s->$reset_lockup_events, s->$set_beneficiary_events, s->$unlock_rewards_events, s->$vest_events, s->$distribute_events, s->$terminate_events, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_vesting_schedule(s: $1_vesting_VestingContract, x: $1_vesting_VestingSchedule): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, s->$admin, s->$grant_pool, s->$beneficiaries, x, s->$withdrawal_address, s->$staking, s->$remaining_grant, s->$signer_cap, s->$update_operator_events, s->$update_voter_events, s->$reset_lockup_events, s->$set_beneficiary_events, s->$unlock_rewards_events, s->$vest_events, s->$distribute_events, s->$terminate_events, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_withdrawal_address(s: $1_vesting_VestingContract, x: int): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, s->$admin, s->$grant_pool, s->$beneficiaries, s->$vesting_schedule, x, s->$staking, s->$remaining_grant, s->$signer_cap, s->$update_operator_events, s->$update_voter_events, s->$reset_lockup_events, s->$set_beneficiary_events, s->$unlock_rewards_events, s->$vest_events, s->$distribute_events, s->$terminate_events, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_staking(s: $1_vesting_VestingContract, x: $1_vesting_StakingInfo): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, s->$admin, s->$grant_pool, s->$beneficiaries, s->$vesting_schedule, s->$withdrawal_address, x, s->$remaining_grant, s->$signer_cap, s->$update_operator_events, s->$update_voter_events, s->$reset_lockup_events, s->$set_beneficiary_events, s->$unlock_rewards_events, s->$vest_events, s->$distribute_events, s->$terminate_events, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_remaining_grant(s: $1_vesting_VestingContract, x: int): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, s->$admin, s->$grant_pool, s->$beneficiaries, s->$vesting_schedule, s->$withdrawal_address, s->$staking, x, s->$signer_cap, s->$update_operator_events, s->$update_voter_events, s->$reset_lockup_events, s->$set_beneficiary_events, s->$unlock_rewards_events, s->$vest_events, s->$distribute_events, s->$terminate_events, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_signer_cap(s: $1_vesting_VestingContract, x: $1_account_SignerCapability): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, s->$admin, s->$grant_pool, s->$beneficiaries, s->$vesting_schedule, s->$withdrawal_address, s->$staking, s->$remaining_grant, x, s->$update_operator_events, s->$update_voter_events, s->$reset_lockup_events, s->$set_beneficiary_events, s->$unlock_rewards_events, s->$vest_events, s->$distribute_events, s->$terminate_events, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_update_operator_events(s: $1_vesting_VestingContract, x: $1_event_EventHandle'$1_vesting_UpdateOperatorEvent'): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, s->$admin, s->$grant_pool, s->$beneficiaries, s->$vesting_schedule, s->$withdrawal_address, s->$staking, s->$remaining_grant, s->$signer_cap, x, s->$update_voter_events, s->$reset_lockup_events, s->$set_beneficiary_events, s->$unlock_rewards_events, s->$vest_events, s->$distribute_events, s->$terminate_events, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_update_voter_events(s: $1_vesting_VestingContract, x: $1_event_EventHandle'$1_vesting_UpdateVoterEvent'): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, s->$admin, s->$grant_pool, s->$beneficiaries, s->$vesting_schedule, s->$withdrawal_address, s->$staking, s->$remaining_grant, s->$signer_cap, s->$update_operator_events, x, s->$reset_lockup_events, s->$set_beneficiary_events, s->$unlock_rewards_events, s->$vest_events, s->$distribute_events, s->$terminate_events, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_reset_lockup_events(s: $1_vesting_VestingContract, x: $1_event_EventHandle'$1_vesting_ResetLockupEvent'): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, s->$admin, s->$grant_pool, s->$beneficiaries, s->$vesting_schedule, s->$withdrawal_address, s->$staking, s->$remaining_grant, s->$signer_cap, s->$update_operator_events, s->$update_voter_events, x, s->$set_beneficiary_events, s->$unlock_rewards_events, s->$vest_events, s->$distribute_events, s->$terminate_events, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_set_beneficiary_events(s: $1_vesting_VestingContract, x: $1_event_EventHandle'$1_vesting_SetBeneficiaryEvent'): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, s->$admin, s->$grant_pool, s->$beneficiaries, s->$vesting_schedule, s->$withdrawal_address, s->$staking, s->$remaining_grant, s->$signer_cap, s->$update_operator_events, s->$update_voter_events, s->$reset_lockup_events, x, s->$unlock_rewards_events, s->$vest_events, s->$distribute_events, s->$terminate_events, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_unlock_rewards_events(s: $1_vesting_VestingContract, x: $1_event_EventHandle'$1_vesting_UnlockRewardsEvent'): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, s->$admin, s->$grant_pool, s->$beneficiaries, s->$vesting_schedule, s->$withdrawal_address, s->$staking, s->$remaining_grant, s->$signer_cap, s->$update_operator_events, s->$update_voter_events, s->$reset_lockup_events, s->$set_beneficiary_events, x, s->$vest_events, s->$distribute_events, s->$terminate_events, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_vest_events(s: $1_vesting_VestingContract, x: $1_event_EventHandle'$1_vesting_VestEvent'): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, s->$admin, s->$grant_pool, s->$beneficiaries, s->$vesting_schedule, s->$withdrawal_address, s->$staking, s->$remaining_grant, s->$signer_cap, s->$update_operator_events, s->$update_voter_events, s->$reset_lockup_events, s->$set_beneficiary_events, s->$unlock_rewards_events, x, s->$distribute_events, s->$terminate_events, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_distribute_events(s: $1_vesting_VestingContract, x: $1_event_EventHandle'$1_vesting_DistributeEvent'): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, s->$admin, s->$grant_pool, s->$beneficiaries, s->$vesting_schedule, s->$withdrawal_address, s->$staking, s->$remaining_grant, s->$signer_cap, s->$update_operator_events, s->$update_voter_events, s->$reset_lockup_events, s->$set_beneficiary_events, s->$unlock_rewards_events, s->$vest_events, x, s->$terminate_events, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_terminate_events(s: $1_vesting_VestingContract, x: $1_event_EventHandle'$1_vesting_TerminateEvent'): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, s->$admin, s->$grant_pool, s->$beneficiaries, s->$vesting_schedule, s->$withdrawal_address, s->$staking, s->$remaining_grant, s->$signer_cap, s->$update_operator_events, s->$update_voter_events, s->$reset_lockup_events, s->$set_beneficiary_events, s->$unlock_rewards_events, s->$vest_events, s->$distribute_events, x, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_admin_withdraw_events(s: $1_vesting_VestingContract, x: $1_event_EventHandle'$1_vesting_AdminWithdrawEvent'): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, s->$admin, s->$grant_pool, s->$beneficiaries, s->$vesting_schedule, s->$withdrawal_address, s->$staking, s->$remaining_grant, s->$signer_cap, s->$update_operator_events, s->$update_voter_events, s->$reset_lockup_events, s->$set_beneficiary_events, s->$unlock_rewards_events, s->$vest_events, s->$distribute_events, s->$terminate_events, x)
}
function $IsValid'$1_vesting_VestingContract'(s: $1_vesting_VestingContract): bool {
    $IsValid'u64'(s->$state)
      && $IsValid'address'(s->$admin)
      && $IsValid'$1_pool_u64_Pool'(s->$grant_pool)
      && $IsValid'$1_simple_map_SimpleMap'address_address''(s->$beneficiaries)
      && $IsValid'$1_vesting_VestingSchedule'(s->$vesting_schedule)
      && $IsValid'address'(s->$withdrawal_address)
      && $IsValid'$1_vesting_StakingInfo'(s->$staking)
      && $IsValid'u64'(s->$remaining_grant)
      && $IsValid'$1_account_SignerCapability'(s->$signer_cap)
      && $IsValid'$1_event_EventHandle'$1_vesting_UpdateOperatorEvent''(s->$update_operator_events)
      && $IsValid'$1_event_EventHandle'$1_vesting_UpdateVoterEvent''(s->$update_voter_events)
      && $IsValid'$1_event_EventHandle'$1_vesting_ResetLockupEvent''(s->$reset_lockup_events)
      && $IsValid'$1_event_EventHandle'$1_vesting_SetBeneficiaryEvent''(s->$set_beneficiary_events)
      && $IsValid'$1_event_EventHandle'$1_vesting_UnlockRewardsEvent''(s->$unlock_rewards_events)
      && $IsValid'$1_event_EventHandle'$1_vesting_VestEvent''(s->$vest_events)
      && $IsValid'$1_event_EventHandle'$1_vesting_DistributeEvent''(s->$distribute_events)
      && $IsValid'$1_event_EventHandle'$1_vesting_TerminateEvent''(s->$terminate_events)
      && $IsValid'$1_event_EventHandle'$1_vesting_AdminWithdrawEvent''(s->$admin_withdraw_events)
}
function {:inline} $IsEqual'$1_vesting_VestingContract'(s1: $1_vesting_VestingContract, s2: $1_vesting_VestingContract): bool {
    $IsEqual'u64'(s1->$state, s2->$state)
    && $IsEqual'address'(s1->$admin, s2->$admin)
    && $IsEqual'$1_pool_u64_Pool'(s1->$grant_pool, s2->$grant_pool)
    && $IsEqual'$1_simple_map_SimpleMap'address_address''(s1->$beneficiaries, s2->$beneficiaries)
    && $IsEqual'$1_vesting_VestingSchedule'(s1->$vesting_schedule, s2->$vesting_schedule)
    && $IsEqual'address'(s1->$withdrawal_address, s2->$withdrawal_address)
    && $IsEqual'$1_vesting_StakingInfo'(s1->$staking, s2->$staking)
    && $IsEqual'u64'(s1->$remaining_grant, s2->$remaining_grant)
    && $IsEqual'$1_account_SignerCapability'(s1->$signer_cap, s2->$signer_cap)
    && $IsEqual'$1_event_EventHandle'$1_vesting_UpdateOperatorEvent''(s1->$update_operator_events, s2->$update_operator_events)
    && $IsEqual'$1_event_EventHandle'$1_vesting_UpdateVoterEvent''(s1->$update_voter_events, s2->$update_voter_events)
    && $IsEqual'$1_event_EventHandle'$1_vesting_ResetLockupEvent''(s1->$reset_lockup_events, s2->$reset_lockup_events)
    && $IsEqual'$1_event_EventHandle'$1_vesting_SetBeneficiaryEvent''(s1->$set_beneficiary_events, s2->$set_beneficiary_events)
    && $IsEqual'$1_event_EventHandle'$1_vesting_UnlockRewardsEvent''(s1->$unlock_rewards_events, s2->$unlock_rewards_events)
    && $IsEqual'$1_event_EventHandle'$1_vesting_VestEvent''(s1->$vest_events, s2->$vest_events)
    && $IsEqual'$1_event_EventHandle'$1_vesting_DistributeEvent''(s1->$distribute_events, s2->$distribute_events)
    && $IsEqual'$1_event_EventHandle'$1_vesting_TerminateEvent''(s1->$terminate_events, s2->$terminate_events)
    && $IsEqual'$1_event_EventHandle'$1_vesting_AdminWithdrawEvent''(s1->$admin_withdraw_events, s2->$admin_withdraw_events)}
var $1_vesting_VestingContract_$memory: $Memory $1_vesting_VestingContract;

// struct vesting::VestingSchedule at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:106:5+1037
datatype $1_vesting_VestingSchedule {
    $1_vesting_VestingSchedule($schedule: Vec ($1_fixed_point32_FixedPoint32), $start_timestamp_secs: int, $period_duration: int, $last_vested_period: int)
}
function {:inline} $Update'$1_vesting_VestingSchedule'_schedule(s: $1_vesting_VestingSchedule, x: Vec ($1_fixed_point32_FixedPoint32)): $1_vesting_VestingSchedule {
    $1_vesting_VestingSchedule(x, s->$start_timestamp_secs, s->$period_duration, s->$last_vested_period)
}
function {:inline} $Update'$1_vesting_VestingSchedule'_start_timestamp_secs(s: $1_vesting_VestingSchedule, x: int): $1_vesting_VestingSchedule {
    $1_vesting_VestingSchedule(s->$schedule, x, s->$period_duration, s->$last_vested_period)
}
function {:inline} $Update'$1_vesting_VestingSchedule'_period_duration(s: $1_vesting_VestingSchedule, x: int): $1_vesting_VestingSchedule {
    $1_vesting_VestingSchedule(s->$schedule, s->$start_timestamp_secs, x, s->$last_vested_period)
}
function {:inline} $Update'$1_vesting_VestingSchedule'_last_vested_period(s: $1_vesting_VestingSchedule, x: int): $1_vesting_VestingSchedule {
    $1_vesting_VestingSchedule(s->$schedule, s->$start_timestamp_secs, s->$period_duration, x)
}
function $IsValid'$1_vesting_VestingSchedule'(s: $1_vesting_VestingSchedule): bool {
    $IsValid'vec'$1_fixed_point32_FixedPoint32''(s->$schedule)
      && $IsValid'u64'(s->$start_timestamp_secs)
      && $IsValid'u64'(s->$period_duration)
      && $IsValid'u64'(s->$last_vested_period)
}
function {:inline} $IsEqual'$1_vesting_VestingSchedule'(s1: $1_vesting_VestingSchedule, s2: $1_vesting_VestingSchedule): bool {
    $IsEqual'vec'$1_fixed_point32_FixedPoint32''(s1->$schedule, s2->$schedule)
    && $IsEqual'u64'(s1->$start_timestamp_secs, s2->$start_timestamp_secs)
    && $IsEqual'u64'(s1->$period_duration, s2->$period_duration)
    && $IsEqual'u64'(s1->$last_vested_period, s2->$last_vested_period)}

// fun vesting::operator [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:321:5+244
procedure {:timeLimit 40} $1_vesting_operator$verify(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: $1_vesting_VestingContract;
    var $t3: $1_vesting_StakingInfo;
    var $t4: int;
    var $t0: int;
    var $temp_0'address': int;
    var $1_vesting_VestingContract_$memory#34: $Memory $1_vesting_VestingContract;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:321:5+1
    assume {:print "$at(2,14901,14902)"} true;
    assume $IsValid'address'($t0);

    // assume forall $rsc: vesting::VestingContract: ResourceDomain<vesting::VestingContract>(): And(WellFormed($rsc), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($rsc)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:321:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_VestingContract_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_VestingContract_$memory, $a_0);
    (($IsValid'$1_vesting_VestingContract'($rsc) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($rsc->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($rsc->$grant_pool->$shareholders, addr)))) && (var $range_1 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (var $range_2 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'(ReadVec($rsc->$grant_pool->$shareholders, i), ReadVec($rsc->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j)))))))))))));

    // @34 := save_mem(vesting::VestingContract) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:321:5+1
    $1_vesting_VestingContract_$memory#34 := $1_vesting_VestingContract_$memory;

    // trace_local[vesting_contract_address]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:321:5+1
    assume {:print "$track_local(60,14,0):", $t0} $t0 == $t0;

    // vesting::assert_vesting_contract_exists($t0) on_abort goto L2 with $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:322:9+56
    assume {:print "$at(2,15000,15056)"} true;
    call $1_vesting_assert_vesting_contract_exists($t0);
    if ($abort_flag) {
        assume {:print "$at(2,15000,15056)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(60,14):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := get_global<vesting::VestingContract>($t0) on_abort goto L2 with $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:323:9+13
    assume {:print "$at(2,15066,15079)"} true;
    if (!$ResourceExists($1_vesting_VestingContract_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t2 := $ResourceValue($1_vesting_VestingContract_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(2,15066,15079)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(60,14):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t3 := get_field<vesting::VestingContract>.staking($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:323:9+64
    $t3 := $t2->$staking;

    // $t4 := get_field<vesting::StakingInfo>.operator($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:323:9+73
    $t4 := $t3->$operator;

    // trace_return[0]($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:323:9+73
    assume {:print "$track_return(60,14,0):", $t4} $t4 == $t4;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:324:5+1
    assume {:print "$at(2,15144,15145)"} true;
L1:

    // assert Not(Not(exists[@34]<vesting::VestingContract>($t0))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:36:9+61
    assume {:print "$at(3,1205,1266)"} true;
    assert {:msg "assert_failed(3,1205,1266): function does not abort under this condition"}
      !!$ResourceExists($1_vesting_VestingContract_$memory#34, $t0);

    // return $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:36:9+61
    $ret0 := $t4;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:324:5+1
    assume {:print "$at(2,15144,15145)"} true;
L2:

    // assert Not(exists[@34]<vesting::VestingContract>($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:35:5+135
    assume {:print "$at(3,1137,1272)"} true;
    assert {:msg "assert_failed(3,1137,1272): abort not covered by any of the `aborts_if` clauses"}
      !$ResourceExists($1_vesting_VestingContract_$memory#34, $t0);

    // abort($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:35:5+135
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun vesting::voter [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:331:5+238
procedure {:timeLimit 40} $1_vesting_voter$verify(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: $1_vesting_VestingContract;
    var $t3: $1_vesting_StakingInfo;
    var $t4: int;
    var $t0: int;
    var $temp_0'address': int;
    var $1_vesting_VestingContract_$memory#33: $Memory $1_vesting_VestingContract;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:331:5+1
    assume {:print "$at(2,15393,15394)"} true;
    assume $IsValid'address'($t0);

    // assume forall $rsc: vesting::VestingContract: ResourceDomain<vesting::VestingContract>(): And(WellFormed($rsc), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($rsc)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:331:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_VestingContract_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_VestingContract_$memory, $a_0);
    (($IsValid'$1_vesting_VestingContract'($rsc) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($rsc->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($rsc->$grant_pool->$shareholders, addr)))) && (var $range_1 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (var $range_2 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'(ReadVec($rsc->$grant_pool->$shareholders, i), ReadVec($rsc->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j)))))))))))));

    // @33 := save_mem(vesting::VestingContract) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:331:5+1
    $1_vesting_VestingContract_$memory#33 := $1_vesting_VestingContract_$memory;

    // trace_local[vesting_contract_address]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:331:5+1
    assume {:print "$track_local(60,42,0):", $t0} $t0 == $t0;

    // vesting::assert_vesting_contract_exists($t0) on_abort goto L2 with $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:332:9+56
    assume {:print "$at(2,15489,15545)"} true;
    call $1_vesting_assert_vesting_contract_exists($t0);
    if ($abort_flag) {
        assume {:print "$at(2,15489,15545)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(60,42):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := get_global<vesting::VestingContract>($t0) on_abort goto L2 with $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:333:9+13
    assume {:print "$at(2,15555,15568)"} true;
    if (!$ResourceExists($1_vesting_VestingContract_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t2 := $ResourceValue($1_vesting_VestingContract_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(2,15555,15568)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(60,42):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t3 := get_field<vesting::VestingContract>.staking($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:333:9+64
    $t3 := $t2->$staking;

    // $t4 := get_field<vesting::StakingInfo>.voter($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:333:9+70
    $t4 := $t3->$voter;

    // trace_return[0]($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:333:9+70
    assume {:print "$track_return(60,42,0):", $t4} $t4 == $t4;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:334:5+1
    assume {:print "$at(2,15630,15631)"} true;
L1:

    // assert Not(Not(exists[@33]<vesting::VestingContract>($t0))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:40:9+61
    assume {:print "$at(3,1343,1404)"} true;
    assert {:msg "assert_failed(3,1343,1404): function does not abort under this condition"}
      !!$ResourceExists($1_vesting_VestingContract_$memory#33, $t0);

    // return $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:40:9+61
    $ret0 := $t4;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:334:5+1
    assume {:print "$at(2,15630,15631)"} true;
L2:

    // assert Not(exists[@33]<vesting::VestingContract>($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:39:5+132
    assume {:print "$at(3,1278,1410)"} true;
    assert {:msg "assert_failed(3,1278,1410): abort not covered by any of the `aborts_if` clauses"}
      !$ResourceExists($1_vesting_VestingContract_$memory#33, $t0);

    // abort($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:39:5+132
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun vesting::shareholder [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:396:5+811
procedure {:timeLimit 40} $1_vesting_shareholder$verify(_$t0: int, _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: Vec (int);
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: Vec (int);
    var $t9: Vec (int);
    var $t10: $1_vesting_VestingContract;
    var $t11: $1_vesting_VestingContract;
    var $t12: $1_vesting_VestingContract;
    var $t13: int;
    var $t14: $1_vesting_VestingContract;
    var $t15: Vec (int);
    var $t16: bool;
    var $t17: int;
    var $t18: $1_vesting_VestingContract;
    var $t19: int;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: bool;
    var $t24: int;
    var $t25: int;
    var $t26: bool;
    var $t27: bool;
    var $t28: bool;
    var $t29: int;
    var $t30: int;
    var $t0: int;
    var $t1: int;
    var $temp_0'$1_vesting_VestingContract': $1_vesting_VestingContract;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'address'': Vec (int);
    var $1_vesting_VestingContract_$memory#96: $Memory $1_vesting_VestingContract;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:396:5+1
    assume {:print "$at(2,19217,19218)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:396:5+1
    assume $IsValid'address'($t1);

    // assume forall $rsc: vesting::VestingContract: ResourceDomain<vesting::VestingContract>(): And(WellFormed($rsc), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($rsc)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:396:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_VestingContract_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_VestingContract_$memory, $a_0);
    (($IsValid'$1_vesting_VestingContract'($rsc) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($rsc->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($rsc->$grant_pool->$shareholders, addr)))) && (var $range_1 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (var $range_2 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'(ReadVec($rsc->$grant_pool->$shareholders, i), ReadVec($rsc->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j)))))))))))));

    // assume Identical($t11, global<vesting::VestingContract>($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:532:9+65
    assume {:print "$at(3,23733,23798)"} true;
    assume ($t11 == $ResourceValue($1_vesting_VestingContract_$memory, $t0));

    // @96 := save_mem(vesting::VestingContract) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:396:5+1
    assume {:print "$at(2,19217,19218)"} true;
    $1_vesting_VestingContract_$memory#96 := $1_vesting_VestingContract_$memory;

    // trace_local[vesting_contract_address]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:396:5+1
    assume {:print "$track_local(60,24,0):", $t0} $t0 == $t0;

    // trace_local[shareholder_or_beneficiary]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:396:5+1
    assume {:print "$track_local(60,24,1):", $t1} $t1 == $t1;

    // assume Identical($t12, global<vesting::VestingContract>($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:532:9+65
    assume {:print "$at(3,23733,23798)"} true;
    assume ($t12 == $ResourceValue($1_vesting_VestingContract_$memory, $t0));

    // vesting::assert_active_vesting_contract($t0) on_abort goto L13 with $t13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:397:9+56
    assume {:print "$at(2,19356,19412)"} true;
    call $1_vesting_assert_active_vesting_contract($t0);
    if ($abort_flag) {
        assume {:print "$at(2,19356,19412)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(60,24):", $t13} $t13 == $t13;
        goto L13;
    }

    // assume Identical($t14, global<vesting::VestingContract>($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:532:9+65
    assume {:print "$at(3,23733,23798)"} true;
    assume ($t14 == $ResourceValue($1_vesting_VestingContract_$memory, $t0));

    // $t15 := vesting::shareholders($t0) on_abort goto L13 with $t13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:399:29+38
    assume {:print "$at(2,19443,19481)"} true;
    call $t15 := $1_vesting_shareholders($t0);
    if ($abort_flag) {
        assume {:print "$at(2,19443,19481)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(60,24):", $t13} $t13 == $t13;
        goto L13;
    }

    // trace_local[shareholders]($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:399:13+12
    assume {:print "$track_local(60,24,8):", $t15} $t15 == $t15;

    // $t16 := vector::contains<address>($t15, $t1) on_abort goto L13 with $t13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:400:13+59
    assume {:print "$at(2,19495,19554)"} true;
    call $t16 := $1_vector_contains'address'($t15, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,19495,19554)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(60,24):", $t13} $t13 == $t13;
        goto L13;
    }

    // if ($t16) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:400:9+122
    if ($t16) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:401:13+33
    assume {:print "$at(2,19570,19603)"} true;
L1:

    // trace_return[0]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:401:13+33
    assume {:print "$at(2,19570,19603)"} true;
    assume {:print "$track_return(60,24,0):", $t1} $t1 == $t1;

    // $t17 := move($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:401:13+33
    $t17 := $t1;

    // goto L12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:401:13+33
    goto L12;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:403:63+24
    assume {:print "$at(2,19677,19701)"} true;
L0:

    // $t18 := get_global<vesting::VestingContract>($t0) on_abort goto L13 with $t13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:403:32+13
    assume {:print "$at(2,19646,19659)"} true;
    if (!$ResourceExists($1_vesting_VestingContract_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t18 := $ResourceValue($1_vesting_VestingContract_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(2,19646,19659)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(60,24):", $t13} $t13 == $t13;
        goto L13;
    }

    // trace_local[vesting_contract]($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:403:13+16
    assume {:print "$track_local(60,24,10):", $t18} $t18 == $t18;

    // $t19 := 0x0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:404:22+4
    assume {:print "$at(2,19725,19729)"} true;
    $t19 := 0;
    assume $IsValid'address'($t19);

    // trace_local[result]($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:404:13+6
    assume {:print "$track_local(60,24,5):", $t19} $t19 == $t19;

    // trace_local[v#308]($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:405:9+266
    assume {:print "$at(2,19739,20005)"} true;
    assume {:print "$track_local(60,24,9):", $t15} $t15 == $t15;

    // $t20 := false at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:554:22+5
    assume {:print "$at(18,19381,19386)"} true;
    $t20 := false;
    assume $IsValid'bool'($t20);

    // trace_local[result#310]($t20) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:554:13+6
    assume {:print "$track_local(60,24,6):", $t20} $t20 == $t20;

    // $t21 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:555:17+1
    assume {:print "$at(18,19404,19405)"} true;
    $t21 := 0;
    assume $IsValid'u64'($t21);

    // trace_local[i#311]($t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:555:13+1
    assume {:print "$track_local(60,24,4):", $t21} $t21 == $t21;

    // label L10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:16+1
    assume {:print "$at(18,19422,19423)"} true;
L10:

    // $t3 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:16+1
    assume {:print "$at(18,19422,19423)"} true;
    havoc $t3;

    // assume WellFormed($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:16+1
    assume $IsValid'bool'($t3);

    // $t4 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:16+1
    havoc $t4;

    // assume WellFormed($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:16+1
    assume $IsValid'u64'($t4);

    // $t5 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:16+1
    havoc $t5;

    // assume WellFormed($t5) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:16+1
    assume $IsValid'address'($t5);

    // $t6 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:16+1
    havoc $t6;

    // assume WellFormed($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:16+1
    assume $IsValid'bool'($t6);

    // $t22 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:16+1
    havoc $t22;

    // assume WellFormed($t22) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:16+1
    assume $IsValid'u64'($t22);

    // $t23 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:16+1
    havoc $t23;

    // assume WellFormed($t23) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:16+1
    assume $IsValid'bool'($t23);

    // $t24 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:16+1
    havoc $t24;

    // assume WellFormed($t24) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:16+1
    assume $IsValid'address'($t24);

    // $t25 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:16+1
    havoc $t25;

    // assume WellFormed($t25) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:16+1
    assume $IsValid'address'($t25);

    // $t26 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:16+1
    havoc $t26;

    // assume WellFormed($t26) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:16+1
    assume $IsValid'bool'($t26);

    // $t27 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:16+1
    havoc $t27;

    // assume WellFormed($t27) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:16+1
    assume $IsValid'bool'($t27);

    // $t28 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:16+1
    havoc $t28;

    // assume WellFormed($t28) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:16+1
    assume $IsValid'bool'($t28);

    // $t29 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:16+1
    havoc $t29;

    // assume WellFormed($t29) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:16+1
    assume $IsValid'u64'($t29);

    // $t30 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:16+1
    havoc $t30;

    // assume WellFormed($t30) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:16+1
    assume $IsValid'u64'($t30);

    // trace_local[i#311]($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:16+1
    assume {:print "$info(): enter loop, variable(s) i#311, result, result#310 havocked and reassigned"} true;
    assume {:print "$track_local(60,24,4):", $t4} $t4 == $t4;

    // trace_local[result]($t5) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:16+1
    assume {:print "$track_local(60,24,5):", $t5} $t5 == $t5;

    // trace_local[result#310]($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:16+1
    assume {:print "$track_local(60,24,6):", $t6} $t6 == $t6;

    // assume Not(AbortFlag()) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:16+1
    assume !$abort_flag;

    // $t22 := vector::length<address>($t15) on_abort goto L13 with $t13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:20+9
    call $t22 := $1_vector_length'address'($t15);
    if ($abort_flag) {
        assume {:print "$at(18,19426,19435)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(60,24):", $t13} $t13 == $t13;
        goto L13;
    }

    // $t23 := <($t4, $t22) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:18+1
    call $t23 := $Lt($t4, $t22);

    // if ($t23) goto L3 else goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:9+156
    if ($t23) { goto L3; } else { goto L2; }

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:556:9+156
L3:

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:557:31+1
    assume {:print "$at(18,19469,19470)"} true;
L4:

    // $t24 := vector::borrow<address>($t15, $t4) on_abort goto L13 with $t13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:557:24+12
    assume {:print "$at(18,19462,19474)"} true;
    call $t24 := $1_vector_borrow'address'($t15, $t4);
    if ($abort_flag) {
        assume {:print "$at(18,19462,19474)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(60,24):", $t13} $t13 == $t13;
        goto L13;
    }

    // trace_local[shareholder#312]($t24) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:557:24+12
    assume {:print "$track_local(60,24,7):", $t24} $t24 == $t24;

    // $t25 := vesting::get_beneficiary($t18, $t24) on_abort goto L13 with $t13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:406:47+47
    assume {:print "$at(2,19827,19874)"} true;
    call $t25 := $1_vesting_get_beneficiary($t18, $t24);
    if ($abort_flag) {
        assume {:print "$at(2,19827,19874)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(60,24):", $t13} $t13 == $t13;
        goto L13;
    }

    // $t26 := ==($t1, $t25) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:406:44+2
    $t26 := $IsEqual'address'($t1, $t25);

    // if ($t26) goto L6 else goto L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:406:13+201
    if ($t26) { goto L6; } else { goto L5; }

    // label L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:407:27+11
    assume {:print "$at(2,19904,19915)"} true;
L6:

    // $t5 := $t24 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:407:17+6
    assume {:print "$at(2,19894,19900)"} true;
    $t5 := $t24;

    // trace_local[result]($t24) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:407:17+6
    assume {:print "$track_local(60,24,5):", $t24} $t24 == $t24;

    // $t27 := true at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:408:17+4
    assume {:print "$at(2,19933,19937)"} true;
    $t27 := true;
    assume $IsValid'bool'($t27);

    // $t3 := $t27 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:406:13+201
    assume {:print "$at(2,19793,19994)"} true;
    $t3 := $t27;

    // goto L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:406:13+201
    goto L7;

    // label L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:406:13+201
L5:

    // $t28 := false at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:410:17+5
    assume {:print "$at(2,19975,19980)"} true;
    $t28 := false;
    assume $IsValid'bool'($t28);

    // $t3 := $t28 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:406:13+201
    assume {:print "$at(2,19793,19994)"} true;
    $t3 := $t28;

    // label L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:406:13+201
L7:

    // $t6 := $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:557:13+6
    assume {:print "$at(18,19451,19457)"} true;
    $t6 := $t3;

    // trace_local[result#310]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:557:13+6
    assume {:print "$track_local(60,24,6):", $t3} $t3 == $t3;

    // if ($t3) goto L9 else goto L8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:558:13+49
    assume {:print "$at(18,19489,19538)"} true;
    if ($t3) { goto L9; } else { goto L8; }

    // label L9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:559:17+5
    assume {:print "$at(18,19519,19524)"} true;
L9:

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:559:17+5
    assume {:print "$at(18,19519,19524)"} true;
    goto L2;

    // label L8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:561:17+1
    assume {:print "$at(18,19556,19557)"} true;
L8:

    // $t29 := 1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:561:21+1
    assume {:print "$at(18,19560,19561)"} true;
    $t29 := 1;
    assume $IsValid'u64'($t29);

    // $t30 := +($t4, $t29) on_abort goto L13 with $t13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:561:19+1
    call $t30 := $AddU64($t4, $t29);
    if ($abort_flag) {
        assume {:print "$at(18,19558,19559)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(60,24):", $t13} $t13 == $t13;
        goto L13;
    }

    // trace_local[i#311]($t30) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:561:13+1
    assume {:print "$track_local(60,24,4):", $t30} $t30 == $t30;

    // goto L11 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:561:13+9
    goto L11;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:563:9+6
    assume {:print "$at(18,19581,19587)"} true;
L2:

    // destroy($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:563:9+6
    assume {:print "$at(18,19581,19587)"} true;

    // trace_return[0]($t5) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:414:9+6
    assume {:print "$at(2,20016,20022)"} true;
    assume {:print "$track_return(60,24,0):", $t5} $t5 == $t5;

    // $t17 := move($t5) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:414:9+6
    $t17 := $t5;

    // goto L12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:414:9+6
    goto L12;

    // label L11 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:563:9+6
    // Loop invariant checking block for the loop started with header: L10
    assume {:print "$at(18,19581,19587)"} true;
L11:

    // stop() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:563:9+6
    assume {:print "$at(18,19581,19587)"} true;
    assume false;
    return;

    // label L12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:415:5+1
    assume {:print "$at(2,20027,20028)"} true;
L12:

    // assert Not(Not(exists[@96]<vesting::VestingContract>($t0))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:531:9+53
    assume {:print "$at(3,23671,23724)"} true;
    assert {:msg "assert_failed(3,23671,23724): function does not abort under this condition"}
      !!$ResourceExists($1_vesting_VestingContract_$memory#96, $t0);

    // assert Not(Neq<u64>(select vesting::VestingContract.state($t11), 1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:533:9+56
    assume {:print "$at(3,23807,23863)"} true;
    assert {:msg "assert_failed(3,23807,23863): function does not abort under this condition"}
      !!$IsEqual'u64'($t11->$state, 1);

    // return $t17 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:533:9+56
    $ret0 := $t17;
    return;

    // label L13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:415:5+1
    assume {:print "$at(2,20027,20028)"} true;
L13:

    // assert Or(Not(exists[@96]<vesting::VestingContract>($t0)), Neq<u64>(select vesting::VestingContract.state($t11), 1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:124:5+345
    assume {:print "$at(3,5855,6200)"} true;
    assert {:msg "assert_failed(3,5855,6200): abort not covered by any of the `aborts_if` clauses"}
      (!$ResourceExists($1_vesting_VestingContract_$memory#96, $t0) || !$IsEqual'u64'($t11->$state, 1));

    // abort($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:124:5+345
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// fun vesting::shareholders [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:383:5+325
procedure {:inline 1} $1_vesting_shareholders(_$t0: int) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t1: $1_vesting_VestingContract;
    var $t2: $1_vesting_VestingContract;
    var $t3: int;
    var $t4: $1_vesting_VestingContract;
    var $t5: $1_pool_u64_Pool;
    var $t6: Vec (int);
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'vec'address'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t1, global<vesting::VestingContract>($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:532:9+65
    assume {:print "$at(3,23733,23798)"} true;
    assume ($t1 == $ResourceValue($1_vesting_VestingContract_$memory, $t0));

    // trace_local[vesting_contract_address]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:383:5+1
    assume {:print "$at(2,18423,18424)"} true;
    assume {:print "$track_local(60,25,0):", $t0} $t0 == $t0;

    // assume Identical($t2, global<vesting::VestingContract>($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:532:9+65
    assume {:print "$at(3,23733,23798)"} true;
    assume ($t2 == $ResourceValue($1_vesting_VestingContract_$memory, $t0));

    // vesting::assert_active_vesting_contract($t0) on_abort goto L2 with $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:384:9+56
    assume {:print "$at(2,18534,18590)"} true;
    call $1_vesting_assert_active_vesting_contract($t0);
    if ($abort_flag) {
        assume {:print "$at(2,18534,18590)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(60,25):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := get_global<vesting::VestingContract>($t0) on_abort goto L2 with $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:386:32+13
    assume {:print "$at(2,18624,18637)"} true;
    if (!$ResourceExists($1_vesting_VestingContract_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t4 := $ResourceValue($1_vesting_VestingContract_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(2,18624,18637)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(60,25):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t5 := get_field<vesting::VestingContract>.grant_pool($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:387:32+28
    assume {:print "$at(2,18713,18741)"} true;
    $t5 := $t4->$grant_pool;

    // $t6 := pool_u64::shareholders($t5) on_abort goto L2 with $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:387:9+52
    call $t6 := $1_pool_u64_shareholders($t5);
    if ($abort_flag) {
        assume {:print "$at(2,18690,18742)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(60,25):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:387:9+52
    assume {:print "$track_return(60,25,0):", $t6} $t6 == $t6;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:388:5+1
    assume {:print "$at(2,18747,18748)"} true;
L1:

    // return $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:388:5+1
    assume {:print "$at(2,18747,18748)"} true;
    $ret0 := $t6;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:388:5+1
L2:

    // abort($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:388:5+1
    assume {:print "$at(2,18747,18748)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun vesting::shareholders [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:383:5+325
procedure {:timeLimit 40} $1_vesting_shareholders$verify(_$t0: int) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t1: $1_vesting_VestingContract;
    var $t2: $1_vesting_VestingContract;
    var $t3: int;
    var $t4: $1_vesting_VestingContract;
    var $t5: $1_pool_u64_Pool;
    var $t6: Vec (int);
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'vec'address'': Vec (int);
    var $1_vesting_VestingContract_$memory#60: $Memory $1_vesting_VestingContract;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:383:5+1
    assume {:print "$at(2,18423,18424)"} true;
    assume $IsValid'address'($t0);

    // assume forall $rsc: vesting::VestingContract: ResourceDomain<vesting::VestingContract>(): And(WellFormed($rsc), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($rsc)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:383:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_VestingContract_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_VestingContract_$memory, $a_0);
    (($IsValid'$1_vesting_VestingContract'($rsc) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($rsc->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($rsc->$grant_pool->$shareholders, addr)))) && (var $range_1 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (var $range_2 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'(ReadVec($rsc->$grant_pool->$shareholders, i), ReadVec($rsc->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j)))))))))))));

    // assume Identical($t1, global<vesting::VestingContract>($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:532:9+65
    assume {:print "$at(3,23733,23798)"} true;
    assume ($t1 == $ResourceValue($1_vesting_VestingContract_$memory, $t0));

    // @60 := save_mem(vesting::VestingContract) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:383:5+1
    assume {:print "$at(2,18423,18424)"} true;
    $1_vesting_VestingContract_$memory#60 := $1_vesting_VestingContract_$memory;

    // trace_local[vesting_contract_address]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:383:5+1
    assume {:print "$track_local(60,25,0):", $t0} $t0 == $t0;

    // assume Identical($t2, global<vesting::VestingContract>($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:532:9+65
    assume {:print "$at(3,23733,23798)"} true;
    assume ($t2 == $ResourceValue($1_vesting_VestingContract_$memory, $t0));

    // vesting::assert_active_vesting_contract($t0) on_abort goto L2 with $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:384:9+56
    assume {:print "$at(2,18534,18590)"} true;
    call $1_vesting_assert_active_vesting_contract($t0);
    if ($abort_flag) {
        assume {:print "$at(2,18534,18590)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(60,25):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := get_global<vesting::VestingContract>($t0) on_abort goto L2 with $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:386:32+13
    assume {:print "$at(2,18624,18637)"} true;
    if (!$ResourceExists($1_vesting_VestingContract_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t4 := $ResourceValue($1_vesting_VestingContract_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(2,18624,18637)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(60,25):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t5 := get_field<vesting::VestingContract>.grant_pool($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:387:32+28
    assume {:print "$at(2,18713,18741)"} true;
    $t5 := $t4->$grant_pool;

    // $t6 := pool_u64::shareholders($t5) on_abort goto L2 with $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:387:9+52
    call $t6 := $1_pool_u64_shareholders($t5);
    if ($abort_flag) {
        assume {:print "$at(2,18690,18742)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(60,25):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:387:9+52
    assume {:print "$track_return(60,25,0):", $t6} $t6 == $t6;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:388:5+1
    assume {:print "$at(2,18747,18748)"} true;
L1:

    // assert Not(Not(exists[@60]<vesting::VestingContract>($t0))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:531:9+53
    assume {:print "$at(3,23671,23724)"} true;
    assert {:msg "assert_failed(3,23671,23724): function does not abort under this condition"}
      !!$ResourceExists($1_vesting_VestingContract_$memory#60, $t0);

    // assert Not(Neq<u64>(select vesting::VestingContract.state($t1), 1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:533:9+56
    assume {:print "$at(3,23807,23863)"} true;
    assert {:msg "assert_failed(3,23807,23863): function does not abort under this condition"}
      !!$IsEqual'u64'($t1->$state, 1);

    // return $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:533:9+56
    $ret0 := $t6;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:388:5+1
    assume {:print "$at(2,18747,18748)"} true;
L2:

    // assert Or(Not(exists[@60]<vesting::VestingContract>($t0)), Neq<u64>(select vesting::VestingContract.state($t1), 1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:118:5+185
    assume {:print "$at(3,5551,5736)"} true;
    assert {:msg "assert_failed(3,5551,5736): abort not covered by any of the `aborts_if` clauses"}
      (!$ResourceExists($1_vesting_VestingContract_$memory#60, $t0) || !$IsEqual'u64'($t1->$state, 1));

    // abort($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:118:5+185
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun vesting::reset_lockup [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:802:5+862
procedure {:timeLimit 40} $1_vesting_reset_lockup$verify(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: $signer;
    var $t3: $Mutation ($1_vesting_VestingContract);
    var $t4: $1_vesting_VestingContract;
    var $t5: int;
    var $t6: int;
    var $t7: $1_staking_contract_Store;
    var $t8: $1_staking_contract_StakingContract;
    var $t9: int;
    var $t10: Table int ($1_staking_contract_StakingContract);
    var $t11: $1_staking_contract_Store;
    var $t12: $1_staking_contract_StakingContract;
    var $t13: int;
    var $t14: $1_staking_config_StakingConfig;
    var $t15: $1_stake_StakePool;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: $Mutation ($1_vesting_VestingContract);
    var $t20: int;
    var $t21: $1_vesting_VestingContract;
    var $t22: $1_vesting_VestingContract;
    var $t23: $signer;
    var $t24: $1_vesting_StakingInfo;
    var $t25: int;
    var $t26: int;
    var $t27: Table int ($1_staking_contract_StakingContract);
    var $t28: $1_staking_contract_Store;
    var $t29: $1_staking_contract_StakingContract;
    var $t30: int;
    var $t31: $1_staking_config_StakingConfig;
    var $t32: $1_stake_StakePool;
    var $t33: int;
    var $t34: int;
    var $t35: int;
    var $t36: $Mutation ($1_event_EventHandle'$1_vesting_ResetLockupEvent');
    var $t37: int;
    var $t38: $1_vesting_StakingInfo;
    var $t39: int;
    var $t40: $1_vesting_StakingInfo;
    var $t41: int;
    var $t42: int;
    var $t43: $1_vesting_ResetLockupEvent;
    var $t44: $1_staking_contract_Store;
    var $t45: $1_staking_contract_StakingContract;
    var $t46: $1_stake_StakePool;
    var $t0: $signer;
    var $t1: int;
    var $temp_0'$1_vesting_VestingContract': $1_vesting_VestingContract;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $1_vesting_VestingContract_$memory#99: $Memory $1_vesting_VestingContract;
    var $1_staking_contract_Store_$memory#100: $Memory $1_staking_contract_Store;
    var $1_stake_StakePool_$memory#101: $Memory $1_stake_StakePool;
    var $1_staking_config_StakingConfig_$memory#102: $Memory $1_staking_config_StakingConfig;
    var $1_timestamp_CurrentTimeMicroseconds_$memory#103: $Memory $1_timestamp_CurrentTimeMicroseconds;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:802:5+1
    assume {:print "$at(2,37590,37591)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:802:5+1
    assume $IsValid'address'($t1);

    // assume forall $rsc: chain_status::GenesisEndMarker: ResourceDomain<chain_status::GenesisEndMarker>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:802:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0)}(var $rsc := $ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0);
    ($IsValid'$1_chain_status_GenesisEndMarker'($rsc))));

    // assume forall $rsc: timestamp::CurrentTimeMicroseconds: ResourceDomain<timestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:802:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_timestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: staking_config::StakingConfig: ResourceDomain<staking_config::StakingConfig>(): And(WellFormed($rsc), And(And(Le(select staking_config::StakingConfig.rewards_rate($rsc), 1000000), Gt(select staking_config::StakingConfig.rewards_rate_denominator($rsc), 0)), Le(select staking_config::StakingConfig.rewards_rate($rsc), select staking_config::StakingConfig.rewards_rate_denominator($rsc)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:802:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_staking_config_StakingConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_staking_config_StakingConfig_$memory, $a_0);
    (($IsValid'$1_staking_config_StakingConfig'($rsc) && ((($rsc->$rewards_rate <= 1000000) && ($rsc->$rewards_rate_denominator > 0)) && ($rsc->$rewards_rate <= $rsc->$rewards_rate_denominator))))));

    // assume forall $rsc: stake::OwnerCapability: ResourceDomain<stake::OwnerCapability>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:802:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_OwnerCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_OwnerCapability_$memory, $a_0);
    ($IsValid'$1_stake_OwnerCapability'($rsc))));

    // assume forall $rsc: stake::StakePool: ResourceDomain<stake::StakePool>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:802:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_StakePool_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_StakePool_$memory, $a_0);
    ($IsValid'$1_stake_StakePool'($rsc))));

    // assume forall $rsc: stake::ValidatorConfig: ResourceDomain<stake::ValidatorConfig>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:802:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorConfig_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorConfig'($rsc))));

    // assume forall $rsc: stake::ValidatorPerformance: ResourceDomain<stake::ValidatorPerformance>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:802:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorPerformance'($rsc))));

    // assume forall $rsc: stake::ValidatorSet: ResourceDomain<stake::ValidatorSet>(): And(WellFormed($rsc), Eq<u8>(select stake::ValidatorSet.consensus_scheme($rsc), 0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:802:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorSet_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorSet_$memory, $a_0);
    (($IsValid'$1_stake_ValidatorSet'($rsc) && $IsEqual'u8'($rsc->$consensus_scheme, 0)))));

    // assume forall $rsc: reconfiguration::Configuration: ResourceDomain<reconfiguration::Configuration>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:802:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_Configuration_$memory, $a_0);
    ($IsValid'$1_reconfiguration_Configuration'($rsc))));

    // assume forall $rsc: staking_contract::Store: ResourceDomain<staking_contract::Store>(): And(WellFormed($rsc), forall $key: address: select staking_contract::Store.staking_contracts($rsc): And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), i), Index(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:802:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_staking_contract_Store_$memory, $a_0)}(var $rsc := $ResourceValue($1_staking_contract_Store_$memory, $a_0);
    (($IsValid'$1_staking_contract_Store'($rsc) && (var $range_1 := $rsc->$staking_contracts; (forall $key: int :: ContainsTable($range_1, $EncodeKey'address'($key)) ==> (((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shares, addr), $1_vector_spec_contains'address'($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, addr)))) && (var $range_2 := $Range(0, LenVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders)); (var $range_3 := $Range(0, LenVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders)); (forall $i_4: int, $i_5: int :: $InRange($range_2, $i_4) ==> $InRange($range_3, $i_5) ==> (var i := $i_4;
    (var j := $i_5;
    (($IsEqual'address'(ReadVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, i), ReadVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, j)) ==> $IsEqual'num'(i, j))))))))))))))));

    // assume forall $rsc: vesting::VestingContract: ResourceDomain<vesting::VestingContract>(): And(WellFormed($rsc), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($rsc)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:802:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_VestingContract_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_VestingContract_$memory, $a_0);
    (($IsValid'$1_vesting_VestingContract'($rsc) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($rsc->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($rsc->$grant_pool->$shareholders, addr)))) && (var $range_1 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (var $range_2 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'(ReadVec($rsc->$grant_pool->$shareholders, i), ReadVec($rsc->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j)))))))))))));

    // assume Implies(chain_status::$is_operating(), exists<timestamp::CurrentTimeMicroseconds>(0x1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:802:5+862
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.spec.move:4:9+93
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, 1));

    // assume Implies(chain_status::$is_operating(), exists<staking_config::StakingConfig>(0x1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:802:5+862
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/configs/staking_config.spec.move:4:9+83
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_staking_config_StakingConfig_$memory, 1));

    // assume Implies(exists<stake::ValidatorSet>(0x1), stake::validator_set_is_valid()) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:802:5+862
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:8:9+92
    assume ($ResourceExists($1_stake_ValidatorSet_$memory, 1) ==> $1_stake_validator_set_is_valid($1_stake_StakePool_$memory, $1_stake_ValidatorConfig_$memory, $1_stake_ValidatorPerformance_$memory, $1_stake_ValidatorSet_$memory));

    // assume Implies(chain_status::$is_operating(), Ge(timestamp::spec_now_microseconds(), reconfiguration::$last_reconfiguration_time())) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:802:5+862
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.spec.move:8:9+137
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) >= $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory)));

    // assume Identical($t4, global<vesting::VestingContract>($t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:302:9+65
    assume {:print "$at(3,13161,13226)"} true;
    assume ($t4 == $ResourceValue($1_vesting_VestingContract_$memory, $t1));

    // assume Identical($t5, select vesting::StakingInfo.operator(select vesting::VestingContract.staking($t4))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:305:9+49
    assume {:print "$at(3,13307,13356)"} true;
    assume ($t5 == $t4->$staking->$operator);

    // assume Identical($t6, select account::SignerCapability.account(select vesting::VestingContract.signer_cap($t4))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:306:9+49
    assume {:print "$at(3,13365,13414)"} true;
    assume ($t6 == $t4->$signer_cap->$account);

    // assume Identical($t7, global<staking_contract::Store>($t6)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:311:9+52
    assume {:print "$at(3,13586,13638)"} true;
    assume ($t7 == $ResourceValue($1_staking_contract_Store_$memory, $t6));

    // assume Identical($t8, simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t7), $t5)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:312:9+79
    assume {:print "$at(3,13647,13726)"} true;
    assume ($t8 == $1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($t7->$staking_contracts, $t5));

    // assume Identical($t9, select stake::OwnerCapability.pool_address(select staking_contract::StakingContract.owner_cap($t8))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:313:9+59
    assume {:print "$at(3,13735,13794)"} true;
    assume ($t9 == $t8->$owner_cap->$pool_address);

    // assume Identical($t10, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t6))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:380:9+64
    assume {:print "$at(145,17457,17521)"} true;
    assume ($t10 == $ResourceValue($1_staking_contract_Store_$memory, $t6)->$staking_contracts);

    // assume Identical($t11, global<staking_contract::Store>($t6)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:430:9+34
    assume {:print "$at(145,19493,19527)"} true;
    assume ($t11 == $ResourceValue($1_staking_contract_Store_$memory, $t6));

    // assume Identical($t12, simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t11), $t5)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:431:9+79
    assume {:print "$at(145,19536,19615)"} true;
    assume ($t12 == $1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($t11->$staking_contracts, $t5));

    // assume Identical($t13, select stake::OwnerCapability.pool_address(select staking_contract::StakingContract.owner_cap($t12))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:432:9+59
    assume {:print "$at(145,19624,19683)"} true;
    assume ($t13 == $t12->$owner_cap->$pool_address);

    // assume Identical($t14, global<staking_config::StakingConfig>(0x1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:438:9+69
    assume {:print "$at(145,19944,20013)"} true;
    assume ($t14 == $ResourceValue($1_staking_config_StakingConfig_$memory, 1));

    // assume Identical($t15, global<stake::StakePool>($t13)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:439:9+56
    assume {:print "$at(145,20022,20078)"} true;
    assume ($t15 == $ResourceValue($1_stake_StakePool_$memory, $t13));

    // assume Identical($t16, select stake::StakePool.locked_until_secs($t15)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:440:9+57
    assume {:print "$at(145,20087,20144)"} true;
    assume ($t16 == $t15->$locked_until_secs);

    // assume Identical($t17, Div(select timestamp::CurrentTimeMicroseconds.microseconds(global<timestamp::CurrentTimeMicroseconds>(0x1)), 1000000)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:441:9+125
    assume {:print "$at(145,20153,20278)"} true;
    assume ($t17 == ($ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, 1)->$microseconds div 1000000));

    // assume Identical($t18, Add($t17, select staking_config::StakingConfig.recurring_lockup_duration_secs($t14))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:442:9+76
    assume {:print "$at(145,20287,20363)"} true;
    assume ($t18 == ($t17 + $t14->$recurring_lockup_duration_secs));

    // @103 := save_mem(timestamp::CurrentTimeMicroseconds) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:802:5+1
    assume {:print "$at(2,37590,37591)"} true;
    $1_timestamp_CurrentTimeMicroseconds_$memory#103 := $1_timestamp_CurrentTimeMicroseconds_$memory;

    // @102 := save_mem(staking_config::StakingConfig) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:802:5+1
    $1_staking_config_StakingConfig_$memory#102 := $1_staking_config_StakingConfig_$memory;

    // @101 := save_mem(stake::StakePool) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:802:5+1
    $1_stake_StakePool_$memory#101 := $1_stake_StakePool_$memory;

    // @100 := save_mem(staking_contract::Store) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:802:5+1
    $1_staking_contract_Store_$memory#100 := $1_staking_contract_Store_$memory;

    // @99 := save_mem(vesting::VestingContract) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:802:5+1
    $1_vesting_VestingContract_$memory#99 := $1_vesting_VestingContract_$memory;

    // trace_local[admin]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:802:5+1
    assume {:print "$track_local(60,19,0):", $t0} $t0 == $t0;

    // trace_local[contract_address]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:802:5+1
    assume {:print "$track_local(60,19,1):", $t1} $t1 == $t1;

    // $t19 := borrow_global<vesting::VestingContract>($t1) on_abort goto L2 with $t20 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:806:32+17
    assume {:print "$at(2,37744,37761)"} true;
    if (!$ResourceExists($1_vesting_VestingContract_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t19 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_vesting_VestingContract_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(2,37744,37761)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(60,19):", $t20} $t20 == $t20;
        goto L2;
    }

    // trace_local[vesting_contract]($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:806:13+16
    $temp_0'$1_vesting_VestingContract' := $Dereference($t19);
    assume {:print "$track_local(60,19,3):", $temp_0'$1_vesting_VestingContract'} $temp_0'$1_vesting_VestingContract' == $temp_0'$1_vesting_VestingContract';

    // $t21 := read_ref($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:807:21+25
    assume {:print "$at(2,37818,37843)"} true;
    $t21 := $Dereference($t19);

    // vesting::verify_admin($t0, $t21) on_abort goto L2 with $t20 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:807:9+37
    call $1_vesting_verify_admin($t0, $t21);
    if ($abort_flag) {
        assume {:print "$at(2,37806,37843)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(60,19):", $t20} $t20 == $t20;
        goto L2;
    }

    // $t22 := read_ref($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:808:68+16
    assume {:print "$at(2,37912,37928)"} true;
    $t22 := $Dereference($t19);

    // $t23 := vesting::get_vesting_account_signer_internal($t22) on_abort goto L2 with $t20 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:808:32+53
    call $t23 := $1_vesting_get_vesting_account_signer_internal($t22);
    if ($abort_flag) {
        assume {:print "$at(2,37876,37929)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(60,19):", $t20} $t20 == $t20;
        goto L2;
    }

    // $t24 := get_field<vesting::VestingContract>.staking($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:809:57+24
    assume {:print "$at(2,37987,38011)"} true;
    $t24 := $Dereference($t19)->$staking;

    // $t25 := get_field<vesting::StakingInfo>.operator($t24) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:809:57+33
    $t25 := $t24->$operator;

    // assume Identical($t26, signer::$address_of($t23)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:162:9+48
    assume {:print "$at(145,7515,7563)"} true;
    assume ($t26 == $1_signer_$address_of($t23));

    // assume Identical($t27, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t26))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:380:9+64
    assume {:print "$at(145,17457,17521)"} true;
    assume ($t27 == $ResourceValue($1_staking_contract_Store_$memory, $t26)->$staking_contracts);

    // assume Identical($t28, global<staking_contract::Store>($t26)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:430:9+34
    assume {:print "$at(145,19493,19527)"} true;
    assume ($t28 == $ResourceValue($1_staking_contract_Store_$memory, $t26));

    // assume Identical($t29, simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t28), $t25)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:431:9+79
    assume {:print "$at(145,19536,19615)"} true;
    assume ($t29 == $1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($t28->$staking_contracts, $t25));

    // assume Identical($t30, select stake::OwnerCapability.pool_address(select staking_contract::StakingContract.owner_cap($t29))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:432:9+59
    assume {:print "$at(145,19624,19683)"} true;
    assume ($t30 == $t29->$owner_cap->$pool_address);

    // assume Identical($t31, global<staking_config::StakingConfig>(0x1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:438:9+69
    assume {:print "$at(145,19944,20013)"} true;
    assume ($t31 == $ResourceValue($1_staking_config_StakingConfig_$memory, 1));

    // assume Identical($t32, global<stake::StakePool>($t30)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:439:9+56
    assume {:print "$at(145,20022,20078)"} true;
    assume ($t32 == $ResourceValue($1_stake_StakePool_$memory, $t30));

    // assume Identical($t33, select stake::StakePool.locked_until_secs($t32)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:440:9+57
    assume {:print "$at(145,20087,20144)"} true;
    assume ($t33 == $t32->$locked_until_secs);

    // assume Identical($t34, Div(select timestamp::CurrentTimeMicroseconds.microseconds(global<timestamp::CurrentTimeMicroseconds>(0x1)), 1000000)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:441:9+125
    assume {:print "$at(145,20153,20278)"} true;
    assume ($t34 == ($ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, 1)->$microseconds div 1000000));

    // assume Identical($t35, Add($t34, select staking_config::StakingConfig.recurring_lockup_duration_secs($t31))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:442:9+76
    assume {:print "$at(145,20287,20363)"} true;
    assume ($t35 == ($t34 + $t31->$recurring_lockup_duration_secs));

    // staking_contract::reset_lockup($t23, $t25) on_abort goto L2 with $t20 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:809:9+82
    assume {:print "$at(2,37939,38021)"} true;
    call $1_staking_contract_reset_lockup($t23, $t25);
    if ($abort_flag) {
        assume {:print "$at(2,37939,38021)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(60,19):", $t20} $t20 == $t20;
        goto L2;
    }

    // $t36 := borrow_field<vesting::VestingContract>.reset_lockup_events($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:812:13+41
    assume {:print "$at(2,38056,38097)"} true;
    $t36 := $ChildMutation($t19, 11, $Dereference($t19)->$reset_lockup_events);

    // $t37 := get_field<vesting::VestingContract>.admin($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:814:24+22
    assume {:print "$at(2,38153,38175)"} true;
    $t37 := $Dereference($t19)->$admin;

    // $t38 := get_field<vesting::VestingContract>.staking($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:816:39+24
    assume {:print "$at(2,38275,38299)"} true;
    $t38 := $Dereference($t19)->$staking;

    // $t39 := get_field<vesting::StakingInfo>.pool_address($t38) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:816:39+37
    $t39 := $t38->$pool_address;

    // $t40 := get_field<vesting::VestingContract>.staking($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:817:68+24
    assume {:print "$at(2,38381,38405)"} true;
    $t40 := $Dereference($t19)->$staking;

    // $t41 := get_field<vesting::StakingInfo>.pool_address($t40) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:817:68+37
    $t41 := $t40->$pool_address;

    // $t42 := stake::get_lockup_secs($t41) on_abort goto L2 with $t20 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:817:45+61
    call $t42 := $1_stake_get_lockup_secs($t41);
    if ($abort_flag) {
        assume {:print "$at(2,38358,38419)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(60,19):", $t20} $t20 == $t20;
        goto L2;
    }

    // $t43 := pack vesting::ResetLockupEvent($t37, $t1, $t39, $t42) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:813:13+323
    assume {:print "$at(2,38111,38434)"} true;
    $t43 := $1_vesting_ResetLockupEvent($t37, $t1, $t39, $t42);

    // opaque begin: event::emit_event<vesting::ResetLockupEvent>($t36, $t43) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:811:9+413
    assume {:print "$at(2,38032,38445)"} true;

    // opaque end: event::emit_event<vesting::ResetLockupEvent>($t36, $t43) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:811:9+413

    // write_back[Reference($t19).reset_lockup_events (event::EventHandle<vesting::ResetLockupEvent>)]($t36) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:811:9+413
    $t19 := $UpdateMutation($t19, $Update'$1_vesting_VestingContract'_reset_lockup_events($Dereference($t19), $Dereference($t36)));

    // assert forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($t19)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t19)), addr)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:16:9+135
    // data invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:16:9+135
    assume {:print "$at(68,538,673)"} true;
    assert {:msg "assert_failed(68,538,673): data invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($Dereference($t19)->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($Dereference($t19)->$grant_pool->$shareholders, addr))));

    // assert forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t19)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t19)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t19)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t19)), j)), Eq<num>(i, j)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:20:9+129
    // data invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:20:9+129
    assume {:print "$at(68,738,867)"} true;
    assert {:msg "assert_failed(68,738,867): data invariant does not hold"}
      (var $range_0 := $Range(0, LenVec($Dereference($t19)->$grant_pool->$shareholders)); (var $range_1 := $Range(0, LenVec($Dereference($t19)->$grant_pool->$shareholders)); (forall $i_2: int, $i_3: int :: $InRange($range_0, $i_2) ==> $InRange($range_1, $i_3) ==> (var i := $i_2;
    (var j := $i_3;
    (($IsEqual'address'(ReadVec($Dereference($t19)->$grant_pool->$shareholders, i), ReadVec($Dereference($t19)->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j))))))));

    // write_back[vesting::VestingContract@]($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:811:9+413
    assume {:print "$at(2,38032,38445)"} true;
    $1_vesting_VestingContract_$memory := $ResourceUpdate($1_vesting_VestingContract_$memory, $GlobalLocationAddress($t19),
        $Dereference($t19));

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:820:5+1
    assume {:print "$at(2,38451,38452)"} true;
L1:

    // assume Identical($t44, global<staking_contract::Store>($t6)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:447:9+44
    assume {:print "$at(145,20646,20690)"} true;
    assume ($t44 == $ResourceValue($1_staking_contract_Store_$memory, $t6));

    // assume Identical($t45, simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t44), $t5)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:448:9+94
    assume {:print "$at(145,20699,20793)"} true;
    assume ($t45 == $1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($t44->$staking_contracts, $t5));

    // assume Identical($t46, global<stake::StakePool>(select stake::OwnerCapability.pool_address(select staking_contract::StakingContract.owner_cap($t45)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:449:9+98
    assume {:print "$at(145,20802,20900)"} true;
    assume ($t46 == $ResourceValue($1_stake_StakePool_$memory, $t45->$owner_cap->$pool_address));

    // assert Not(Not(exists[@99]<vesting::VestingContract>($t1))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:301:9+53
    assume {:print "$at(3,13099,13152)"} true;
    assert {:msg "assert_failed(3,13099,13152): function does not abort under this condition"}
      !!$ResourceExists($1_vesting_VestingContract_$memory#99, $t1);

    // assert Not(Neq<address>(signer::$address_of[]($t0), select vesting::VestingContract.admin($t4))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:303:9+62
    assume {:print "$at(3,13235,13297)"} true;
    assert {:msg "assert_failed(3,13235,13297): function does not abort under this condition"}
      !!$IsEqual'address'($1_signer_$address_of($t0), $t4->$admin);

    // assert Not(Not(exists[@100]<staking_contract::Store>($t6))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:379:9+33
    assume {:print "$at(145,17415,17448)"} true;
    assert {:msg "assert_failed(145,17415,17448): function does not abort under this condition"}
      !!$ResourceExists($1_staking_contract_Store_$memory#100, $t6);

    // assert Not(Not(simple_map::spec_contains_key[]<address, staking_contract::StakingContract>($t10, $t5))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:382:9+70
    assume {:print "$at(145,17573,17643)"} true;
    assert {:msg "assert_failed(145,17573,17643): function does not abort under this condition"}
      !!$1_simple_map_spec_contains_key'address_$1_staking_contract_StakingContract'($t10, $t5);

    // assert Not(Not(stake::$stake_pool_exists[@101]($t13))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:435:9+50
    assume {:print "$at(145,19808,19858)"} true;
    assert {:msg "assert_failed(145,19808,19858): function does not abort under this condition"}
      !!$1_stake_$stake_pool_exists($1_stake_StakePool_$memory#101, $t13);

    // assert Not(Not(exists[@102]<staking_config::StakingConfig>(0x1))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:436:9+67
    assume {:print "$at(145,19867,19934)"} true;
    assert {:msg "assert_failed(145,19867,19934): function does not abort under this condition"}
      !!$ResourceExists($1_staking_config_StakingConfig_$memory#102, 1);

    // assert Not(Gt(Add($t17, select staking_config::StakingConfig.recurring_lockup_duration_secs($t14)), 18446744073709551615)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:443:9+68
    assume {:print "$at(145,20372,20440)"} true;
    assert {:msg "assert_failed(145,20372,20440): function does not abort under this condition"}
      !(($t17 + $t14->$recurring_lockup_duration_secs) > 18446744073709551615);

    // assert Not(Or(Gt($t16, $t18), Eq<u64>($t16, $t18))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:444:9+106
    assume {:print "$at(145,20449,20555)"} true;
    assert {:msg "assert_failed(145,20449,20555): function does not abort under this condition"}
      !(($t16 > $t18) || $IsEqual'u64'($t16, $t18));

    // assert Not(Not(exists[@103]<timestamp::CurrentTimeMicroseconds>(0x1))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:445:9+72
    assume {:print "$at(145,20564,20636)"} true;
    assert {:msg "assert_failed(145,20564,20636): function does not abort under this condition"}
      !!$ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory#103, 1);

    // assert Not(Not(exists[@101]<stake::StakePool>(select vesting::StakingInfo.pool_address(select vesting::VestingContract.staking($t4))))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:314:9+75
    assume {:print "$at(3,13803,13878)"} true;
    assert {:msg "assert_failed(3,13803,13878): function does not abort under this condition"}
      !!$ResourceExists($1_stake_StakePool_$memory#101, $t4->$staking->$pool_address);

    // assert Eq<u64>(select stake::StakePool.locked_until_secs($t46), $t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:450:9+67
    assume {:print "$at(145,20909,20976)"} true;
    assert {:msg "assert_failed(145,20909,20976): post-condition does not hold"}
      $IsEqual'u64'($t46->$locked_until_secs, $t18);

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:450:9+67
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:820:5+1
    assume {:print "$at(2,38451,38452)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@99]<vesting::VestingContract>($t1)), Neq<address>(signer::$address_of[]($t0), select vesting::VestingContract.admin($t4))), Not(exists[@100]<staking_contract::Store>($t6))), Not(simple_map::spec_contains_key[]<address, staking_contract::StakingContract>($t10, $t5))), Not(stake::$stake_pool_exists[@101]($t13))), Not(exists[@102]<staking_config::StakingConfig>(0x1))), Gt(Add($t17, select staking_config::StakingConfig.recurring_lockup_duration_secs($t14)), 18446744073709551615)), Or(Gt($t16, $t18), Eq<u64>($t16, $t18))), Not(exists[@103]<timestamp::CurrentTimeMicroseconds>(0x1))), Not(exists[@101]<stake::StakePool>(select vesting::StakingInfo.pool_address(select vesting::VestingContract.staking($t4))))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:297:5+879
    assume {:print "$at(3,13005,13884)"} true;
    assert {:msg "assert_failed(3,13005,13884): abort not covered by any of the `aborts_if` clauses"}
      (((((((((!$ResourceExists($1_vesting_VestingContract_$memory#99, $t1) || !$IsEqual'address'($1_signer_$address_of($t0), $t4->$admin)) || !$ResourceExists($1_staking_contract_Store_$memory#100, $t6)) || !$1_simple_map_spec_contains_key'address_$1_staking_contract_StakingContract'($t10, $t5)) || !$1_stake_$stake_pool_exists($1_stake_StakePool_$memory#101, $t13)) || !$ResourceExists($1_staking_config_StakingConfig_$memory#102, 1)) || (($t17 + $t14->$recurring_lockup_duration_secs) > 18446744073709551615)) || (($t16 > $t18) || $IsEqual'u64'($t16, $t18))) || !$ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory#103, 1)) || !$ResourceExists($1_stake_StakePool_$memory#101, $t4->$staking->$pool_address));

    // abort($t20) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:297:5+879
    $abort_code := $t20;
    $abort_flag := true;
    return;

}

// fun vesting::stake_pool_address [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:251:5+258
procedure {:timeLimit 40} $1_vesting_stake_pool_address$verify(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: $1_vesting_VestingContract;
    var $t3: $1_vesting_StakingInfo;
    var $t4: int;
    var $t0: int;
    var $temp_0'address': int;
    var $1_vesting_VestingContract_$memory#32: $Memory $1_vesting_VestingContract;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:251:5+1
    assume {:print "$at(2,11140,11141)"} true;
    assume $IsValid'address'($t0);

    // assume forall $rsc: vesting::VestingContract: ResourceDomain<vesting::VestingContract>(): And(WellFormed($rsc), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($rsc)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:251:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_VestingContract_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_VestingContract_$memory, $a_0);
    (($IsValid'$1_vesting_VestingContract'($rsc) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($rsc->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($rsc->$grant_pool->$shareholders, addr)))) && (var $range_1 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (var $range_2 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'(ReadVec($rsc->$grant_pool->$shareholders, i), ReadVec($rsc->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j)))))))))))));

    // @32 := save_mem(vesting::VestingContract) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:251:5+1
    $1_vesting_VestingContract_$memory#32 := $1_vesting_VestingContract_$memory;

    // trace_local[vesting_contract_address]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:251:5+1
    assume {:print "$track_local(60,26,0):", $t0} $t0 == $t0;

    // vesting::assert_vesting_contract_exists($t0) on_abort goto L2 with $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:252:9+56
    assume {:print "$at(2,11249,11305)"} true;
    call $1_vesting_assert_vesting_contract_exists($t0);
    if ($abort_flag) {
        assume {:print "$at(2,11249,11305)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(60,26):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := get_global<vesting::VestingContract>($t0) on_abort goto L2 with $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:253:9+13
    assume {:print "$at(2,11315,11328)"} true;
    if (!$ResourceExists($1_vesting_VestingContract_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t2 := $ResourceValue($1_vesting_VestingContract_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(2,11315,11328)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(60,26):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t3 := get_field<vesting::VestingContract>.staking($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:253:9+64
    $t3 := $t2->$staking;

    // $t4 := get_field<vesting::StakingInfo>.pool_address($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:253:9+77
    $t4 := $t3->$pool_address;

    // trace_return[0]($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:253:9+77
    assume {:print "$track_return(60,26,0):", $t4} $t4 == $t4;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:254:5+1
    assume {:print "$at(2,11397,11398)"} true;
L1:

    // assert Not(Not(exists[@32]<vesting::VestingContract>($t0))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:8:9+61
    assume {:print "$at(3,205,266)"} true;
    assert {:msg "assert_failed(3,205,266): function does not abort under this condition"}
      !!$ResourceExists($1_vesting_VestingContract_$memory#32, $t0);

    // return $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:8:9+61
    $ret0 := $t4;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:254:5+1
    assume {:print "$at(2,11397,11398)"} true;
L2:

    // assert Not(exists[@32]<vesting::VestingContract>($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:7:5+145
    assume {:print "$at(3,127,272)"} true;
    assert {:msg "assert_failed(3,127,272): abort not covered by any of the `aborts_if` clauses"}
      !$ResourceExists($1_vesting_VestingContract_$memory#32, $t0);

    // abort($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:7:5+145
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun vesting::update_voter [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:778:5+956
procedure {:timeLimit 40} $1_vesting_update_voter$verify(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: $signer;
    var $t4: $signer;
    var $t5: int;
    var $t6: $Mutation ($1_vesting_VestingContract);
    var $t7: $1_vesting_VestingContract;
    var $t8: int;
    var $t9: int;
    var $t10: $1_vesting_VestingContract;
    var $t11: $1_staking_contract_Store;
    var $t12: $1_staking_contract_StakingContract;
    var $t13: int;
    var $t14: Table int ($1_staking_contract_StakingContract);
    var $t15: $Mutation ($1_vesting_VestingContract);
    var $t16: int;
    var $t17: $1_vesting_VestingContract;
    var $t18: $1_vesting_VestingContract;
    var $t19: $signer;
    var $t20: $1_vesting_StakingInfo;
    var $t21: int;
    var $t22: $1_vesting_StakingInfo;
    var $t23: int;
    var $t24: int;
    var $t25: $1_staking_contract_Store;
    var $t26: $1_staking_contract_StakingContract;
    var $t27: int;
    var $t28: Table int ($1_staking_contract_StakingContract);
    var $t29: $Mutation ($1_vesting_StakingInfo);
    var $t30: $Mutation (int);
    var $t31: $Mutation ($1_event_EventHandle'$1_vesting_UpdateVoterEvent');
    var $t32: int;
    var $t33: $1_vesting_StakingInfo;
    var $t34: int;
    var $t35: $1_vesting_UpdateVoterEvent;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'$1_vesting_VestingContract': $1_vesting_VestingContract;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $1_vesting_VestingContract_$memory#105: $Memory $1_vesting_VestingContract;
    var $1_stake_StakePool_$memory#106: $Memory $1_stake_StakePool;
    var $1_staking_contract_Store_$memory#107: $Memory $1_staking_contract_Store;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:778:5+1
    assume {:print "$at(2,36628,36629)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:778:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:778:5+1
    assume $IsValid'address'($t2);

    // assume forall $rsc: stake::OwnerCapability: ResourceDomain<stake::OwnerCapability>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:778:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_OwnerCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_OwnerCapability_$memory, $a_0);
    ($IsValid'$1_stake_OwnerCapability'($rsc))));

    // assume forall $rsc: stake::StakePool: ResourceDomain<stake::StakePool>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:778:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_StakePool_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_StakePool_$memory, $a_0);
    ($IsValid'$1_stake_StakePool'($rsc))));

    // assume forall $rsc: stake::ValidatorConfig: ResourceDomain<stake::ValidatorConfig>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:778:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorConfig_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorConfig'($rsc))));

    // assume forall $rsc: stake::ValidatorPerformance: ResourceDomain<stake::ValidatorPerformance>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:778:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorPerformance'($rsc))));

    // assume forall $rsc: stake::ValidatorSet: ResourceDomain<stake::ValidatorSet>(): And(WellFormed($rsc), Eq<u8>(select stake::ValidatorSet.consensus_scheme($rsc), 0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:778:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorSet_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorSet_$memory, $a_0);
    (($IsValid'$1_stake_ValidatorSet'($rsc) && $IsEqual'u8'($rsc->$consensus_scheme, 0)))));

    // assume forall $rsc: staking_contract::Store: ResourceDomain<staking_contract::Store>(): And(WellFormed($rsc), forall $key: address: select staking_contract::Store.staking_contracts($rsc): And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), i), Index(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:778:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_staking_contract_Store_$memory, $a_0)}(var $rsc := $ResourceValue($1_staking_contract_Store_$memory, $a_0);
    (($IsValid'$1_staking_contract_Store'($rsc) && (var $range_1 := $rsc->$staking_contracts; (forall $key: int :: ContainsTable($range_1, $EncodeKey'address'($key)) ==> (((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shares, addr), $1_vector_spec_contains'address'($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, addr)))) && (var $range_2 := $Range(0, LenVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders)); (var $range_3 := $Range(0, LenVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders)); (forall $i_4: int, $i_5: int :: $InRange($range_2, $i_4) ==> $InRange($range_3, $i_5) ==> (var i := $i_4;
    (var j := $i_5;
    (($IsEqual'address'(ReadVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, i), ReadVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, j)) ==> $IsEqual'num'(i, j))))))))))))))));

    // assume forall $rsc: vesting::VestingContract: ResourceDomain<vesting::VestingContract>(): And(WellFormed($rsc), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($rsc)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:778:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_VestingContract_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_VestingContract_$memory, $a_0);
    (($IsValid'$1_vesting_VestingContract'($rsc) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($rsc->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($rsc->$grant_pool->$shareholders, addr)))) && (var $range_1 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (var $range_2 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'(ReadVec($rsc->$grant_pool->$shareholders, i), ReadVec($rsc->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j)))))))))))));

    // assume Implies(exists<stake::ValidatorSet>(0x1), stake::validator_set_is_valid()) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:778:5+956
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:8:9+92
    assume ($ResourceExists($1_stake_ValidatorSet_$memory, 1) ==> $1_stake_validator_set_is_valid($1_stake_StakePool_$memory, $1_stake_ValidatorConfig_$memory, $1_stake_ValidatorPerformance_$memory, $1_stake_ValidatorSet_$memory));

    // assume Identical($t7, global<vesting::VestingContract>($t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:290:9+65
    assume {:print "$at(3,12758,12823)"} true;
    assume ($t7 == $ResourceValue($1_vesting_VestingContract_$memory, $t1));

    // assume Identical($t8, select vesting::StakingInfo.operator(select vesting::VestingContract.staking($t7))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:291:9+49
    assume {:print "$at(3,12832,12881)"} true;
    assume ($t8 == $t7->$staking->$operator);

    // assume Identical($t9, select account::SignerCapability.account(select vesting::VestingContract.signer_cap($t7))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:292:9+49
    assume {:print "$at(3,12890,12939)"} true;
    assume ($t9 == $t7->$signer_cap->$account);

    // assume Identical($t10, global<vesting::VestingContract>($t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:525:9+65
    assume {:print "$at(3,23419,23484)"} true;
    assume ($t10 == $ResourceValue($1_vesting_VestingContract_$memory, $t1));

    // assume Identical($t11, global<staking_contract::Store>($t9)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:389:9+34
    assume {:print "$at(145,17748,17782)"} true;
    assume ($t11 == $ResourceValue($1_staking_contract_Store_$memory, $t9));

    // assume Identical($t12, simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t11), $t8)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:390:9+79
    assume {:print "$at(145,17791,17870)"} true;
    assume ($t12 == $1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($t11->$staking_contracts, $t8));

    // assume Identical($t13, select staking_contract::StakingContract.pool_address($t12)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:391:9+49
    assume {:print "$at(145,17879,17928)"} true;
    assume ($t13 == $t12->$pool_address);

    // assume Identical($t14, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t9))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:380:9+64
    assume {:print "$at(145,17457,17521)"} true;
    assume ($t14 == $ResourceValue($1_staking_contract_Store_$memory, $t9)->$staking_contracts);

    // @106 := save_mem(stake::StakePool) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:778:5+1
    assume {:print "$at(2,36628,36629)"} true;
    $1_stake_StakePool_$memory#106 := $1_stake_StakePool_$memory;

    // @107 := save_mem(staking_contract::Store) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:778:5+1
    $1_staking_contract_Store_$memory#107 := $1_staking_contract_Store_$memory;

    // @105 := save_mem(vesting::VestingContract) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:778:5+1
    $1_vesting_VestingContract_$memory#105 := $1_vesting_VestingContract_$memory;

    // trace_local[admin]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:778:5+1
    assume {:print "$track_local(60,35,0):", $t0} $t0 == $t0;

    // trace_local[contract_address]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:778:5+1
    assume {:print "$track_local(60,35,1):", $t1} $t1 == $t1;

    // trace_local[new_voter]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:778:5+1
    assume {:print "$track_local(60,35,2):", $t2} $t2 == $t2;

    // $t15 := borrow_global<vesting::VestingContract>($t1) on_abort goto L2 with $t16 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:783:32+17
    assume {:print "$at(2,36810,36827)"} true;
    if (!$ResourceExists($1_vesting_VestingContract_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t15 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_vesting_VestingContract_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(2,36810,36827)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(60,35):", $t16} $t16 == $t16;
        goto L2;
    }

    // trace_local[vesting_contract]($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:783:13+16
    $temp_0'$1_vesting_VestingContract' := $Dereference($t15);
    assume {:print "$track_local(60,35,6):", $temp_0'$1_vesting_VestingContract'} $temp_0'$1_vesting_VestingContract' == $temp_0'$1_vesting_VestingContract';

    // $t17 := read_ref($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:784:21+25
    assume {:print "$at(2,36884,36909)"} true;
    $t17 := $Dereference($t15);

    // vesting::verify_admin($t0, $t17) on_abort goto L2 with $t16 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:784:9+37
    call $1_vesting_verify_admin($t0, $t17);
    if ($abort_flag) {
        assume {:print "$at(2,36872,36909)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(60,35):", $t16} $t16 == $t16;
        goto L2;
    }

    // $t18 := read_ref($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:785:68+16
    assume {:print "$at(2,36978,36994)"} true;
    $t18 := $Dereference($t15);

    // $t19 := vesting::get_vesting_account_signer_internal($t18) on_abort goto L2 with $t16 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:785:32+53
    call $t19 := $1_vesting_get_vesting_account_signer_internal($t18);
    if ($abort_flag) {
        assume {:print "$at(2,36942,36995)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(60,35):", $t16} $t16 == $t16;
        goto L2;
    }

    // trace_local[contract_signer]($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:785:13+15
    assume {:print "$track_local(60,35,4):", $t19} $t19 == $t19;

    // $t20 := get_field<vesting::VestingContract>.staking($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:786:25+24
    assume {:print "$at(2,37021,37045)"} true;
    $t20 := $Dereference($t15)->$staking;

    // $t21 := get_field<vesting::StakingInfo>.voter($t20) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:786:25+30
    $t21 := $t20->$voter;

    // trace_local[old_voter]($t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:786:13+9
    assume {:print "$track_local(60,35,5):", $t21} $t21 == $t21;

    // $t22 := get_field<vesting::VestingContract>.staking($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:787:57+24
    assume {:print "$at(2,37109,37133)"} true;
    $t22 := $Dereference($t15)->$staking;

    // $t23 := get_field<vesting::StakingInfo>.operator($t22) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:787:57+33
    $t23 := $t22->$operator;

    // assume Identical($t24, signer::$address_of($t19)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:147:9+48
    assume {:print "$at(145,6648,6696)"} true;
    assume ($t24 == $1_signer_$address_of($t19));

    // assume Identical($t25, global<staking_contract::Store>($t24)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:389:9+34
    assume {:print "$at(145,17748,17782)"} true;
    assume ($t25 == $ResourceValue($1_staking_contract_Store_$memory, $t24));

    // assume Identical($t26, simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t25), $t23)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:390:9+79
    assume {:print "$at(145,17791,17870)"} true;
    assume ($t26 == $1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($t25->$staking_contracts, $t23));

    // assume Identical($t27, select staking_contract::StakingContract.pool_address($t26)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:391:9+49
    assume {:print "$at(145,17879,17928)"} true;
    assume ($t27 == $t26->$pool_address);

    // assume Identical($t28, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t24))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:380:9+64
    assume {:print "$at(145,17457,17521)"} true;
    assume ($t28 == $ResourceValue($1_staking_contract_Store_$memory, $t24)->$staking_contracts);

    // staking_contract::update_voter($t19, $t23, $t2) on_abort goto L2 with $t16 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:787:9+93
    assume {:print "$at(2,37061,37154)"} true;
    call $1_staking_contract_update_voter($t19, $t23, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,37061,37154)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(60,35):", $t16} $t16 == $t16;
        goto L2;
    }

    // $t29 := borrow_field<vesting::VestingContract>.staking($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:788:9+24
    assume {:print "$at(2,37164,37188)"} true;
    $t29 := $ChildMutation($t15, 6, $Dereference($t15)->$staking);

    // $t30 := borrow_field<vesting::StakingInfo>.voter($t29) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:788:9+30
    $t30 := $ChildMutation($t29, 2, $Dereference($t29)->$voter);

    // write_ref($t30, $t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:788:9+42
    $t30 := $UpdateMutation($t30, $t2);

    // write_back[Reference($t29).voter (address)]($t30) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:788:9+42
    $t29 := $UpdateMutation($t29, $Update'$1_vesting_StakingInfo'_voter($Dereference($t29), $Dereference($t30)));

    // write_back[Reference($t15).staking (vesting::StakingInfo)]($t29) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:788:9+42
    $t15 := $UpdateMutation($t15, $Update'$1_vesting_VestingContract'_staking($Dereference($t15), $Dereference($t29)));

    // $t31 := borrow_field<vesting::VestingContract>.update_voter_events($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:791:13+41
    assume {:print "$at(2,37241,37282)"} true;
    $t31 := $ChildMutation($t15, 10, $Dereference($t15)->$update_voter_events);

    // $t32 := get_field<vesting::VestingContract>.admin($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:793:24+22
    assume {:print "$at(2,37338,37360)"} true;
    $t32 := $Dereference($t15)->$admin;

    // $t33 := get_field<vesting::VestingContract>.staking($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:795:39+24
    assume {:print "$at(2,37460,37484)"} true;
    $t33 := $Dereference($t15)->$staking;

    // $t34 := get_field<vesting::StakingInfo>.pool_address($t33) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:795:39+37
    $t34 := $t33->$pool_address;

    // $t35 := pack vesting::UpdateVoterEvent($t32, $t1, $t34, $t21, $t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:792:13+270
    assume {:print "$at(2,37296,37566)"} true;
    $t35 := $1_vesting_UpdateVoterEvent($t32, $t1, $t34, $t21, $t2);

    // opaque begin: event::emit_event<vesting::UpdateVoterEvent>($t31, $t35) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:790:9+360
    assume {:print "$at(2,37217,37577)"} true;

    // opaque end: event::emit_event<vesting::UpdateVoterEvent>($t31, $t35) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:790:9+360

    // write_back[Reference($t15).update_voter_events (event::EventHandle<vesting::UpdateVoterEvent>)]($t31) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:790:9+360
    $t15 := $UpdateMutation($t15, $Update'$1_vesting_VestingContract'_update_voter_events($Dereference($t15), $Dereference($t31)));

    // assert forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($t15)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t15)), addr)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:16:9+135
    // data invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:16:9+135
    assume {:print "$at(68,538,673)"} true;
    assert {:msg "assert_failed(68,538,673): data invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($Dereference($t15)->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($Dereference($t15)->$grant_pool->$shareholders, addr))));

    // assert forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t15)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t15)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t15)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t15)), j)), Eq<num>(i, j)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:20:9+129
    // data invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:20:9+129
    assume {:print "$at(68,738,867)"} true;
    assert {:msg "assert_failed(68,738,867): data invariant does not hold"}
      (var $range_0 := $Range(0, LenVec($Dereference($t15)->$grant_pool->$shareholders)); (var $range_1 := $Range(0, LenVec($Dereference($t15)->$grant_pool->$shareholders)); (forall $i_2: int, $i_3: int :: $InRange($range_0, $i_2) ==> $InRange($range_1, $i_3) ==> (var i := $i_2;
    (var j := $i_3;
    (($IsEqual'address'(ReadVec($Dereference($t15)->$grant_pool->$shareholders, i), ReadVec($Dereference($t15)->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j))))))));

    // write_back[vesting::VestingContract@]($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:790:9+360
    assume {:print "$at(2,37217,37577)"} true;
    $1_vesting_VestingContract_$memory := $ResourceUpdate($1_vesting_VestingContract_$memory, $GlobalLocationAddress($t15),
        $Dereference($t15));

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:800:5+1
    assume {:print "$at(2,37583,37584)"} true;
L1:

    // assert Not(Not(exists[@105]<vesting::VestingContract>($t1))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:524:9+53
    assume {:print "$at(3,23357,23410)"} true;
    assert {:msg "assert_failed(3,23357,23410): function does not abort under this condition"}
      !!$ResourceExists($1_vesting_VestingContract_$memory#105, $t1);

    // assert Not(Neq<address>(signer::$address_of[]($t0), select vesting::VestingContract.admin($t10))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:526:9+62
    assume {:print "$at(3,23493,23555)"} true;
    assert {:msg "assert_failed(3,23493,23555): function does not abort under this condition"}
      !!$IsEqual'address'($1_signer_$address_of($t0), $t10->$admin);

    // assert Not(Not(exists[@106]<stake::StakePool>($t13))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:392:9+50
    assume {:print "$at(145,17937,17987)"} true;
    assert {:msg "assert_failed(145,17937,17987): function does not abort under this condition"}
      !!$ResourceExists($1_stake_StakePool_$memory#106, $t13);

    // assert Not(Not(exists[@106]<stake::StakePool>(select stake::OwnerCapability.pool_address(select staking_contract::StakingContract.owner_cap($t12))))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:393:9+77
    assume {:print "$at(145,17996,18073)"} true;
    assert {:msg "assert_failed(145,17996,18073): function does not abort under this condition"}
      !!$ResourceExists($1_stake_StakePool_$memory#106, $t12->$owner_cap->$pool_address);

    // assert Not(Not(exists[@107]<staking_contract::Store>($t9))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:379:9+33
    assume {:print "$at(145,17415,17448)"} true;
    assert {:msg "assert_failed(145,17415,17448): function does not abort under this condition"}
      !!$ResourceExists($1_staking_contract_Store_$memory#107, $t9);

    // assert Not(Not(simple_map::spec_contains_key[]<address, staking_contract::StakingContract>($t14, $t8))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:382:9+70
    assume {:print "$at(145,17573,17643)"} true;
    assert {:msg "assert_failed(145,17573,17643): function does not abort under this condition"}
      !!$1_simple_map_spec_contains_key'address_$1_staking_contract_StakingContract'($t14, $t8);

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:382:9+70
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:800:5+1
    assume {:print "$at(2,37583,37584)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Not(exists[@105]<vesting::VestingContract>($t1)), Neq<address>(signer::$address_of[]($t0), select vesting::VestingContract.admin($t10))), Not(exists[@106]<stake::StakePool>($t13))), Not(exists[@106]<stake::StakePool>(select stake::OwnerCapability.pool_address(select staking_contract::StakingContract.owner_cap($t12))))), Not(exists[@107]<staking_contract::Store>($t9))), Not(simple_map::spec_contains_key[]<address, staking_contract::StakingContract>($t14, $t8))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:283:5+401
    assume {:print "$at(3,12598,12999)"} true;
    assert {:msg "assert_failed(3,12598,12999): abort not covered by any of the `aborts_if` clauses"}
      (((((!$ResourceExists($1_vesting_VestingContract_$memory#105, $t1) || !$IsEqual'address'($1_signer_$address_of($t0), $t10->$admin)) || !$ResourceExists($1_stake_StakePool_$memory#106, $t13)) || !$ResourceExists($1_stake_StakePool_$memory#106, $t12->$owner_cap->$pool_address)) || !$ResourceExists($1_staking_contract_Store_$memory#107, $t9)) || !$1_simple_map_spec_contains_key'address_$1_staking_contract_StakingContract'($t14, $t8));

    // abort($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:283:5+401
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun vesting::assert_active_vesting_contract [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:968:5+349
procedure {:inline 1} $1_vesting_assert_active_vesting_contract(_$t0: int) returns ()
{
    // declare local variables
    var $t1: $1_vesting_VestingContract;
    var $t2: int;
    var $t3: $1_vesting_VestingContract;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t0: int;
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t1, global<vesting::VestingContract>($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:532:9+65
    assume {:print "$at(3,23733,23798)"} true;
    assume ($t1 == $ResourceValue($1_vesting_VestingContract_$memory, $t0));

    // trace_local[contract_address]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:968:5+1
    assume {:print "$at(2,45141,45142)"} true;
    assume {:print "$track_local(60,2,0):", $t0} $t0 == $t0;

    // vesting::assert_vesting_contract_exists($t0) on_abort goto L4 with $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:969:9+48
    assume {:print "$at(2,45238,45286)"} true;
    call $1_vesting_assert_vesting_contract_exists($t0);
    if ($abort_flag) {
        assume {:print "$at(2,45238,45286)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(60,2):", $t2} $t2 == $t2;
        goto L4;
    }

    // $t3 := get_global<vesting::VestingContract>($t0) on_abort goto L4 with $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:970:32+13
    assume {:print "$at(2,45319,45332)"} true;
    if (!$ResourceExists($1_vesting_VestingContract_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t3 := $ResourceValue($1_vesting_VestingContract_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(2,45319,45332)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(60,2):", $t2} $t2 == $t2;
        goto L4;
    }

    // $t4 := get_field<vesting::VestingContract>.state($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:971:17+22
    assume {:print "$at(2,45385,45407)"} true;
    $t4 := $t3->$state;

    // $t5 := 1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:971:43+19
    $t5 := 1;
    assume $IsValid'u64'($t5);

    // $t6 := ==($t4, $t5) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:971:40+2
    $t6 := $IsEqual'u64'($t4, $t5);

    // if ($t6) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:971:9+106
    if ($t6) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:971:9+106
L1:

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:971:9+106
    assume {:print "$at(2,45377,45483)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:971:85+28
L0:

    // $t7 := 8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:971:85+28
    assume {:print "$at(2,45453,45481)"} true;
    $t7 := 8;
    assume $IsValid'u64'($t7);

    // $t8 := error::invalid_state($t7) on_abort goto L4 with $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:971:64+50
    call $t8 := $1_error_invalid_state($t7);
    if ($abort_flag) {
        assume {:print "$at(2,45432,45482)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(60,2):", $t2} $t2 == $t2;
        goto L4;
    }

    // trace_abort($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:971:9+106
    assume {:print "$at(2,45377,45483)"} true;
    assume {:print "$track_abort(60,2):", $t8} $t8 == $t8;

    // $t2 := move($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:971:9+106
    $t2 := $t8;

    // goto L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:971:9+106
    goto L4;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:971:115+1
L2:

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:972:5+1
    assume {:print "$at(2,45489,45490)"} true;
L3:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:972:5+1
    assume {:print "$at(2,45489,45490)"} true;
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:972:5+1
L4:

    // abort($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:972:5+1
    assume {:print "$at(2,45489,45490)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun vesting::assert_active_vesting_contract [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:968:5+349
procedure {:timeLimit 40} $1_vesting_assert_active_vesting_contract$verify(_$t0: int) returns ()
{
    // declare local variables
    var $t1: $1_vesting_VestingContract;
    var $t2: int;
    var $t3: $1_vesting_VestingContract;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t0: int;
    var $temp_0'address': int;
    var $1_vesting_VestingContract_$memory#38: $Memory $1_vesting_VestingContract;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:968:5+1
    assume {:print "$at(2,45141,45142)"} true;
    assume $IsValid'address'($t0);

    // assume forall $rsc: vesting::VestingContract: ResourceDomain<vesting::VestingContract>(): And(WellFormed($rsc), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($rsc)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:968:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_VestingContract_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_VestingContract_$memory, $a_0);
    (($IsValid'$1_vesting_VestingContract'($rsc) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($rsc->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($rsc->$grant_pool->$shareholders, addr)))) && (var $range_1 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (var $range_2 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'(ReadVec($rsc->$grant_pool->$shareholders, i), ReadVec($rsc->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j)))))))))))));

    // assume Identical($t1, global<vesting::VestingContract>($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:532:9+65
    assume {:print "$at(3,23733,23798)"} true;
    assume ($t1 == $ResourceValue($1_vesting_VestingContract_$memory, $t0));

    // @38 := save_mem(vesting::VestingContract) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:968:5+1
    assume {:print "$at(2,45141,45142)"} true;
    $1_vesting_VestingContract_$memory#38 := $1_vesting_VestingContract_$memory;

    // trace_local[contract_address]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:968:5+1
    assume {:print "$track_local(60,2,0):", $t0} $t0 == $t0;

    // vesting::assert_vesting_contract_exists($t0) on_abort goto L4 with $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:969:9+48
    assume {:print "$at(2,45238,45286)"} true;
    call $1_vesting_assert_vesting_contract_exists($t0);
    if ($abort_flag) {
        assume {:print "$at(2,45238,45286)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(60,2):", $t2} $t2 == $t2;
        goto L4;
    }

    // $t3 := get_global<vesting::VestingContract>($t0) on_abort goto L4 with $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:970:32+13
    assume {:print "$at(2,45319,45332)"} true;
    if (!$ResourceExists($1_vesting_VestingContract_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t3 := $ResourceValue($1_vesting_VestingContract_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(2,45319,45332)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(60,2):", $t2} $t2 == $t2;
        goto L4;
    }

    // $t4 := get_field<vesting::VestingContract>.state($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:971:17+22
    assume {:print "$at(2,45385,45407)"} true;
    $t4 := $t3->$state;

    // $t5 := 1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:971:43+19
    $t5 := 1;
    assume $IsValid'u64'($t5);

    // $t6 := ==($t4, $t5) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:971:40+2
    $t6 := $IsEqual'u64'($t4, $t5);

    // if ($t6) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:971:9+106
    if ($t6) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:971:9+106
L1:

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:971:9+106
    assume {:print "$at(2,45377,45483)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:971:85+28
L0:

    // $t7 := 8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:971:85+28
    assume {:print "$at(2,45453,45481)"} true;
    $t7 := 8;
    assume $IsValid'u64'($t7);

    // $t8 := error::invalid_state($t7) on_abort goto L4 with $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:971:64+50
    call $t8 := $1_error_invalid_state($t7);
    if ($abort_flag) {
        assume {:print "$at(2,45432,45482)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(60,2):", $t2} $t2 == $t2;
        goto L4;
    }

    // trace_abort($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:971:9+106
    assume {:print "$at(2,45377,45483)"} true;
    assume {:print "$track_abort(60,2):", $t8} $t8 == $t8;

    // $t2 := move($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:971:9+106
    $t2 := $t8;

    // goto L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:971:9+106
    goto L4;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:971:115+1
L2:

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:972:5+1
    assume {:print "$at(2,45489,45490)"} true;
L3:

    // assert Not(Not(exists[@38]<vesting::VestingContract>($t0))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:531:9+53
    assume {:print "$at(3,23671,23724)"} true;
    assert {:msg "assert_failed(3,23671,23724): function does not abort under this condition"}
      !!$ResourceExists($1_vesting_VestingContract_$memory#38, $t0);

    // assert Not(Neq<u64>(select vesting::VestingContract.state($t1), 1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:533:9+56
    assume {:print "$at(3,23807,23863)"} true;
    assert {:msg "assert_failed(3,23807,23863): function does not abort under this condition"}
      !!$IsEqual'u64'($t1->$state, 1);

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:533:9+56
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:972:5+1
    assume {:print "$at(2,45489,45490)"} true;
L4:

    // assert Or(Not(exists[@38]<vesting::VestingContract>($t0)), Neq<u64>(select vesting::VestingContract.state($t1), 1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:434:5+134
    assume {:print "$at(3,18903,19037)"} true;
    assert {:msg "assert_failed(3,18903,19037): abort not covered by any of the `aborts_if` clauses"}
      (!$ResourceExists($1_vesting_VestingContract_$memory#38, $t0) || !$IsEqual'u64'($t1->$state, 1));

    // abort($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:434:5+134
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun vesting::assert_vesting_contract_exists [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:964:5+176
procedure {:inline 1} $1_vesting_assert_vesting_contract_exists(_$t0: int) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t0: int;
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[contract_address]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:964:5+1
    assume {:print "$at(2,44959,44960)"} true;
    assume {:print "$track_local(60,3,0):", $t0} $t0 == $t0;

    // $t1 := exists<vesting::VestingContract>($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:965:17+6
    assume {:print "$at(2,45039,45045)"} true;
    $t1 := $ResourceExists($1_vesting_VestingContract_$memory, $t0);

    // if ($t1) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:965:9+97
    if ($t1) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:965:9+97
L1:

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:965:9+97
    assume {:print "$at(2,45031,45128)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:965:77+27
L0:

    // $t2 := 10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:965:77+27
    assume {:print "$at(2,45099,45126)"} true;
    $t2 := 10;
    assume $IsValid'u64'($t2);

    // $t3 := error::not_found($t2) on_abort goto L4 with $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:965:60+45
    call $t3 := $1_error_not_found($t2);
    if ($abort_flag) {
        assume {:print "$at(2,45082,45127)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(60,3):", $t4} $t4 == $t4;
        goto L4;
    }

    // trace_abort($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:965:9+97
    assume {:print "$at(2,45031,45128)"} true;
    assume {:print "$track_abort(60,3):", $t3} $t3 == $t3;

    // $t4 := move($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:965:9+97
    $t4 := $t3;

    // goto L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:965:9+97
    goto L4;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:965:106+1
L2:

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:966:5+1
    assume {:print "$at(2,45134,45135)"} true;
L3:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:966:5+1
    assume {:print "$at(2,45134,45135)"} true;
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:966:5+1
L4:

    // abort($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:966:5+1
    assume {:print "$at(2,45134,45135)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun vesting::assert_vesting_contract_exists [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:964:5+176
procedure {:timeLimit 40} $1_vesting_assert_vesting_contract_exists$verify(_$t0: int) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t0: int;
    var $temp_0'address': int;
    var $1_vesting_VestingContract_$memory#20: $Memory $1_vesting_VestingContract;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:964:5+1
    assume {:print "$at(2,44959,44960)"} true;
    assume $IsValid'address'($t0);

    // assume forall $rsc: vesting::VestingContract: ResourceDomain<vesting::VestingContract>(): And(WellFormed($rsc), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($rsc)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:964:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_VestingContract_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_VestingContract_$memory, $a_0);
    (($IsValid'$1_vesting_VestingContract'($rsc) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($rsc->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($rsc->$grant_pool->$shareholders, addr)))) && (var $range_1 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (var $range_2 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'(ReadVec($rsc->$grant_pool->$shareholders, i), ReadVec($rsc->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j)))))))))))));

    // @20 := save_mem(vesting::VestingContract) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:964:5+1
    $1_vesting_VestingContract_$memory#20 := $1_vesting_VestingContract_$memory;

    // trace_local[contract_address]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:964:5+1
    assume {:print "$track_local(60,3,0):", $t0} $t0 == $t0;

    // $t1 := exists<vesting::VestingContract>($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:965:17+6
    assume {:print "$at(2,45039,45045)"} true;
    $t1 := $ResourceExists($1_vesting_VestingContract_$memory, $t0);

    // if ($t1) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:965:9+97
    if ($t1) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:965:9+97
L1:

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:965:9+97
    assume {:print "$at(2,45031,45128)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:965:77+27
L0:

    // $t2 := 10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:965:77+27
    assume {:print "$at(2,45099,45126)"} true;
    $t2 := 10;
    assume $IsValid'u64'($t2);

    // $t3 := error::not_found($t2) on_abort goto L4 with $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:965:60+45
    call $t3 := $1_error_not_found($t2);
    if ($abort_flag) {
        assume {:print "$at(2,45082,45127)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(60,3):", $t4} $t4 == $t4;
        goto L4;
    }

    // trace_abort($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:965:9+97
    assume {:print "$at(2,45031,45128)"} true;
    assume {:print "$track_abort(60,3):", $t3} $t3 == $t3;

    // $t4 := move($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:965:9+97
    $t4 := $t3;

    // goto L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:965:9+97
    goto L4;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:965:106+1
L2:

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:966:5+1
    assume {:print "$at(2,45134,45135)"} true;
L3:

    // assert Not(Not(exists[@20]<vesting::VestingContract>($t0))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:431:9+53
    assume {:print "$at(3,18838,18891)"} true;
    assert {:msg "assert_failed(3,18838,18891): function does not abort under this condition"}
      !!$ResourceExists($1_vesting_VestingContract_$memory#20, $t0);

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:431:9+53
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:966:5+1
    assume {:print "$at(2,45134,45135)"} true;
L4:

    // assert Not(exists[@20]<vesting::VestingContract>($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:430:5+132
    assume {:print "$at(3,18765,18897)"} true;
    assert {:msg "assert_failed(3,18765,18897): abort not covered by any of the `aborts_if` clauses"}
      !$ResourceExists($1_vesting_VestingContract_$memory#20, $t0);

    // abort($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:430:5+132
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun vesting::beneficiary [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:293:5+282
procedure {:timeLimit 40} $1_vesting_beneficiary$verify(_$t0: int, _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: $1_vesting_VestingContract;
    var $t4: int;
    var $t0: int;
    var $t1: int;
    var $temp_0'address': int;
    var $1_vesting_VestingContract_$memory#92: $Memory $1_vesting_VestingContract;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:293:5+1
    assume {:print "$at(2,13591,13592)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:293:5+1
    assume $IsValid'address'($t1);

    // assume forall $rsc: vesting::VestingContract: ResourceDomain<vesting::VestingContract>(): And(WellFormed($rsc), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($rsc)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:293:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_VestingContract_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_VestingContract_$memory, $a_0);
    (($IsValid'$1_vesting_VestingContract'($rsc) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($rsc->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($rsc->$grant_pool->$shareholders, addr)))) && (var $range_1 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (var $range_2 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'(ReadVec($rsc->$grant_pool->$shareholders, i), ReadVec($rsc->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j)))))))))))));

    // @92 := save_mem(vesting::VestingContract) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:293:5+1
    $1_vesting_VestingContract_$memory#92 := $1_vesting_VestingContract_$memory;

    // trace_local[vesting_contract_address]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:293:5+1
    assume {:print "$track_local(60,4,0):", $t0} $t0 == $t0;

    // trace_local[shareholder]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:293:5+1
    assume {:print "$track_local(60,4,1):", $t1} $t1 == $t1;

    // vesting::assert_vesting_contract_exists($t0) on_abort goto L2 with $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:294:9+56
    assume {:print "$at(2,13715,13771)"} true;
    call $1_vesting_assert_vesting_contract_exists($t0);
    if ($abort_flag) {
        assume {:print "$at(2,13715,13771)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(60,4):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_global<vesting::VestingContract>($t0) on_abort goto L2 with $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:295:25+13
    assume {:print "$at(2,13797,13810)"} true;
    if (!$ResourceExists($1_vesting_VestingContract_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t3 := $ResourceValue($1_vesting_VestingContract_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(2,13797,13810)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(60,4):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t4 := vesting::get_beneficiary($t3, $t1) on_abort goto L2 with $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:295:9+86
    call $t4 := $1_vesting_get_beneficiary($t3, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,13781,13867)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(60,4):", $t2} $t2 == $t2;
        goto L2;
    }

    // trace_return[0]($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:295:9+86
    assume {:print "$track_return(60,4,0):", $t4} $t4 == $t4;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:296:5+1
    assume {:print "$at(2,13872,13873)"} true;
L1:

    // assert Not(Not(exists[@92]<vesting::VestingContract>($t0))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:24:9+61
    assume {:print "$at(3,811,872)"} true;
    assert {:msg "assert_failed(3,811,872): function does not abort under this condition"}
      !!$ResourceExists($1_vesting_VestingContract_$memory#92, $t0);

    // return $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:24:9+61
    $ret0 := $t4;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:296:5+1
    assume {:print "$at(2,13872,13873)"} true;
L2:

    // assert Not(exists[@92]<vesting::VestingContract>($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:23:5+160
    assume {:print "$at(3,718,878)"} true;
    assert {:msg "assert_failed(3,718,878): abort not covered by any of the `aborts_if` clauses"}
      !$ResourceExists($1_vesting_VestingContract_$memory#92, $t0);

    // abort($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:23:5+160
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun vesting::vesting_schedule [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:346:5+260
procedure {:timeLimit 40} $1_vesting_vesting_schedule$verify(_$t0: int) returns ($ret0: $1_vesting_VestingSchedule)
{
    // declare local variables
    var $t1: int;
    var $t2: $1_vesting_VestingContract;
    var $t3: $1_vesting_VestingSchedule;
    var $t0: int;
    var $temp_0'$1_vesting_VestingSchedule': $1_vesting_VestingSchedule;
    var $temp_0'address': int;
    var $1_vesting_VestingContract_$memory#31: $Memory $1_vesting_VestingContract;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:346:5+1
    assume {:print "$at(2,16253,16254)"} true;
    assume $IsValid'address'($t0);

    // assume forall $rsc: vesting::VestingContract: ResourceDomain<vesting::VestingContract>(): And(WellFormed($rsc), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($rsc)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:346:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_VestingContract_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_VestingContract_$memory, $a_0);
    (($IsValid'$1_vesting_VestingContract'($rsc) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($rsc->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($rsc->$grant_pool->$shareholders, addr)))) && (var $range_1 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (var $range_2 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'(ReadVec($rsc->$grant_pool->$shareholders, i), ReadVec($rsc->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j)))))))))))));

    // @31 := save_mem(vesting::VestingContract) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:346:5+1
    $1_vesting_VestingContract_$memory#31 := $1_vesting_VestingContract_$memory;

    // trace_local[vesting_contract_address]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:346:5+1
    assume {:print "$track_local(60,40,0):", $t0} $t0 == $t0;

    // vesting::assert_vesting_contract_exists($t0) on_abort goto L2 with $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:347:9+56
    assume {:print "$at(2,16368,16424)"} true;
    call $1_vesting_assert_vesting_contract_exists($t0);
    if ($abort_flag) {
        assume {:print "$at(2,16368,16424)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(60,40):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := get_global<vesting::VestingContract>($t0) on_abort goto L2 with $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:348:9+13
    assume {:print "$at(2,16434,16447)"} true;
    if (!$ResourceExists($1_vesting_VestingContract_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t2 := $ResourceValue($1_vesting_VestingContract_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(2,16434,16447)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(60,40):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t3 := get_field<vesting::VestingContract>.vesting_schedule($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:348:9+73
    $t3 := $t2->$vesting_schedule;

    // trace_return[0]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:348:9+73
    assume {:print "$track_return(60,40,0):", $t3} $t3 == $t3;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:349:5+1
    assume {:print "$at(2,16512,16513)"} true;
L1:

    // assert Not(Not(exists[@31]<vesting::VestingContract>($t0))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:44:9+61
    assume {:print "$at(3,1500,1561)"} true;
    assert {:msg "assert_failed(3,1500,1561): function does not abort under this condition"}
      !!$ResourceExists($1_vesting_VestingContract_$memory#31, $t0);

    // return $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:44:9+61
    $ret0 := $t3;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:349:5+1
    assume {:print "$at(2,16512,16513)"} true;
L2:

    // assert Not(exists[@31]<vesting::VestingContract>($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:43:5+151
    assume {:print "$at(3,1416,1567)"} true;
    assert {:msg "assert_failed(3,1416,1567): abort not covered by any of the `aborts_if` clauses"}
      !$ResourceExists($1_vesting_VestingContract_$memory#31, $t0);

    // abort($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:43:5+151
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun vesting::create_vesting_schedule [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:418:5+672
procedure {:timeLimit 40} $1_vesting_create_vesting_schedule$verify(_$t0: Vec ($1_fixed_point32_FixedPoint32), _$t1: int, _$t2: int) returns ($ret0: $1_vesting_VestingSchedule)
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: $1_vesting_VestingSchedule;
    var $t0: Vec ($1_fixed_point32_FixedPoint32);
    var $t1: int;
    var $t2: int;
    var $temp_0'$1_vesting_VestingSchedule': $1_vesting_VestingSchedule;
    var $temp_0'u64': int;
    var $temp_0'vec'$1_fixed_point32_FixedPoint32'': Vec ($1_fixed_point32_FixedPoint32);
    var $1_timestamp_CurrentTimeMicroseconds_$memory#27: $Memory $1_timestamp_CurrentTimeMicroseconds;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:418:5+1
    assume {:print "$at(2,20152,20153)"} true;
    assume $IsValid'vec'$1_fixed_point32_FixedPoint32''($t0);

    // assume WellFormed($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:418:5+1
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:418:5+1
    assume $IsValid'u64'($t2);

    // assume forall $rsc: chain_status::GenesisEndMarker: ResourceDomain<chain_status::GenesisEndMarker>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:418:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0)}(var $rsc := $ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0);
    ($IsValid'$1_chain_status_GenesisEndMarker'($rsc))));

    // assume forall $rsc: timestamp::CurrentTimeMicroseconds: ResourceDomain<timestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:418:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_timestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: reconfiguration::Configuration: ResourceDomain<reconfiguration::Configuration>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:418:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_Configuration_$memory, $a_0);
    ($IsValid'$1_reconfiguration_Configuration'($rsc))));

    // assume Implies(chain_status::$is_operating(), exists<timestamp::CurrentTimeMicroseconds>(0x1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:418:5+672
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.spec.move:4:9+93
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, 1));

    // assume Implies(chain_status::$is_operating(), Ge(timestamp::spec_now_microseconds(), reconfiguration::$last_reconfiguration_time())) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:418:5+672
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.spec.move:8:9+137
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) >= $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory)));

    // @27 := save_mem(timestamp::CurrentTimeMicroseconds) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:418:5+1
    $1_timestamp_CurrentTimeMicroseconds_$memory#27 := $1_timestamp_CurrentTimeMicroseconds_$memory;

    // trace_local[schedule]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:418:5+1
    assume {:print "$track_local(60,7,0):", $t0} $t0 == $t0;

    // trace_local[start_timestamp_secs]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:418:5+1
    assume {:print "$track_local(60,7,1):", $t1} $t1 == $t1;

    // trace_local[period_duration]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:418:5+1
    assume {:print "$track_local(60,7,2):", $t2} $t2 == $t2;

    // $t3 := vector::length<fixed_point32::FixedPoint32>($t0) on_abort goto L10 with $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:423:17+25
    assume {:print "$at(2,20334,20359)"} true;
    call $t3 := $1_vector_length'$1_fixed_point32_FixedPoint32'($t0);
    if ($abort_flag) {
        assume {:print "$at(2,20334,20359)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(60,7):", $t4} $t4 == $t4;
        goto L10;
    }

    // $t5 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:423:45+1
    $t5 := 0;
    assume $IsValid'u64'($t5);

    // $t6 := >($t3, $t5) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:423:43+1
    call $t6 := $Gt($t3, $t5);

    // if ($t6) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:423:9+88
    if ($t6) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:423:9+88
L1:

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:423:9+88
    assume {:print "$at(2,20326,20414)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:423:72+23
L0:

    // $t7 := 2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:423:72+23
    assume {:print "$at(2,20389,20412)"} true;
    $t7 := 2;
    assume $IsValid'u64'($t7);

    // $t8 := error::invalid_argument($t7) on_abort goto L10 with $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:423:48+48
    call $t8 := $1_error_invalid_argument($t7);
    if ($abort_flag) {
        assume {:print "$at(2,20365,20413)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(60,7):", $t4} $t4 == $t4;
        goto L10;
    }

    // trace_abort($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:423:9+88
    assume {:print "$at(2,20326,20414)"} true;
    assume {:print "$track_abort(60,7):", $t8} $t8 == $t8;

    // $t4 := move($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:423:9+88
    $t4 := $t8;

    // goto L10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:423:9+88
    goto L10;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:424:17+15
    assume {:print "$at(2,20432,20447)"} true;
L2:

    // $t9 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:424:35+1
    assume {:print "$at(2,20450,20451)"} true;
    $t9 := 0;
    assume $IsValid'u64'($t9);

    // $t10 := >($t2, $t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:424:33+1
    call $t10 := $Gt($t2, $t9);

    // if ($t10) goto L4 else goto L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:424:9+84
    if ($t10) { goto L4; } else { goto L3; }

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:424:9+84
L4:

    // goto L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:424:9+84
    assume {:print "$at(2,20424,20508)"} true;
    goto L5;

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:424:62+29
L3:

    // $t11 := 3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:424:62+29
    assume {:print "$at(2,20477,20506)"} true;
    $t11 := 3;
    assume $IsValid'u64'($t11);

    // $t12 := error::invalid_argument($t11) on_abort goto L10 with $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:424:38+54
    call $t12 := $1_error_invalid_argument($t11);
    if ($abort_flag) {
        assume {:print "$at(2,20453,20507)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(60,7):", $t4} $t4 == $t4;
        goto L10;
    }

    // trace_abort($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:424:9+84
    assume {:print "$at(2,20424,20508)"} true;
    assume {:print "$track_abort(60,7):", $t12} $t12 == $t12;

    // $t4 := move($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:424:9+84
    $t4 := $t12;

    // goto L10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:424:9+84
    goto L10;

    // label L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:426:13+20
    assume {:print "$at(2,20539,20559)"} true;
L5:

    // $t13 := timestamp::now_seconds() on_abort goto L10 with $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:426:37+24
    assume {:print "$at(2,20563,20587)"} true;
    call $t13 := $1_timestamp_now_seconds();
    if ($abort_flag) {
        assume {:print "$at(2,20563,20587)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(60,7):", $t4} $t4 == $t4;
        goto L10;
    }

    // $t14 := >=($t1, $t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:426:34+2
    call $t14 := $Ge($t1, $t13);

    // if ($t14) goto L7 else goto L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:425:9+142
    assume {:print "$at(2,20518,20660)"} true;
    if ($t14) { goto L7; } else { goto L6; }

    // label L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:425:9+142
L7:

    // goto L8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:425:9+142
    assume {:print "$at(2,20518,20660)"} true;
    goto L8;

    // label L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:427:37+23
    assume {:print "$at(2,20625,20648)"} true;
L6:

    // $t15 := 6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:427:37+23
    assume {:print "$at(2,20625,20648)"} true;
    $t15 := 6;
    assume $IsValid'u64'($t15);

    // $t16 := error::invalid_argument($t15) on_abort goto L10 with $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:427:13+48
    call $t16 := $1_error_invalid_argument($t15);
    if ($abort_flag) {
        assume {:print "$at(2,20601,20649)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(60,7):", $t4} $t4 == $t4;
        goto L10;
    }

    // trace_abort($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:425:9+142
    assume {:print "$at(2,20518,20660)"} true;
    assume {:print "$track_abort(60,7):", $t16} $t16 == $t16;

    // $t4 := move($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:425:9+142
    $t4 := $t16;

    // goto L10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:425:9+142
    goto L10;

    // label L8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:431:13+8
    assume {:print "$at(2,20701,20709)"} true;
L8:

    // $t17 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:434:33+1
    assume {:print "$at(2,20806,20807)"} true;
    $t17 := 0;
    assume $IsValid'u64'($t17);

    // $t18 := pack vesting::VestingSchedule($t0, $t1, $t2, $t17) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:430:9+147
    assume {:print "$at(2,20671,20818)"} true;
    $t18 := $1_vesting_VestingSchedule($t0, $t1, $t2, $t17);

    // trace_return[0]($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:430:9+147
    assume {:print "$track_return(60,7,0):", $t18} $t18 == $t18;

    // label L9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:436:5+1
    assume {:print "$at(2,20823,20824)"} true;
L9:

    // assert Not(Not(Gt(Len<fixed_point32::FixedPoint32>($t0), 0))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:135:9+31
    assume {:print "$at(3,6374,6405)"} true;
    assert {:msg "assert_failed(3,6374,6405): function does not abort under this condition"}
      !!(LenVec($t0) > 0);

    // assert Not(Not(Gt($t2, 0))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:136:9+33
    assume {:print "$at(3,6414,6447)"} true;
    assert {:msg "assert_failed(3,6414,6447): function does not abort under this condition"}
      !!($t2 > 0);

    // assert Not(Not(exists[@27]<timestamp::CurrentTimeMicroseconds>(0x1))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:137:9+72
    assume {:print "$at(3,6456,6528)"} true;
    assert {:msg "assert_failed(3,6456,6528): function does not abort under this condition"}
      !!$ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory#27, 1);

    // assert Not(Not(Ge($t1, timestamp::$now_seconds[@27]()))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:138:9+62
    assume {:print "$at(3,6537,6599)"} true;
    assert {:msg "assert_failed(3,6537,6599): function does not abort under this condition"}
      !!($t1 >= $1_timestamp_$now_seconds($1_timestamp_CurrentTimeMicroseconds_$memory#27));

    // return $t18 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:138:9+62
    $ret0 := $t18;
    return;

    // label L10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:436:5+1
    assume {:print "$at(2,20823,20824)"} true;
L10:

    // assert Or(Or(Or(Not(Gt(Len<fixed_point32::FixedPoint32>($t0), 0)), Not(Gt($t2, 0))), Not(exists[@27]<timestamp::CurrentTimeMicroseconds>(0x1))), Not(Ge($t1, timestamp::$now_seconds[@27]()))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:130:5+399
    assume {:print "$at(3,6206,6605)"} true;
    assert {:msg "assert_failed(3,6206,6605): abort not covered by any of the `aborts_if` clauses"}
      (((!(LenVec($t0) > 0) || !($t2 > 0)) || !$ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory#27, 1)) || !($t1 >= $1_timestamp_$now_seconds($1_timestamp_CurrentTimeMicroseconds_$memory#27)));

    // abort($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:130:5+399
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun vesting::get_beneficiary [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:988:5+287
procedure {:inline 1} $1_vesting_get_beneficiary(_$t0: $1_vesting_VestingContract, _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: Table int (int);
    var $t4: bool;
    var $t5: int;
    var $t6: Table int (int);
    var $t0: $1_vesting_VestingContract;
    var $t1: int;
    var $temp_0'$1_vesting_VestingContract': $1_vesting_VestingContract;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[contract]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:988:5+1
    assume {:print "$at(2,46354,46355)"} true;
    assume {:print "$track_local(60,10,0):", $t0} $t0 == $t0;

    // trace_local[shareholder]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:988:5+1
    assume {:print "$track_local(60,10,1):", $t1} $t1 == $t1;

    // $t3 := get_field<vesting::VestingContract>.beneficiaries($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:989:38+23
    assume {:print "$at(2,46472,46495)"} true;
    $t3 := $t0->$beneficiaries;

    // $t4 := simple_map::contains_key<address, address>($t3, $t1) on_abort goto L4 with $t5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:989:13+63
    call $t4 := $1_simple_map_contains_key'address_address'($t3, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,46447,46510)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(60,10):", $t5} $t5 == $t5;
        goto L4;
    }

    // if ($t4) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:989:9+192
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:990:34+8
    assume {:print "$at(2,46547,46555)"} true;
L1:

    // $t6 := get_field<vesting::VestingContract>.beneficiaries($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:990:33+23
    assume {:print "$at(2,46546,46569)"} true;
    $t6 := $t0->$beneficiaries;

    // $t2 := simple_map::borrow<address, address>($t6, $t1) on_abort goto L4 with $t5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:990:14+57
    call $t2 := $1_simple_map_borrow'address_address'($t6, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,46527,46584)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(60,10):", $t5} $t5 == $t5;
        goto L4;
    }

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:989:9+192
    assume {:print "$at(2,46443,46635)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:989:9+192
L0:

    // $t2 := $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:989:9+192
    assume {:print "$at(2,46443,46635)"} true;
    $t2 := $t1;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:989:9+192
L2:

    // trace_return[0]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:989:9+192
    assume {:print "$at(2,46443,46635)"} true;
    assume {:print "$track_return(60,10,0):", $t2} $t2 == $t2;

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:994:5+1
    assume {:print "$at(2,46640,46641)"} true;
L3:

    // return $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:994:5+1
    assume {:print "$at(2,46640,46641)"} true;
    $ret0 := $t2;
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:994:5+1
L4:

    // abort($t5) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:994:5+1
    assume {:print "$at(2,46640,46641)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun vesting::get_beneficiary [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:988:5+287
procedure {:timeLimit 40} $1_vesting_get_beneficiary$verify(_$t0: $1_vesting_VestingContract, _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: Table int (int);
    var $t4: bool;
    var $t5: int;
    var $t6: Table int (int);
    var $t0: $1_vesting_VestingContract;
    var $t1: int;
    var $temp_0'$1_vesting_VestingContract': $1_vesting_VestingContract;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($t0)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t0)), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t0)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t0)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t0)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t0)), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:988:5+1
    assume {:print "$at(2,46354,46355)"} true;
    assume ($IsValid'$1_vesting_VestingContract'($t0) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($t0->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($t0->$grant_pool->$shareholders, addr)))) && (var $range_0 := $Range(0, LenVec($t0->$grant_pool->$shareholders)); (var $range_1 := $Range(0, LenVec($t0->$grant_pool->$shareholders)); (forall $i_2: int, $i_3: int :: $InRange($range_0, $i_2) ==> $InRange($range_1, $i_3) ==> (var i := $i_2;
    (var j := $i_3;
    (($IsEqual'address'(ReadVec($t0->$grant_pool->$shareholders, i), ReadVec($t0->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j))))))))));

    // assume WellFormed($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:988:5+1
    assume $IsValid'address'($t1);

    // trace_local[contract]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:988:5+1
    assume {:print "$track_local(60,10,0):", $t0} $t0 == $t0;

    // trace_local[shareholder]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:988:5+1
    assume {:print "$track_local(60,10,1):", $t1} $t1 == $t1;

    // $t3 := get_field<vesting::VestingContract>.beneficiaries($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:989:38+23
    assume {:print "$at(2,46472,46495)"} true;
    $t3 := $t0->$beneficiaries;

    // $t4 := simple_map::contains_key<address, address>($t3, $t1) on_abort goto L4 with $t5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:989:13+63
    call $t4 := $1_simple_map_contains_key'address_address'($t3, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,46447,46510)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(60,10):", $t5} $t5 == $t5;
        goto L4;
    }

    // if ($t4) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:989:9+192
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:990:34+8
    assume {:print "$at(2,46547,46555)"} true;
L1:

    // $t6 := get_field<vesting::VestingContract>.beneficiaries($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:990:33+23
    assume {:print "$at(2,46546,46569)"} true;
    $t6 := $t0->$beneficiaries;

    // $t2 := simple_map::borrow<address, address>($t6, $t1) on_abort goto L4 with $t5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:990:14+57
    call $t2 := $1_simple_map_borrow'address_address'($t6, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,46527,46584)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(60,10):", $t5} $t5 == $t5;
        goto L4;
    }

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:989:9+192
    assume {:print "$at(2,46443,46635)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:989:9+192
L0:

    // $t2 := $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:989:9+192
    assume {:print "$at(2,46443,46635)"} true;
    $t2 := $t1;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:989:9+192
L2:

    // trace_return[0]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:989:9+192
    assume {:print "$at(2,46443,46635)"} true;
    assume {:print "$track_return(60,10,0):", $t2} $t2 == $t2;

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:994:5+1
    assume {:print "$at(2,46640,46641)"} true;
L3:

    // assert Not(false) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:509:9+16
    assume {:print "$at(3,22765,22781)"} true;
    assert {:msg "assert_failed(3,22765,22781): function does not abort under this condition"}
      !false;

    // return $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:509:9+16
    $ret0 := $t2;
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:994:5+1
    assume {:print "$at(2,46640,46641)"} true;
L4:

    // assert false at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:508:5+112
    assume {:print "$at(3,22675,22787)"} true;
    assert {:msg "assert_failed(3,22675,22787): abort not covered by any of the `aborts_if` clauses"}
      false;

    // abort($t5) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:508:5+112
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun vesting::get_role_holder [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:916:5+456
procedure {:inline 1} $1_vesting_get_role_holder(_$t0: int, _$t1: $1_string_String) returns ($ret0: int)
{
    // declare local variables
    var $t2: Table int (int);
    var $t3: Table int (int);
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: $1_vesting_VestingAccountManagement;
    var $t9: Table int (int);
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t0: int;
    var $t1: $1_string_String;
    var $temp_0'$1_simple_map_SimpleMap'$1_string_String_address'': Table int (int);
    var $temp_0'$1_string_String': $1_string_String;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t3, select vesting::VestingAccountManagement.roles(global<vesting::VestingAccountManagement>($t0))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:380:9+69
    assume {:print "$at(3,16339,16408)"} true;
    assume ($t3 == $ResourceValue($1_vesting_VestingAccountManagement_$memory, $t0)->$roles);

    // trace_local[contract_address]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:916:5+1
    assume {:print "$at(2,42285,42286)"} true;
    assume {:print "$track_local(60,11,0):", $t0} $t0 == $t0;

    // trace_local[role]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:916:5+1
    assume {:print "$track_local(60,11,1):", $t1} $t1 == $t1;

    // $t4 := exists<vesting::VestingAccountManagement>($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:917:17+6
    assume {:print "$at(2,42414,42420)"} true;
    $t4 := $ResourceExists($1_vesting_VestingAccountManagement_$memory, $t0);

    // if ($t4) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:917:9+108
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:917:9+108
L1:

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:917:9+108
    assume {:print "$at(2,42406,42514)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:917:86+29
L0:

    // $t5 := 13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:917:86+29
    assume {:print "$at(2,42483,42512)"} true;
    $t5 := 13;
    assume $IsValid'u64'($t5);

    // $t6 := error::not_found($t5) on_abort goto L7 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:917:69+47
    call $t6 := $1_error_not_found($t5);
    if ($abort_flag) {
        assume {:print "$at(2,42466,42513)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(60,11):", $t7} $t7 == $t7;
        goto L7;
    }

    // trace_abort($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:917:9+108
    assume {:print "$at(2,42406,42514)"} true;
    assume {:print "$track_abort(60,11):", $t6} $t6 == $t6;

    // $t7 := move($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:917:9+108
    $t7 := $t6;

    // goto L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:917:9+108
    goto L7;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:918:62+16
    assume {:print "$at(2,42577,42593)"} true;
L2:

    // $t8 := get_global<vesting::VestingAccountManagement>($t0) on_abort goto L7 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:918:22+13
    assume {:print "$at(2,42537,42550)"} true;
    if (!$ResourceExists($1_vesting_VestingAccountManagement_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t8 := $ResourceValue($1_vesting_VestingAccountManagement_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(2,42537,42550)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(60,11):", $t7} $t7 == $t7;
        goto L7;
    }

    // $t9 := get_field<vesting::VestingAccountManagement>.roles($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:918:21+64
    $t9 := $t8->$roles;

    // trace_local[roles]($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:918:13+5
    assume {:print "$track_local(60,11,2):", $t9} $t9 == $t9;

    // $t10 := simple_map::contains_key<string::String, address>($t9, $t1) on_abort goto L7 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:919:17+38
    assume {:print "$at(2,42618,42656)"} true;
    call $t10 := $1_simple_map_contains_key'$1_string_String_address'($t9, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,42618,42656)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(60,11):", $t7} $t7 == $t7;
        goto L7;
    }

    // if ($t10) goto L4 else goto L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:919:9+82
    if ($t10) { goto L4; } else { goto L3; }

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:919:9+82
L4:

    // goto L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:919:9+82
    assume {:print "$at(2,42610,42692)"} true;
    goto L5;

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:919:9+82
L3:

    // $t11 := 14 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:919:74+15
    assume {:print "$at(2,42675,42690)"} true;
    $t11 := 14;
    assume $IsValid'u64'($t11);

    // $t12 := error::not_found($t11) on_abort goto L7 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:919:57+33
    call $t12 := $1_error_not_found($t11);
    if ($abort_flag) {
        assume {:print "$at(2,42658,42691)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(60,11):", $t7} $t7 == $t7;
        goto L7;
    }

    // trace_abort($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:919:9+82
    assume {:print "$at(2,42610,42692)"} true;
    assume {:print "$track_abort(60,11):", $t12} $t12 == $t12;

    // $t7 := move($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:919:9+82
    $t7 := $t12;

    // goto L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:919:9+82
    goto L7;

    // label L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:920:29+5
    assume {:print "$at(2,42722,42727)"} true;
L5:

    // $t13 := simple_map::borrow<string::String, address>($t9, $t1) on_abort goto L7 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:920:10+32
    assume {:print "$at(2,42703,42735)"} true;
    call $t13 := $1_simple_map_borrow'$1_string_String_address'($t9, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,42703,42735)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(60,11):", $t7} $t7 == $t7;
        goto L7;
    }

    // trace_return[0]($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:920:9+33
    assume {:print "$track_return(60,11,0):", $t13} $t13 == $t13;

    // label L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:921:5+1
    assume {:print "$at(2,42740,42741)"} true;
L6:

    // return $t13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:921:5+1
    assume {:print "$at(2,42740,42741)"} true;
    $ret0 := $t13;
    return;

    // label L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:921:5+1
L7:

    // abort($t7) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:921:5+1
    assume {:print "$at(2,42740,42741)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun vesting::get_role_holder [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:916:5+456
procedure {:timeLimit 40} $1_vesting_get_role_holder$verify(_$t0: int, _$t1: $1_string_String) returns ($ret0: int)
{
    // declare local variables
    var $t2: Table int (int);
    var $t3: Table int (int);
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: $1_vesting_VestingAccountManagement;
    var $t9: Table int (int);
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t0: int;
    var $t1: $1_string_String;
    var $temp_0'$1_simple_map_SimpleMap'$1_string_String_address'': Table int (int);
    var $temp_0'$1_string_String': $1_string_String;
    var $temp_0'address': int;
    var $1_vesting_VestingAccountManagement_$memory#74: $Memory $1_vesting_VestingAccountManagement;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:916:5+1
    assume {:print "$at(2,42285,42286)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:916:5+1
    assume $IsValid'$1_string_String'($t1);

    // assume forall $rsc: vesting::VestingAccountManagement: ResourceDomain<vesting::VestingAccountManagement>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:916:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_VestingAccountManagement_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_VestingAccountManagement_$memory, $a_0);
    ($IsValid'$1_vesting_VestingAccountManagement'($rsc))));

    // assume Identical($t3, select vesting::VestingAccountManagement.roles(global<vesting::VestingAccountManagement>($t0))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:380:9+69
    assume {:print "$at(3,16339,16408)"} true;
    assume ($t3 == $ResourceValue($1_vesting_VestingAccountManagement_$memory, $t0)->$roles);

    // @74 := save_mem(vesting::VestingAccountManagement) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:916:5+1
    assume {:print "$at(2,42285,42286)"} true;
    $1_vesting_VestingAccountManagement_$memory#74 := $1_vesting_VestingAccountManagement_$memory;

    // trace_local[contract_address]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:916:5+1
    assume {:print "$track_local(60,11,0):", $t0} $t0 == $t0;

    // trace_local[role]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:916:5+1
    assume {:print "$track_local(60,11,1):", $t1} $t1 == $t1;

    // $t4 := exists<vesting::VestingAccountManagement>($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:917:17+6
    assume {:print "$at(2,42414,42420)"} true;
    $t4 := $ResourceExists($1_vesting_VestingAccountManagement_$memory, $t0);

    // if ($t4) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:917:9+108
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:917:9+108
L1:

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:917:9+108
    assume {:print "$at(2,42406,42514)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:917:86+29
L0:

    // $t5 := 13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:917:86+29
    assume {:print "$at(2,42483,42512)"} true;
    $t5 := 13;
    assume $IsValid'u64'($t5);

    // $t6 := error::not_found($t5) on_abort goto L7 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:917:69+47
    call $t6 := $1_error_not_found($t5);
    if ($abort_flag) {
        assume {:print "$at(2,42466,42513)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(60,11):", $t7} $t7 == $t7;
        goto L7;
    }

    // trace_abort($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:917:9+108
    assume {:print "$at(2,42406,42514)"} true;
    assume {:print "$track_abort(60,11):", $t6} $t6 == $t6;

    // $t7 := move($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:917:9+108
    $t7 := $t6;

    // goto L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:917:9+108
    goto L7;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:918:62+16
    assume {:print "$at(2,42577,42593)"} true;
L2:

    // $t8 := get_global<vesting::VestingAccountManagement>($t0) on_abort goto L7 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:918:22+13
    assume {:print "$at(2,42537,42550)"} true;
    if (!$ResourceExists($1_vesting_VestingAccountManagement_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t8 := $ResourceValue($1_vesting_VestingAccountManagement_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(2,42537,42550)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(60,11):", $t7} $t7 == $t7;
        goto L7;
    }

    // $t9 := get_field<vesting::VestingAccountManagement>.roles($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:918:21+64
    $t9 := $t8->$roles;

    // trace_local[roles]($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:918:13+5
    assume {:print "$track_local(60,11,2):", $t9} $t9 == $t9;

    // $t10 := simple_map::contains_key<string::String, address>($t9, $t1) on_abort goto L7 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:919:17+38
    assume {:print "$at(2,42618,42656)"} true;
    call $t10 := $1_simple_map_contains_key'$1_string_String_address'($t9, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,42618,42656)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(60,11):", $t7} $t7 == $t7;
        goto L7;
    }

    // if ($t10) goto L4 else goto L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:919:9+82
    if ($t10) { goto L4; } else { goto L3; }

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:919:9+82
L4:

    // goto L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:919:9+82
    assume {:print "$at(2,42610,42692)"} true;
    goto L5;

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:919:9+82
L3:

    // $t11 := 14 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:919:74+15
    assume {:print "$at(2,42675,42690)"} true;
    $t11 := 14;
    assume $IsValid'u64'($t11);

    // $t12 := error::not_found($t11) on_abort goto L7 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:919:57+33
    call $t12 := $1_error_not_found($t11);
    if ($abort_flag) {
        assume {:print "$at(2,42658,42691)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(60,11):", $t7} $t7 == $t7;
        goto L7;
    }

    // trace_abort($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:919:9+82
    assume {:print "$at(2,42610,42692)"} true;
    assume {:print "$track_abort(60,11):", $t12} $t12 == $t12;

    // $t7 := move($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:919:9+82
    $t7 := $t12;

    // goto L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:919:9+82
    goto L7;

    // label L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:920:29+5
    assume {:print "$at(2,42722,42727)"} true;
L5:

    // $t13 := simple_map::borrow<string::String, address>($t9, $t1) on_abort goto L7 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:920:10+32
    assume {:print "$at(2,42703,42735)"} true;
    call $t13 := $1_simple_map_borrow'$1_string_String_address'($t9, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,42703,42735)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(60,11):", $t7} $t7 == $t7;
        goto L7;
    }

    // trace_return[0]($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:920:9+33
    assume {:print "$track_return(60,11,0):", $t13} $t13 == $t13;

    // label L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:921:5+1
    assume {:print "$at(2,42740,42741)"} true;
L6:

    // assert Not(Not(exists[@74]<vesting::VestingAccountManagement>($t0))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:379:9+62
    assume {:print "$at(3,16268,16330)"} true;
    assert {:msg "assert_failed(3,16268,16330): function does not abort under this condition"}
      !!$ResourceExists($1_vesting_VestingAccountManagement_$memory#74, $t0);

    // assert Not(Not(simple_map::spec_contains_key[]<string::String, address>($t3, $t1))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:381:9+53
    assume {:print "$at(3,16417,16470)"} true;
    assert {:msg "assert_failed(3,16417,16470): function does not abort under this condition"}
      !!$1_simple_map_spec_contains_key'$1_string_String_address'($t3, $t1);

    // return $t13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:381:9+53
    $ret0 := $t13;
    return;

    // label L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:921:5+1
    assume {:print "$at(2,42740,42741)"} true;
L7:

    // assert Or(Not(exists[@74]<vesting::VestingAccountManagement>($t0)), Not(simple_map::spec_contains_key[]<string::String, address>($t3, $t1))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:378:5+289
    assume {:print "$at(3,16187,16476)"} true;
    assert {:msg "assert_failed(3,16187,16476): abort not covered by any of the `aborts_if` clauses"}
      (!$ResourceExists($1_vesting_VestingAccountManagement_$memory#74, $t0) || !$1_simple_map_spec_contains_key'$1_string_String_address'($t3, $t1));

    // abort($t7) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:378:5+289
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun vesting::get_vesting_account_signer [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:926:5+315
procedure {:timeLimit 40} $1_vesting_get_vesting_account_signer$verify(_$t0: $signer, _$t1: int) returns ($ret0: $signer)
{
    // declare local variables
    var $t2: $Mutation ($1_vesting_VestingContract);
    var $t3: $1_vesting_VestingContract;
    var $t4: $Mutation ($1_vesting_VestingContract);
    var $t5: int;
    var $t6: $1_vesting_VestingContract;
    var $t7: $1_vesting_VestingContract;
    var $t8: $signer;
    var $t0: $signer;
    var $t1: int;
    var $temp_0'$1_vesting_VestingContract': $1_vesting_VestingContract;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $1_vesting_VestingContract_$memory#57: $Memory $1_vesting_VestingContract;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:926:5+1
    assume {:print "$at(2,42993,42994)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:926:5+1
    assume $IsValid'address'($t1);

    // assume forall $rsc: vesting::VestingContract: ResourceDomain<vesting::VestingContract>(): And(WellFormed($rsc), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($rsc)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:926:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_VestingContract_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_VestingContract_$memory, $a_0);
    (($IsValid'$1_vesting_VestingContract'($rsc) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($rsc->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($rsc->$grant_pool->$shareholders, addr)))) && (var $range_1 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (var $range_2 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'(ReadVec($rsc->$grant_pool->$shareholders, i), ReadVec($rsc->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j)))))))))))));

    // assume Identical($t3, global<vesting::VestingContract>($t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:525:9+65
    assume {:print "$at(3,23419,23484)"} true;
    assume ($t3 == $ResourceValue($1_vesting_VestingContract_$memory, $t1));

    // @57 := save_mem(vesting::VestingContract) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:926:5+1
    assume {:print "$at(2,42993,42994)"} true;
    $1_vesting_VestingContract_$memory#57 := $1_vesting_VestingContract_$memory;

    // trace_local[admin]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:926:5+1
    assume {:print "$track_local(60,12,0):", $t0} $t0 == $t0;

    // trace_local[contract_address]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:926:5+1
    assume {:print "$track_local(60,12,1):", $t1} $t1 == $t1;

    // $t4 := borrow_global<vesting::VestingContract>($t1) on_abort goto L2 with $t5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:927:32+17
    assume {:print "$at(2,43140,43157)"} true;
    if (!$ResourceExists($1_vesting_VestingContract_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t4 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_vesting_VestingContract_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(2,43140,43157)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(60,12):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[vesting_contract]($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:927:13+16
    $temp_0'$1_vesting_VestingContract' := $Dereference($t4);
    assume {:print "$track_local(60,12,2):", $temp_0'$1_vesting_VestingContract'} $temp_0'$1_vesting_VestingContract' == $temp_0'$1_vesting_VestingContract';

    // $t6 := read_ref($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:928:21+25
    assume {:print "$at(2,43214,43239)"} true;
    $t6 := $Dereference($t4);

    // vesting::verify_admin($t0, $t6) on_abort goto L2 with $t5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:928:9+37
    call $1_vesting_verify_admin($t0, $t6);
    if ($abort_flag) {
        assume {:print "$at(2,43202,43239)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(60,12):", $t5} $t5 == $t5;
        goto L2;
    }

    // $t7 := read_ref($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:929:45+16
    assume {:print "$at(2,43285,43301)"} true;
    $t7 := $Dereference($t4);

    // assert forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($t4)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t4)), addr)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:16:9+135
    // data invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:16:9+135
    assume {:print "$at(68,538,673)"} true;
    assert {:msg "assert_failed(68,538,673): data invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($Dereference($t4)->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($Dereference($t4)->$grant_pool->$shareholders, addr))));

    // assert forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t4)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t4)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t4)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t4)), j)), Eq<num>(i, j)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:20:9+129
    // data invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:20:9+129
    assume {:print "$at(68,738,867)"} true;
    assert {:msg "assert_failed(68,738,867): data invariant does not hold"}
      (var $range_0 := $Range(0, LenVec($Dereference($t4)->$grant_pool->$shareholders)); (var $range_1 := $Range(0, LenVec($Dereference($t4)->$grant_pool->$shareholders)); (forall $i_2: int, $i_3: int :: $InRange($range_0, $i_2) ==> $InRange($range_1, $i_3) ==> (var i := $i_2;
    (var j := $i_3;
    (($IsEqual'address'(ReadVec($Dereference($t4)->$grant_pool->$shareholders, i), ReadVec($Dereference($t4)->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j))))))));

    // $t8 := vesting::get_vesting_account_signer_internal($t7) on_abort goto L2 with $t5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:929:9+53
    assume {:print "$at(2,43249,43302)"} true;
    call $t8 := $1_vesting_get_vesting_account_signer_internal($t7);
    if ($abort_flag) {
        assume {:print "$at(2,43249,43302)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(60,12):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_return[0]($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:929:9+53
    assume {:print "$track_return(60,12,0):", $t8} $t8 == $t8;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:930:5+1
    assume {:print "$at(2,43307,43308)"} true;
L1:

    // assert Not(Not(exists[@57]<vesting::VestingContract>($t1))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:524:9+53
    assume {:print "$at(3,23357,23410)"} true;
    assert {:msg "assert_failed(3,23357,23410): function does not abort under this condition"}
      !!$ResourceExists($1_vesting_VestingContract_$memory#57, $t1);

    // assert Not(Neq<address>(signer::$address_of[]($t0), select vesting::VestingContract.admin($t3))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:526:9+62
    assume {:print "$at(3,23493,23555)"} true;
    assert {:msg "assert_failed(3,23493,23555): function does not abort under this condition"}
      !!$IsEqual'address'($1_signer_$address_of($t0), $t3->$admin);

    // return $t8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:526:9+62
    $ret0 := $t8;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:930:5+1
    assume {:print "$at(2,43307,43308)"} true;
L2:

    // assert Or(Not(exists[@57]<vesting::VestingContract>($t1)), Neq<address>(signer::$address_of[]($t0), select vesting::VestingContract.admin($t3))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:384:5+127
    assume {:print "$at(3,16482,16609)"} true;
    assert {:msg "assert_failed(3,16482,16609): abort not covered by any of the `aborts_if` clauses"}
      (!$ResourceExists($1_vesting_VestingContract_$memory#57, $t1) || !$IsEqual'address'($1_signer_$address_of($t0), $t3->$admin));

    // abort($t5) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:384:5+127
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun vesting::get_vesting_account_signer_internal [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:932:5+168
procedure {:inline 1} $1_vesting_get_vesting_account_signer_internal(_$t0: $1_vesting_VestingContract) returns ($ret0: $signer)
{
    // declare local variables
    var $t1: $1_account_SignerCapability;
    var $t2: int;
    var $t3: $signer;
    var $t4: int;
    var $t0: $1_vesting_VestingContract;
    var $temp_0'$1_vesting_VestingContract': $1_vesting_VestingContract;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[vesting_contract]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:932:5+1
    assume {:print "$at(2,43314,43315)"} true;
    assume {:print "$track_local(60,13,0):", $t0} $t0 == $t0;

    // $t1 := get_field<vesting::VestingContract>.signer_cap($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:933:48+28
    assume {:print "$at(2,43447,43475)"} true;
    $t1 := $t0->$signer_cap;

    // assume Identical($t2, select account::SignerCapability.account($t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.spec.move:518:9+30
    assume {:print "$at(82,24860,24890)"} true;
    assume ($t2 == $t1->$account);

    // $t3 := account::create_signer_with_capability($t1) on_abort goto L2 with $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:933:9+68
    assume {:print "$at(2,43408,43476)"} true;
    call $t3 := $1_account_create_signer_with_capability($t1);
    if ($abort_flag) {
        assume {:print "$at(2,43408,43476)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(60,13):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_return[0]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:933:9+68
    assume {:print "$track_return(60,13,0):", $t3} $t3 == $t3;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:934:5+1
    assume {:print "$at(2,43481,43482)"} true;
L1:

    // return $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:934:5+1
    assume {:print "$at(2,43481,43482)"} true;
    $ret0 := $t3;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:934:5+1
L2:

    // abort($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:934:5+1
    assume {:print "$at(2,43481,43482)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun vesting::get_vesting_account_signer_internal [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:932:5+168
procedure {:timeLimit 40} $1_vesting_get_vesting_account_signer_internal$verify(_$t0: $1_vesting_VestingContract) returns ($ret0: $signer)
{
    // declare local variables
    var $t1: $1_account_SignerCapability;
    var $t2: int;
    var $t3: $signer;
    var $t4: int;
    var $t0: $1_vesting_VestingContract;
    var $temp_0'$1_vesting_VestingContract': $1_vesting_VestingContract;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($t0)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t0)), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t0)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t0)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t0)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t0)), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:932:5+1
    assume {:print "$at(2,43314,43315)"} true;
    assume ($IsValid'$1_vesting_VestingContract'($t0) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($t0->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($t0->$grant_pool->$shareholders, addr)))) && (var $range_0 := $Range(0, LenVec($t0->$grant_pool->$shareholders)); (var $range_1 := $Range(0, LenVec($t0->$grant_pool->$shareholders)); (forall $i_2: int, $i_3: int :: $InRange($range_0, $i_2) ==> $InRange($range_1, $i_3) ==> (var i := $i_2;
    (var j := $i_3;
    (($IsEqual'address'(ReadVec($t0->$grant_pool->$shareholders, i), ReadVec($t0->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j))))))))));

    // trace_local[vesting_contract]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:932:5+1
    assume {:print "$track_local(60,13,0):", $t0} $t0 == $t0;

    // $t1 := get_field<vesting::VestingContract>.signer_cap($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:933:48+28
    assume {:print "$at(2,43447,43475)"} true;
    $t1 := $t0->$signer_cap;

    // assume Identical($t2, select account::SignerCapability.account($t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.spec.move:518:9+30
    assume {:print "$at(82,24860,24890)"} true;
    assume ($t2 == $t1->$account);

    // $t3 := account::create_signer_with_capability($t1) on_abort goto L2 with $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:933:9+68
    assume {:print "$at(2,43408,43476)"} true;
    call $t3 := $1_account_create_signer_with_capability($t1);
    if ($abort_flag) {
        assume {:print "$at(2,43408,43476)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(60,13):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_return[0]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:933:9+68
    assume {:print "$track_return(60,13,0):", $t3} $t3 == $t3;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:934:5+1
    assume {:print "$at(2,43481,43482)"} true;
L1:

    // assert Not(false) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:389:9+16
    assume {:print "$at(3,16710,16726)"} true;
    assert {:msg "assert_failed(3,16710,16726): function does not abort under this condition"}
      !false;

    // return $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:389:9+16
    $ret0 := $t3;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:934:5+1
    assume {:print "$at(2,43481,43482)"} true;
L2:

    // assert false at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:388:5+117
    assume {:print "$at(3,16615,16732)"} true;
    assert {:msg "assert_failed(3,16615,16732): abort not covered by any of the `aborts_if` clauses"}
      false;

    // abort($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:388:5+117
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun vesting::operator_commission_percentage [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:302:5+275
procedure {:timeLimit 40} $1_vesting_operator_commission_percentage$verify(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: $1_vesting_VestingContract;
    var $t3: $1_vesting_StakingInfo;
    var $t4: int;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $1_vesting_VestingContract_$memory#37: $Memory $1_vesting_VestingContract;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:302:5+1
    assume {:print "$at(2,14085,14086)"} true;
    assume $IsValid'address'($t0);

    // assume forall $rsc: vesting::VestingContract: ResourceDomain<vesting::VestingContract>(): And(WellFormed($rsc), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($rsc)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:302:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_VestingContract_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_VestingContract_$memory, $a_0);
    (($IsValid'$1_vesting_VestingContract'($rsc) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($rsc->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($rsc->$grant_pool->$shareholders, addr)))) && (var $range_1 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (var $range_2 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'(ReadVec($rsc->$grant_pool->$shareholders, i), ReadVec($rsc->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j)))))))))))));

    // @37 := save_mem(vesting::VestingContract) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:302:5+1
    $1_vesting_VestingContract_$memory#37 := $1_vesting_VestingContract_$memory;

    // trace_local[vesting_contract_address]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:302:5+1
    assume {:print "$track_local(60,15,0):", $t0} $t0 == $t0;

    // vesting::assert_vesting_contract_exists($t0) on_abort goto L2 with $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:303:9+56
    assume {:print "$at(2,14202,14258)"} true;
    call $1_vesting_assert_vesting_contract_exists($t0);
    if ($abort_flag) {
        assume {:print "$at(2,14202,14258)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(60,15):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := get_global<vesting::VestingContract>($t0) on_abort goto L2 with $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:304:9+13
    assume {:print "$at(2,14268,14281)"} true;
    if (!$ResourceExists($1_vesting_VestingContract_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t2 := $ResourceValue($1_vesting_VestingContract_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(2,14268,14281)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(60,15):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t3 := get_field<vesting::VestingContract>.staking($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:304:9+64
    $t3 := $t2->$staking;

    // $t4 := get_field<vesting::StakingInfo>.commission_percentage($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:304:9+86
    $t4 := $t3->$commission_percentage;

    // trace_return[0]($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:304:9+86
    assume {:print "$track_return(60,15,0):", $t4} $t4 == $t4;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:305:5+1
    assume {:print "$at(2,14359,14360)"} true;
L1:

    // assert Not(Not(exists[@37]<vesting::VestingContract>($t0))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:28:9+61
    assume {:print "$at(3,970,1031)"} true;
    assert {:msg "assert_failed(3,970,1031): function does not abort under this condition"}
      !!$ResourceExists($1_vesting_VestingContract_$memory#37, $t0);

    // return $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:28:9+61
    $ret0 := $t4;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:305:5+1
    assume {:print "$at(2,14359,14360)"} true;
L2:

    // assert Not(exists[@37]<vesting::VestingContract>($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:27:5+153
    assume {:print "$at(3,884,1037)"} true;
    assert {:msg "assert_failed(3,884,1037): abort not covered by any of the `aborts_if` clauses"}
      !$ResourceExists($1_vesting_VestingContract_$memory#37, $t0);

    // abort($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:27:5+153
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun vesting::period_duration_secs [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:271:5+268
procedure {:timeLimit 40} $1_vesting_period_duration_secs$verify(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: $1_vesting_VestingContract;
    var $t3: $1_vesting_VestingSchedule;
    var $t4: int;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $1_vesting_VestingContract_$memory#36: $Memory $1_vesting_VestingContract;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:271:5+1
    assume {:print "$at(2,12272,12273)"} true;
    assume $IsValid'address'($t0);

    // assume forall $rsc: vesting::VestingContract: ResourceDomain<vesting::VestingContract>(): And(WellFormed($rsc), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($rsc)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:271:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_VestingContract_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_VestingContract_$memory, $a_0);
    (($IsValid'$1_vesting_VestingContract'($rsc) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($rsc->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($rsc->$grant_pool->$shareholders, addr)))) && (var $range_1 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (var $range_2 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'(ReadVec($rsc->$grant_pool->$shareholders, i), ReadVec($rsc->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j)))))))))))));

    // @36 := save_mem(vesting::VestingContract) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:271:5+1
    $1_vesting_VestingContract_$memory#36 := $1_vesting_VestingContract_$memory;

    // trace_local[vesting_contract_address]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:271:5+1
    assume {:print "$track_local(60,16,0):", $t0} $t0 == $t0;

    // vesting::assert_vesting_contract_exists($t0) on_abort goto L2 with $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:272:9+56
    assume {:print "$at(2,12379,12435)"} true;
    call $1_vesting_assert_vesting_contract_exists($t0);
    if ($abort_flag) {
        assume {:print "$at(2,12379,12435)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(60,16):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := get_global<vesting::VestingContract>($t0) on_abort goto L2 with $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:273:9+13
    assume {:print "$at(2,12445,12458)"} true;
    if (!$ResourceExists($1_vesting_VestingContract_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t2 := $ResourceValue($1_vesting_VestingContract_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(2,12445,12458)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(60,16):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t3 := get_field<vesting::VestingContract>.vesting_schedule($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:273:9+73
    $t3 := $t2->$vesting_schedule;

    // $t4 := get_field<vesting::VestingSchedule>.period_duration($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:273:9+89
    $t4 := $t3->$period_duration;

    // trace_return[0]($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:273:9+89
    assume {:print "$track_return(60,16,0):", $t4} $t4 == $t4;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:274:5+1
    assume {:print "$at(2,12539,12540)"} true;
L1:

    // assert Not(Not(exists[@36]<vesting::VestingContract>($t0))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:16:9+61
    assume {:print "$at(3,501,562)"} true;
    assert {:msg "assert_failed(3,501,562): function does not abort under this condition"}
      !!$ResourceExists($1_vesting_VestingContract_$memory#36, $t0);

    // return $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:16:9+61
    $ret0 := $t4;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:274:5+1
    assume {:print "$at(2,12539,12540)"} true;
L2:

    // assert Not(exists[@36]<vesting::VestingContract>($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:15:5+143
    assume {:print "$at(3,425,568)"} true;
    assert {:msg "assert_failed(3,425,568): abort not covered by any of the `aborts_if` clauses"}
      !$ResourceExists($1_vesting_VestingContract_$memory#36, $t0);

    // abort($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:15:5+143
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun vesting::remaining_grant [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:283:5+246
procedure {:timeLimit 40} $1_vesting_remaining_grant$verify(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: $1_vesting_VestingContract;
    var $t3: int;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $1_vesting_VestingContract_$memory#35: $Memory $1_vesting_VestingContract;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:283:5+1
    assume {:print "$at(2,13028,13029)"} true;
    assume $IsValid'address'($t0);

    // assume forall $rsc: vesting::VestingContract: ResourceDomain<vesting::VestingContract>(): And(WellFormed($rsc), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($rsc)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:283:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_VestingContract_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_VestingContract_$memory, $a_0);
    (($IsValid'$1_vesting_VestingContract'($rsc) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($rsc->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($rsc->$grant_pool->$shareholders, addr)))) && (var $range_1 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (var $range_2 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'(ReadVec($rsc->$grant_pool->$shareholders, i), ReadVec($rsc->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j)))))))))))));

    // @35 := save_mem(vesting::VestingContract) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:283:5+1
    $1_vesting_VestingContract_$memory#35 := $1_vesting_VestingContract_$memory;

    // trace_local[vesting_contract_address]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:283:5+1
    assume {:print "$track_local(60,17,0):", $t0} $t0 == $t0;

    // vesting::assert_vesting_contract_exists($t0) on_abort goto L2 with $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:284:9+56
    assume {:print "$at(2,13130,13186)"} true;
    call $1_vesting_assert_vesting_contract_exists($t0);
    if ($abort_flag) {
        assume {:print "$at(2,13130,13186)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(60,17):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := get_global<vesting::VestingContract>($t0) on_abort goto L2 with $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:285:9+13
    assume {:print "$at(2,13196,13209)"} true;
    if (!$ResourceExists($1_vesting_VestingContract_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t2 := $ResourceValue($1_vesting_VestingContract_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(2,13196,13209)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(60,17):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t3 := get_field<vesting::VestingContract>.remaining_grant($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:285:9+72
    $t3 := $t2->$remaining_grant;

    // trace_return[0]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:285:9+72
    assume {:print "$track_return(60,17,0):", $t3} $t3 == $t3;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:286:5+1
    assume {:print "$at(2,13273,13274)"} true;
L1:

    // assert Not(Not(exists[@35]<vesting::VestingContract>($t0))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:20:9+61
    assume {:print "$at(3,645,706)"} true;
    assert {:msg "assert_failed(3,645,706): function does not abort under this condition"}
      !!$ResourceExists($1_vesting_VestingContract_$memory#35, $t0);

    // return $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:20:9+61
    $ret0 := $t3;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:286:5+1
    assume {:print "$at(2,13273,13274)"} true;
L2:

    // assert Not(exists[@35]<vesting::VestingContract>($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:19:5+138
    assume {:print "$at(3,574,712)"} true;
    assert {:msg "assert_failed(3,574,712): abort not covered by any of the `aborts_if` clauses"}
      !$ResourceExists($1_vesting_VestingContract_$memory#35, $t0);

    // abort($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:19:5+138
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun vesting::reset_beneficiary [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:858:5+755
procedure {:timeLimit 40} $1_vesting_reset_beneficiary$verify(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: $Mutation (Table int (int));
    var $t7: $Mutation ($1_vesting_VestingContract);
    var $t8: int;
    var $t9: $1_vesting_VestingContract;
    var $t10: Table int (int);
    var $t11: $1_string_String;
    var $t12: $Mutation ($1_vesting_VestingContract);
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: bool;
    var $t18: Vec (int);
    var $t19: $1_string_String;
    var $t20: Table int (int);
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: $Mutation (Table int (int));
    var $t25: Table int (int);
    var $t26: bool;
    var $t27: int;
    var $t28: int;
    var $t29: $1_vesting_VestingContract;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'$1_simple_map_SimpleMap'address_address'': Table int (int);
    var $temp_0'$1_vesting_VestingContract': $1_vesting_VestingContract;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $1_vesting_VestingContract_$memory#97: $Memory $1_vesting_VestingContract;
    var $1_vesting_VestingAccountManagement_$memory#98: $Memory $1_vesting_VestingAccountManagement;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:858:5+1
    assume {:print "$at(2,39991,39992)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:858:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:858:5+1
    assume $IsValid'address'($t2);

    // assume forall $rsc: vesting::VestingAccountManagement: ResourceDomain<vesting::VestingAccountManagement>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:858:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_VestingAccountManagement_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_VestingAccountManagement_$memory, $a_0);
    ($IsValid'$1_vesting_VestingAccountManagement'($rsc))));

    // assume forall $rsc: vesting::VestingContract: ResourceDomain<vesting::VestingContract>(): And(WellFormed($rsc), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($rsc)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:858:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_VestingContract_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_VestingContract_$memory, $a_0);
    (($IsValid'$1_vesting_VestingContract'($rsc) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($rsc->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($rsc->$grant_pool->$shareholders, addr)))) && (var $range_1 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (var $range_2 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'(ReadVec($rsc->$grant_pool->$shareholders, i), ReadVec($rsc->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j)))))))))))));

    // assume Identical($t8, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:337:9+39
    assume {:print "$at(3,14587,14626)"} true;
    assume ($t8 == $1_signer_$address_of($t0));

    // assume Identical($t9, global<vesting::VestingContract>($t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:338:9+65
    assume {:print "$at(3,14635,14700)"} true;
    assume ($t9 == $ResourceValue($1_vesting_VestingContract_$memory, $t1));

    // assume Identical($t10, select vesting::VestingAccountManagement.roles(global<vesting::VestingAccountManagement>($t1))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:341:9+69
    assume {:print "$at(3,14933,15002)"} true;
    assume ($t10 == $ResourceValue($1_vesting_VestingAccountManagement_$memory, $t1)->$roles);

    // assume Identical($t11, string::spec_utf8([82, 79, 76, 69, 95, 66, 69, 78, 69, 70, 73, 67, 73, 65, 82, 89, 95, 82, 69, 83, 69, 84, 84, 69, 82])) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:342:9+61
    assume {:print "$at(3,15011,15072)"} true;
    assume ($t11 == $1_string_spec_utf8(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(82, 79, 76, 69), MakeVec4(95, 66, 69, 78)), MakeVec4(69, 70, 73, 67)), MakeVec4(73, 65, 82, 89)), MakeVec4(95, 82, 69, 83)), MakeVec4(69, 84, 84, 69)), MakeVec1(82))));

    // @98 := save_mem(vesting::VestingAccountManagement) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:858:5+1
    assume {:print "$at(2,39991,39992)"} true;
    $1_vesting_VestingAccountManagement_$memory#98 := $1_vesting_VestingAccountManagement_$memory;

    // @97 := save_mem(vesting::VestingContract) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:858:5+1
    $1_vesting_VestingContract_$memory#97 := $1_vesting_VestingContract_$memory;

    // trace_local[account]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:858:5+1
    assume {:print "$track_local(60,18,0):", $t0} $t0 == $t0;

    // trace_local[contract_address]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:858:5+1
    assume {:print "$track_local(60,18,1):", $t1} $t1 == $t1;

    // trace_local[shareholder]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:858:5+1
    assume {:print "$track_local(60,18,2):", $t2} $t2 == $t2;

    // $t12 := borrow_global<vesting::VestingContract>($t1) on_abort goto L10 with $t13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:863:32+17
    assume {:print "$at(2,40208,40225)"} true;
    if (!$ResourceExists($1_vesting_VestingContract_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t12 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_vesting_VestingContract_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(2,40208,40225)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(60,18):", $t13} $t13 == $t13;
        goto L10;
    }

    // trace_local[vesting_contract]($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:863:13+16
    $temp_0'$1_vesting_VestingContract' := $Dereference($t12);
    assume {:print "$track_local(60,18,7):", $temp_0'$1_vesting_VestingContract'} $temp_0'$1_vesting_VestingContract' == $temp_0'$1_vesting_VestingContract';

    // $t14 := signer::address_of($t0) on_abort goto L10 with $t13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:864:20+27
    assume {:print "$at(2,40281,40308)"} true;
    call $t14 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,40281,40308)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(60,18):", $t13} $t13 == $t13;
        goto L10;
    }

    // trace_local[addr]($t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:864:13+4
    assume {:print "$track_local(60,18,5):", $t14} $t14 == $t14;

    // $t15 := get_field<vesting::VestingContract>.admin($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:866:21+22
    assume {:print "$at(2,40347,40369)"} true;
    $t15 := $Dereference($t12)->$admin;

    // $t16 := ==($t14, $t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:866:18+2
    $t16 := $IsEqual'address'($t14, $t15);

    // if ($t16) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:866:13+124
    if ($t16) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:866:13+124
L1:

    // $t17 := true at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:866:13+124
    assume {:print "$at(2,40339,40463)"} true;
    $t17 := true;
    assume $IsValid'bool'($t17);

    // $t3 := $t17 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:866:13+124
    $t3 := $t17;

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:866:13+124
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:867:17+4
    assume {:print "$at(2,40389,40393)"} true;
L0:

    // $t18 := [82, 79, 76, 69, 95, 66, 69, 78, 69, 70, 73, 67, 73, 65, 82, 89, 95, 82, 69, 83, 69, 84, 84, 69, 82] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:867:64+25
    assume {:print "$at(2,40436,40461)"} true;
    $t18 := ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(82, 79, 76, 69), MakeVec4(95, 66, 69, 78)), MakeVec4(69, 70, 73, 67)), MakeVec4(73, 65, 82, 89)), MakeVec4(95, 82, 69, 83)), MakeVec4(69, 84, 84, 69)), MakeVec1(82));
    assume $IsValid'vec'u8''($t18);

    // $t19 := string::utf8($t18) on_abort goto L10 with $t13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:867:59+31
    call $t19 := $1_string_utf8($t18);
    if ($abort_flag) {
        assume {:print "$at(2,40431,40462)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(60,18):", $t13} $t13 == $t13;
        goto L10;
    }

    // assume Identical($t20, select vesting::VestingAccountManagement.roles(global<vesting::VestingAccountManagement>($t1))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:380:9+69
    assume {:print "$at(3,16339,16408)"} true;
    assume ($t20 == $ResourceValue($1_vesting_VestingAccountManagement_$memory, $t1)->$roles);

    // $t21 := vesting::get_role_holder($t1, $t19) on_abort goto L10 with $t13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:867:25+66
    assume {:print "$at(2,40397,40463)"} true;
    call $t21 := $1_vesting_get_role_holder($t1, $t19);
    if ($abort_flag) {
        assume {:print "$at(2,40397,40463)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(60,18):", $t13} $t13 == $t13;
        goto L10;
    }

    // $t3 := ==($t14, $t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:867:22+2
    $t3 := $IsEqual'address'($t14, $t21);

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:866:13+124
    assume {:print "$at(2,40339,40463)"} true;
L2:

    // if ($t3) goto L4 else goto L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:865:9+214
    assume {:print "$at(2,40318,40532)"} true;
    if ($t3) { goto L4; } else { goto L3; }

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:865:9+214
L4:

    // goto L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:865:9+214
    assume {:print "$at(2,40318,40532)"} true;
    goto L5;

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:865:9+214
L3:

    // assert forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($t12)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t12)), addr)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:16:9+135
    // data invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:16:9+135
    assume {:print "$at(68,538,673)"} true;
    assert {:msg "assert_failed(68,538,673): data invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($Dereference($t12)->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($Dereference($t12)->$grant_pool->$shareholders, addr))));

    // assert forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t12)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t12)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t12)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t12)), j)), Eq<num>(i, j)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:20:9+129
    // data invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:20:9+129
    assume {:print "$at(68,738,867)"} true;
    assert {:msg "assert_failed(68,738,867): data invariant does not hold"}
      (var $range_0 := $Range(0, LenVec($Dereference($t12)->$grant_pool->$shareholders)); (var $range_1 := $Range(0, LenVec($Dereference($t12)->$grant_pool->$shareholders)); (forall $i_2: int, $i_3: int :: $InRange($range_0, $i_2) ==> $InRange($range_1, $i_3) ==> (var i := $i_2;
    (var j := $i_3;
    (($IsEqual'address'(ReadVec($Dereference($t12)->$grant_pool->$shareholders, i), ReadVec($Dereference($t12)->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j))))))));

    // destroy($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:865:9+214
    assume {:print "$at(2,40318,40532)"} true;

    // $t22 := 15 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:868:38+18
    assume {:print "$at(2,40502,40520)"} true;
    $t22 := 15;
    assume $IsValid'u64'($t22);

    // $t23 := error::permission_denied($t22) on_abort goto L10 with $t13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:868:13+44
    call $t23 := $1_error_permission_denied($t22);
    if ($abort_flag) {
        assume {:print "$at(2,40477,40521)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(60,18):", $t13} $t13 == $t13;
        goto L10;
    }

    // trace_abort($t23) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:865:9+214
    assume {:print "$at(2,40318,40532)"} true;
    assume {:print "$track_abort(60,18):", $t23} $t23 == $t23;

    // $t13 := move($t23) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:865:9+214
    $t13 := $t23;

    // goto L10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:865:9+214
    goto L10;

    // label L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:871:34+16
    assume {:print "$at(2,40568,40584)"} true;
L5:

    // $t24 := borrow_field<vesting::VestingContract>.beneficiaries($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:871:29+35
    assume {:print "$at(2,40563,40598)"} true;
    $t24 := $ChildMutation($t12, 3, $Dereference($t12)->$beneficiaries);

    // trace_local[beneficiaries]($t24) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:871:13+13
    $temp_0'$1_simple_map_SimpleMap'address_address'' := $Dereference($t24);
    assume {:print "$track_local(60,18,6):", $temp_0'$1_simple_map_SimpleMap'address_address''} $temp_0'$1_simple_map_SimpleMap'address_address'' == $temp_0'$1_simple_map_SimpleMap'address_address'';

    // $t25 := read_ref($t24) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:872:37+29
    assume {:print "$at(2,40636,40665)"} true;
    $t25 := $Dereference($t24);

    // $t26 := simple_map::contains_key<address, address>($t25, $t2) on_abort goto L10 with $t13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:872:13+53
    call $t26 := $1_simple_map_contains_key'address_address'($t25, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,40612,40665)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(60,18):", $t13} $t13 == $t13;
        goto L10;
    }

    // if ($t26) goto L7 else goto L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:872:9+131
    if ($t26) { goto L7; } else { goto L6; }

    // label L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:873:32+13
    assume {:print "$at(2,40700,40713)"} true;
L7:

    // ($t27, $t28) := simple_map::remove<address, address>($t24, $t2) on_abort goto L10 with $t13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:873:13+47
    assume {:print "$at(2,40681,40728)"} true;
    call $t27,$t28,$t24 := $1_simple_map_remove'address_address'($t24, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,40681,40728)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(60,18):", $t13} $t13 == $t13;
        goto L10;
    }

    // write_back[Reference($t12).beneficiaries (simple_map::SimpleMap<address, address>)]($t24) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:873:13+47
    $t12 := $UpdateMutation($t12, $Update'$1_vesting_VestingContract'_beneficiaries($Dereference($t12), $Dereference($t24)));

    // assert forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($t12)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t12)), addr)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:16:9+135
    // data invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:16:9+135
    assume {:print "$at(68,538,673)"} true;
    assert {:msg "assert_failed(68,538,673): data invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($Dereference($t12)->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($Dereference($t12)->$grant_pool->$shareholders, addr))));

    // assert forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t12)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t12)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t12)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t12)), j)), Eq<num>(i, j)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:20:9+129
    // data invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:20:9+129
    assume {:print "$at(68,738,867)"} true;
    assert {:msg "assert_failed(68,738,867): data invariant does not hold"}
      (var $range_0 := $Range(0, LenVec($Dereference($t12)->$grant_pool->$shareholders)); (var $range_1 := $Range(0, LenVec($Dereference($t12)->$grant_pool->$shareholders)); (forall $i_2: int, $i_3: int :: $InRange($range_0, $i_2) ==> $InRange($range_1, $i_3) ==> (var i := $i_2;
    (var j := $i_3;
    (($IsEqual'address'(ReadVec($Dereference($t12)->$grant_pool->$shareholders, i), ReadVec($Dereference($t12)->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j))))))));

    // write_back[vesting::VestingContract@]($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:873:13+47
    assume {:print "$at(2,40681,40728)"} true;
    $1_vesting_VestingContract_$memory := $ResourceUpdate($1_vesting_VestingContract_$memory, $GlobalLocationAddress($t12),
        $Dereference($t12));

    // destroy($t28) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:873:13+47

    // destroy($t27) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:873:13+47

    // goto L8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:873:60+1
    goto L8;

    // label L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:872:9+131
    assume {:print "$at(2,40608,40739)"} true;
L6:

    // assert forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($t12)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t12)), addr)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:16:9+135
    // data invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:16:9+135
    assume {:print "$at(68,538,673)"} true;
    assert {:msg "assert_failed(68,538,673): data invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($Dereference($t12)->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($Dereference($t12)->$grant_pool->$shareholders, addr))));

    // assert forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t12)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t12)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t12)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t12)), j)), Eq<num>(i, j)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:20:9+129
    // data invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:20:9+129
    assume {:print "$at(68,738,867)"} true;
    assert {:msg "assert_failed(68,738,867): data invariant does not hold"}
      (var $range_0 := $Range(0, LenVec($Dereference($t12)->$grant_pool->$shareholders)); (var $range_1 := $Range(0, LenVec($Dereference($t12)->$grant_pool->$shareholders)); (forall $i_2: int, $i_3: int :: $InRange($range_0, $i_2) ==> $InRange($range_1, $i_3) ==> (var i := $i_2;
    (var j := $i_3;
    (($IsEqual'address'(ReadVec($Dereference($t12)->$grant_pool->$shareholders, i), ReadVec($Dereference($t12)->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j))))))));

    // destroy($t24) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:872:9+131
    assume {:print "$at(2,40608,40739)"} true;

    // label L8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:874:10+1
    assume {:print "$at(2,40739,40740)"} true;
L8:

    // label L9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:875:5+1
    assume {:print "$at(2,40745,40746)"} true;
L9:

    // assume Identical($t29, global<vesting::VestingContract>($t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:346:9+75
    assume {:print "$at(3,15274,15349)"} true;
    assume ($t29 == $ResourceValue($1_vesting_VestingContract_$memory, $t1));

    // assert Not(Not(exists[@97]<vesting::VestingContract>($t1))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:335:9+53
    assume {:print "$at(3,14524,14577)"} true;
    assert {:msg "assert_failed(3,14524,14577): function does not abort under this condition"}
      !!$ResourceExists($1_vesting_VestingContract_$memory#97, $t1);

    // assert Not(And(Neq<address>($t8, select vesting::VestingContract.admin($t9)), Not(string::spec_internal_check_utf8[]([82, 79, 76, 69, 95, 66, 69, 78, 69, 70, 73, 67, 73, 65, 82, 89, 95, 82, 69, 83, 69, 84, 84, 69, 82])))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:339:9+110
    assume {:print "$at(3,14709,14819)"} true;
    assert {:msg "assert_failed(3,14709,14819): function does not abort under this condition"}
      !(!$IsEqual'address'($t8, $t9->$admin) && !$1_string_spec_internal_check_utf8(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(82, 79, 76, 69), MakeVec4(95, 66, 69, 78)), MakeVec4(69, 70, 73, 67)), MakeVec4(73, 65, 82, 89)), MakeVec4(95, 82, 69, 83)), MakeVec4(69, 84, 84, 69)), MakeVec1(82))));

    // assert Not(And(Neq<address>($t8, select vesting::VestingContract.admin($t9)), Not(exists[@98]<vesting::VestingAccountManagement>($t1)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:340:9+96
    assume {:print "$at(3,14828,14924)"} true;
    assert {:msg "assert_failed(3,14828,14924): function does not abort under this condition"}
      !(!$IsEqual'address'($t8, $t9->$admin) && !$ResourceExists($1_vesting_VestingAccountManagement_$memory#98, $t1));

    // assert Not(And(Neq<address>($t8, select vesting::VestingContract.admin($t9)), Not(simple_map::spec_contains_key[]<string::String, address>($t10, $t11)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:343:9+88
    assume {:print "$at(3,15081,15169)"} true;
    assert {:msg "assert_failed(3,15081,15169): function does not abort under this condition"}
      !(!$IsEqual'address'($t8, $t9->$admin) && !$1_simple_map_spec_contains_key'$1_string_String_address'($t10, $t11));

    // assert Not(And(Neq<address>($t8, select vesting::VestingContract.admin($t9)), Neq<address>($t8, simple_map::spec_get[]<string::String, address>($t10, $t11)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:344:9+86
    assume {:print "$at(3,15178,15264)"} true;
    assert {:msg "assert_failed(3,15178,15264): function does not abort under this condition"}
      !(!$IsEqual'address'($t8, $t9->$admin) && !$IsEqual'address'($t8, $1_simple_map_spec_get'$1_string_String_address'($t10, $t11)));

    // assert Not(simple_map::spec_contains_key<address, address>(select vesting::VestingContract.beneficiaries($t29), $t2)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:347:9+88
    assume {:print "$at(3,15358,15446)"} true;
    assert {:msg "assert_failed(3,15358,15446): post-condition does not hold"}
      !$1_simple_map_spec_contains_key'address_address'($t29->$beneficiaries, $t2);

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:347:9+88
    return;

    // label L10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:875:5+1
    assume {:print "$at(2,40745,40746)"} true;
L10:

    // assert Or(Or(Or(Or(Not(exists[@97]<vesting::VestingContract>($t1)), And(Neq<address>($t8, select vesting::VestingContract.admin($t9)), Not(string::spec_internal_check_utf8[]([82, 79, 76, 69, 95, 66, 69, 78, 69, 70, 73, 67, 73, 65, 82, 89, 95, 82, 69, 83, 69, 84, 84, 69, 82])))), And(Neq<address>($t8, select vesting::VestingContract.admin($t9)), Not(exists[@98]<vesting::VestingAccountManagement>($t1)))), And(Neq<address>($t8, select vesting::VestingContract.admin($t9)), Not(simple_map::spec_contains_key[]<string::String, address>($t10, $t11)))), And(Neq<address>($t8, select vesting::VestingContract.admin($t9)), Neq<address>($t8, simple_map::spec_get[]<string::String, address>($t10, $t11)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:330:5+1059
    assume {:print "$at(3,14393,15452)"} true;
    assert {:msg "assert_failed(3,14393,15452): abort not covered by any of the `aborts_if` clauses"}
      ((((!$ResourceExists($1_vesting_VestingContract_$memory#97, $t1) || (!$IsEqual'address'($t8, $t9->$admin) && !$1_string_spec_internal_check_utf8(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(82, 79, 76, 69), MakeVec4(95, 66, 69, 78)), MakeVec4(69, 70, 73, 67)), MakeVec4(73, 65, 82, 89)), MakeVec4(95, 82, 69, 83)), MakeVec4(69, 84, 84, 69)), MakeVec1(82))))) || (!$IsEqual'address'($t8, $t9->$admin) && !$ResourceExists($1_vesting_VestingAccountManagement_$memory#98, $t1))) || (!$IsEqual'address'($t8, $t9->$admin) && !$1_simple_map_spec_contains_key'$1_string_String_address'($t10, $t11))) || (!$IsEqual'address'($t8, $t9->$admin) && !$IsEqual'address'($t8, $1_simple_map_spec_get'$1_string_String_address'($t10, $t11))));

    // abort($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:330:5+1059
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// fun vesting::set_beneficiary [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:822:5+1396
procedure {:timeLimit 40} $1_vesting_set_beneficiary$verify(_$t0: $signer, _$t1: int, _$t2: int, _$t3: int) returns ()
{
    // declare local variables
    var $t4: int;
    var $t5: int;
    var $t6: $Mutation (Table int (int));
    var $t7: $Mutation (int);
    var $t8: int;
    var $t9: $Mutation ($1_vesting_VestingContract);
    var $t10: $1_vesting_VestingContract;
    var $t11: int;
    var $t12: $Mutation ($1_vesting_VestingContract);
    var $t13: $1_vesting_VestingContract;
    var $t14: $1_vesting_VestingContract;
    var $t15: int;
    var $t16: $Mutation (Table int (int));
    var $t17: Table int (int);
    var $t18: bool;
    var $t19: $Mutation (int);
    var $t20: $Mutation ($1_event_EventHandle'$1_vesting_SetBeneficiaryEvent');
    var $t21: int;
    var $t22: $1_vesting_SetBeneficiaryEvent;
    var $t23: $1_vesting_VestingContract;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $temp_0'$1_simple_map_SimpleMap'address_address'': Table int (int);
    var $temp_0'$1_vesting_VestingContract': $1_vesting_VestingContract;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $1_account_Account_$memory#93: $Memory $1_account_Account;
    var $1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory#94: $Memory $1_coin_CoinStore'$1_aptos_coin_AptosCoin';
    var $1_vesting_VestingContract_$memory#95: $Memory $1_vesting_VestingContract;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:822:5+1
    assume {:print "$at(2,38458,38459)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:822:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:822:5+1
    assume $IsValid'address'($t2);

    // assume WellFormed($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:822:5+1
    assume $IsValid'address'($t3);

    // assume forall $rsc: account::Account: ResourceDomain<account::Account>(): And(WellFormed($rsc), And(Le(Len<address>(select option::Option.vec(select account::CapabilityOffer.for(select account::Account.rotation_capability_offer($rsc)))), 1), Le(Len<address>(select option::Option.vec(select account::CapabilityOffer.for(select account::Account.signer_capability_offer($rsc)))), 1))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:822:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_account_Account_$memory, $a_0)}(var $rsc := $ResourceValue($1_account_Account_$memory, $a_0);
    (($IsValid'$1_account_Account'($rsc) && ((LenVec($rsc->$rotation_capability_offer->$for->$vec) <= 1) && (LenVec($rsc->$signer_capability_offer->$for->$vec) <= 1))))));

    // assume forall $rsc: coin::CoinInfo<aptos_coin::AptosCoin>: ResourceDomain<coin::CoinInfo<aptos_coin::AptosCoin>>(): And(WellFormed($rsc), And(Le(Len<optional_aggregator::OptionalAggregator>(select option::Option.vec(select coin::CoinInfo.supply($rsc))), 1), forall $elem: optional_aggregator::OptionalAggregator: select option::Option.vec(select coin::CoinInfo.supply($rsc)): And(And(And(And(And(Iff(option::$is_some<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)), option::$is_none<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem))), Iff(option::$is_some<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)), option::$is_none<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)))), Implies(option::$is_some<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)), Le(select optional_aggregator::Integer.value(option::$borrow<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem))), select optional_aggregator::Integer.limit(option::$borrow<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)))))), Implies(option::$is_some<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)), Le(aggregator::spec_aggregator_get_val(option::$borrow<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem))), aggregator::spec_get_limit(option::$borrow<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)))))), Le(Len<aggregator::Aggregator>(select option::Option.vec(select optional_aggregator::OptionalAggregator.aggregator($elem))), 1)), Le(Len<optional_aggregator::Integer>(select option::Option.vec(select optional_aggregator::OptionalAggregator.integer($elem))), 1)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:822:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    (($IsValid'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''($rsc) && ((LenVec($rsc->$supply->$vec) <= 1) && (var $range_1 := $rsc->$supply->$vec; (forall $i_2: int :: InRangeVec($range_1, $i_2) ==> (var $elem := ReadVec($range_1, $i_2);
    ((((((($1_option_$is_some'$1_aggregator_Aggregator'($elem->$aggregator) <==> $1_option_$is_none'$1_optional_aggregator_Integer'($elem->$integer)) && ($1_option_$is_some'$1_optional_aggregator_Integer'($elem->$integer) <==> $1_option_$is_none'$1_aggregator_Aggregator'($elem->$aggregator))) && ($1_option_$is_some'$1_optional_aggregator_Integer'($elem->$integer) ==> ($1_option_$borrow'$1_optional_aggregator_Integer'($elem->$integer)->$value <= $1_option_$borrow'$1_optional_aggregator_Integer'($elem->$integer)->$limit))) && ($1_option_$is_some'$1_aggregator_Aggregator'($elem->$aggregator) ==> ($1_aggregator_spec_aggregator_get_val($1_option_$borrow'$1_aggregator_Aggregator'($elem->$aggregator)) <= $1_aggregator_spec_get_limit($1_option_$borrow'$1_aggregator_Aggregator'($elem->$aggregator))))) && (LenVec($elem->$aggregator->$vec) <= 1)) && (LenVec($elem->$integer->$vec) <= 1)))))))))));

    // assume forall $rsc: coin::CoinStore<aptos_coin::AptosCoin>: ResourceDomain<coin::CoinStore<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:822:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''($rsc))));

    // assume forall $rsc: coin::Ghost$supply<aptos_coin::AptosCoin>: ResourceDomain<coin::Ghost$supply<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:822:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''($rsc))));

    // assume exists<coin::Ghost$supply<aptos_coin::AptosCoin>>(0x0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:822:5+1
    assume $ResourceExists($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, 0);

    // assume forall $rsc: coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>: ResourceDomain<coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:822:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''($rsc))));

    // assume exists<coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>>(0x0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:822:5+1
    assume $ResourceExists($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, 0);

    // assume forall $rsc: vesting::VestingContract: ResourceDomain<vesting::VestingContract>(): And(WellFormed($rsc), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($rsc)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:822:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_VestingContract_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_VestingContract_$memory, $a_0);
    (($IsValid'$1_vesting_VestingContract'($rsc) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($rsc->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($rsc->$grant_pool->$shareholders, addr)))) && (var $range_1 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (var $range_2 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'(ReadVec($rsc->$grant_pool->$shareholders, i), ReadVec($rsc->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j)))))))))))));

    // assume Identical($t10, global<vesting::VestingContract>($t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:525:9+65
    assume {:print "$at(3,23419,23484)"} true;
    assume ($t10 == $ResourceValue($1_vesting_VestingContract_$memory, $t1));

    // @93 := save_mem(account::Account) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:822:5+1
    assume {:print "$at(2,38458,38459)"} true;
    $1_account_Account_$memory#93 := $1_account_Account_$memory;

    // @94 := save_mem(coin::CoinStore<aptos_coin::AptosCoin>) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:822:5+1
    $1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory#94 := $1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory;

    // @95 := save_mem(vesting::VestingContract) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:822:5+1
    $1_vesting_VestingContract_$memory#95 := $1_vesting_VestingContract_$memory;

    // trace_local[admin]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:822:5+1
    assume {:print "$track_local(60,20,0):", $t0} $t0 == $t0;

    // trace_local[contract_address]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:822:5+1
    assume {:print "$track_local(60,20,1):", $t1} $t1 == $t1;

    // trace_local[shareholder]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:822:5+1
    assume {:print "$track_local(60,20,2):", $t2} $t2 == $t2;

    // trace_local[new_beneficiary]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:822:5+1
    assume {:print "$track_local(60,20,3):", $t3} $t3 == $t3;

    // aptos_account::assert_account_is_registered_for_apt($t3) on_abort goto L4 with $t11 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:830:9+53
    assume {:print "$at(2,38878,38931)"} true;
    call $1_aptos_account_assert_account_is_registered_for_apt($t3);
    if ($abort_flag) {
        assume {:print "$at(2,38878,38931)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(60,20):", $t11} $t11 == $t11;
        goto L4;
    }

    // $t12 := borrow_global<vesting::VestingContract>($t1) on_abort goto L4 with $t11 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:832:32+17
    assume {:print "$at(2,38965,38982)"} true;
    if (!$ResourceExists($1_vesting_VestingContract_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t12 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_vesting_VestingContract_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(2,38965,38982)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(60,20):", $t11} $t11 == $t11;
        goto L4;
    }

    // trace_local[vesting_contract]($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:832:13+16
    $temp_0'$1_vesting_VestingContract' := $Dereference($t12);
    assume {:print "$track_local(60,20,9):", $temp_0'$1_vesting_VestingContract'} $temp_0'$1_vesting_VestingContract' == $temp_0'$1_vesting_VestingContract';

    // $t13 := read_ref($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:833:21+25
    assume {:print "$at(2,39039,39064)"} true;
    $t13 := $Dereference($t12);

    // vesting::verify_admin($t0, $t13) on_abort goto L4 with $t11 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:833:9+37
    call $1_vesting_verify_admin($t0, $t13);
    if ($abort_flag) {
        assume {:print "$at(2,39027,39064)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(60,20):", $t11} $t11 == $t11;
        goto L4;
    }

    // $t14 := read_ref($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:835:46+31
    assume {:print "$at(2,39112,39143)"} true;
    $t14 := $Dereference($t12);

    // $t15 := vesting::get_beneficiary($t14, $t2) on_abort goto L4 with $t11 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:835:31+46
    call $t15 := $1_vesting_get_beneficiary($t14, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,39097,39143)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(60,20):", $t11} $t11 == $t11;
        goto L4;
    }

    // trace_local[old_beneficiary]($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:835:13+15
    assume {:print "$track_local(60,20,8):", $t15} $t15 == $t15;

    // $t16 := borrow_field<vesting::VestingContract>.beneficiaries($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:836:29+35
    assume {:print "$at(2,39173,39208)"} true;
    $t16 := $ChildMutation($t12, 3, $Dereference($t12)->$beneficiaries);

    // trace_local[beneficiaries]($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:836:13+13
    $temp_0'$1_simple_map_SimpleMap'address_address'' := $Dereference($t16);
    assume {:print "$track_local(60,20,6):", $temp_0'$1_simple_map_SimpleMap'address_address''} $temp_0'$1_simple_map_SimpleMap'address_address'' == $temp_0'$1_simple_map_SimpleMap'address_address'';

    // $t17 := read_ref($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:837:37+29
    assume {:print "$at(2,39246,39275)"} true;
    $t17 := $Dereference($t16);

    // $t18 := simple_map::contains_key<address, address>($t17, $t2) on_abort goto L4 with $t11 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:837:13+53
    call $t18 := $1_simple_map_contains_key'address_address'($t17, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,39222,39275)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(60,20):", $t11} $t11 == $t11;
        goto L4;
    }

    // if ($t18) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:837:9+288
    if ($t18) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:838:54+13
    assume {:print "$at(2,39332,39345)"} true;
L1:

    // $t19 := simple_map::borrow_mut<address, address>($t16, $t2) on_abort goto L4 with $t11 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:838:31+51
    assume {:print "$at(2,39309,39360)"} true;
    call $t19,$t16 := $1_simple_map_borrow_mut'address_address'($t16, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,39309,39360)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(60,20):", $t11} $t11 == $t11;
        goto L4;
    }

    // trace_local[beneficiary]($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:838:17+11
    $temp_0'address' := $Dereference($t19);
    assume {:print "$track_local(60,20,7):", $temp_0'address'} $temp_0'address' == $temp_0'address';

    // write_ref($t19, $t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:839:13+30
    assume {:print "$at(2,39374,39404)"} true;
    $t19 := $UpdateMutation($t19, $t3);

    // write_back[Reference($t16)[]]($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:839:13+30
    $t16 := $UpdateMutation($t16, UpdateTable($Dereference($t16), ReadVec($t19->p, LenVec($t16->p)), $Dereference($t19)));

    // write_back[Reference($t12).beneficiaries (simple_map::SimpleMap<address, address>)]($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:839:13+30
    $t12 := $UpdateMutation($t12, $Update'$1_vesting_VestingContract'_beneficiaries($Dereference($t12), $Dereference($t16)));

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:839:43+1
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:841:29+13
    assume {:print "$at(2,39451,39464)"} true;
L0:

    // simple_map::add<address, address>($t16, $t2, $t3) on_abort goto L4 with $t11 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:841:13+60
    assume {:print "$at(2,39435,39495)"} true;
    call $t16 := $1_simple_map_add'address_address'($t16, $t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(2,39435,39495)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(60,20):", $t11} $t11 == $t11;
        goto L4;
    }

    // write_back[Reference($t12).beneficiaries (simple_map::SimpleMap<address, address>)]($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:841:13+60
    $t12 := $UpdateMutation($t12, $Update'$1_vesting_VestingContract'_beneficiaries($Dereference($t12), $Dereference($t16)));

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:845:18+16
    assume {:print "$at(2,39546,39562)"} true;
L2:

    // $t20 := borrow_field<vesting::VestingContract>.set_beneficiary_events($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:845:13+44
    assume {:print "$at(2,39541,39585)"} true;
    $t20 := $ChildMutation($t12, 12, $Dereference($t12)->$set_beneficiary_events);

    // $t21 := get_field<vesting::VestingContract>.admin($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:847:24+22
    assume {:print "$at(2,39644,39666)"} true;
    $t21 := $Dereference($t12)->$admin;

    // $t22 := pack vesting::SetBeneficiaryEvent($t21, $t1, $t2, $t15, $t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:846:13+237
    assume {:print "$at(2,39599,39836)"} true;
    $t22 := $1_vesting_SetBeneficiaryEvent($t21, $t1, $t2, $t15, $t3);

    // opaque begin: event::emit_event<vesting::SetBeneficiaryEvent>($t20, $t22) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:844:9+330
    assume {:print "$at(2,39517,39847)"} true;

    // opaque end: event::emit_event<vesting::SetBeneficiaryEvent>($t20, $t22) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:844:9+330

    // write_back[Reference($t12).set_beneficiary_events (event::EventHandle<vesting::SetBeneficiaryEvent>)]($t20) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:844:9+330
    $t12 := $UpdateMutation($t12, $Update'$1_vesting_VestingContract'_set_beneficiary_events($Dereference($t12), $Dereference($t20)));

    // assert forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($t12)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t12)), addr)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:16:9+135
    // data invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:16:9+135
    assume {:print "$at(68,538,673)"} true;
    assert {:msg "assert_failed(68,538,673): data invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($Dereference($t12)->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($Dereference($t12)->$grant_pool->$shareholders, addr))));

    // assert forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t12)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t12)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t12)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t12)), j)), Eq<num>(i, j)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:20:9+129
    // data invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:20:9+129
    assume {:print "$at(68,738,867)"} true;
    assert {:msg "assert_failed(68,738,867): data invariant does not hold"}
      (var $range_0 := $Range(0, LenVec($Dereference($t12)->$grant_pool->$shareholders)); (var $range_1 := $Range(0, LenVec($Dereference($t12)->$grant_pool->$shareholders)); (forall $i_2: int, $i_3: int :: $InRange($range_0, $i_2) ==> $InRange($range_1, $i_3) ==> (var i := $i_2;
    (var j := $i_3;
    (($IsEqual'address'(ReadVec($Dereference($t12)->$grant_pool->$shareholders, i), ReadVec($Dereference($t12)->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j))))))));

    // write_back[vesting::VestingContract@]($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:844:9+330
    assume {:print "$at(2,39517,39847)"} true;
    $1_vesting_VestingContract_$memory := $ResourceUpdate($1_vesting_VestingContract_$memory, $GlobalLocationAddress($t12),
        $Dereference($t12));

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:854:5+1
    assume {:print "$at(2,39853,39854)"} true;
L3:

    // assume Identical($t23, global<vesting::VestingContract>($t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:326:9+70
    assume {:print "$at(3,14220,14290)"} true;
    assume ($t23 == $ResourceValue($1_vesting_VestingContract_$memory, $t1));

    // assert Not(Not(account::$exists_at[@93]($t3))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:323:9+47
    assume {:print "$at(3,14051,14098)"} true;
    assert {:msg "assert_failed(3,14051,14098): function does not abort under this condition"}
      !!$1_account_$exists_at($1_account_Account_$memory#93, $t3);

    // assert Not(Not(coin::$is_account_registered[@94]<aptos_coin::AptosCoin>($t3))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:324:9+67
    assume {:print "$at(3,14107,14174)"} true;
    assert {:msg "assert_failed(3,14107,14174): function does not abort under this condition"}
      !!$1_coin_$is_account_registered'$1_aptos_coin_AptosCoin'($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory#94, $t3);

    // assert Not(Not(exists[@95]<vesting::VestingContract>($t1))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:524:9+53
    assume {:print "$at(3,23357,23410)"} true;
    assert {:msg "assert_failed(3,23357,23410): function does not abort under this condition"}
      !!$ResourceExists($1_vesting_VestingContract_$memory#95, $t1);

    // assert Not(Neq<address>(signer::$address_of[]($t0), select vesting::VestingContract.admin($t10))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:526:9+62
    assume {:print "$at(3,23493,23555)"} true;
    assert {:msg "assert_failed(3,23493,23555): function does not abort under this condition"}
      !!$IsEqual'address'($1_signer_$address_of($t0), $t10->$admin);

    // assert simple_map::spec_contains_key<address, address>(select vesting::VestingContract.beneficiaries($t23), $t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:327:9+82
    assume {:print "$at(3,14299,14381)"} true;
    assert {:msg "assert_failed(3,14299,14381): post-condition does not hold"}
      $1_simple_map_spec_contains_key'address_address'($t23->$beneficiaries, $t2);

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:327:9+82
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:854:5+1
    assume {:print "$at(2,39853,39854)"} true;
L4:

    // assert Or(Or(Or(Not(account::$exists_at[@93]($t3)), Not(coin::$is_account_registered[@94]<aptos_coin::AptosCoin>($t3))), Not(exists[@95]<vesting::VestingContract>($t1))), Neq<address>(signer::$address_of[]($t0), select vesting::VestingContract.admin($t10))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:317:5+497
    assume {:print "$at(3,13890,14387)"} true;
    assert {:msg "assert_failed(3,13890,14387): abort not covered by any of the `aborts_if` clauses"}
      (((!$1_account_$exists_at($1_account_Account_$memory#93, $t3) || !$1_coin_$is_account_registered'$1_aptos_coin_AptosCoin'($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory#94, $t3)) || !$ResourceExists($1_vesting_VestingContract_$memory#95, $t1)) || !$IsEqual'address'($1_signer_$address_of($t0), $t10->$admin));

    // abort($t11) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:317:5+497
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun vesting::set_beneficiary_resetter [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:900:5+314
procedure {:timeLimit 40} $1_vesting_set_beneficiary_resetter$verify(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: $1_vesting_VestingContract;
    var $t4: Vec (int);
    var $t5: $1_string_String;
    var $t6: int;
    var $t7: $1_vesting_VestingContract;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $1_vesting_VestingContract_$memory#91: $Memory $1_vesting_VestingContract;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:900:5+1
    assume {:print "$at(2,41709,41710)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:900:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:900:5+1
    assume $IsValid'address'($t2);

    // assume forall $rsc: vesting::VestingAccountManagement: ResourceDomain<vesting::VestingAccountManagement>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:900:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_VestingAccountManagement_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_VestingAccountManagement_$memory, $a_0);
    ($IsValid'$1_vesting_VestingAccountManagement'($rsc))));

    // assume forall $rsc: vesting::VestingContract: ResourceDomain<vesting::VestingContract>(): And(WellFormed($rsc), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($rsc)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:900:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_VestingContract_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_VestingContract_$memory, $a_0);
    (($IsValid'$1_vesting_VestingContract'($rsc) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($rsc->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($rsc->$grant_pool->$shareholders, addr)))) && (var $range_1 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (var $range_2 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'(ReadVec($rsc->$grant_pool->$shareholders, i), ReadVec($rsc->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j)))))))))))));

    // assume Identical($t3, global<vesting::VestingContract>($t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:516:9+65
    assume {:print "$at(3,22961,23026)"} true;
    assume ($t3 == $ResourceValue($1_vesting_VestingContract_$memory, $t1));

    // @91 := save_mem(vesting::VestingContract) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:900:5+1
    assume {:print "$at(2,41709,41710)"} true;
    $1_vesting_VestingContract_$memory#91 := $1_vesting_VestingContract_$memory;

    // trace_local[admin]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:900:5+1
    assume {:print "$track_local(60,22,0):", $t0} $t0 == $t0;

    // trace_local[contract_address]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:900:5+1
    assume {:print "$track_local(60,22,1):", $t1} $t1 == $t1;

    // trace_local[beneficiary_resetter]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:900:5+1
    assume {:print "$track_local(60,22,2):", $t2} $t2 == $t2;

    // $t4 := [82, 79, 76, 69, 95, 66, 69, 78, 69, 70, 73, 67, 73, 65, 82, 89, 95, 82, 69, 83, 69, 84, 84, 69, 82] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:905:59+25
    assume {:print "$at(2,41967,41992)"} true;
    $t4 := ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(82, 79, 76, 69), MakeVec4(95, 66, 69, 78)), MakeVec4(69, 70, 73, 67)), MakeVec4(73, 65, 82, 89)), MakeVec4(95, 82, 69, 83)), MakeVec4(69, 84, 84, 69)), MakeVec1(82));
    assume $IsValid'vec'u8''($t4);

    // $t5 := string::utf8($t4) on_abort goto L2 with $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:905:54+31
    call $t5 := $1_string_utf8($t4);
    if ($abort_flag) {
        assume {:print "$at(2,41962,41993)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(60,22):", $t6} $t6 == $t6;
        goto L2;
    }

    // assume Identical($t7, global<vesting::VestingContract>($t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:516:9+65
    assume {:print "$at(3,22961,23026)"} true;
    assume ($t7 == $ResourceValue($1_vesting_VestingContract_$memory, $t1));

    // vesting::set_management_role($t0, $t1, $t5, $t2) on_abort goto L2 with $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:905:9+99
    assume {:print "$at(2,41917,42016)"} true;
    call $1_vesting_set_management_role($t0, $t1, $t5, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,41917,42016)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(60,22):", $t6} $t6 == $t6;
        goto L2;
    }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:906:5+1
    assume {:print "$at(2,42022,42023)"} true;
L1:

    // assert Not(Not(string::spec_internal_check_utf8[]([82, 79, 76, 69, 95, 66, 69, 78, 69, 70, 73, 67, 73, 65, 82, 89, 95, 82, 69, 83, 69, 84, 84, 69, 82]))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:366:9+76
    assume {:print "$at(3,15876,15952)"} true;
    assert {:msg "assert_failed(3,15876,15952): function does not abort under this condition"}
      !!$1_string_spec_internal_check_utf8(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(82, 79, 76, 69), MakeVec4(95, 66, 69, 78)), MakeVec4(69, 70, 73, 67)), MakeVec4(73, 65, 82, 89)), MakeVec4(95, 82, 69, 83)), MakeVec4(69, 84, 84, 69)), MakeVec1(82)));

    // assert Not(Not(exists[@91]<vesting::VestingContract>($t1))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:515:9+53
    assume {:print "$at(3,22899,22952)"} true;
    assert {:msg "assert_failed(3,22899,22952): function does not abort under this condition"}
      !!$ResourceExists($1_vesting_VestingContract_$memory#91, $t1);

    // assert Not(Neq<address>(signer::$address_of[]($t0), select vesting::VestingContract.admin($t3))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:518:9+62
    assume {:print "$at(3,23183,23245)"} true;
    assert {:msg "assert_failed(3,23183,23245): function does not abort under this condition"}
      !!$IsEqual'address'($1_signer_$address_of($t0), $t3->$admin);

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:518:9+62
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:906:5+1
    assume {:print "$at(2,42022,42023)"} true;
L2:

    // abort($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:906:5+1
    assume {:print "$at(2,42022,42023)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun vesting::set_management_role [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:877:5+951
procedure {:inline 1} $1_vesting_set_management_role(_$t0: $signer, _$t1: int, _$t2: $1_string_String, _$t3: int) returns ()
{
    // declare local variables
    var $t4: $signer;
    var $t5: $1_string_String;
    var $t6: $Mutation (Table int (int));
    var $t7: $Mutation ($1_vesting_VestingContract);
    var $t8: $1_vesting_VestingContract;
    var $t9: $Mutation ($1_vesting_VestingContract);
    var $t10: int;
    var $t11: $1_vesting_VestingContract;
    var $t12: bool;
    var $t13: bool;
    var $t14: $1_vesting_VestingContract;
    var $t15: $signer;
    var $t16: Table int (int);
    var $t17: $1_vesting_VestingAccountManagement;
    var $t18: $Mutation ($1_vesting_VestingAccountManagement);
    var $t19: $Mutation (Table int (int));
    var $t20: Table int (int);
    var $t21: bool;
    var $t22: $Mutation (int);
    var $t0: $signer;
    var $t1: int;
    var $t2: $1_string_String;
    var $t3: int;
    var $temp_0'$1_simple_map_SimpleMap'$1_string_String_address'': Table int (int);
    var $temp_0'$1_string_String': $1_string_String;
    var $temp_0'$1_vesting_VestingContract': $1_vesting_VestingContract;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // assume Identical($t8, global<vesting::VestingContract>($t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:516:9+65
    assume {:print "$at(3,22961,23026)"} true;
    assume ($t8 == $ResourceValue($1_vesting_VestingContract_$memory, $t1));

    // trace_local[admin]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:877:5+1
    assume {:print "$at(2,40752,40753)"} true;
    assume {:print "$track_local(60,23,0):", $t0} $t0 == $t0;

    // trace_local[contract_address]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:877:5+1
    assume {:print "$track_local(60,23,1):", $t1} $t1 == $t1;

    // trace_local[role]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:877:5+1
    assume {:print "$track_local(60,23,2):", $t2} $t2 == $t2;

    // trace_local[role_holder]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:877:5+1
    assume {:print "$track_local(60,23,3):", $t3} $t3 == $t3;

    // $t9 := borrow_global<vesting::VestingContract>($t1) on_abort goto L7 with $t10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:883:32+17
    assume {:print "$at(2,40991,41008)"} true;
    if (!$ResourceExists($1_vesting_VestingContract_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_vesting_VestingContract_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(2,40991,41008)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(60,23):", $t10} $t10 == $t10;
        goto L7;
    }

    // trace_local[vesting_contract]($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:883:13+16
    $temp_0'$1_vesting_VestingContract' := $Dereference($t9);
    assume {:print "$track_local(60,23,7):", $temp_0'$1_vesting_VestingContract'} $temp_0'$1_vesting_VestingContract' == $temp_0'$1_vesting_VestingContract';

    // $t11 := read_ref($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:884:21+25
    assume {:print "$at(2,41065,41090)"} true;
    $t11 := $Dereference($t9);

    // vesting::verify_admin($t0, $t11) on_abort goto L7 with $t10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:884:9+37
    call $1_vesting_verify_admin($t0, $t11);
    if ($abort_flag) {
        assume {:print "$at(2,41053,41090)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(60,23):", $t10} $t10 == $t10;
        goto L7;
    }

    // $t12 := exists<vesting::VestingAccountManagement>($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:886:14+6
    assume {:print "$at(2,41106,41112)"} true;
    $t12 := $ResourceExists($1_vesting_VestingAccountManagement_$memory, $t1);

    // $t13 := !($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:886:13+1
    call $t13 := $Not($t12);

    // if ($t13) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:886:9+299
    if ($t13) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:887:72+16
    assume {:print "$at(2,41231,41247)"} true;
L1:

    // $t14 := read_ref($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:887:72+16
    assume {:print "$at(2,41231,41247)"} true;
    $t14 := $Dereference($t9);

    // pack_ref_deep($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:887:72+16

    // $t15 := vesting::get_vesting_account_signer_internal($t14) on_abort goto L7 with $t10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:887:36+53
    call $t15 := $1_vesting_get_vesting_account_signer_internal($t14);
    if ($abort_flag) {
        assume {:print "$at(2,41195,41248)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(60,23):", $t10} $t10 == $t10;
        goto L7;
    }

    // $t16 := simple_map::create<string::String, address>() on_abort goto L7 with $t10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:889:24+37
    assume {:print "$at(2,41337,41374)"} true;
    call $t16 := $1_simple_map_create'$1_string_String_address'();
    if ($abort_flag) {
        assume {:print "$at(2,41337,41374)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(60,23):", $t10} $t10 == $t10;
        goto L7;
    }

    // $t17 := pack vesting::VestingAccountManagement($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:888:38+102
    assume {:print "$at(2,41287,41389)"} true;
    $t17 := $1_vesting_VestingAccountManagement($t16);

    // move_to<vesting::VestingAccountManagement>($t17, $t15) on_abort goto L7 with $t10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:888:13+7
    if ($ResourceExists($1_vesting_VestingAccountManagement_$memory, $t15->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_vesting_VestingAccountManagement_$memory := $ResourceUpdate($1_vesting_VestingAccountManagement_$memory, $t15->$addr, $t17);
    }
    if ($abort_flag) {
        assume {:print "$at(2,41262,41269)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(60,23):", $t10} $t10 == $t10;
        goto L7;
    }

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:888:13+128
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:886:9+299
    assume {:print "$at(2,41101,41400)"} true;
L0:

    // pack_ref_deep($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:886:9+299
    assume {:print "$at(2,41101,41400)"} true;

    // destroy($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:886:9+299

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:892:70+16
    assume {:print "$at(2,41471,41487)"} true;
L2:

    // $t18 := borrow_global<vesting::VestingAccountManagement>($t1) on_abort goto L7 with $t10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:892:26+17
    assume {:print "$at(2,41427,41444)"} true;
    if (!$ResourceExists($1_vesting_VestingAccountManagement_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t18 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_vesting_VestingAccountManagement_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(2,41427,41444)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(60,23):", $t10} $t10 == $t10;
        goto L7;
    }

    // $t19 := borrow_field<vesting::VestingAccountManagement>.roles($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:892:21+72
    $t19 := $ChildMutation($t18, 0, $Dereference($t18)->$roles);

    // trace_local[roles]($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:892:13+5
    $temp_0'$1_simple_map_SimpleMap'$1_string_String_address'' := $Dereference($t19);
    assume {:print "$track_local(60,23,6):", $temp_0'$1_simple_map_SimpleMap'$1_string_String_address''} $temp_0'$1_simple_map_SimpleMap'$1_string_String_address'' == $temp_0'$1_simple_map_SimpleMap'$1_string_String_address'';

    // $t20 := read_ref($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:893:37+14
    assume {:print "$at(2,41532,41546)"} true;
    $t20 := $Dereference($t19);

    // $t21 := simple_map::contains_key<string::String, address>($t20, $t2) on_abort goto L7 with $t10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:893:13+38
    call $t21 := $1_simple_map_contains_key'$1_string_String_address'($t20, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,41508,41546)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(60,23):", $t10} $t10 == $t10;
        goto L7;
    }

    // if ($t21) goto L4 else goto L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:893:9+192
    if ($t21) { goto L4; } else { goto L3; }

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:894:53+11
    assume {:print "$at(2,41602,41613)"} true;
L4:

    // $t22 := simple_map::borrow_mut<string::String, address>($t19, $t2) on_abort goto L7 with $t10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:894:14+36
    assume {:print "$at(2,41563,41599)"} true;
    call $t22,$t19 := $1_simple_map_borrow_mut'$1_string_String_address'($t19, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,41563,41599)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(60,23):", $t10} $t10 == $t10;
        goto L7;
    }

    // write_ref($t22, $t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:894:13+51
    $t22 := $UpdateMutation($t22, $t3);

    // write_back[Reference($t19)[]]($t22) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:894:13+51
    $t19 := $UpdateMutation($t19, UpdateTable($Dereference($t19), ReadVec($t22->p, LenVec($t19->p)), $Dereference($t22)));

    // write_back[Reference($t18).roles (simple_map::SimpleMap<string::String, address>)]($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:894:13+51
    $t18 := $UpdateMutation($t18, $Update'$1_vesting_VestingAccountManagement'_roles($Dereference($t18), $Dereference($t19)));

    // write_back[vesting::VestingAccountManagement@]($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:894:13+51
    $1_vesting_VestingAccountManagement_$memory := $ResourceUpdate($1_vesting_VestingAccountManagement_$memory, $GlobalLocationAddress($t18),
        $Dereference($t18));

    // goto L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:894:64+1
    goto L5;

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:896:29+5
    assume {:print "$at(2,41660,41665)"} true;
L3:

    // simple_map::add<string::String, address>($t19, $t2, $t3) on_abort goto L7 with $t10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:896:13+41
    assume {:print "$at(2,41644,41685)"} true;
    call $t19 := $1_simple_map_add'$1_string_String_address'($t19, $t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(2,41644,41685)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(60,23):", $t10} $t10 == $t10;
        goto L7;
    }

    // write_back[Reference($t18).roles (simple_map::SimpleMap<string::String, address>)]($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:896:13+41
    $t18 := $UpdateMutation($t18, $Update'$1_vesting_VestingAccountManagement'_roles($Dereference($t18), $Dereference($t19)));

    // write_back[vesting::VestingAccountManagement@]($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:896:13+41
    $1_vesting_VestingAccountManagement_$memory := $ResourceUpdate($1_vesting_VestingAccountManagement_$memory, $GlobalLocationAddress($t18),
        $Dereference($t18));

    // label L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:897:10+1
    assume {:print "$at(2,41696,41697)"} true;
L5:

    // label L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:898:5+1
    assume {:print "$at(2,41702,41703)"} true;
L6:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:898:5+1
    assume {:print "$at(2,41702,41703)"} true;
    return;

    // label L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:898:5+1
L7:

    // abort($t10) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:898:5+1
    assume {:print "$at(2,41702,41703)"} true;
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun vesting::set_management_role [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:877:5+951
procedure {:timeLimit 40} $1_vesting_set_management_role$verify(_$t0: $signer, _$t1: int, _$t2: $1_string_String, _$t3: int) returns ()
{
    // declare local variables
    var $t4: $signer;
    var $t5: $1_string_String;
    var $t6: $Mutation (Table int (int));
    var $t7: $Mutation ($1_vesting_VestingContract);
    var $t8: $1_vesting_VestingContract;
    var $t9: $Mutation ($1_vesting_VestingContract);
    var $t10: int;
    var $t11: $1_vesting_VestingContract;
    var $t12: bool;
    var $t13: bool;
    var $t14: $1_vesting_VestingContract;
    var $t15: $signer;
    var $t16: Table int (int);
    var $t17: $1_vesting_VestingAccountManagement;
    var $t18: $Mutation ($1_vesting_VestingAccountManagement);
    var $t19: $Mutation (Table int (int));
    var $t20: Table int (int);
    var $t21: bool;
    var $t22: $Mutation (int);
    var $t0: $signer;
    var $t1: int;
    var $t2: $1_string_String;
    var $t3: int;
    var $temp_0'$1_simple_map_SimpleMap'$1_string_String_address'': Table int (int);
    var $temp_0'$1_string_String': $1_string_String;
    var $temp_0'$1_vesting_VestingContract': $1_vesting_VestingContract;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $1_vesting_VestingContract_$memory#72: $Memory $1_vesting_VestingContract;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:877:5+1
    assume {:print "$at(2,40752,40753)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:877:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:877:5+1
    assume $IsValid'$1_string_String'($t2);

    // assume WellFormed($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:877:5+1
    assume $IsValid'address'($t3);

    // assume forall $rsc: vesting::VestingAccountManagement: ResourceDomain<vesting::VestingAccountManagement>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:877:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_VestingAccountManagement_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_VestingAccountManagement_$memory, $a_0);
    ($IsValid'$1_vesting_VestingAccountManagement'($rsc))));

    // assume forall $rsc: vesting::VestingContract: ResourceDomain<vesting::VestingContract>(): And(WellFormed($rsc), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($rsc)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:877:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_VestingContract_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_VestingContract_$memory, $a_0);
    (($IsValid'$1_vesting_VestingContract'($rsc) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($rsc->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($rsc->$grant_pool->$shareholders, addr)))) && (var $range_1 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (var $range_2 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'(ReadVec($rsc->$grant_pool->$shareholders, i), ReadVec($rsc->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j)))))))))))));

    // assume Identical($t8, global<vesting::VestingContract>($t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:516:9+65
    assume {:print "$at(3,22961,23026)"} true;
    assume ($t8 == $ResourceValue($1_vesting_VestingContract_$memory, $t1));

    // @72 := save_mem(vesting::VestingContract) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:877:5+1
    assume {:print "$at(2,40752,40753)"} true;
    $1_vesting_VestingContract_$memory#72 := $1_vesting_VestingContract_$memory;

    // trace_local[admin]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:877:5+1
    assume {:print "$track_local(60,23,0):", $t0} $t0 == $t0;

    // trace_local[contract_address]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:877:5+1
    assume {:print "$track_local(60,23,1):", $t1} $t1 == $t1;

    // trace_local[role]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:877:5+1
    assume {:print "$track_local(60,23,2):", $t2} $t2 == $t2;

    // trace_local[role_holder]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:877:5+1
    assume {:print "$track_local(60,23,3):", $t3} $t3 == $t3;

    // $t9 := borrow_global<vesting::VestingContract>($t1) on_abort goto L7 with $t10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:883:32+17
    assume {:print "$at(2,40991,41008)"} true;
    if (!$ResourceExists($1_vesting_VestingContract_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_vesting_VestingContract_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(2,40991,41008)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(60,23):", $t10} $t10 == $t10;
        goto L7;
    }

    // trace_local[vesting_contract]($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:883:13+16
    $temp_0'$1_vesting_VestingContract' := $Dereference($t9);
    assume {:print "$track_local(60,23,7):", $temp_0'$1_vesting_VestingContract'} $temp_0'$1_vesting_VestingContract' == $temp_0'$1_vesting_VestingContract';

    // $t11 := read_ref($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:884:21+25
    assume {:print "$at(2,41065,41090)"} true;
    $t11 := $Dereference($t9);

    // vesting::verify_admin($t0, $t11) on_abort goto L7 with $t10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:884:9+37
    call $1_vesting_verify_admin($t0, $t11);
    if ($abort_flag) {
        assume {:print "$at(2,41053,41090)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(60,23):", $t10} $t10 == $t10;
        goto L7;
    }

    // $t12 := exists<vesting::VestingAccountManagement>($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:886:14+6
    assume {:print "$at(2,41106,41112)"} true;
    $t12 := $ResourceExists($1_vesting_VestingAccountManagement_$memory, $t1);

    // $t13 := !($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:886:13+1
    call $t13 := $Not($t12);

    // if ($t13) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:886:9+299
    if ($t13) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:887:72+16
    assume {:print "$at(2,41231,41247)"} true;
L1:

    // $t14 := read_ref($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:887:72+16
    assume {:print "$at(2,41231,41247)"} true;
    $t14 := $Dereference($t9);

    // assert forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($t9)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t9)), addr)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:16:9+135
    // data invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:16:9+135
    assume {:print "$at(68,538,673)"} true;
    assert {:msg "assert_failed(68,538,673): data invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($Dereference($t9)->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($Dereference($t9)->$grant_pool->$shareholders, addr))));

    // assert forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t9)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t9)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t9)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t9)), j)), Eq<num>(i, j)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:20:9+129
    // data invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:20:9+129
    assume {:print "$at(68,738,867)"} true;
    assert {:msg "assert_failed(68,738,867): data invariant does not hold"}
      (var $range_0 := $Range(0, LenVec($Dereference($t9)->$grant_pool->$shareholders)); (var $range_1 := $Range(0, LenVec($Dereference($t9)->$grant_pool->$shareholders)); (forall $i_2: int, $i_3: int :: $InRange($range_0, $i_2) ==> $InRange($range_1, $i_3) ==> (var i := $i_2;
    (var j := $i_3;
    (($IsEqual'address'(ReadVec($Dereference($t9)->$grant_pool->$shareholders, i), ReadVec($Dereference($t9)->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j))))))));

    // $t15 := vesting::get_vesting_account_signer_internal($t14) on_abort goto L7 with $t10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:887:36+53
    assume {:print "$at(2,41195,41248)"} true;
    call $t15 := $1_vesting_get_vesting_account_signer_internal($t14);
    if ($abort_flag) {
        assume {:print "$at(2,41195,41248)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(60,23):", $t10} $t10 == $t10;
        goto L7;
    }

    // $t16 := simple_map::create<string::String, address>() on_abort goto L7 with $t10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:889:24+37
    assume {:print "$at(2,41337,41374)"} true;
    call $t16 := $1_simple_map_create'$1_string_String_address'();
    if ($abort_flag) {
        assume {:print "$at(2,41337,41374)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(60,23):", $t10} $t10 == $t10;
        goto L7;
    }

    // $t17 := pack vesting::VestingAccountManagement($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:888:38+102
    assume {:print "$at(2,41287,41389)"} true;
    $t17 := $1_vesting_VestingAccountManagement($t16);

    // move_to<vesting::VestingAccountManagement>($t17, $t15) on_abort goto L7 with $t10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:888:13+7
    if ($ResourceExists($1_vesting_VestingAccountManagement_$memory, $t15->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_vesting_VestingAccountManagement_$memory := $ResourceUpdate($1_vesting_VestingAccountManagement_$memory, $t15->$addr, $t17);
    }
    if ($abort_flag) {
        assume {:print "$at(2,41262,41269)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(60,23):", $t10} $t10 == $t10;
        goto L7;
    }

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:888:13+128
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:886:9+299
    assume {:print "$at(2,41101,41400)"} true;
L0:

    // assert forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($t9)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t9)), addr)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:16:9+135
    // data invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:16:9+135
    assume {:print "$at(68,538,673)"} true;
    assert {:msg "assert_failed(68,538,673): data invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($Dereference($t9)->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($Dereference($t9)->$grant_pool->$shareholders, addr))));

    // assert forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t9)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t9)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t9)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t9)), j)), Eq<num>(i, j)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:20:9+129
    // data invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:20:9+129
    assume {:print "$at(68,738,867)"} true;
    assert {:msg "assert_failed(68,738,867): data invariant does not hold"}
      (var $range_0 := $Range(0, LenVec($Dereference($t9)->$grant_pool->$shareholders)); (var $range_1 := $Range(0, LenVec($Dereference($t9)->$grant_pool->$shareholders)); (forall $i_2: int, $i_3: int :: $InRange($range_0, $i_2) ==> $InRange($range_1, $i_3) ==> (var i := $i_2;
    (var j := $i_3;
    (($IsEqual'address'(ReadVec($Dereference($t9)->$grant_pool->$shareholders, i), ReadVec($Dereference($t9)->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j))))))));

    // destroy($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:886:9+299
    assume {:print "$at(2,41101,41400)"} true;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:892:70+16
    assume {:print "$at(2,41471,41487)"} true;
L2:

    // $t18 := borrow_global<vesting::VestingAccountManagement>($t1) on_abort goto L7 with $t10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:892:26+17
    assume {:print "$at(2,41427,41444)"} true;
    if (!$ResourceExists($1_vesting_VestingAccountManagement_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t18 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_vesting_VestingAccountManagement_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(2,41427,41444)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(60,23):", $t10} $t10 == $t10;
        goto L7;
    }

    // $t19 := borrow_field<vesting::VestingAccountManagement>.roles($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:892:21+72
    $t19 := $ChildMutation($t18, 0, $Dereference($t18)->$roles);

    // trace_local[roles]($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:892:13+5
    $temp_0'$1_simple_map_SimpleMap'$1_string_String_address'' := $Dereference($t19);
    assume {:print "$track_local(60,23,6):", $temp_0'$1_simple_map_SimpleMap'$1_string_String_address''} $temp_0'$1_simple_map_SimpleMap'$1_string_String_address'' == $temp_0'$1_simple_map_SimpleMap'$1_string_String_address'';

    // $t20 := read_ref($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:893:37+14
    assume {:print "$at(2,41532,41546)"} true;
    $t20 := $Dereference($t19);

    // $t21 := simple_map::contains_key<string::String, address>($t20, $t2) on_abort goto L7 with $t10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:893:13+38
    call $t21 := $1_simple_map_contains_key'$1_string_String_address'($t20, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,41508,41546)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(60,23):", $t10} $t10 == $t10;
        goto L7;
    }

    // if ($t21) goto L4 else goto L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:893:9+192
    if ($t21) { goto L4; } else { goto L3; }

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:894:53+11
    assume {:print "$at(2,41602,41613)"} true;
L4:

    // $t22 := simple_map::borrow_mut<string::String, address>($t19, $t2) on_abort goto L7 with $t10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:894:14+36
    assume {:print "$at(2,41563,41599)"} true;
    call $t22,$t19 := $1_simple_map_borrow_mut'$1_string_String_address'($t19, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,41563,41599)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(60,23):", $t10} $t10 == $t10;
        goto L7;
    }

    // write_ref($t22, $t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:894:13+51
    $t22 := $UpdateMutation($t22, $t3);

    // write_back[Reference($t19)[]]($t22) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:894:13+51
    $t19 := $UpdateMutation($t19, UpdateTable($Dereference($t19), ReadVec($t22->p, LenVec($t19->p)), $Dereference($t22)));

    // write_back[Reference($t18).roles (simple_map::SimpleMap<string::String, address>)]($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:894:13+51
    $t18 := $UpdateMutation($t18, $Update'$1_vesting_VestingAccountManagement'_roles($Dereference($t18), $Dereference($t19)));

    // write_back[vesting::VestingAccountManagement@]($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:894:13+51
    $1_vesting_VestingAccountManagement_$memory := $ResourceUpdate($1_vesting_VestingAccountManagement_$memory, $GlobalLocationAddress($t18),
        $Dereference($t18));

    // goto L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:894:64+1
    goto L5;

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:896:29+5
    assume {:print "$at(2,41660,41665)"} true;
L3:

    // simple_map::add<string::String, address>($t19, $t2, $t3) on_abort goto L7 with $t10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:896:13+41
    assume {:print "$at(2,41644,41685)"} true;
    call $t19 := $1_simple_map_add'$1_string_String_address'($t19, $t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(2,41644,41685)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(60,23):", $t10} $t10 == $t10;
        goto L7;
    }

    // write_back[Reference($t18).roles (simple_map::SimpleMap<string::String, address>)]($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:896:13+41
    $t18 := $UpdateMutation($t18, $Update'$1_vesting_VestingAccountManagement'_roles($Dereference($t18), $Dereference($t19)));

    // write_back[vesting::VestingAccountManagement@]($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:896:13+41
    $1_vesting_VestingAccountManagement_$memory := $ResourceUpdate($1_vesting_VestingAccountManagement_$memory, $GlobalLocationAddress($t18),
        $Dereference($t18));

    // label L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:897:10+1
    assume {:print "$at(2,41696,41697)"} true;
L5:

    // label L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:898:5+1
    assume {:print "$at(2,41702,41703)"} true;
L6:

    // assert Not(Not(exists[@72]<vesting::VestingContract>($t1))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:515:9+53
    assume {:print "$at(3,22899,22952)"} true;
    assert {:msg "assert_failed(3,22899,22952): function does not abort under this condition"}
      !!$ResourceExists($1_vesting_VestingContract_$memory#72, $t1);

    // assert Not(Neq<address>(signer::$address_of[]($t0), select vesting::VestingContract.admin($t8))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:518:9+62
    assume {:print "$at(3,23183,23245)"} true;
    assert {:msg "assert_failed(3,23183,23245): function does not abort under this condition"}
      !!$IsEqual'address'($1_signer_$address_of($t0), $t8->$admin);

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:518:9+62
    return;

    // label L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:898:5+1
    assume {:print "$at(2,41702,41703)"} true;
L7:

    // abort($t10) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:898:5+1
    assume {:print "$at(2,41702,41703)"} true;
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun vesting::verify_admin [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:960:5+182
procedure {:inline 1} $1_vesting_verify_admin(_$t0: $signer, _$t1: $1_vesting_VestingContract) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t0: $signer;
    var $t1: $1_vesting_VestingContract;
    var $temp_0'$1_vesting_VestingContract': $1_vesting_VestingContract;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[admin]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:960:5+1
    assume {:print "$at(2,44771,44772)"} true;
    assume {:print "$track_local(60,36,0):", $t0} $t0 == $t0;

    // trace_local[vesting_contract]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:960:5+1
    assume {:print "$track_local(60,36,1):", $t1} $t1 == $t1;

    // $t2 := signer::address_of($t0) on_abort goto L4 with $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:961:17+25
    assume {:print "$at(2,44858,44883)"} true;
    call $t2 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,44858,44883)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(60,36):", $t3} $t3 == $t3;
        goto L4;
    }

    // $t4 := get_field<vesting::VestingContract>.admin($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:961:46+22
    $t4 := $t1->$admin;

    // $t5 := ==($t2, $t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:961:43+2
    $t5 := $IsEqual'address'($t2, $t4);

    // if ($t5) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:961:9+96
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:961:9+96
L1:

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:961:9+96
    assume {:print "$at(2,44850,44946)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:961:93+10
L0:

    // $t6 := 7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:961:93+10
    assume {:print "$at(2,44934,44944)"} true;
    $t6 := 7;
    assume $IsValid'u64'($t6);

    // $t7 := error::unauthenticated($t6) on_abort goto L4 with $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:961:70+34
    call $t7 := $1_error_unauthenticated($t6);
    if ($abort_flag) {
        assume {:print "$at(2,44911,44945)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(60,36):", $t3} $t3 == $t3;
        goto L4;
    }

    // trace_abort($t7) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:961:9+96
    assume {:print "$at(2,44850,44946)"} true;
    assume {:print "$track_abort(60,36):", $t7} $t7 == $t7;

    // $t3 := move($t7) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:961:9+96
    $t3 := $t7;

    // goto L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:961:9+96
    goto L4;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:961:105+1
L2:

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:962:5+1
    assume {:print "$at(2,44952,44953)"} true;
L3:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:962:5+1
    assume {:print "$at(2,44952,44953)"} true;
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:962:5+1
L4:

    // abort($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:962:5+1
    assume {:print "$at(2,44952,44953)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun vesting::verify_admin [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:960:5+182
procedure {:timeLimit 40} $1_vesting_verify_admin$verify(_$t0: $signer, _$t1: $1_vesting_VestingContract) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t0: $signer;
    var $t1: $1_vesting_VestingContract;
    var $temp_0'$1_vesting_VestingContract': $1_vesting_VestingContract;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:960:5+1
    assume {:print "$at(2,44771,44772)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume And(WellFormed($t1), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($t1)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t1)), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t1)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t1)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t1)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($t1)), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:960:5+1
    assume ($IsValid'$1_vesting_VestingContract'($t1) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($t1->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($t1->$grant_pool->$shareholders, addr)))) && (var $range_0 := $Range(0, LenVec($t1->$grant_pool->$shareholders)); (var $range_1 := $Range(0, LenVec($t1->$grant_pool->$shareholders)); (forall $i_2: int, $i_3: int :: $InRange($range_0, $i_2) ==> $InRange($range_1, $i_3) ==> (var i := $i_2;
    (var j := $i_3;
    (($IsEqual'address'(ReadVec($t1->$grant_pool->$shareholders, i), ReadVec($t1->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j))))))))));

    // trace_local[admin]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:960:5+1
    assume {:print "$track_local(60,36,0):", $t0} $t0 == $t0;

    // trace_local[vesting_contract]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:960:5+1
    assume {:print "$track_local(60,36,1):", $t1} $t1 == $t1;

    // $t2 := signer::address_of($t0) on_abort goto L4 with $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:961:17+25
    assume {:print "$at(2,44858,44883)"} true;
    call $t2 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,44858,44883)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(60,36):", $t3} $t3 == $t3;
        goto L4;
    }

    // $t4 := get_field<vesting::VestingContract>.admin($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:961:46+22
    $t4 := $t1->$admin;

    // $t5 := ==($t2, $t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:961:43+2
    $t5 := $IsEqual'address'($t2, $t4);

    // if ($t5) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:961:9+96
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:961:9+96
L1:

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:961:9+96
    assume {:print "$at(2,44850,44946)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:961:93+10
L0:

    // $t6 := 7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:961:93+10
    assume {:print "$at(2,44934,44944)"} true;
    $t6 := 7;
    assume $IsValid'u64'($t6);

    // $t7 := error::unauthenticated($t6) on_abort goto L4 with $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:961:70+34
    call $t7 := $1_error_unauthenticated($t6);
    if ($abort_flag) {
        assume {:print "$at(2,44911,44945)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(60,36):", $t3} $t3 == $t3;
        goto L4;
    }

    // trace_abort($t7) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:961:9+96
    assume {:print "$at(2,44850,44946)"} true;
    assume {:print "$track_abort(60,36):", $t7} $t7 == $t7;

    // $t3 := move($t7) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:961:9+96
    $t3 := $t7;

    // goto L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:961:9+96
    goto L4;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:961:105+1
L2:

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:962:5+1
    assume {:print "$at(2,44952,44953)"} true;
L3:

    // assert Not(Neq<address>(signer::$address_of[]($t0), select vesting::VestingContract.admin($t1))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:427:9+62
    assume {:print "$at(3,18691,18753)"} true;
    assert {:msg "assert_failed(3,18691,18753): function does not abort under this condition"}
      !!$IsEqual'address'($1_signer_$address_of($t0), $t1->$admin);

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:427:9+62
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:962:5+1
    assume {:print "$at(2,44952,44953)"} true;
L4:

    // assert Neq<address>(signer::$address_of[]($t0), select vesting::VestingContract.admin($t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:426:5+148
    assume {:print "$at(3,18611,18759)"} true;
    assert {:msg "assert_failed(3,18611,18759): abort not covered by any of the `aborts_if` clauses"}
      !$IsEqual'address'($1_signer_$address_of($t0), $t1->$admin);

    // abort($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:426:5+148
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun vesting::vesting_contracts [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:309:5+258
procedure {:timeLimit 40} $1_vesting_vesting_contracts$verify(_$t0: int) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t1: Vec (int);
    var $t2: bool;
    var $t3: bool;
    var $t4: int;
    var $t5: $1_vesting_AdminStore;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'vec'address'': Vec (int);
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:309:5+1
    assume {:print "$at(2,14451,14452)"} true;
    assume $IsValid'address'($t0);

    // assume forall $rsc: vesting::AdminStore: ResourceDomain<vesting::AdminStore>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:309:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_AdminStore_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_AdminStore_$memory, $a_0);
    ($IsValid'$1_vesting_AdminStore'($rsc))));

    // trace_local[admin]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:309:5+1
    assume {:print "$track_local(60,39,0):", $t0} $t0 == $t0;

    // $t2 := exists<vesting::AdminStore>($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:310:14+6
    assume {:print "$at(2,14548,14554)"} true;
    $t2 := $ResourceExists($1_vesting_AdminStore_$memory, $t0);

    // $t3 := !($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:310:13+1
    call $t3 := $Not($t2);

    // if ($t3) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:310:9+160
    if ($t3) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:311:13+24
    assume {:print "$at(2,14589,14613)"} true;
L1:

    // $t1 := vector::empty<address>() on_abort goto L4 with $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:311:13+24
    assume {:print "$at(2,14589,14613)"} true;
    call $t1 := $1_vector_empty'address'();
    if ($abort_flag) {
        assume {:print "$at(2,14589,14613)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(60,39):", $t4} $t4 == $t4;
        goto L4;
    }

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:310:9+160
    assume {:print "$at(2,14543,14703)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:313:39+5
    assume {:print "$at(2,14669,14674)"} true;
L0:

    // $t5 := get_global<vesting::AdminStore>($t0) on_abort goto L4 with $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:313:13+13
    assume {:print "$at(2,14643,14656)"} true;
    if (!$ResourceExists($1_vesting_AdminStore_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t5 := $ResourceValue($1_vesting_AdminStore_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(2,14643,14656)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(60,39):", $t4} $t4 == $t4;
        goto L4;
    }

    // $t1 := get_field<vesting::AdminStore>.vesting_contracts($t5) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:313:13+50
    $t1 := $t5->$vesting_contracts;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:310:9+160
    assume {:print "$at(2,14543,14703)"} true;
L2:

    // trace_return[0]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:310:9+160
    assume {:print "$at(2,14543,14703)"} true;
    assume {:print "$track_return(60,39,0):", $t1} $t1 == $t1;

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:315:5+1
    assume {:print "$at(2,14708,14709)"} true;
L3:

    // assert Not(false) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:32:9+16
    assume {:print "$at(3,1109,1125)"} true;
    assert {:msg "assert_failed(3,1109,1125): function does not abort under this condition"}
      !false;

    // return $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:32:9+16
    $ret0 := $t1;
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:315:5+1
    assume {:print "$at(2,14708,14709)"} true;
L4:

    // assert false at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:31:5+88
    assume {:print "$at(3,1043,1131)"} true;
    assert {:msg "assert_failed(3,1043,1131): abort not covered by any of the `aborts_if` clauses"}
      false;

    // abort($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:31:5+88
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun vesting::vesting_start_secs [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:261:5+271
procedure {:timeLimit 40} $1_vesting_vesting_start_secs$verify(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: $1_vesting_VestingContract;
    var $t3: $1_vesting_VestingSchedule;
    var $t4: int;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $1_vesting_VestingContract_$memory#30: $Memory $1_vesting_VestingContract;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:261:5+1
    assume {:print "$at(2,11707,11708)"} true;
    assume $IsValid'address'($t0);

    // assume forall $rsc: vesting::VestingContract: ResourceDomain<vesting::VestingContract>(): And(WellFormed($rsc), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($rsc)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:261:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_VestingContract_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_VestingContract_$memory, $a_0);
    (($IsValid'$1_vesting_VestingContract'($rsc) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($rsc->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($rsc->$grant_pool->$shareholders, addr)))) && (var $range_1 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (var $range_2 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'(ReadVec($rsc->$grant_pool->$shareholders, i), ReadVec($rsc->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j)))))))))))));

    // @30 := save_mem(vesting::VestingContract) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:261:5+1
    $1_vesting_VestingContract_$memory#30 := $1_vesting_VestingContract_$memory;

    // trace_local[vesting_contract_address]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:261:5+1
    assume {:print "$track_local(60,41,0):", $t0} $t0 == $t0;

    // vesting::assert_vesting_contract_exists($t0) on_abort goto L2 with $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:262:9+56
    assume {:print "$at(2,11812,11868)"} true;
    call $1_vesting_assert_vesting_contract_exists($t0);
    if ($abort_flag) {
        assume {:print "$at(2,11812,11868)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(60,41):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := get_global<vesting::VestingContract>($t0) on_abort goto L2 with $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:263:9+13
    assume {:print "$at(2,11878,11891)"} true;
    if (!$ResourceExists($1_vesting_VestingContract_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t2 := $ResourceValue($1_vesting_VestingContract_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(2,11878,11891)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(60,41):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t3 := get_field<vesting::VestingContract>.vesting_schedule($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:263:9+73
    $t3 := $t2->$vesting_schedule;

    // $t4 := get_field<vesting::VestingSchedule>.start_timestamp_secs($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:263:9+94
    $t4 := $t3->$start_timestamp_secs;

    // trace_return[0]($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:263:9+94
    assume {:print "$track_return(60,41,0):", $t4} $t4 == $t4;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:264:5+1
    assume {:print "$at(2,11977,11978)"} true;
L1:

    // assert Not(Not(exists[@30]<vesting::VestingContract>($t0))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:12:9+61
    assume {:print "$at(3,352,413)"} true;
    assert {:msg "assert_failed(3,352,413): function does not abort under this condition"}
      !!$ResourceExists($1_vesting_VestingContract_$memory#30, $t0);

    // return $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:12:9+61
    $ret0 := $t4;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:264:5+1
    assume {:print "$at(2,11977,11978)"} true;
L2:

    // assert Not(exists[@30]<vesting::VestingContract>($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:11:5+141
    assume {:print "$at(3,278,419)"} true;
    assert {:msg "assert_failed(3,278,419): abort not covered by any of the `aborts_if` clauses"}
      !$ResourceExists($1_vesting_VestingContract_$memory#30, $t0);

    // abort($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:11:5+141
    $abort_code := $t1;
    $abort_flag := true;
    return;

}
