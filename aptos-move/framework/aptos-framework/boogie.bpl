
// ** Expanded prelude

// Copyright (c) The Diem Core Contributors
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0

// Basic theory for vectors using arrays. This version of vectors is not extensional.

datatype Vec<T> {
    Vec(v: [int]T, l: int)
}

function {:builtin "MapConst"} MapConstVec<T>(T): [int]T;
function DefaultVecElem<T>(): T;
function {:inline} DefaultVecMap<T>(): [int]T { MapConstVec(DefaultVecElem()) }

function {:inline} EmptyVec<T>(): Vec T {
    Vec(DefaultVecMap(), 0)
}

function {:inline} MakeVec1<T>(v: T): Vec T {
    Vec(DefaultVecMap()[0 := v], 1)
}

function {:inline} MakeVec2<T>(v1: T, v2: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2], 2)
}

function {:inline} MakeVec3<T>(v1: T, v2: T, v3: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2][2 := v3], 3)
}

function {:inline} MakeVec4<T>(v1: T, v2: T, v3: T, v4: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2][2 := v3][3 := v4], 4)
}

function {:inline} ExtendVec<T>(v: Vec T, elem: T): Vec T {
    (var l := v->l;
    Vec(v->v[l := elem], l + 1))
}

function {:inline} ReadVec<T>(v: Vec T, i: int): T {
    v->v[i]
}

function {:inline} LenVec<T>(v: Vec T): int {
    v->l
}

function {:inline} IsEmptyVec<T>(v: Vec T): bool {
    v->l == 0
}

function {:inline} RemoveVec<T>(v: Vec T): Vec T {
    (var l := v->l - 1;
    Vec(v->v[l := DefaultVecElem()], l))
}

function {:inline} RemoveAtVec<T>(v: Vec T, i: int): Vec T {
    (var l := v->l - 1;
    Vec(
        (lambda j: int ::
           if j >= 0 && j < l then
               if j < i then v->v[j] else v->v[j+1]
           else DefaultVecElem()),
        l))
}

function {:inline} ConcatVec<T>(v1: Vec T, v2: Vec T): Vec T {
    (var l1, m1, l2, m2 := v1->l, v1->v, v2->l, v2->v;
    Vec(
        (lambda i: int ::
          if i >= 0 && i < l1 + l2 then
            if i < l1 then m1[i] else m2[i - l1]
          else DefaultVecElem()),
        l1 + l2))
}

function {:inline} ReverseVec<T>(v: Vec T): Vec T {
    (var l := v->l;
    Vec(
        (lambda i: int :: if 0 <= i && i < l then v->v[l - i - 1] else DefaultVecElem()),
        l))
}

function {:inline} SliceVec<T>(v: Vec T, i: int, j: int): Vec T {
    (var m := v->v;
    Vec(
        (lambda k:int ::
          if 0 <= k && k < j - i then
            m[i + k]
          else
            DefaultVecElem()),
        (if j - i < 0 then 0 else j - i)))
}


function {:inline} UpdateVec<T>(v: Vec T, i: int, elem: T): Vec T {
    Vec(v->v[i := elem], v->l)
}

function {:inline} SwapVec<T>(v: Vec T, i: int, j: int): Vec T {
    (var m := v->v;
    Vec(m[i := m[j]][j := m[i]], v->l))
}

function {:inline} ContainsVec<T>(v: Vec T, e: T): bool {
    (var l := v->l;
    (exists i: int :: InRangeVec(v, i) && v->v[i] == e))
}

function IndexOfVec<T>(v: Vec T, e: T): int;
axiom {:ctor "Vec"} (forall<T> v: Vec T, e: T :: {IndexOfVec(v, e)}
    (var i := IndexOfVec(v,e);
     if (!ContainsVec(v, e)) then i == -1
     else InRangeVec(v, i) && ReadVec(v, i) == e &&
        (forall j: int :: j >= 0 && j < i ==> ReadVec(v, j) != e)));

// This function should stay non-inlined as it guards many quantifiers
// over vectors. It appears important to have this uninterpreted for
// quantifier triggering.
function InRangeVec<T>(v: Vec T, i: int): bool {
    i >= 0 && i < LenVec(v)
}

// Copyright (c) The Diem Core Contributors
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0

// Boogie model for multisets, based on Boogie arrays. This theory assumes extensional equality for element types.

datatype Multiset<T> {
    Multiset(v: [T]int, l: int)
}

function {:builtin "MapConst"} MapConstMultiset<T>(l: int): [T]int;

function {:inline} EmptyMultiset<T>(): Multiset T {
    Multiset(MapConstMultiset(0), 0)
}

function {:inline} LenMultiset<T>(s: Multiset T): int {
    s->l
}

function {:inline} ExtendMultiset<T>(s: Multiset T, v: T): Multiset T {
    (var len := s->l;
    (var cnt := s->v[v];
    Multiset(s->v[v := (cnt + 1)], len + 1)))
}

// This function returns (s1 - s2). This function assumes that s2 is a subset of s1.
function {:inline} SubtractMultiset<T>(s1: Multiset T, s2: Multiset T): Multiset T {
    (var len1 := s1->l;
    (var len2 := s2->l;
    Multiset((lambda v:T :: s1->v[v]-s2->v[v]), len1-len2)))
}

function {:inline} IsEmptyMultiset<T>(s: Multiset T): bool {
    (s->l == 0) &&
    (forall v: T :: s->v[v] == 0)
}

function {:inline} IsSubsetMultiset<T>(s1: Multiset T, s2: Multiset T): bool {
    (s1->l <= s2->l) &&
    (forall v: T :: s1->v[v] <= s2->v[v])
}

function {:inline} ContainsMultiset<T>(s: Multiset T, v: T): bool {
    s->v[v] > 0
}

// Copyright (c) The Diem Core Contributors
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0

// Theory for tables.

// v is the SMT array holding the key-value assignment. e is an array which
// independently determines whether a key is valid or not. l is the length.
//
// Note that even though the program cannot reflect over existence of a key,
// we want the specification to be able to do this, so it can express
// verification conditions like "key has been inserted".
datatype Table <K, V> {
    Table(v: [K]V, e: [K]bool, l: int)
}

// Functions for default SMT arrays. For the table values, we don't care and
// use an uninterpreted function.
function DefaultTableArray<K, V>(): [K]V;
function DefaultTableKeyExistsArray<K>(): [K]bool;
axiom DefaultTableKeyExistsArray() == (lambda i: int :: false);

function {:inline} EmptyTable<K, V>(): Table K V {
    Table(DefaultTableArray(), DefaultTableKeyExistsArray(), 0)
}

function {:inline} GetTable<K,V>(t: Table K V, k: K): V {
    // Notice we do not check whether key is in the table. The result is undetermined if it is not.
    t->v[k]
}

function {:inline} LenTable<K,V>(t: Table K V): int {
    t->l
}


function {:inline} ContainsTable<K,V>(t: Table K V, k: K): bool {
    t->e[k]
}

function {:inline} UpdateTable<K,V>(t: Table K V, k: K, v: V): Table K V {
    Table(t->v[k := v], t->e, t->l)
}

function {:inline} AddTable<K,V>(t: Table K V, k: K, v: V): Table K V {
    // This function has an undetermined result if the key is already in the table
    // (all specification functions have this "partial definiteness" behavior). Thus we can
    // just increment the length.
    Table(t->v[k := v], t->e[k := true], t->l + 1)
}

function {:inline} RemoveTable<K,V>(t: Table K V, k: K): Table K V {
    // Similar as above, we only need to consider the case where the key is in the table.
    Table(t->v, t->e[k := false], t->l - 1)
}

axiom {:ctor "Table"} (forall<K,V> t: Table K V :: {LenTable(t)}
    (exists k: K :: {ContainsTable(t, k)} ContainsTable(t, k)) ==> LenTable(t) >= 1
);
// TODO: we might want to encoder a stronger property that the length of table
// must be more than N given a set of N items. Currently we don't see a need here
// and the above axiom seems to be sufficient.
// Copyright Â© Aptos Foundation
// SPDX-License-Identifier: Apache-2.0

// ==================================================================================
// Native object::exists_at

// ==================================================================================
// Intrinsic implementation of aggregator and aggregator factory

datatype $1_aggregator_Aggregator {
    $1_aggregator_Aggregator($handle: int, $key: int, $limit: int, $val: int)
}
function {:inline} $Update'$1_aggregator_Aggregator'_handle(s: $1_aggregator_Aggregator, x: int): $1_aggregator_Aggregator {
    $1_aggregator_Aggregator(x, s->$key, s->$limit, s->$val)
}
function {:inline} $Update'$1_aggregator_Aggregator'_key(s: $1_aggregator_Aggregator, x: int): $1_aggregator_Aggregator {
    $1_aggregator_Aggregator(s->$handle, x, s->$limit, s->$val)
}
function {:inline} $Update'$1_aggregator_Aggregator'_limit(s: $1_aggregator_Aggregator, x: int): $1_aggregator_Aggregator {
    $1_aggregator_Aggregator(s->$handle, s->$key, x, s->$val)
}
function {:inline} $Update'$1_aggregator_Aggregator'_val(s: $1_aggregator_Aggregator, x: int): $1_aggregator_Aggregator {
    $1_aggregator_Aggregator(s->$handle, s->$key, s->$limit, x)
}
function $IsValid'$1_aggregator_Aggregator'(s: $1_aggregator_Aggregator): bool {
    $IsValid'address'(s->$handle)
      && $IsValid'address'(s->$key)
      && $IsValid'u128'(s->$limit)
      && $IsValid'u128'(s->$val)
}
function {:inline} $IsEqual'$1_aggregator_Aggregator'(s1: $1_aggregator_Aggregator, s2: $1_aggregator_Aggregator): bool {
    s1 == s2
}
function {:inline} $1_aggregator_spec_get_limit(s: $1_aggregator_Aggregator): int {
    s->$limit
}
function {:inline} $1_aggregator_spec_get_handle(s: $1_aggregator_Aggregator): int {
    s->$handle
}
function {:inline} $1_aggregator_spec_get_key(s: $1_aggregator_Aggregator): int {
    s->$key
}
function {:inline} $1_aggregator_spec_get_val(s: $1_aggregator_Aggregator): int {
    s->$val
}

function $1_aggregator_spec_read(agg: $1_aggregator_Aggregator): int {
    $1_aggregator_spec_get_val(agg)
}

function $1_aggregator_spec_aggregator_set_val(agg: $1_aggregator_Aggregator, val: int): $1_aggregator_Aggregator {
    $Update'$1_aggregator_Aggregator'_val(agg, val)
}

function $1_aggregator_spec_aggregator_get_val(agg: $1_aggregator_Aggregator): int {
    $1_aggregator_spec_get_val(agg)
}

function $1_aggregator_factory_spec_new_aggregator(limit: int) : $1_aggregator_Aggregator;

axiom (forall limit: int :: {$1_aggregator_factory_spec_new_aggregator(limit)}
    (var agg := $1_aggregator_factory_spec_new_aggregator(limit);
     $1_aggregator_spec_get_limit(agg) == limit));

axiom (forall limit: int :: {$1_aggregator_factory_spec_new_aggregator(limit)}
     (var agg := $1_aggregator_factory_spec_new_aggregator(limit);
     $1_aggregator_spec_aggregator_get_val(agg) == 0));


// ============================================================================================
// Primitive Types

const $MAX_U8: int;
axiom $MAX_U8 == 255;
const $MAX_U16: int;
axiom $MAX_U16 == 65535;
const $MAX_U32: int;
axiom $MAX_U32 == 4294967295;
const $MAX_U64: int;
axiom $MAX_U64 == 18446744073709551615;
const $MAX_U128: int;
axiom $MAX_U128 == 340282366920938463463374607431768211455;
const $MAX_U256: int;
axiom $MAX_U256 == 115792089237316195423570985008687907853269984665640564039457584007913129639935;

// Templates for bitvector operations

function {:bvbuiltin "bvand"} $And'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvor"} $Or'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvxor"} $Xor'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvadd"} $Add'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvsub"} $Sub'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvmul"} $Mul'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvudiv"} $Div'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvurem"} $Mod'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvshl"} $Shl'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvlshr"} $Shr'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvult"} $Lt'Bv8'(bv8,bv8) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv8'(bv8,bv8) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv8'(bv8,bv8) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv8'(bv8,bv8) returns(bool);

procedure {:inline 1} $AddBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Lt'Bv8'($Add'Bv8'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv8'(src1, src2);
}

procedure {:inline 1} $AddBv8_unchecked(src1: bv8, src2: bv8) returns (dst: bv8)
{
    dst := $Add'Bv8'(src1, src2);
}

procedure {:inline 1} $SubBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Lt'Bv8'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv8'(src1, src2);
}

procedure {:inline 1} $MulBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Lt'Bv8'($Mul'Bv8'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv8'(src1, src2);
}

procedure {:inline 1} $DivBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if (src2 == 0bv8) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv8'(src1, src2);
}

procedure {:inline 1} $ModBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if (src2 == 0bv8) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv8'(src1, src2);
}

procedure {:inline 1} $AndBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    dst := $And'Bv8'(src1,src2);
}

procedure {:inline 1} $OrBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    dst := $Or'Bv8'(src1,src2);
}

procedure {:inline 1} $XorBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    dst := $Xor'Bv8'(src1,src2);
}

procedure {:inline 1} $LtBv8(src1: bv8, src2: bv8) returns (dst: bool)
{
    dst := $Lt'Bv8'(src1,src2);
}

procedure {:inline 1} $LeBv8(src1: bv8, src2: bv8) returns (dst: bool)
{
    dst := $Le'Bv8'(src1,src2);
}

procedure {:inline 1} $GtBv8(src1: bv8, src2: bv8) returns (dst: bool)
{
    dst := $Gt'Bv8'(src1,src2);
}

procedure {:inline 1} $GeBv8(src1: bv8, src2: bv8) returns (dst: bool)
{
    dst := $Ge'Bv8'(src1,src2);
}

function $IsValid'bv8'(v: bv8): bool {
  $Ge'Bv8'(v,0bv8) && $Le'Bv8'(v,255bv8)
}

function {:inline} $IsEqual'bv8'(x: bv8, y: bv8): bool {
    x == y
}

procedure {:inline 1} $int2bv8(src: int) returns (dst: bv8)
{
    if (src > 255) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.8(src);
}

procedure {:inline 1} $bv2int8(src: bv8) returns (dst: int)
{
    dst := $bv2int.8(src);
}

function {:builtin "(_ int2bv 8)"} $int2bv.8(i: int) returns (bv8);
function {:builtin "bv2nat"} $bv2int.8(i: bv8) returns (int);

function {:bvbuiltin "bvand"} $And'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvor"} $Or'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvxor"} $Xor'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvadd"} $Add'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvsub"} $Sub'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvmul"} $Mul'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvudiv"} $Div'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvurem"} $Mod'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvshl"} $Shl'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvlshr"} $Shr'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvult"} $Lt'Bv16'(bv16,bv16) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv16'(bv16,bv16) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv16'(bv16,bv16) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv16'(bv16,bv16) returns(bool);

procedure {:inline 1} $AddBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Lt'Bv16'($Add'Bv16'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv16'(src1, src2);
}

procedure {:inline 1} $AddBv16_unchecked(src1: bv16, src2: bv16) returns (dst: bv16)
{
    dst := $Add'Bv16'(src1, src2);
}

procedure {:inline 1} $SubBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Lt'Bv16'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv16'(src1, src2);
}

procedure {:inline 1} $MulBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Lt'Bv16'($Mul'Bv16'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv16'(src1, src2);
}

procedure {:inline 1} $DivBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if (src2 == 0bv16) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv16'(src1, src2);
}

procedure {:inline 1} $ModBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if (src2 == 0bv16) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv16'(src1, src2);
}

procedure {:inline 1} $AndBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    dst := $And'Bv16'(src1,src2);
}

procedure {:inline 1} $OrBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    dst := $Or'Bv16'(src1,src2);
}

procedure {:inline 1} $XorBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    dst := $Xor'Bv16'(src1,src2);
}

procedure {:inline 1} $LtBv16(src1: bv16, src2: bv16) returns (dst: bool)
{
    dst := $Lt'Bv16'(src1,src2);
}

procedure {:inline 1} $LeBv16(src1: bv16, src2: bv16) returns (dst: bool)
{
    dst := $Le'Bv16'(src1,src2);
}

procedure {:inline 1} $GtBv16(src1: bv16, src2: bv16) returns (dst: bool)
{
    dst := $Gt'Bv16'(src1,src2);
}

procedure {:inline 1} $GeBv16(src1: bv16, src2: bv16) returns (dst: bool)
{
    dst := $Ge'Bv16'(src1,src2);
}

function $IsValid'bv16'(v: bv16): bool {
  $Ge'Bv16'(v,0bv16) && $Le'Bv16'(v,65535bv16)
}

function {:inline} $IsEqual'bv16'(x: bv16, y: bv16): bool {
    x == y
}

procedure {:inline 1} $int2bv16(src: int) returns (dst: bv16)
{
    if (src > 65535) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.16(src);
}

procedure {:inline 1} $bv2int16(src: bv16) returns (dst: int)
{
    dst := $bv2int.16(src);
}

function {:builtin "(_ int2bv 16)"} $int2bv.16(i: int) returns (bv16);
function {:builtin "bv2nat"} $bv2int.16(i: bv16) returns (int);

function {:bvbuiltin "bvand"} $And'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvor"} $Or'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvxor"} $Xor'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvadd"} $Add'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvsub"} $Sub'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvmul"} $Mul'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvudiv"} $Div'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvurem"} $Mod'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvshl"} $Shl'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvlshr"} $Shr'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvult"} $Lt'Bv32'(bv32,bv32) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv32'(bv32,bv32) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv32'(bv32,bv32) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv32'(bv32,bv32) returns(bool);

procedure {:inline 1} $AddBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Lt'Bv32'($Add'Bv32'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv32'(src1, src2);
}

procedure {:inline 1} $AddBv32_unchecked(src1: bv32, src2: bv32) returns (dst: bv32)
{
    dst := $Add'Bv32'(src1, src2);
}

procedure {:inline 1} $SubBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Lt'Bv32'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv32'(src1, src2);
}

procedure {:inline 1} $MulBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Lt'Bv32'($Mul'Bv32'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv32'(src1, src2);
}

procedure {:inline 1} $DivBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if (src2 == 0bv32) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv32'(src1, src2);
}

procedure {:inline 1} $ModBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if (src2 == 0bv32) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv32'(src1, src2);
}

procedure {:inline 1} $AndBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    dst := $And'Bv32'(src1,src2);
}

procedure {:inline 1} $OrBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    dst := $Or'Bv32'(src1,src2);
}

procedure {:inline 1} $XorBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    dst := $Xor'Bv32'(src1,src2);
}

procedure {:inline 1} $LtBv32(src1: bv32, src2: bv32) returns (dst: bool)
{
    dst := $Lt'Bv32'(src1,src2);
}

procedure {:inline 1} $LeBv32(src1: bv32, src2: bv32) returns (dst: bool)
{
    dst := $Le'Bv32'(src1,src2);
}

procedure {:inline 1} $GtBv32(src1: bv32, src2: bv32) returns (dst: bool)
{
    dst := $Gt'Bv32'(src1,src2);
}

procedure {:inline 1} $GeBv32(src1: bv32, src2: bv32) returns (dst: bool)
{
    dst := $Ge'Bv32'(src1,src2);
}

function $IsValid'bv32'(v: bv32): bool {
  $Ge'Bv32'(v,0bv32) && $Le'Bv32'(v,2147483647bv32)
}

function {:inline} $IsEqual'bv32'(x: bv32, y: bv32): bool {
    x == y
}

procedure {:inline 1} $int2bv32(src: int) returns (dst: bv32)
{
    if (src > 2147483647) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.32(src);
}

procedure {:inline 1} $bv2int32(src: bv32) returns (dst: int)
{
    dst := $bv2int.32(src);
}

function {:builtin "(_ int2bv 32)"} $int2bv.32(i: int) returns (bv32);
function {:builtin "bv2nat"} $bv2int.32(i: bv32) returns (int);

function {:bvbuiltin "bvand"} $And'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvor"} $Or'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvxor"} $Xor'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvadd"} $Add'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvsub"} $Sub'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvmul"} $Mul'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvudiv"} $Div'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvurem"} $Mod'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvshl"} $Shl'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvlshr"} $Shr'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvult"} $Lt'Bv64'(bv64,bv64) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv64'(bv64,bv64) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv64'(bv64,bv64) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv64'(bv64,bv64) returns(bool);

procedure {:inline 1} $AddBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Lt'Bv64'($Add'Bv64'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv64'(src1, src2);
}

procedure {:inline 1} $AddBv64_unchecked(src1: bv64, src2: bv64) returns (dst: bv64)
{
    dst := $Add'Bv64'(src1, src2);
}

procedure {:inline 1} $SubBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Lt'Bv64'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv64'(src1, src2);
}

procedure {:inline 1} $MulBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Lt'Bv64'($Mul'Bv64'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv64'(src1, src2);
}

procedure {:inline 1} $DivBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if (src2 == 0bv64) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv64'(src1, src2);
}

procedure {:inline 1} $ModBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if (src2 == 0bv64) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv64'(src1, src2);
}

procedure {:inline 1} $AndBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    dst := $And'Bv64'(src1,src2);
}

procedure {:inline 1} $OrBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    dst := $Or'Bv64'(src1,src2);
}

procedure {:inline 1} $XorBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    dst := $Xor'Bv64'(src1,src2);
}

procedure {:inline 1} $LtBv64(src1: bv64, src2: bv64) returns (dst: bool)
{
    dst := $Lt'Bv64'(src1,src2);
}

procedure {:inline 1} $LeBv64(src1: bv64, src2: bv64) returns (dst: bool)
{
    dst := $Le'Bv64'(src1,src2);
}

procedure {:inline 1} $GtBv64(src1: bv64, src2: bv64) returns (dst: bool)
{
    dst := $Gt'Bv64'(src1,src2);
}

procedure {:inline 1} $GeBv64(src1: bv64, src2: bv64) returns (dst: bool)
{
    dst := $Ge'Bv64'(src1,src2);
}

function $IsValid'bv64'(v: bv64): bool {
  $Ge'Bv64'(v,0bv64) && $Le'Bv64'(v,18446744073709551615bv64)
}

function {:inline} $IsEqual'bv64'(x: bv64, y: bv64): bool {
    x == y
}

procedure {:inline 1} $int2bv64(src: int) returns (dst: bv64)
{
    if (src > 18446744073709551615) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.64(src);
}

procedure {:inline 1} $bv2int64(src: bv64) returns (dst: int)
{
    dst := $bv2int.64(src);
}

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: int) returns (bv64);
function {:builtin "bv2nat"} $bv2int.64(i: bv64) returns (int);

function {:bvbuiltin "bvand"} $And'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvor"} $Or'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvxor"} $Xor'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvadd"} $Add'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvsub"} $Sub'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvmul"} $Mul'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvudiv"} $Div'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvurem"} $Mod'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvshl"} $Shl'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvlshr"} $Shr'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvult"} $Lt'Bv128'(bv128,bv128) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv128'(bv128,bv128) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv128'(bv128,bv128) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv128'(bv128,bv128) returns(bool);

procedure {:inline 1} $AddBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Lt'Bv128'($Add'Bv128'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv128'(src1, src2);
}

procedure {:inline 1} $AddBv128_unchecked(src1: bv128, src2: bv128) returns (dst: bv128)
{
    dst := $Add'Bv128'(src1, src2);
}

procedure {:inline 1} $SubBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Lt'Bv128'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv128'(src1, src2);
}

procedure {:inline 1} $MulBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Lt'Bv128'($Mul'Bv128'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv128'(src1, src2);
}

procedure {:inline 1} $DivBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if (src2 == 0bv128) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv128'(src1, src2);
}

procedure {:inline 1} $ModBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if (src2 == 0bv128) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv128'(src1, src2);
}

procedure {:inline 1} $AndBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    dst := $And'Bv128'(src1,src2);
}

procedure {:inline 1} $OrBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    dst := $Or'Bv128'(src1,src2);
}

procedure {:inline 1} $XorBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    dst := $Xor'Bv128'(src1,src2);
}

procedure {:inline 1} $LtBv128(src1: bv128, src2: bv128) returns (dst: bool)
{
    dst := $Lt'Bv128'(src1,src2);
}

procedure {:inline 1} $LeBv128(src1: bv128, src2: bv128) returns (dst: bool)
{
    dst := $Le'Bv128'(src1,src2);
}

procedure {:inline 1} $GtBv128(src1: bv128, src2: bv128) returns (dst: bool)
{
    dst := $Gt'Bv128'(src1,src2);
}

procedure {:inline 1} $GeBv128(src1: bv128, src2: bv128) returns (dst: bool)
{
    dst := $Ge'Bv128'(src1,src2);
}

function $IsValid'bv128'(v: bv128): bool {
  $Ge'Bv128'(v,0bv128) && $Le'Bv128'(v,340282366920938463463374607431768211455bv128)
}

function {:inline} $IsEqual'bv128'(x: bv128, y: bv128): bool {
    x == y
}

procedure {:inline 1} $int2bv128(src: int) returns (dst: bv128)
{
    if (src > 340282366920938463463374607431768211455) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.128(src);
}

procedure {:inline 1} $bv2int128(src: bv128) returns (dst: int)
{
    dst := $bv2int.128(src);
}

function {:builtin "(_ int2bv 128)"} $int2bv.128(i: int) returns (bv128);
function {:builtin "bv2nat"} $bv2int.128(i: bv128) returns (int);

function {:bvbuiltin "bvand"} $And'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvor"} $Or'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvxor"} $Xor'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvadd"} $Add'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvsub"} $Sub'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvmul"} $Mul'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvudiv"} $Div'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvurem"} $Mod'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvshl"} $Shl'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvlshr"} $Shr'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvult"} $Lt'Bv256'(bv256,bv256) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv256'(bv256,bv256) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv256'(bv256,bv256) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv256'(bv256,bv256) returns(bool);

procedure {:inline 1} $AddBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Lt'Bv256'($Add'Bv256'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv256'(src1, src2);
}

procedure {:inline 1} $AddBv256_unchecked(src1: bv256, src2: bv256) returns (dst: bv256)
{
    dst := $Add'Bv256'(src1, src2);
}

procedure {:inline 1} $SubBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Lt'Bv256'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv256'(src1, src2);
}

procedure {:inline 1} $MulBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Lt'Bv256'($Mul'Bv256'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv256'(src1, src2);
}

procedure {:inline 1} $DivBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if (src2 == 0bv256) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv256'(src1, src2);
}

procedure {:inline 1} $ModBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if (src2 == 0bv256) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv256'(src1, src2);
}

procedure {:inline 1} $AndBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    dst := $And'Bv256'(src1,src2);
}

procedure {:inline 1} $OrBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    dst := $Or'Bv256'(src1,src2);
}

procedure {:inline 1} $XorBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    dst := $Xor'Bv256'(src1,src2);
}

procedure {:inline 1} $LtBv256(src1: bv256, src2: bv256) returns (dst: bool)
{
    dst := $Lt'Bv256'(src1,src2);
}

procedure {:inline 1} $LeBv256(src1: bv256, src2: bv256) returns (dst: bool)
{
    dst := $Le'Bv256'(src1,src2);
}

procedure {:inline 1} $GtBv256(src1: bv256, src2: bv256) returns (dst: bool)
{
    dst := $Gt'Bv256'(src1,src2);
}

procedure {:inline 1} $GeBv256(src1: bv256, src2: bv256) returns (dst: bool)
{
    dst := $Ge'Bv256'(src1,src2);
}

function $IsValid'bv256'(v: bv256): bool {
  $Ge'Bv256'(v,0bv256) && $Le'Bv256'(v,115792089237316195423570985008687907853269984665640564039457584007913129639935bv256)
}

function {:inline} $IsEqual'bv256'(x: bv256, y: bv256): bool {
    x == y
}

procedure {:inline 1} $int2bv256(src: int) returns (dst: bv256)
{
    if (src > 115792089237316195423570985008687907853269984665640564039457584007913129639935) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.256(src);
}

procedure {:inline 1} $bv2int256(src: bv256) returns (dst: int)
{
    dst := $bv2int.256(src);
}

function {:builtin "(_ int2bv 256)"} $int2bv.256(i: int) returns (bv256);
function {:builtin "bv2nat"} $bv2int.256(i: bv256) returns (int);

datatype $Range {
    $Range(lb: int, ub: int)
}

function {:inline} $IsValid'bool'(v: bool): bool {
  true
}

function $IsValid'u8'(v: int): bool {
  v >= 0 && v <= $MAX_U8
}

function $IsValid'u16'(v: int): bool {
  v >= 0 && v <= $MAX_U16
}

function $IsValid'u32'(v: int): bool {
  v >= 0 && v <= $MAX_U32
}

function $IsValid'u64'(v: int): bool {
  v >= 0 && v <= $MAX_U64
}

function $IsValid'u128'(v: int): bool {
  v >= 0 && v <= $MAX_U128
}

function $IsValid'u256'(v: int): bool {
  v >= 0 && v <= $MAX_U256
}

function $IsValid'num'(v: int): bool {
  true
}

function $IsValid'address'(v: int): bool {
  // TODO: restrict max to representable addresses?
  v >= 0
}

function {:inline} $IsValidRange(r: $Range): bool {
   $IsValid'u64'(r->lb) &&  $IsValid'u64'(r->ub)
}

// Intentionally not inlined so it serves as a trigger in quantifiers.
function $InRange(r: $Range, i: int): bool {
   r->lb <= i && i < r->ub
}


function {:inline} $IsEqual'u8'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u16'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u32'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u64'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u128'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u256'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'num'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'address'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'bool'(x: bool, y: bool): bool {
    x == y
}

// ============================================================================================
// Memory

datatype $Location {
    // A global resource location within the statically known resource type's memory,
    // where `a` is an address.
    $Global(a: int),
    // A local location. `i` is the unique index of the local.
    $Local(i: int),
    // The location of a reference outside of the verification scope, for example, a `&mut` parameter
    // of the function being verified. References with these locations don't need to be written back
    // when mutation ends.
    $Param(i: int),
    // The location of an uninitialized mutation. Using this to make sure that the location
    // will not be equal to any valid mutation locations, i.e., $Local, $Global, or $Param.
    $Uninitialized()
}

// A mutable reference which also carries its current value. Since mutable references
// are single threaded in Move, we can keep them together and treat them as a value
// during mutation until the point they are stored back to their original location.
datatype $Mutation<T> {
    $Mutation(l: $Location, p: Vec int, v: T)
}

// Representation of memory for a given type.
datatype $Memory<T> {
    $Memory(domain: [int]bool, contents: [int]T)
}

function {:builtin "MapConst"} $ConstMemoryDomain(v: bool): [int]bool;
function {:builtin "MapConst"} $ConstMemoryContent<T>(v: T): [int]T;
axiom $ConstMemoryDomain(false) == (lambda i: int :: false);
axiom $ConstMemoryDomain(true) == (lambda i: int :: true);


// Dereferences a mutation.
function {:inline} $Dereference<T>(ref: $Mutation T): T {
    ref->v
}

// Update the value of a mutation.
function {:inline} $UpdateMutation<T>(m: $Mutation T, v: T): $Mutation T {
    $Mutation(m->l, m->p, v)
}

function {:inline} $ChildMutation<T1, T2>(m: $Mutation T1, offset: int, v: T2): $Mutation T2 {
    $Mutation(m->l, ExtendVec(m->p, offset), v)
}

// Return true if two mutations share the location and path
function {:inline} $IsSameMutation<T1, T2>(parent: $Mutation T1, child: $Mutation T2 ): bool {
    parent->l == child->l && parent->p == child->p
}

// Return true if the mutation is a parent of a child which was derived with the given edge offset. This
// is used to implement write-back choices.
function {:inline} $IsParentMutation<T1, T2>(parent: $Mutation T1, edge: int, child: $Mutation T2 ): bool {
    parent->l == child->l &&
    (var pp := parent->p;
    (var cp := child->p;
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
     cl == pl + 1 &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) ==  ReadVec(cp, i)) &&
     $EdgeMatches(ReadVec(cp, pl), edge)
    ))))
}

// Return true if the mutation is a parent of a child, for hyper edge.
function {:inline} $IsParentMutationHyper<T1, T2>(parent: $Mutation T1, hyper_edge: Vec int, child: $Mutation T2 ): bool {
    parent->l == child->l &&
    (var pp := parent->p;
    (var cp := child->p;
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
    (var el := LenVec(hyper_edge);
     cl == pl + el &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) == ReadVec(cp, i)) &&
     (forall i: int:: i >= 0 && i < el ==> $EdgeMatches(ReadVec(cp, pl + i), ReadVec(hyper_edge, i)))
    )))))
}

function {:inline} $EdgeMatches(edge: int, edge_pattern: int): bool {
    edge_pattern == -1 // wildcard
    || edge_pattern == edge
}



function {:inline} $SameLocation<T1, T2>(m1: $Mutation T1, m2: $Mutation T2): bool {
    m1->l == m2->l
}

function {:inline} $HasGlobalLocation<T>(m: $Mutation T): bool {
    (m->l) is $Global
}

function {:inline} $HasLocalLocation<T>(m: $Mutation T, idx: int): bool {
    m->l == $Local(idx)
}

function {:inline} $GlobalLocationAddress<T>(m: $Mutation T): int {
    (m->l)->a
}



// Tests whether resource exists.
function {:inline} $ResourceExists<T>(m: $Memory T, addr: int): bool {
    m->domain[addr]
}

// Obtains Value of given resource.
function {:inline} $ResourceValue<T>(m: $Memory T, addr: int): T {
    m->contents[addr]
}

// Update resource.
function {:inline} $ResourceUpdate<T>(m: $Memory T, a: int, v: T): $Memory T {
    $Memory(m->domain[a := true], m->contents[a := v])
}

// Remove resource.
function {:inline} $ResourceRemove<T>(m: $Memory T, a: int): $Memory T {
    $Memory(m->domain[a := false], m->contents)
}

// Copies resource from memory s to m.
function {:inline} $ResourceCopy<T>(m: $Memory T, s: $Memory T, a: int): $Memory T {
    $Memory(m->domain[a := s->domain[a]],
            m->contents[a := s->contents[a]])
}



// ============================================================================================
// Abort Handling

var $abort_flag: bool;
var $abort_code: int;

function {:inline} $process_abort_code(code: int): int {
    code
}

const $EXEC_FAILURE_CODE: int;
axiom $EXEC_FAILURE_CODE == -1;

// TODO(wrwg): currently we map aborts of native functions like those for vectors also to
//   execution failure. This may need to be aligned with what the runtime actually does.

procedure {:inline 1} $ExecFailureAbort() {
    $abort_flag := true;
    $abort_code := $EXEC_FAILURE_CODE;
}

procedure {:inline 1} $Abort(code: int) {
    $abort_flag := true;
    $abort_code := code;
}

function {:inline} $StdError(cat: int, reason: int): int {
    reason * 256 + cat
}

procedure {:inline 1} $InitVerification() {
    // Set abort_flag to false, and havoc abort_code
    $abort_flag := false;
    havoc $abort_code;
    // Initialize event store
    call $InitEventStore();
}

// ============================================================================================
// Instructions


procedure {:inline 1} $CastU8(src: int) returns (dst: int)
{
    if (src > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU16(src: int) returns (dst: int)
{
    if (src > $MAX_U16) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU32(src: int) returns (dst: int)
{
    if (src > $MAX_U32) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU64(src: int) returns (dst: int)
{
    if (src > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU128(src: int) returns (dst: int)
{
    if (src > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU256(src: int) returns (dst: int)
{
    if (src > $MAX_U256) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $AddU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU16(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U16) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU16_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU32(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U32) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU32_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU256(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U256) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU256_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $Sub(src1: int, src2: int) returns (dst: int)
{
    if (src1 < src2) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 - src2;
}

// uninterpreted function to return an undefined value.
function $undefined_int(): int;

// Recursive exponentiation function
// Undefined unless e >=0.  $pow(0,0) is also undefined.
function $pow(n: int, e: int): int {
    if n != 0 && e == 0 then 1
    else if e > 0 then n * $pow(n, e - 1)
    else $undefined_int()
}

function $shl(src1: int, p: int): int {
    src1 * $pow(2, p)
}

function $shlU8(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 256
}

function $shlU16(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 65536
}

function $shlU32(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 4294967296
}

function $shlU64(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 18446744073709551616
}

function $shlU128(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 340282366920938463463374607431768211456
}

function $shlU256(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 115792089237316195423570985008687907853269984665640564039457584007913129639936
}

function $shr(src1: int, p: int): int {
    src1 div $pow(2, p)
}

// We need to know the size of the destination in order to drop bits
// that have been shifted left more than that, so we have $ShlU8/16/32/64/128/256
procedure {:inline 1} $ShlU8(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 8) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shlU8(src1, src2);
}

// Template for cast and shift operations of bitvector types

procedure {:inline 1} $CastBv8to8(src: bv8) returns (dst: bv8)
{
    dst := src;
}


function $shlBv8From8(src1: bv8, src2: bv8) returns (bv8)
{
    $Shl'Bv8'(src1, src2)
}

procedure {:inline 1} $ShlBv8From8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Ge'Bv8'(src2, 8bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2);
}

function $shrBv8From8(src1: bv8, src2: bv8) returns (bv8)
{
    $Shr'Bv8'(src1, src2)
}

procedure {:inline 1} $ShrBv8From8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Ge'Bv8'(src2, 8bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2);
}

procedure {:inline 1} $CastBv16to8(src: bv16) returns (dst: bv8)
{
    if ($Gt'Bv16'(src, 255bv16)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $shlBv8From16(src1: bv8, src2: bv16) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From16(src1: bv8, src2: bv16) returns (dst: bv8)
{
    if ($Ge'Bv16'(src2, 8bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From16(src1: bv8, src2: bv16) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From16(src1: bv8, src2: bv16) returns (dst: bv8)
{
    if ($Ge'Bv16'(src2, 8bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv32to8(src: bv32) returns (dst: bv8)
{
    if ($Gt'Bv32'(src, 255bv32)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $shlBv8From32(src1: bv8, src2: bv32) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From32(src1: bv8, src2: bv32) returns (dst: bv8)
{
    if ($Ge'Bv32'(src2, 8bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From32(src1: bv8, src2: bv32) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From32(src1: bv8, src2: bv32) returns (dst: bv8)
{
    if ($Ge'Bv32'(src2, 8bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv64to8(src: bv64) returns (dst: bv8)
{
    if ($Gt'Bv64'(src, 255bv64)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $shlBv8From64(src1: bv8, src2: bv64) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From64(src1: bv8, src2: bv64) returns (dst: bv8)
{
    if ($Ge'Bv64'(src2, 8bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From64(src1: bv8, src2: bv64) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From64(src1: bv8, src2: bv64) returns (dst: bv8)
{
    if ($Ge'Bv64'(src2, 8bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv128to8(src: bv128) returns (dst: bv8)
{
    if ($Gt'Bv128'(src, 255bv128)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $shlBv8From128(src1: bv8, src2: bv128) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From128(src1: bv8, src2: bv128) returns (dst: bv8)
{
    if ($Ge'Bv128'(src2, 8bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From128(src1: bv8, src2: bv128) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From128(src1: bv8, src2: bv128) returns (dst: bv8)
{
    if ($Ge'Bv128'(src2, 8bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv256to8(src: bv256) returns (dst: bv8)
{
    if ($Gt'Bv256'(src, 255bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $shlBv8From256(src1: bv8, src2: bv256) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From256(src1: bv8, src2: bv256) returns (dst: bv8)
{
    if ($Ge'Bv256'(src2, 8bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From256(src1: bv8, src2: bv256) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From256(src1: bv8, src2: bv256) returns (dst: bv8)
{
    if ($Ge'Bv256'(src2, 8bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv8to16(src: bv8) returns (dst: bv16)
{
    dst := 0bv8 ++ src;
}


function $shlBv16From8(src1: bv16, src2: bv8) returns (bv16)
{
    $Shl'Bv16'(src1, 0bv8 ++ src2)
}

procedure {:inline 1} $ShlBv16From8(src1: bv16, src2: bv8) returns (dst: bv16)
{
    if ($Ge'Bv8'(src2, 16bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, 0bv8 ++ src2);
}

function $shrBv16From8(src1: bv16, src2: bv8) returns (bv16)
{
    $Shr'Bv16'(src1, 0bv8 ++ src2)
}

procedure {:inline 1} $ShrBv16From8(src1: bv16, src2: bv8) returns (dst: bv16)
{
    if ($Ge'Bv8'(src2, 16bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, 0bv8 ++ src2);
}

procedure {:inline 1} $CastBv16to16(src: bv16) returns (dst: bv16)
{
    dst := src;
}


function $shlBv16From16(src1: bv16, src2: bv16) returns (bv16)
{
    $Shl'Bv16'(src1, src2)
}

procedure {:inline 1} $ShlBv16From16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Ge'Bv16'(src2, 16bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, src2);
}

function $shrBv16From16(src1: bv16, src2: bv16) returns (bv16)
{
    $Shr'Bv16'(src1, src2)
}

procedure {:inline 1} $ShrBv16From16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Ge'Bv16'(src2, 16bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, src2);
}

procedure {:inline 1} $CastBv32to16(src: bv32) returns (dst: bv16)
{
    if ($Gt'Bv32'(src, 65535bv32)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[16:0];
}


function $shlBv16From32(src1: bv16, src2: bv32) returns (bv16)
{
    $Shl'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShlBv16From32(src1: bv16, src2: bv32) returns (dst: bv16)
{
    if ($Ge'Bv32'(src2, 16bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, src2[16:0]);
}

function $shrBv16From32(src1: bv16, src2: bv32) returns (bv16)
{
    $Shr'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShrBv16From32(src1: bv16, src2: bv32) returns (dst: bv16)
{
    if ($Ge'Bv32'(src2, 16bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, src2[16:0]);
}

procedure {:inline 1} $CastBv64to16(src: bv64) returns (dst: bv16)
{
    if ($Gt'Bv64'(src, 65535bv64)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[16:0];
}


function $shlBv16From64(src1: bv16, src2: bv64) returns (bv16)
{
    $Shl'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShlBv16From64(src1: bv16, src2: bv64) returns (dst: bv16)
{
    if ($Ge'Bv64'(src2, 16bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, src2[16:0]);
}

function $shrBv16From64(src1: bv16, src2: bv64) returns (bv16)
{
    $Shr'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShrBv16From64(src1: bv16, src2: bv64) returns (dst: bv16)
{
    if ($Ge'Bv64'(src2, 16bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, src2[16:0]);
}

procedure {:inline 1} $CastBv128to16(src: bv128) returns (dst: bv16)
{
    if ($Gt'Bv128'(src, 65535bv128)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[16:0];
}


function $shlBv16From128(src1: bv16, src2: bv128) returns (bv16)
{
    $Shl'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShlBv16From128(src1: bv16, src2: bv128) returns (dst: bv16)
{
    if ($Ge'Bv128'(src2, 16bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, src2[16:0]);
}

function $shrBv16From128(src1: bv16, src2: bv128) returns (bv16)
{
    $Shr'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShrBv16From128(src1: bv16, src2: bv128) returns (dst: bv16)
{
    if ($Ge'Bv128'(src2, 16bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, src2[16:0]);
}

procedure {:inline 1} $CastBv256to16(src: bv256) returns (dst: bv16)
{
    if ($Gt'Bv256'(src, 65535bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[16:0];
}


function $shlBv16From256(src1: bv16, src2: bv256) returns (bv16)
{
    $Shl'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShlBv16From256(src1: bv16, src2: bv256) returns (dst: bv16)
{
    if ($Ge'Bv256'(src2, 16bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, src2[16:0]);
}

function $shrBv16From256(src1: bv16, src2: bv256) returns (bv16)
{
    $Shr'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShrBv16From256(src1: bv16, src2: bv256) returns (dst: bv16)
{
    if ($Ge'Bv256'(src2, 16bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, src2[16:0]);
}

procedure {:inline 1} $CastBv8to32(src: bv8) returns (dst: bv32)
{
    dst := 0bv24 ++ src;
}


function $shlBv32From8(src1: bv32, src2: bv8) returns (bv32)
{
    $Shl'Bv32'(src1, 0bv24 ++ src2)
}

procedure {:inline 1} $ShlBv32From8(src1: bv32, src2: bv8) returns (dst: bv32)
{
    if ($Ge'Bv8'(src2, 32bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, 0bv24 ++ src2);
}

function $shrBv32From8(src1: bv32, src2: bv8) returns (bv32)
{
    $Shr'Bv32'(src1, 0bv24 ++ src2)
}

procedure {:inline 1} $ShrBv32From8(src1: bv32, src2: bv8) returns (dst: bv32)
{
    if ($Ge'Bv8'(src2, 32bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, 0bv24 ++ src2);
}

procedure {:inline 1} $CastBv16to32(src: bv16) returns (dst: bv32)
{
    dst := 0bv16 ++ src;
}


function $shlBv32From16(src1: bv32, src2: bv16) returns (bv32)
{
    $Shl'Bv32'(src1, 0bv16 ++ src2)
}

procedure {:inline 1} $ShlBv32From16(src1: bv32, src2: bv16) returns (dst: bv32)
{
    if ($Ge'Bv16'(src2, 32bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, 0bv16 ++ src2);
}

function $shrBv32From16(src1: bv32, src2: bv16) returns (bv32)
{
    $Shr'Bv32'(src1, 0bv16 ++ src2)
}

procedure {:inline 1} $ShrBv32From16(src1: bv32, src2: bv16) returns (dst: bv32)
{
    if ($Ge'Bv16'(src2, 32bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, 0bv16 ++ src2);
}

procedure {:inline 1} $CastBv32to32(src: bv32) returns (dst: bv32)
{
    dst := src;
}


function $shlBv32From32(src1: bv32, src2: bv32) returns (bv32)
{
    $Shl'Bv32'(src1, src2)
}

procedure {:inline 1} $ShlBv32From32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Ge'Bv32'(src2, 32bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, src2);
}

function $shrBv32From32(src1: bv32, src2: bv32) returns (bv32)
{
    $Shr'Bv32'(src1, src2)
}

procedure {:inline 1} $ShrBv32From32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Ge'Bv32'(src2, 32bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, src2);
}

procedure {:inline 1} $CastBv64to32(src: bv64) returns (dst: bv32)
{
    if ($Gt'Bv64'(src, 2147483647bv64)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[32:0];
}


function $shlBv32From64(src1: bv32, src2: bv64) returns (bv32)
{
    $Shl'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShlBv32From64(src1: bv32, src2: bv64) returns (dst: bv32)
{
    if ($Ge'Bv64'(src2, 32bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, src2[32:0]);
}

function $shrBv32From64(src1: bv32, src2: bv64) returns (bv32)
{
    $Shr'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShrBv32From64(src1: bv32, src2: bv64) returns (dst: bv32)
{
    if ($Ge'Bv64'(src2, 32bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, src2[32:0]);
}

procedure {:inline 1} $CastBv128to32(src: bv128) returns (dst: bv32)
{
    if ($Gt'Bv128'(src, 2147483647bv128)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[32:0];
}


function $shlBv32From128(src1: bv32, src2: bv128) returns (bv32)
{
    $Shl'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShlBv32From128(src1: bv32, src2: bv128) returns (dst: bv32)
{
    if ($Ge'Bv128'(src2, 32bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, src2[32:0]);
}

function $shrBv32From128(src1: bv32, src2: bv128) returns (bv32)
{
    $Shr'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShrBv32From128(src1: bv32, src2: bv128) returns (dst: bv32)
{
    if ($Ge'Bv128'(src2, 32bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, src2[32:0]);
}

procedure {:inline 1} $CastBv256to32(src: bv256) returns (dst: bv32)
{
    if ($Gt'Bv256'(src, 2147483647bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[32:0];
}


function $shlBv32From256(src1: bv32, src2: bv256) returns (bv32)
{
    $Shl'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShlBv32From256(src1: bv32, src2: bv256) returns (dst: bv32)
{
    if ($Ge'Bv256'(src2, 32bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, src2[32:0]);
}

function $shrBv32From256(src1: bv32, src2: bv256) returns (bv32)
{
    $Shr'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShrBv32From256(src1: bv32, src2: bv256) returns (dst: bv32)
{
    if ($Ge'Bv256'(src2, 32bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, src2[32:0]);
}

procedure {:inline 1} $CastBv8to64(src: bv8) returns (dst: bv64)
{
    dst := 0bv56 ++ src;
}


function $shlBv64From8(src1: bv64, src2: bv8) returns (bv64)
{
    $Shl'Bv64'(src1, 0bv56 ++ src2)
}

procedure {:inline 1} $ShlBv64From8(src1: bv64, src2: bv8) returns (dst: bv64)
{
    if ($Ge'Bv8'(src2, 64bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, 0bv56 ++ src2);
}

function $shrBv64From8(src1: bv64, src2: bv8) returns (bv64)
{
    $Shr'Bv64'(src1, 0bv56 ++ src2)
}

procedure {:inline 1} $ShrBv64From8(src1: bv64, src2: bv8) returns (dst: bv64)
{
    if ($Ge'Bv8'(src2, 64bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, 0bv56 ++ src2);
}

procedure {:inline 1} $CastBv16to64(src: bv16) returns (dst: bv64)
{
    dst := 0bv48 ++ src;
}


function $shlBv64From16(src1: bv64, src2: bv16) returns (bv64)
{
    $Shl'Bv64'(src1, 0bv48 ++ src2)
}

procedure {:inline 1} $ShlBv64From16(src1: bv64, src2: bv16) returns (dst: bv64)
{
    if ($Ge'Bv16'(src2, 64bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, 0bv48 ++ src2);
}

function $shrBv64From16(src1: bv64, src2: bv16) returns (bv64)
{
    $Shr'Bv64'(src1, 0bv48 ++ src2)
}

procedure {:inline 1} $ShrBv64From16(src1: bv64, src2: bv16) returns (dst: bv64)
{
    if ($Ge'Bv16'(src2, 64bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, 0bv48 ++ src2);
}

procedure {:inline 1} $CastBv32to64(src: bv32) returns (dst: bv64)
{
    dst := 0bv32 ++ src;
}


function $shlBv64From32(src1: bv64, src2: bv32) returns (bv64)
{
    $Shl'Bv64'(src1, 0bv32 ++ src2)
}

procedure {:inline 1} $ShlBv64From32(src1: bv64, src2: bv32) returns (dst: bv64)
{
    if ($Ge'Bv32'(src2, 64bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, 0bv32 ++ src2);
}

function $shrBv64From32(src1: bv64, src2: bv32) returns (bv64)
{
    $Shr'Bv64'(src1, 0bv32 ++ src2)
}

procedure {:inline 1} $ShrBv64From32(src1: bv64, src2: bv32) returns (dst: bv64)
{
    if ($Ge'Bv32'(src2, 64bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, 0bv32 ++ src2);
}

procedure {:inline 1} $CastBv64to64(src: bv64) returns (dst: bv64)
{
    dst := src;
}


function $shlBv64From64(src1: bv64, src2: bv64) returns (bv64)
{
    $Shl'Bv64'(src1, src2)
}

procedure {:inline 1} $ShlBv64From64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Ge'Bv64'(src2, 64bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, src2);
}

function $shrBv64From64(src1: bv64, src2: bv64) returns (bv64)
{
    $Shr'Bv64'(src1, src2)
}

procedure {:inline 1} $ShrBv64From64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Ge'Bv64'(src2, 64bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, src2);
}

procedure {:inline 1} $CastBv128to64(src: bv128) returns (dst: bv64)
{
    if ($Gt'Bv128'(src, 18446744073709551615bv128)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[64:0];
}


function $shlBv64From128(src1: bv64, src2: bv128) returns (bv64)
{
    $Shl'Bv64'(src1, src2[64:0])
}

procedure {:inline 1} $ShlBv64From128(src1: bv64, src2: bv128) returns (dst: bv64)
{
    if ($Ge'Bv128'(src2, 64bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, src2[64:0]);
}

function $shrBv64From128(src1: bv64, src2: bv128) returns (bv64)
{
    $Shr'Bv64'(src1, src2[64:0])
}

procedure {:inline 1} $ShrBv64From128(src1: bv64, src2: bv128) returns (dst: bv64)
{
    if ($Ge'Bv128'(src2, 64bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, src2[64:0]);
}

procedure {:inline 1} $CastBv256to64(src: bv256) returns (dst: bv64)
{
    if ($Gt'Bv256'(src, 18446744073709551615bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[64:0];
}


function $shlBv64From256(src1: bv64, src2: bv256) returns (bv64)
{
    $Shl'Bv64'(src1, src2[64:0])
}

procedure {:inline 1} $ShlBv64From256(src1: bv64, src2: bv256) returns (dst: bv64)
{
    if ($Ge'Bv256'(src2, 64bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, src2[64:0]);
}

function $shrBv64From256(src1: bv64, src2: bv256) returns (bv64)
{
    $Shr'Bv64'(src1, src2[64:0])
}

procedure {:inline 1} $ShrBv64From256(src1: bv64, src2: bv256) returns (dst: bv64)
{
    if ($Ge'Bv256'(src2, 64bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, src2[64:0]);
}

procedure {:inline 1} $CastBv8to128(src: bv8) returns (dst: bv128)
{
    dst := 0bv120 ++ src;
}


function $shlBv128From8(src1: bv128, src2: bv8) returns (bv128)
{
    $Shl'Bv128'(src1, 0bv120 ++ src2)
}

procedure {:inline 1} $ShlBv128From8(src1: bv128, src2: bv8) returns (dst: bv128)
{
    if ($Ge'Bv8'(src2, 128bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, 0bv120 ++ src2);
}

function $shrBv128From8(src1: bv128, src2: bv8) returns (bv128)
{
    $Shr'Bv128'(src1, 0bv120 ++ src2)
}

procedure {:inline 1} $ShrBv128From8(src1: bv128, src2: bv8) returns (dst: bv128)
{
    if ($Ge'Bv8'(src2, 128bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, 0bv120 ++ src2);
}

procedure {:inline 1} $CastBv16to128(src: bv16) returns (dst: bv128)
{
    dst := 0bv112 ++ src;
}


function $shlBv128From16(src1: bv128, src2: bv16) returns (bv128)
{
    $Shl'Bv128'(src1, 0bv112 ++ src2)
}

procedure {:inline 1} $ShlBv128From16(src1: bv128, src2: bv16) returns (dst: bv128)
{
    if ($Ge'Bv16'(src2, 128bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, 0bv112 ++ src2);
}

function $shrBv128From16(src1: bv128, src2: bv16) returns (bv128)
{
    $Shr'Bv128'(src1, 0bv112 ++ src2)
}

procedure {:inline 1} $ShrBv128From16(src1: bv128, src2: bv16) returns (dst: bv128)
{
    if ($Ge'Bv16'(src2, 128bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, 0bv112 ++ src2);
}

procedure {:inline 1} $CastBv32to128(src: bv32) returns (dst: bv128)
{
    dst := 0bv96 ++ src;
}


function $shlBv128From32(src1: bv128, src2: bv32) returns (bv128)
{
    $Shl'Bv128'(src1, 0bv96 ++ src2)
}

procedure {:inline 1} $ShlBv128From32(src1: bv128, src2: bv32) returns (dst: bv128)
{
    if ($Ge'Bv32'(src2, 128bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, 0bv96 ++ src2);
}

function $shrBv128From32(src1: bv128, src2: bv32) returns (bv128)
{
    $Shr'Bv128'(src1, 0bv96 ++ src2)
}

procedure {:inline 1} $ShrBv128From32(src1: bv128, src2: bv32) returns (dst: bv128)
{
    if ($Ge'Bv32'(src2, 128bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, 0bv96 ++ src2);
}

procedure {:inline 1} $CastBv64to128(src: bv64) returns (dst: bv128)
{
    dst := 0bv64 ++ src;
}


function $shlBv128From64(src1: bv128, src2: bv64) returns (bv128)
{
    $Shl'Bv128'(src1, 0bv64 ++ src2)
}

procedure {:inline 1} $ShlBv128From64(src1: bv128, src2: bv64) returns (dst: bv128)
{
    if ($Ge'Bv64'(src2, 128bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, 0bv64 ++ src2);
}

function $shrBv128From64(src1: bv128, src2: bv64) returns (bv128)
{
    $Shr'Bv128'(src1, 0bv64 ++ src2)
}

procedure {:inline 1} $ShrBv128From64(src1: bv128, src2: bv64) returns (dst: bv128)
{
    if ($Ge'Bv64'(src2, 128bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, 0bv64 ++ src2);
}

procedure {:inline 1} $CastBv128to128(src: bv128) returns (dst: bv128)
{
    dst := src;
}


function $shlBv128From128(src1: bv128, src2: bv128) returns (bv128)
{
    $Shl'Bv128'(src1, src2)
}

procedure {:inline 1} $ShlBv128From128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Ge'Bv128'(src2, 128bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, src2);
}

function $shrBv128From128(src1: bv128, src2: bv128) returns (bv128)
{
    $Shr'Bv128'(src1, src2)
}

procedure {:inline 1} $ShrBv128From128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Ge'Bv128'(src2, 128bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, src2);
}

procedure {:inline 1} $CastBv256to128(src: bv256) returns (dst: bv128)
{
    if ($Gt'Bv256'(src, 340282366920938463463374607431768211455bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[128:0];
}


function $shlBv128From256(src1: bv128, src2: bv256) returns (bv128)
{
    $Shl'Bv128'(src1, src2[128:0])
}

procedure {:inline 1} $ShlBv128From256(src1: bv128, src2: bv256) returns (dst: bv128)
{
    if ($Ge'Bv256'(src2, 128bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, src2[128:0]);
}

function $shrBv128From256(src1: bv128, src2: bv256) returns (bv128)
{
    $Shr'Bv128'(src1, src2[128:0])
}

procedure {:inline 1} $ShrBv128From256(src1: bv128, src2: bv256) returns (dst: bv128)
{
    if ($Ge'Bv256'(src2, 128bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, src2[128:0]);
}

procedure {:inline 1} $CastBv8to256(src: bv8) returns (dst: bv256)
{
    dst := 0bv248 ++ src;
}


function $shlBv256From8(src1: bv256, src2: bv8) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv248 ++ src2)
}

procedure {:inline 1} $ShlBv256From8(src1: bv256, src2: bv8) returns (dst: bv256)
{
    if ($Ge'Bv8'(src2, 256bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, 0bv248 ++ src2);
}

function $shrBv256From8(src1: bv256, src2: bv8) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv248 ++ src2)
}

procedure {:inline 1} $ShrBv256From8(src1: bv256, src2: bv8) returns (dst: bv256)
{
    if ($Ge'Bv8'(src2, 256bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, 0bv248 ++ src2);
}

procedure {:inline 1} $CastBv16to256(src: bv16) returns (dst: bv256)
{
    dst := 0bv240 ++ src;
}


function $shlBv256From16(src1: bv256, src2: bv16) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv240 ++ src2)
}

procedure {:inline 1} $ShlBv256From16(src1: bv256, src2: bv16) returns (dst: bv256)
{
    if ($Ge'Bv16'(src2, 256bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, 0bv240 ++ src2);
}

function $shrBv256From16(src1: bv256, src2: bv16) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv240 ++ src2)
}

procedure {:inline 1} $ShrBv256From16(src1: bv256, src2: bv16) returns (dst: bv256)
{
    if ($Ge'Bv16'(src2, 256bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, 0bv240 ++ src2);
}

procedure {:inline 1} $CastBv32to256(src: bv32) returns (dst: bv256)
{
    dst := 0bv224 ++ src;
}


function $shlBv256From32(src1: bv256, src2: bv32) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv224 ++ src2)
}

procedure {:inline 1} $ShlBv256From32(src1: bv256, src2: bv32) returns (dst: bv256)
{
    if ($Ge'Bv32'(src2, 256bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, 0bv224 ++ src2);
}

function $shrBv256From32(src1: bv256, src2: bv32) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv224 ++ src2)
}

procedure {:inline 1} $ShrBv256From32(src1: bv256, src2: bv32) returns (dst: bv256)
{
    if ($Ge'Bv32'(src2, 256bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, 0bv224 ++ src2);
}

procedure {:inline 1} $CastBv64to256(src: bv64) returns (dst: bv256)
{
    dst := 0bv192 ++ src;
}


function $shlBv256From64(src1: bv256, src2: bv64) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv192 ++ src2)
}

procedure {:inline 1} $ShlBv256From64(src1: bv256, src2: bv64) returns (dst: bv256)
{
    if ($Ge'Bv64'(src2, 256bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, 0bv192 ++ src2);
}

function $shrBv256From64(src1: bv256, src2: bv64) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv192 ++ src2)
}

procedure {:inline 1} $ShrBv256From64(src1: bv256, src2: bv64) returns (dst: bv256)
{
    if ($Ge'Bv64'(src2, 256bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, 0bv192 ++ src2);
}

procedure {:inline 1} $CastBv128to256(src: bv128) returns (dst: bv256)
{
    dst := 0bv128 ++ src;
}


function $shlBv256From128(src1: bv256, src2: bv128) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv128 ++ src2)
}

procedure {:inline 1} $ShlBv256From128(src1: bv256, src2: bv128) returns (dst: bv256)
{
    if ($Ge'Bv128'(src2, 256bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, 0bv128 ++ src2);
}

function $shrBv256From128(src1: bv256, src2: bv128) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv128 ++ src2)
}

procedure {:inline 1} $ShrBv256From128(src1: bv256, src2: bv128) returns (dst: bv256)
{
    if ($Ge'Bv128'(src2, 256bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, 0bv128 ++ src2);
}

procedure {:inline 1} $CastBv256to256(src: bv256) returns (dst: bv256)
{
    dst := src;
}


function $shlBv256From256(src1: bv256, src2: bv256) returns (bv256)
{
    $Shl'Bv256'(src1, src2)
}

procedure {:inline 1} $ShlBv256From256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Ge'Bv256'(src2, 256bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, src2);
}

function $shrBv256From256(src1: bv256, src2: bv256) returns (bv256)
{
    $Shr'Bv256'(src1, src2)
}

procedure {:inline 1} $ShrBv256From256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Ge'Bv256'(src2, 256bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, src2);
}

procedure {:inline 1} $ShlU16(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 16) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shlU16(src1, src2);
}

procedure {:inline 1} $ShlU32(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 32) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shlU32(src1, src2);
}

procedure {:inline 1} $ShlU64(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 64) {
       call $ExecFailureAbort();
       return;
    }
    dst := $shlU64(src1, src2);
}

procedure {:inline 1} $ShlU128(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 128) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shlU128(src1, src2);
}

procedure {:inline 1} $ShlU256(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    dst := $shlU256(src1, src2);
}

procedure {:inline 1} $Shr(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU8(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 8) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU16(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 16) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU32(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 32) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU64(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 64) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU128(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 128) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU256(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    dst := $shr(src1, src2);
}

procedure {:inline 1} $MulU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU16(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U16) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU32(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U32) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU256(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U256) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $Div(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 div src2;
}

procedure {:inline 1} $Mod(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 mod src2;
}

procedure {:inline 1} $ArithBinaryUnimplemented(src1: int, src2: int) returns (dst: int);

procedure {:inline 1} $Lt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 < src2;
}

procedure {:inline 1} $Gt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 > src2;
}

procedure {:inline 1} $Le(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 <= src2;
}

procedure {:inline 1} $Ge(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 >= src2;
}

procedure {:inline 1} $And(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 && src2;
}

procedure {:inline 1} $Or(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 || src2;
}

procedure {:inline 1} $Not(src: bool) returns (dst: bool)
{
    dst := !src;
}

// Pack and Unpack are auto-generated for each type T


// ==================================================================================
// Native Vector

function {:inline} $SliceVecByRange<T>(v: Vec T, r: $Range): Vec T {
    SliceVec(v, r->lb, r->ub)
}

// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `#0`

// Not inlined. It appears faster this way.
function $IsEqual'vec'#0''(v1: Vec (#0), v2: Vec (#0)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'#0'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'#0''(v: Vec (#0), prefix: Vec (#0)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'#0'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'#0''(v: Vec (#0), suffix: Vec (#0)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'#0'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'#0''(v: Vec (#0)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'#0'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'#0'(v: Vec (#0), e: #0): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'#0'(ReadVec(v, i), e))
}

function $IndexOfVec'#0'(v: Vec (#0), e: #0): int;
axiom (forall v: Vec (#0), e: #0:: {$IndexOfVec'#0'(v, e)}
    (var i := $IndexOfVec'#0'(v, e);
     if (!$ContainsVec'#0'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'#0'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'#0'(ReadVec(v, j), e))));


function {:inline} $RangeVec'#0'(v: Vec (#0)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'#0'(): Vec (#0) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'#0'() returns (v: Vec (#0)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'#0'(): Vec (#0) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'#0'(v: Vec (#0)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'#0'(m: $Mutation (Vec (#0)), val: #0) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'#0'(v: Vec (#0), val: #0): Vec (#0) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'#0'(m: $Mutation (Vec (#0))) returns (e: #0, m': $Mutation (Vec (#0))) {
    var v: Vec (#0);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'#0'(m: $Mutation (Vec (#0)), other: Vec (#0)) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'#0'(m: $Mutation (Vec (#0))) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'#0'(m: $Mutation (Vec (#0)), other: Vec (#0)) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'#0'(m: $Mutation (Vec (#0)), new_len: int) returns (v: (Vec (#0)), m': $Mutation (Vec (#0))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'#0'(m: $Mutation (Vec (#0)), new_len: int) returns (v: (Vec (#0)), m': $Mutation (Vec (#0))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'#0'(m: $Mutation (Vec (#0)), left: int, right: int) returns (m': $Mutation (Vec (#0))) {
    var left_vec: Vec (#0);
    var mid_vec: Vec (#0);
    var right_vec: Vec (#0);
    var v: Vec (#0);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'#0'(m: $Mutation (Vec (#0)), rot: int) returns (n: int, m': $Mutation (Vec (#0))) {
    var v: Vec (#0);
    var len: int;
    var left_vec: Vec (#0);
    var right_vec: Vec (#0);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'#0'(m: $Mutation (Vec (#0)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (#0))) {
    var left_vec: Vec (#0);
    var mid_vec: Vec (#0);
    var right_vec: Vec (#0);
    var mid_left_vec: Vec (#0);
    var mid_right_vec: Vec (#0);
    var v: Vec (#0);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'#0'(m: $Mutation (Vec (#0)), i: int, e: #0) returns (m': $Mutation (Vec (#0))) {
    var left_vec: Vec (#0);
    var right_vec: Vec (#0);
    var v: Vec (#0);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'#0'(v: Vec (#0)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'#0'(v: Vec (#0)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'#0'(v: Vec (#0), i: int) returns (dst: #0) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'#0'(v: Vec (#0), i: int): #0 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'#0'(m: $Mutation (Vec (#0)), index: int)
returns (dst: $Mutation (#0), m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'#0'(v: Vec (#0), i: int): #0 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'#0'(v: Vec (#0)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'#0'(m: $Mutation (Vec (#0)), i: int, j: int) returns (m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'#0'(v: Vec (#0), i: int, j: int): Vec (#0) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'#0'(m: $Mutation (Vec (#0)), i: int) returns (e: #0, m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'#0'(m: $Mutation (Vec (#0)), i: int) returns (e: #0, m': $Mutation (Vec (#0)))
{
    var len: int;
    var v: Vec (#0);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'#0'(v: Vec (#0), e: #0) returns (res: bool)  {
    res := $ContainsVec'#0'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'#0'(v: Vec (#0), e: #0) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'#0'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_aggregator_Aggregator`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_aggregator_Aggregator''(v1: Vec ($1_aggregator_Aggregator), v2: Vec ($1_aggregator_Aggregator)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_aggregator_Aggregator'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_aggregator_Aggregator''(v: Vec ($1_aggregator_Aggregator), prefix: Vec ($1_aggregator_Aggregator)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_aggregator_Aggregator'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_aggregator_Aggregator''(v: Vec ($1_aggregator_Aggregator), suffix: Vec ($1_aggregator_Aggregator)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_aggregator_Aggregator'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_aggregator_Aggregator''(v: Vec ($1_aggregator_Aggregator)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_aggregator_Aggregator'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator), e: $1_aggregator_Aggregator): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_aggregator_Aggregator'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator), e: $1_aggregator_Aggregator): int;
axiom (forall v: Vec ($1_aggregator_Aggregator), e: $1_aggregator_Aggregator:: {$IndexOfVec'$1_aggregator_Aggregator'(v, e)}
    (var i := $IndexOfVec'$1_aggregator_Aggregator'(v, e);
     if (!$ContainsVec'$1_aggregator_Aggregator'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_aggregator_Aggregator'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_aggregator_Aggregator'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_aggregator_Aggregator'(): Vec ($1_aggregator_Aggregator) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_aggregator_Aggregator'() returns (v: Vec ($1_aggregator_Aggregator)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_aggregator_Aggregator'(): Vec ($1_aggregator_Aggregator) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), val: $1_aggregator_Aggregator) returns (m': $Mutation (Vec ($1_aggregator_Aggregator))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator), val: $1_aggregator_Aggregator): Vec ($1_aggregator_Aggregator) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator))) returns (e: $1_aggregator_Aggregator, m': $Mutation (Vec ($1_aggregator_Aggregator))) {
    var v: Vec ($1_aggregator_Aggregator);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), other: Vec ($1_aggregator_Aggregator)) returns (m': $Mutation (Vec ($1_aggregator_Aggregator))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator))) returns (m': $Mutation (Vec ($1_aggregator_Aggregator))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), other: Vec ($1_aggregator_Aggregator)) returns (m': $Mutation (Vec ($1_aggregator_Aggregator))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), new_len: int) returns (v: (Vec ($1_aggregator_Aggregator)), m': $Mutation (Vec ($1_aggregator_Aggregator))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), new_len: int) returns (v: (Vec ($1_aggregator_Aggregator)), m': $Mutation (Vec ($1_aggregator_Aggregator))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), left: int, right: int) returns (m': $Mutation (Vec ($1_aggregator_Aggregator))) {
    var left_vec: Vec ($1_aggregator_Aggregator);
    var mid_vec: Vec ($1_aggregator_Aggregator);
    var right_vec: Vec ($1_aggregator_Aggregator);
    var v: Vec ($1_aggregator_Aggregator);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), rot: int) returns (n: int, m': $Mutation (Vec ($1_aggregator_Aggregator))) {
    var v: Vec ($1_aggregator_Aggregator);
    var len: int;
    var left_vec: Vec ($1_aggregator_Aggregator);
    var right_vec: Vec ($1_aggregator_Aggregator);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_aggregator_Aggregator))) {
    var left_vec: Vec ($1_aggregator_Aggregator);
    var mid_vec: Vec ($1_aggregator_Aggregator);
    var right_vec: Vec ($1_aggregator_Aggregator);
    var mid_left_vec: Vec ($1_aggregator_Aggregator);
    var mid_right_vec: Vec ($1_aggregator_Aggregator);
    var v: Vec ($1_aggregator_Aggregator);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), i: int, e: $1_aggregator_Aggregator) returns (m': $Mutation (Vec ($1_aggregator_Aggregator))) {
    var left_vec: Vec ($1_aggregator_Aggregator);
    var right_vec: Vec ($1_aggregator_Aggregator);
    var v: Vec ($1_aggregator_Aggregator);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator), i: int) returns (dst: $1_aggregator_Aggregator) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator), i: int): $1_aggregator_Aggregator {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), index: int)
returns (dst: $Mutation ($1_aggregator_Aggregator), m': $Mutation (Vec ($1_aggregator_Aggregator)))
{
    var v: Vec ($1_aggregator_Aggregator);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator), i: int): $1_aggregator_Aggregator {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), i: int, j: int) returns (m': $Mutation (Vec ($1_aggregator_Aggregator)))
{
    var v: Vec ($1_aggregator_Aggregator);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator), i: int, j: int): Vec ($1_aggregator_Aggregator) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), i: int) returns (e: $1_aggregator_Aggregator, m': $Mutation (Vec ($1_aggregator_Aggregator)))
{
    var v: Vec ($1_aggregator_Aggregator);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), i: int) returns (e: $1_aggregator_Aggregator, m': $Mutation (Vec ($1_aggregator_Aggregator)))
{
    var len: int;
    var v: Vec ($1_aggregator_Aggregator);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator), e: $1_aggregator_Aggregator) returns (res: bool)  {
    res := $ContainsVec'$1_aggregator_Aggregator'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator), e: $1_aggregator_Aggregator) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_aggregator_Aggregator'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_fixed_point32_FixedPoint32`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_fixed_point32_FixedPoint32''(v1: Vec ($1_fixed_point32_FixedPoint32), v2: Vec ($1_fixed_point32_FixedPoint32)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_fixed_point32_FixedPoint32'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_fixed_point32_FixedPoint32''(v: Vec ($1_fixed_point32_FixedPoint32), prefix: Vec ($1_fixed_point32_FixedPoint32)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_fixed_point32_FixedPoint32'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_fixed_point32_FixedPoint32''(v: Vec ($1_fixed_point32_FixedPoint32), suffix: Vec ($1_fixed_point32_FixedPoint32)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_fixed_point32_FixedPoint32'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_fixed_point32_FixedPoint32''(v: Vec ($1_fixed_point32_FixedPoint32)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_fixed_point32_FixedPoint32'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_fixed_point32_FixedPoint32'(v: Vec ($1_fixed_point32_FixedPoint32), e: $1_fixed_point32_FixedPoint32): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_fixed_point32_FixedPoint32'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_fixed_point32_FixedPoint32'(v: Vec ($1_fixed_point32_FixedPoint32), e: $1_fixed_point32_FixedPoint32): int;
axiom (forall v: Vec ($1_fixed_point32_FixedPoint32), e: $1_fixed_point32_FixedPoint32:: {$IndexOfVec'$1_fixed_point32_FixedPoint32'(v, e)}
    (var i := $IndexOfVec'$1_fixed_point32_FixedPoint32'(v, e);
     if (!$ContainsVec'$1_fixed_point32_FixedPoint32'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_fixed_point32_FixedPoint32'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_fixed_point32_FixedPoint32'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_fixed_point32_FixedPoint32'(v: Vec ($1_fixed_point32_FixedPoint32)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_fixed_point32_FixedPoint32'(): Vec ($1_fixed_point32_FixedPoint32) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_fixed_point32_FixedPoint32'() returns (v: Vec ($1_fixed_point32_FixedPoint32)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_fixed_point32_FixedPoint32'(): Vec ($1_fixed_point32_FixedPoint32) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_fixed_point32_FixedPoint32'(v: Vec ($1_fixed_point32_FixedPoint32)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_fixed_point32_FixedPoint32'(m: $Mutation (Vec ($1_fixed_point32_FixedPoint32)), val: $1_fixed_point32_FixedPoint32) returns (m': $Mutation (Vec ($1_fixed_point32_FixedPoint32))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_fixed_point32_FixedPoint32'(v: Vec ($1_fixed_point32_FixedPoint32), val: $1_fixed_point32_FixedPoint32): Vec ($1_fixed_point32_FixedPoint32) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_fixed_point32_FixedPoint32'(m: $Mutation (Vec ($1_fixed_point32_FixedPoint32))) returns (e: $1_fixed_point32_FixedPoint32, m': $Mutation (Vec ($1_fixed_point32_FixedPoint32))) {
    var v: Vec ($1_fixed_point32_FixedPoint32);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_fixed_point32_FixedPoint32'(m: $Mutation (Vec ($1_fixed_point32_FixedPoint32)), other: Vec ($1_fixed_point32_FixedPoint32)) returns (m': $Mutation (Vec ($1_fixed_point32_FixedPoint32))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_fixed_point32_FixedPoint32'(m: $Mutation (Vec ($1_fixed_point32_FixedPoint32))) returns (m': $Mutation (Vec ($1_fixed_point32_FixedPoint32))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_fixed_point32_FixedPoint32'(m: $Mutation (Vec ($1_fixed_point32_FixedPoint32)), other: Vec ($1_fixed_point32_FixedPoint32)) returns (m': $Mutation (Vec ($1_fixed_point32_FixedPoint32))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_fixed_point32_FixedPoint32'(m: $Mutation (Vec ($1_fixed_point32_FixedPoint32)), new_len: int) returns (v: (Vec ($1_fixed_point32_FixedPoint32)), m': $Mutation (Vec ($1_fixed_point32_FixedPoint32))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_fixed_point32_FixedPoint32'(m: $Mutation (Vec ($1_fixed_point32_FixedPoint32)), new_len: int) returns (v: (Vec ($1_fixed_point32_FixedPoint32)), m': $Mutation (Vec ($1_fixed_point32_FixedPoint32))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_fixed_point32_FixedPoint32'(m: $Mutation (Vec ($1_fixed_point32_FixedPoint32)), left: int, right: int) returns (m': $Mutation (Vec ($1_fixed_point32_FixedPoint32))) {
    var left_vec: Vec ($1_fixed_point32_FixedPoint32);
    var mid_vec: Vec ($1_fixed_point32_FixedPoint32);
    var right_vec: Vec ($1_fixed_point32_FixedPoint32);
    var v: Vec ($1_fixed_point32_FixedPoint32);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_fixed_point32_FixedPoint32'(m: $Mutation (Vec ($1_fixed_point32_FixedPoint32)), rot: int) returns (n: int, m': $Mutation (Vec ($1_fixed_point32_FixedPoint32))) {
    var v: Vec ($1_fixed_point32_FixedPoint32);
    var len: int;
    var left_vec: Vec ($1_fixed_point32_FixedPoint32);
    var right_vec: Vec ($1_fixed_point32_FixedPoint32);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_fixed_point32_FixedPoint32'(m: $Mutation (Vec ($1_fixed_point32_FixedPoint32)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_fixed_point32_FixedPoint32))) {
    var left_vec: Vec ($1_fixed_point32_FixedPoint32);
    var mid_vec: Vec ($1_fixed_point32_FixedPoint32);
    var right_vec: Vec ($1_fixed_point32_FixedPoint32);
    var mid_left_vec: Vec ($1_fixed_point32_FixedPoint32);
    var mid_right_vec: Vec ($1_fixed_point32_FixedPoint32);
    var v: Vec ($1_fixed_point32_FixedPoint32);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_fixed_point32_FixedPoint32'(m: $Mutation (Vec ($1_fixed_point32_FixedPoint32)), i: int, e: $1_fixed_point32_FixedPoint32) returns (m': $Mutation (Vec ($1_fixed_point32_FixedPoint32))) {
    var left_vec: Vec ($1_fixed_point32_FixedPoint32);
    var right_vec: Vec ($1_fixed_point32_FixedPoint32);
    var v: Vec ($1_fixed_point32_FixedPoint32);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_fixed_point32_FixedPoint32'(v: Vec ($1_fixed_point32_FixedPoint32)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_fixed_point32_FixedPoint32'(v: Vec ($1_fixed_point32_FixedPoint32)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_fixed_point32_FixedPoint32'(v: Vec ($1_fixed_point32_FixedPoint32), i: int) returns (dst: $1_fixed_point32_FixedPoint32) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_fixed_point32_FixedPoint32'(v: Vec ($1_fixed_point32_FixedPoint32), i: int): $1_fixed_point32_FixedPoint32 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_fixed_point32_FixedPoint32'(m: $Mutation (Vec ($1_fixed_point32_FixedPoint32)), index: int)
returns (dst: $Mutation ($1_fixed_point32_FixedPoint32), m': $Mutation (Vec ($1_fixed_point32_FixedPoint32)))
{
    var v: Vec ($1_fixed_point32_FixedPoint32);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_fixed_point32_FixedPoint32'(v: Vec ($1_fixed_point32_FixedPoint32), i: int): $1_fixed_point32_FixedPoint32 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_fixed_point32_FixedPoint32'(v: Vec ($1_fixed_point32_FixedPoint32)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_fixed_point32_FixedPoint32'(m: $Mutation (Vec ($1_fixed_point32_FixedPoint32)), i: int, j: int) returns (m': $Mutation (Vec ($1_fixed_point32_FixedPoint32)))
{
    var v: Vec ($1_fixed_point32_FixedPoint32);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_fixed_point32_FixedPoint32'(v: Vec ($1_fixed_point32_FixedPoint32), i: int, j: int): Vec ($1_fixed_point32_FixedPoint32) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_fixed_point32_FixedPoint32'(m: $Mutation (Vec ($1_fixed_point32_FixedPoint32)), i: int) returns (e: $1_fixed_point32_FixedPoint32, m': $Mutation (Vec ($1_fixed_point32_FixedPoint32)))
{
    var v: Vec ($1_fixed_point32_FixedPoint32);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_fixed_point32_FixedPoint32'(m: $Mutation (Vec ($1_fixed_point32_FixedPoint32)), i: int) returns (e: $1_fixed_point32_FixedPoint32, m': $Mutation (Vec ($1_fixed_point32_FixedPoint32)))
{
    var len: int;
    var v: Vec ($1_fixed_point32_FixedPoint32);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_fixed_point32_FixedPoint32'(v: Vec ($1_fixed_point32_FixedPoint32), e: $1_fixed_point32_FixedPoint32) returns (res: bool)  {
    res := $ContainsVec'$1_fixed_point32_FixedPoint32'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_fixed_point32_FixedPoint32'(v: Vec ($1_fixed_point32_FixedPoint32), e: $1_fixed_point32_FixedPoint32) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_fixed_point32_FixedPoint32'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_optional_aggregator_Integer`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_optional_aggregator_Integer''(v1: Vec ($1_optional_aggregator_Integer), v2: Vec ($1_optional_aggregator_Integer)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_optional_aggregator_Integer'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_optional_aggregator_Integer''(v: Vec ($1_optional_aggregator_Integer), prefix: Vec ($1_optional_aggregator_Integer)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_optional_aggregator_Integer'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_optional_aggregator_Integer''(v: Vec ($1_optional_aggregator_Integer), suffix: Vec ($1_optional_aggregator_Integer)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_optional_aggregator_Integer'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_optional_aggregator_Integer''(v: Vec ($1_optional_aggregator_Integer)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_optional_aggregator_Integer'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer), e: $1_optional_aggregator_Integer): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_optional_aggregator_Integer'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer), e: $1_optional_aggregator_Integer): int;
axiom (forall v: Vec ($1_optional_aggregator_Integer), e: $1_optional_aggregator_Integer:: {$IndexOfVec'$1_optional_aggregator_Integer'(v, e)}
    (var i := $IndexOfVec'$1_optional_aggregator_Integer'(v, e);
     if (!$ContainsVec'$1_optional_aggregator_Integer'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_optional_aggregator_Integer'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_optional_aggregator_Integer'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_optional_aggregator_Integer'(): Vec ($1_optional_aggregator_Integer) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_optional_aggregator_Integer'() returns (v: Vec ($1_optional_aggregator_Integer)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_optional_aggregator_Integer'(): Vec ($1_optional_aggregator_Integer) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), val: $1_optional_aggregator_Integer) returns (m': $Mutation (Vec ($1_optional_aggregator_Integer))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer), val: $1_optional_aggregator_Integer): Vec ($1_optional_aggregator_Integer) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer))) returns (e: $1_optional_aggregator_Integer, m': $Mutation (Vec ($1_optional_aggregator_Integer))) {
    var v: Vec ($1_optional_aggregator_Integer);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), other: Vec ($1_optional_aggregator_Integer)) returns (m': $Mutation (Vec ($1_optional_aggregator_Integer))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer))) returns (m': $Mutation (Vec ($1_optional_aggregator_Integer))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), other: Vec ($1_optional_aggregator_Integer)) returns (m': $Mutation (Vec ($1_optional_aggregator_Integer))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), new_len: int) returns (v: (Vec ($1_optional_aggregator_Integer)), m': $Mutation (Vec ($1_optional_aggregator_Integer))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), new_len: int) returns (v: (Vec ($1_optional_aggregator_Integer)), m': $Mutation (Vec ($1_optional_aggregator_Integer))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), left: int, right: int) returns (m': $Mutation (Vec ($1_optional_aggregator_Integer))) {
    var left_vec: Vec ($1_optional_aggregator_Integer);
    var mid_vec: Vec ($1_optional_aggregator_Integer);
    var right_vec: Vec ($1_optional_aggregator_Integer);
    var v: Vec ($1_optional_aggregator_Integer);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), rot: int) returns (n: int, m': $Mutation (Vec ($1_optional_aggregator_Integer))) {
    var v: Vec ($1_optional_aggregator_Integer);
    var len: int;
    var left_vec: Vec ($1_optional_aggregator_Integer);
    var right_vec: Vec ($1_optional_aggregator_Integer);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_optional_aggregator_Integer))) {
    var left_vec: Vec ($1_optional_aggregator_Integer);
    var mid_vec: Vec ($1_optional_aggregator_Integer);
    var right_vec: Vec ($1_optional_aggregator_Integer);
    var mid_left_vec: Vec ($1_optional_aggregator_Integer);
    var mid_right_vec: Vec ($1_optional_aggregator_Integer);
    var v: Vec ($1_optional_aggregator_Integer);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), i: int, e: $1_optional_aggregator_Integer) returns (m': $Mutation (Vec ($1_optional_aggregator_Integer))) {
    var left_vec: Vec ($1_optional_aggregator_Integer);
    var right_vec: Vec ($1_optional_aggregator_Integer);
    var v: Vec ($1_optional_aggregator_Integer);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer), i: int) returns (dst: $1_optional_aggregator_Integer) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer), i: int): $1_optional_aggregator_Integer {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), index: int)
returns (dst: $Mutation ($1_optional_aggregator_Integer), m': $Mutation (Vec ($1_optional_aggregator_Integer)))
{
    var v: Vec ($1_optional_aggregator_Integer);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer), i: int): $1_optional_aggregator_Integer {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), i: int, j: int) returns (m': $Mutation (Vec ($1_optional_aggregator_Integer)))
{
    var v: Vec ($1_optional_aggregator_Integer);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer), i: int, j: int): Vec ($1_optional_aggregator_Integer) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), i: int) returns (e: $1_optional_aggregator_Integer, m': $Mutation (Vec ($1_optional_aggregator_Integer)))
{
    var v: Vec ($1_optional_aggregator_Integer);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), i: int) returns (e: $1_optional_aggregator_Integer, m': $Mutation (Vec ($1_optional_aggregator_Integer)))
{
    var len: int;
    var v: Vec ($1_optional_aggregator_Integer);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer), e: $1_optional_aggregator_Integer) returns (res: bool)  {
    res := $ContainsVec'$1_optional_aggregator_Integer'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer), e: $1_optional_aggregator_Integer) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_optional_aggregator_Integer'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_optional_aggregator_OptionalAggregator`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_optional_aggregator_OptionalAggregator''(v1: Vec ($1_optional_aggregator_OptionalAggregator), v2: Vec ($1_optional_aggregator_OptionalAggregator)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_optional_aggregator_OptionalAggregator'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_optional_aggregator_OptionalAggregator''(v: Vec ($1_optional_aggregator_OptionalAggregator), prefix: Vec ($1_optional_aggregator_OptionalAggregator)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_optional_aggregator_OptionalAggregator'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_optional_aggregator_OptionalAggregator''(v: Vec ($1_optional_aggregator_OptionalAggregator), suffix: Vec ($1_optional_aggregator_OptionalAggregator)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_optional_aggregator_OptionalAggregator'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_optional_aggregator_OptionalAggregator''(v: Vec ($1_optional_aggregator_OptionalAggregator)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_optional_aggregator_OptionalAggregator'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator), e: $1_optional_aggregator_OptionalAggregator): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_optional_aggregator_OptionalAggregator'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator), e: $1_optional_aggregator_OptionalAggregator): int;
axiom (forall v: Vec ($1_optional_aggregator_OptionalAggregator), e: $1_optional_aggregator_OptionalAggregator:: {$IndexOfVec'$1_optional_aggregator_OptionalAggregator'(v, e)}
    (var i := $IndexOfVec'$1_optional_aggregator_OptionalAggregator'(v, e);
     if (!$ContainsVec'$1_optional_aggregator_OptionalAggregator'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_optional_aggregator_OptionalAggregator'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_optional_aggregator_OptionalAggregator'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_optional_aggregator_OptionalAggregator'(): Vec ($1_optional_aggregator_OptionalAggregator) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_optional_aggregator_OptionalAggregator'() returns (v: Vec ($1_optional_aggregator_OptionalAggregator)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_optional_aggregator_OptionalAggregator'(): Vec ($1_optional_aggregator_OptionalAggregator) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), val: $1_optional_aggregator_OptionalAggregator) returns (m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator), val: $1_optional_aggregator_OptionalAggregator): Vec ($1_optional_aggregator_OptionalAggregator) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) returns (e: $1_optional_aggregator_OptionalAggregator, m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) {
    var v: Vec ($1_optional_aggregator_OptionalAggregator);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), other: Vec ($1_optional_aggregator_OptionalAggregator)) returns (m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) returns (m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), other: Vec ($1_optional_aggregator_OptionalAggregator)) returns (m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), new_len: int) returns (v: (Vec ($1_optional_aggregator_OptionalAggregator)), m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), new_len: int) returns (v: (Vec ($1_optional_aggregator_OptionalAggregator)), m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), left: int, right: int) returns (m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) {
    var left_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    var mid_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    var right_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    var v: Vec ($1_optional_aggregator_OptionalAggregator);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), rot: int) returns (n: int, m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) {
    var v: Vec ($1_optional_aggregator_OptionalAggregator);
    var len: int;
    var left_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    var right_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) {
    var left_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    var mid_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    var right_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    var mid_left_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    var mid_right_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    var v: Vec ($1_optional_aggregator_OptionalAggregator);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), i: int, e: $1_optional_aggregator_OptionalAggregator) returns (m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) {
    var left_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    var right_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    var v: Vec ($1_optional_aggregator_OptionalAggregator);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator), i: int) returns (dst: $1_optional_aggregator_OptionalAggregator) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator), i: int): $1_optional_aggregator_OptionalAggregator {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), index: int)
returns (dst: $Mutation ($1_optional_aggregator_OptionalAggregator), m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)))
{
    var v: Vec ($1_optional_aggregator_OptionalAggregator);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator), i: int): $1_optional_aggregator_OptionalAggregator {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), i: int, j: int) returns (m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)))
{
    var v: Vec ($1_optional_aggregator_OptionalAggregator);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator), i: int, j: int): Vec ($1_optional_aggregator_OptionalAggregator) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), i: int) returns (e: $1_optional_aggregator_OptionalAggregator, m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)))
{
    var v: Vec ($1_optional_aggregator_OptionalAggregator);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), i: int) returns (e: $1_optional_aggregator_OptionalAggregator, m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)))
{
    var len: int;
    var v: Vec ($1_optional_aggregator_OptionalAggregator);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator), e: $1_optional_aggregator_OptionalAggregator) returns (res: bool)  {
    res := $ContainsVec'$1_optional_aggregator_OptionalAggregator'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator), e: $1_optional_aggregator_OptionalAggregator) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_optional_aggregator_OptionalAggregator'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_stake_IndividualValidatorPerformance`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_stake_IndividualValidatorPerformance''(v1: Vec ($1_stake_IndividualValidatorPerformance), v2: Vec ($1_stake_IndividualValidatorPerformance)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_stake_IndividualValidatorPerformance'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_stake_IndividualValidatorPerformance''(v: Vec ($1_stake_IndividualValidatorPerformance), prefix: Vec ($1_stake_IndividualValidatorPerformance)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_stake_IndividualValidatorPerformance'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_stake_IndividualValidatorPerformance''(v: Vec ($1_stake_IndividualValidatorPerformance), suffix: Vec ($1_stake_IndividualValidatorPerformance)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_stake_IndividualValidatorPerformance'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_stake_IndividualValidatorPerformance''(v: Vec ($1_stake_IndividualValidatorPerformance)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_stake_IndividualValidatorPerformance'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance), e: $1_stake_IndividualValidatorPerformance): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_stake_IndividualValidatorPerformance'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance), e: $1_stake_IndividualValidatorPerformance): int;
axiom (forall v: Vec ($1_stake_IndividualValidatorPerformance), e: $1_stake_IndividualValidatorPerformance:: {$IndexOfVec'$1_stake_IndividualValidatorPerformance'(v, e)}
    (var i := $IndexOfVec'$1_stake_IndividualValidatorPerformance'(v, e);
     if (!$ContainsVec'$1_stake_IndividualValidatorPerformance'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_stake_IndividualValidatorPerformance'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_stake_IndividualValidatorPerformance'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_stake_IndividualValidatorPerformance'(): Vec ($1_stake_IndividualValidatorPerformance) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_stake_IndividualValidatorPerformance'() returns (v: Vec ($1_stake_IndividualValidatorPerformance)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_stake_IndividualValidatorPerformance'(): Vec ($1_stake_IndividualValidatorPerformance) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), val: $1_stake_IndividualValidatorPerformance) returns (m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance), val: $1_stake_IndividualValidatorPerformance): Vec ($1_stake_IndividualValidatorPerformance) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) returns (e: $1_stake_IndividualValidatorPerformance, m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) {
    var v: Vec ($1_stake_IndividualValidatorPerformance);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), other: Vec ($1_stake_IndividualValidatorPerformance)) returns (m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) returns (m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), other: Vec ($1_stake_IndividualValidatorPerformance)) returns (m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), new_len: int) returns (v: (Vec ($1_stake_IndividualValidatorPerformance)), m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), new_len: int) returns (v: (Vec ($1_stake_IndividualValidatorPerformance)), m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), left: int, right: int) returns (m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) {
    var left_vec: Vec ($1_stake_IndividualValidatorPerformance);
    var mid_vec: Vec ($1_stake_IndividualValidatorPerformance);
    var right_vec: Vec ($1_stake_IndividualValidatorPerformance);
    var v: Vec ($1_stake_IndividualValidatorPerformance);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), rot: int) returns (n: int, m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) {
    var v: Vec ($1_stake_IndividualValidatorPerformance);
    var len: int;
    var left_vec: Vec ($1_stake_IndividualValidatorPerformance);
    var right_vec: Vec ($1_stake_IndividualValidatorPerformance);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) {
    var left_vec: Vec ($1_stake_IndividualValidatorPerformance);
    var mid_vec: Vec ($1_stake_IndividualValidatorPerformance);
    var right_vec: Vec ($1_stake_IndividualValidatorPerformance);
    var mid_left_vec: Vec ($1_stake_IndividualValidatorPerformance);
    var mid_right_vec: Vec ($1_stake_IndividualValidatorPerformance);
    var v: Vec ($1_stake_IndividualValidatorPerformance);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), i: int, e: $1_stake_IndividualValidatorPerformance) returns (m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance))) {
    var left_vec: Vec ($1_stake_IndividualValidatorPerformance);
    var right_vec: Vec ($1_stake_IndividualValidatorPerformance);
    var v: Vec ($1_stake_IndividualValidatorPerformance);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance), i: int) returns (dst: $1_stake_IndividualValidatorPerformance) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance), i: int): $1_stake_IndividualValidatorPerformance {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), index: int)
returns (dst: $Mutation ($1_stake_IndividualValidatorPerformance), m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance)))
{
    var v: Vec ($1_stake_IndividualValidatorPerformance);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance), i: int): $1_stake_IndividualValidatorPerformance {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), i: int, j: int) returns (m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance)))
{
    var v: Vec ($1_stake_IndividualValidatorPerformance);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance), i: int, j: int): Vec ($1_stake_IndividualValidatorPerformance) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), i: int) returns (e: $1_stake_IndividualValidatorPerformance, m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance)))
{
    var v: Vec ($1_stake_IndividualValidatorPerformance);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_stake_IndividualValidatorPerformance'(m: $Mutation (Vec ($1_stake_IndividualValidatorPerformance)), i: int) returns (e: $1_stake_IndividualValidatorPerformance, m': $Mutation (Vec ($1_stake_IndividualValidatorPerformance)))
{
    var len: int;
    var v: Vec ($1_stake_IndividualValidatorPerformance);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance), e: $1_stake_IndividualValidatorPerformance) returns (res: bool)  {
    res := $ContainsVec'$1_stake_IndividualValidatorPerformance'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_stake_IndividualValidatorPerformance'(v: Vec ($1_stake_IndividualValidatorPerformance), e: $1_stake_IndividualValidatorPerformance) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_stake_IndividualValidatorPerformance'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_stake_ValidatorInfo`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_stake_ValidatorInfo''(v1: Vec ($1_stake_ValidatorInfo), v2: Vec ($1_stake_ValidatorInfo)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_stake_ValidatorInfo'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_stake_ValidatorInfo''(v: Vec ($1_stake_ValidatorInfo), prefix: Vec ($1_stake_ValidatorInfo)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_stake_ValidatorInfo'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_stake_ValidatorInfo''(v: Vec ($1_stake_ValidatorInfo), suffix: Vec ($1_stake_ValidatorInfo)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_stake_ValidatorInfo'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_stake_ValidatorInfo''(v: Vec ($1_stake_ValidatorInfo)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_stake_ValidatorInfo'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo), e: $1_stake_ValidatorInfo): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_stake_ValidatorInfo'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo), e: $1_stake_ValidatorInfo): int;
axiom (forall v: Vec ($1_stake_ValidatorInfo), e: $1_stake_ValidatorInfo:: {$IndexOfVec'$1_stake_ValidatorInfo'(v, e)}
    (var i := $IndexOfVec'$1_stake_ValidatorInfo'(v, e);
     if (!$ContainsVec'$1_stake_ValidatorInfo'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_stake_ValidatorInfo'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_stake_ValidatorInfo'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_stake_ValidatorInfo'(): Vec ($1_stake_ValidatorInfo) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_stake_ValidatorInfo'() returns (v: Vec ($1_stake_ValidatorInfo)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_stake_ValidatorInfo'(): Vec ($1_stake_ValidatorInfo) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), val: $1_stake_ValidatorInfo) returns (m': $Mutation (Vec ($1_stake_ValidatorInfo))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo), val: $1_stake_ValidatorInfo): Vec ($1_stake_ValidatorInfo) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo))) returns (e: $1_stake_ValidatorInfo, m': $Mutation (Vec ($1_stake_ValidatorInfo))) {
    var v: Vec ($1_stake_ValidatorInfo);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), other: Vec ($1_stake_ValidatorInfo)) returns (m': $Mutation (Vec ($1_stake_ValidatorInfo))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo))) returns (m': $Mutation (Vec ($1_stake_ValidatorInfo))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), other: Vec ($1_stake_ValidatorInfo)) returns (m': $Mutation (Vec ($1_stake_ValidatorInfo))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), new_len: int) returns (v: (Vec ($1_stake_ValidatorInfo)), m': $Mutation (Vec ($1_stake_ValidatorInfo))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), new_len: int) returns (v: (Vec ($1_stake_ValidatorInfo)), m': $Mutation (Vec ($1_stake_ValidatorInfo))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), left: int, right: int) returns (m': $Mutation (Vec ($1_stake_ValidatorInfo))) {
    var left_vec: Vec ($1_stake_ValidatorInfo);
    var mid_vec: Vec ($1_stake_ValidatorInfo);
    var right_vec: Vec ($1_stake_ValidatorInfo);
    var v: Vec ($1_stake_ValidatorInfo);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), rot: int) returns (n: int, m': $Mutation (Vec ($1_stake_ValidatorInfo))) {
    var v: Vec ($1_stake_ValidatorInfo);
    var len: int;
    var left_vec: Vec ($1_stake_ValidatorInfo);
    var right_vec: Vec ($1_stake_ValidatorInfo);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_stake_ValidatorInfo))) {
    var left_vec: Vec ($1_stake_ValidatorInfo);
    var mid_vec: Vec ($1_stake_ValidatorInfo);
    var right_vec: Vec ($1_stake_ValidatorInfo);
    var mid_left_vec: Vec ($1_stake_ValidatorInfo);
    var mid_right_vec: Vec ($1_stake_ValidatorInfo);
    var v: Vec ($1_stake_ValidatorInfo);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), i: int, e: $1_stake_ValidatorInfo) returns (m': $Mutation (Vec ($1_stake_ValidatorInfo))) {
    var left_vec: Vec ($1_stake_ValidatorInfo);
    var right_vec: Vec ($1_stake_ValidatorInfo);
    var v: Vec ($1_stake_ValidatorInfo);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo), i: int) returns (dst: $1_stake_ValidatorInfo) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo), i: int): $1_stake_ValidatorInfo {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), index: int)
returns (dst: $Mutation ($1_stake_ValidatorInfo), m': $Mutation (Vec ($1_stake_ValidatorInfo)))
{
    var v: Vec ($1_stake_ValidatorInfo);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo), i: int): $1_stake_ValidatorInfo {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), i: int, j: int) returns (m': $Mutation (Vec ($1_stake_ValidatorInfo)))
{
    var v: Vec ($1_stake_ValidatorInfo);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo), i: int, j: int): Vec ($1_stake_ValidatorInfo) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), i: int) returns (e: $1_stake_ValidatorInfo, m': $Mutation (Vec ($1_stake_ValidatorInfo)))
{
    var v: Vec ($1_stake_ValidatorInfo);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_stake_ValidatorInfo'(m: $Mutation (Vec ($1_stake_ValidatorInfo)), i: int) returns (e: $1_stake_ValidatorInfo, m': $Mutation (Vec ($1_stake_ValidatorInfo)))
{
    var len: int;
    var v: Vec ($1_stake_ValidatorInfo);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo), e: $1_stake_ValidatorInfo) returns (res: bool)  {
    res := $ContainsVec'$1_stake_ValidatorInfo'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_stake_ValidatorInfo'(v: Vec ($1_stake_ValidatorInfo), e: $1_stake_ValidatorInfo) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_stake_ValidatorInfo'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `address`

// Not inlined. It appears faster this way.
function $IsEqual'vec'address''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'address'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'address''(v: Vec (int), prefix: Vec (int)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'address'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'address''(v: Vec (int), suffix: Vec (int)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'address'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'address''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'address'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'address'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'address'(ReadVec(v, i), e))
}

function $IndexOfVec'address'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'address'(v, e)}
    (var i := $IndexOfVec'address'(v, e);
     if (!$ContainsVec'address'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'address'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'address'(ReadVec(v, j), e))));


function {:inline} $RangeVec'address'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'address'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'address'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'address'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'address'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'address'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'address'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'address'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'address'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'address'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'address'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'address'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'address'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'address'(m: $Mutation (Vec (int)), left: int, right: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'address'(m: $Mutation (Vec (int)), rot: int) returns (n: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'address'(m: $Mutation (Vec (int)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var mid_left_vec: Vec (int);
    var mid_right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'address'(m: $Mutation (Vec (int)), i: int, e: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'address'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'address'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'address'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'address'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'address'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'address'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'address'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'address'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'address'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'address'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'address'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'address'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'address'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'address'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'address'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `u64`

// Not inlined. It appears faster this way.
function $IsEqual'vec'u64''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'u64'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'u64''(v: Vec (int), prefix: Vec (int)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'u64'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'u64''(v: Vec (int), suffix: Vec (int)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'u64'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'u64''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'u64'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'u64'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u64'(ReadVec(v, i), e))
}

function $IndexOfVec'u64'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'u64'(v, e)}
    (var i := $IndexOfVec'u64'(v, e);
     if (!$ContainsVec'u64'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u64'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'u64'(ReadVec(v, j), e))));


function {:inline} $RangeVec'u64'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'u64'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'u64'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'u64'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'u64'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'u64'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'u64'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'u64'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'u64'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'u64'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'u64'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'u64'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'u64'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'u64'(m: $Mutation (Vec (int)), left: int, right: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'u64'(m: $Mutation (Vec (int)), rot: int) returns (n: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'u64'(m: $Mutation (Vec (int)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var mid_left_vec: Vec (int);
    var mid_right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'u64'(m: $Mutation (Vec (int)), i: int, e: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'u64'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'u64'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'u64'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'u64'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'u64'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'u64'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'u64'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'u64'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'u64'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'u64'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'u64'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'u64'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'u64'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'u64'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'u64'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `u8`

// Not inlined. It appears faster this way.
function $IsEqual'vec'u8''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'u8'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'u8''(v: Vec (int), prefix: Vec (int)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'u8'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'u8''(v: Vec (int), suffix: Vec (int)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'u8'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'u8''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'u8'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'u8'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e))
}

function $IndexOfVec'u8'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'u8'(v, e)}
    (var i := $IndexOfVec'u8'(v, e);
     if (!$ContainsVec'u8'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'u8'(ReadVec(v, j), e))));


function {:inline} $RangeVec'u8'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'u8'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'u8'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'u8'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'u8'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'u8'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'u8'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'u8'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'u8'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'u8'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'u8'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'u8'(m: $Mutation (Vec (int)), left: int, right: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'u8'(m: $Mutation (Vec (int)), rot: int) returns (n: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'u8'(m: $Mutation (Vec (int)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var mid_left_vec: Vec (int);
    var mid_right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'u8'(m: $Mutation (Vec (int)), i: int, e: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'u8'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'u8'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'u8'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'u8'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'u8'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'u8'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'u8'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'u8'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'u8'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'u8'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'u8'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `bv64`

// Not inlined. It appears faster this way.
function $IsEqual'vec'bv64''(v1: Vec (bv64), v2: Vec (bv64)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'bv64'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'bv64''(v: Vec (bv64), prefix: Vec (bv64)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'bv64'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'bv64''(v: Vec (bv64), suffix: Vec (bv64)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'bv64'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'bv64''(v: Vec (bv64)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'bv64'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'bv64'(v: Vec (bv64), e: bv64): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv64'(ReadVec(v, i), e))
}

function $IndexOfVec'bv64'(v: Vec (bv64), e: bv64): int;
axiom (forall v: Vec (bv64), e: bv64:: {$IndexOfVec'bv64'(v, e)}
    (var i := $IndexOfVec'bv64'(v, e);
     if (!$ContainsVec'bv64'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv64'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'bv64'(ReadVec(v, j), e))));


function {:inline} $RangeVec'bv64'(v: Vec (bv64)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'bv64'(): Vec (bv64) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'bv64'() returns (v: Vec (bv64)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'bv64'(): Vec (bv64) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'bv64'(v: Vec (bv64)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'bv64'(m: $Mutation (Vec (bv64)), val: bv64) returns (m': $Mutation (Vec (bv64))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'bv64'(v: Vec (bv64), val: bv64): Vec (bv64) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'bv64'(m: $Mutation (Vec (bv64))) returns (e: bv64, m': $Mutation (Vec (bv64))) {
    var v: Vec (bv64);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'bv64'(m: $Mutation (Vec (bv64)), other: Vec (bv64)) returns (m': $Mutation (Vec (bv64))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'bv64'(m: $Mutation (Vec (bv64))) returns (m': $Mutation (Vec (bv64))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'bv64'(m: $Mutation (Vec (bv64)), other: Vec (bv64)) returns (m': $Mutation (Vec (bv64))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'bv64'(m: $Mutation (Vec (bv64)), new_len: int) returns (v: (Vec (bv64)), m': $Mutation (Vec (bv64))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'bv64'(m: $Mutation (Vec (bv64)), new_len: int) returns (v: (Vec (bv64)), m': $Mutation (Vec (bv64))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'bv64'(m: $Mutation (Vec (bv64)), left: int, right: int) returns (m': $Mutation (Vec (bv64))) {
    var left_vec: Vec (bv64);
    var mid_vec: Vec (bv64);
    var right_vec: Vec (bv64);
    var v: Vec (bv64);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'bv64'(m: $Mutation (Vec (bv64)), rot: int) returns (n: int, m': $Mutation (Vec (bv64))) {
    var v: Vec (bv64);
    var len: int;
    var left_vec: Vec (bv64);
    var right_vec: Vec (bv64);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'bv64'(m: $Mutation (Vec (bv64)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (bv64))) {
    var left_vec: Vec (bv64);
    var mid_vec: Vec (bv64);
    var right_vec: Vec (bv64);
    var mid_left_vec: Vec (bv64);
    var mid_right_vec: Vec (bv64);
    var v: Vec (bv64);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'bv64'(m: $Mutation (Vec (bv64)), i: int, e: bv64) returns (m': $Mutation (Vec (bv64))) {
    var left_vec: Vec (bv64);
    var right_vec: Vec (bv64);
    var v: Vec (bv64);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'bv64'(v: Vec (bv64)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'bv64'(v: Vec (bv64)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'bv64'(v: Vec (bv64), i: int) returns (dst: bv64) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'bv64'(v: Vec (bv64), i: int): bv64 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'bv64'(m: $Mutation (Vec (bv64)), index: int)
returns (dst: $Mutation (bv64), m': $Mutation (Vec (bv64)))
{
    var v: Vec (bv64);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'bv64'(v: Vec (bv64), i: int): bv64 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'bv64'(v: Vec (bv64)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'bv64'(m: $Mutation (Vec (bv64)), i: int, j: int) returns (m': $Mutation (Vec (bv64)))
{
    var v: Vec (bv64);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'bv64'(v: Vec (bv64), i: int, j: int): Vec (bv64) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'bv64'(m: $Mutation (Vec (bv64)), i: int) returns (e: bv64, m': $Mutation (Vec (bv64)))
{
    var v: Vec (bv64);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'bv64'(m: $Mutation (Vec (bv64)), i: int) returns (e: bv64, m': $Mutation (Vec (bv64)))
{
    var len: int;
    var v: Vec (bv64);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'bv64'(v: Vec (bv64), e: bv64) returns (res: bool)  {
    res := $ContainsVec'bv64'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'bv64'(v: Vec (bv64), e: bv64) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'bv64'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `bv8`

// Not inlined. It appears faster this way.
function $IsEqual'vec'bv8''(v1: Vec (bv8), v2: Vec (bv8)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'bv8'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'bv8''(v: Vec (bv8), prefix: Vec (bv8)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'bv8'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'bv8''(v: Vec (bv8), suffix: Vec (bv8)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'bv8'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'bv8''(v: Vec (bv8)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'bv8'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'bv8'(v: Vec (bv8), e: bv8): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv8'(ReadVec(v, i), e))
}

function $IndexOfVec'bv8'(v: Vec (bv8), e: bv8): int;
axiom (forall v: Vec (bv8), e: bv8:: {$IndexOfVec'bv8'(v, e)}
    (var i := $IndexOfVec'bv8'(v, e);
     if (!$ContainsVec'bv8'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv8'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'bv8'(ReadVec(v, j), e))));


function {:inline} $RangeVec'bv8'(v: Vec (bv8)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'bv8'(): Vec (bv8) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'bv8'() returns (v: Vec (bv8)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'bv8'(): Vec (bv8) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'bv8'(v: Vec (bv8)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'bv8'(m: $Mutation (Vec (bv8)), val: bv8) returns (m': $Mutation (Vec (bv8))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'bv8'(v: Vec (bv8), val: bv8): Vec (bv8) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'bv8'(m: $Mutation (Vec (bv8))) returns (e: bv8, m': $Mutation (Vec (bv8))) {
    var v: Vec (bv8);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'bv8'(m: $Mutation (Vec (bv8)), other: Vec (bv8)) returns (m': $Mutation (Vec (bv8))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'bv8'(m: $Mutation (Vec (bv8))) returns (m': $Mutation (Vec (bv8))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'bv8'(m: $Mutation (Vec (bv8)), other: Vec (bv8)) returns (m': $Mutation (Vec (bv8))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'bv8'(m: $Mutation (Vec (bv8)), new_len: int) returns (v: (Vec (bv8)), m': $Mutation (Vec (bv8))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'bv8'(m: $Mutation (Vec (bv8)), new_len: int) returns (v: (Vec (bv8)), m': $Mutation (Vec (bv8))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'bv8'(m: $Mutation (Vec (bv8)), left: int, right: int) returns (m': $Mutation (Vec (bv8))) {
    var left_vec: Vec (bv8);
    var mid_vec: Vec (bv8);
    var right_vec: Vec (bv8);
    var v: Vec (bv8);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'bv8'(m: $Mutation (Vec (bv8)), rot: int) returns (n: int, m': $Mutation (Vec (bv8))) {
    var v: Vec (bv8);
    var len: int;
    var left_vec: Vec (bv8);
    var right_vec: Vec (bv8);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'bv8'(m: $Mutation (Vec (bv8)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (bv8))) {
    var left_vec: Vec (bv8);
    var mid_vec: Vec (bv8);
    var right_vec: Vec (bv8);
    var mid_left_vec: Vec (bv8);
    var mid_right_vec: Vec (bv8);
    var v: Vec (bv8);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'bv8'(m: $Mutation (Vec (bv8)), i: int, e: bv8) returns (m': $Mutation (Vec (bv8))) {
    var left_vec: Vec (bv8);
    var right_vec: Vec (bv8);
    var v: Vec (bv8);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'bv8'(v: Vec (bv8)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'bv8'(v: Vec (bv8)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'bv8'(v: Vec (bv8), i: int) returns (dst: bv8) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'bv8'(v: Vec (bv8), i: int): bv8 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'bv8'(m: $Mutation (Vec (bv8)), index: int)
returns (dst: $Mutation (bv8), m': $Mutation (Vec (bv8)))
{
    var v: Vec (bv8);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'bv8'(v: Vec (bv8), i: int): bv8 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'bv8'(v: Vec (bv8)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'bv8'(m: $Mutation (Vec (bv8)), i: int, j: int) returns (m': $Mutation (Vec (bv8)))
{
    var v: Vec (bv8);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'bv8'(v: Vec (bv8), i: int, j: int): Vec (bv8) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'bv8'(m: $Mutation (Vec (bv8)), i: int) returns (e: bv8, m': $Mutation (Vec (bv8)))
{
    var v: Vec (bv8);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'bv8'(m: $Mutation (Vec (bv8)), i: int) returns (e: bv8, m': $Mutation (Vec (bv8)))
{
    var len: int;
    var v: Vec (bv8);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'bv8'(v: Vec (bv8), e: bv8) returns (res: bool)  {
    res := $ContainsVec'bv8'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'bv8'(v: Vec (bv8), e: bv8) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'bv8'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ==================================================================================
// Native Table

// ----------------------------------------------------------------------------------
// Native Table key encoding for type `address`

function $EncodeKey'address'(k: int): int;
axiom (
  forall k1, k2: int :: {$EncodeKey'address'(k1), $EncodeKey'address'(k2)}
    $IsEqual'address'(k1, k2) <==> $EncodeKey'address'(k1) == $EncodeKey'address'(k2)
);


// ----------------------------------------------------------------------------------
// Native Table implementation for type `(address,u64)`

function $IsEqual'$1_simple_map_SimpleMap'address_u64''(t1: Table int (int), t2: Table int (int)): bool {
    LenTable(t1) == LenTable(t2) &&
    (forall k: int :: ContainsTable(t1, k) <==> ContainsTable(t2, k)) &&
    (forall k: int :: ContainsTable(t1, k) ==> GetTable(t1, k) == GetTable(t2, k)) &&
    (forall k: int :: ContainsTable(t2, k) ==> GetTable(t1, k) == GetTable(t2, k))
}

// Not inlined.
function $IsValid'$1_simple_map_SimpleMap'address_u64''(t: Table int (int)): bool {
    $IsValid'u64'(LenTable(t)) &&
    (forall i: int:: ContainsTable(t, i) ==> $IsValid'u64'(GetTable(t, i)))
}
procedure {:inline 2} $1_simple_map_create'address_u64'() returns (v: Table int (int)) {
    v := EmptyTable();
}
procedure {:inline 2} $1_simple_map_destroy_empty'address_u64'(t: Table int (int)) {
    if (LenTable(t) != 0) {
        call $Abort($StdError(1/*INVALID_STATE*/, 102/*ENOT_EMPTY*/));
    }
}
procedure {:inline 2} $1_simple_map_length'address_u64'(t: (Table int (int))) returns (l: int) {
    l := LenTable(t);
}
procedure {:inline 2} $1_simple_map_contains_key'address_u64'(t: (Table int (int)), k: int) returns (r: bool) {
    r := ContainsTable(t, $EncodeKey'address'(k));
}
procedure {:inline 2} $1_simple_map_add'address_u64'(m: $Mutation (Table int (int)), k: int, v: int) returns (m': $Mutation(Table int (int))) {
    var enc_k: int;
    var t: Table int (int);
    enc_k := $EncodeKey'address'(k);
    t := $Dereference(m);
    if (ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 100/*EALREADY_EXISTS*/));
    } else {
        m' := $UpdateMutation(m, AddTable(t, enc_k, v));
    }
}
procedure {:inline 2} $1_simple_map_remove'address_u64'(m: $Mutation (Table int (int)), k: int)
returns (k': int, v: int, m': $Mutation(Table int (int))) {
    var enc_k: int;
    var t: Table int (int);
    enc_k := $EncodeKey'address'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        k' := k;
        v := GetTable(t, enc_k);
        m' := $UpdateMutation(m, RemoveTable(t, enc_k));
    }
}
procedure {:inline 2} $1_simple_map_borrow'address_u64'(t: Table int (int), k: int) returns (v: int) {
    var enc_k: int;
    enc_k := $EncodeKey'address'(k);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        v := GetTable(t, $EncodeKey'address'(k));
    }
}
procedure {:inline 2} $1_simple_map_borrow_mut'address_u64'(m: $Mutation (Table int (int)), k: int)
returns (dst: $Mutation (int), m': $Mutation (Table int (int))) {
    var enc_k: int;
    var t: Table int (int);
    enc_k := $EncodeKey'address'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        dst := $Mutation(m->l, ExtendVec(m->p, enc_k), GetTable(t, enc_k));
        m' := m;
    }
}
function {:inline} $1_simple_map_spec_len'address_u64'(t: (Table int (int))): int {
    LenTable(t)
}
function {:inline} $1_simple_map_spec_contains_key'address_u64'(t: (Table int (int)), k: int): bool {
    ContainsTable(t, $EncodeKey'address'(k))
}
function {:inline} $1_simple_map_spec_set'address_u64'(t: Table int (int), k: int, v: int): Table int (int) {
    (var enc_k := $EncodeKey'address'(k);
    if (ContainsTable(t, enc_k)) then
        UpdateTable(t, enc_k, v)
    else
        AddTable(t, enc_k, v))
}
function {:inline} $1_simple_map_spec_remove'address_u64'(t: Table int (int), k: int): Table int (int) {
    RemoveTable(t, $EncodeKey'address'(k))
}
function {:inline} $1_simple_map_spec_get'address_u64'(t: Table int (int), k: int): int {
    GetTable(t, $EncodeKey'address'(k))
}



// ----------------------------------------------------------------------------------
// Native Table implementation for type `(address,address)`

function $IsEqual'$1_simple_map_SimpleMap'address_address''(t1: Table int (int), t2: Table int (int)): bool {
    LenTable(t1) == LenTable(t2) &&
    (forall k: int :: ContainsTable(t1, k) <==> ContainsTable(t2, k)) &&
    (forall k: int :: ContainsTable(t1, k) ==> GetTable(t1, k) == GetTable(t2, k)) &&
    (forall k: int :: ContainsTable(t2, k) ==> GetTable(t1, k) == GetTable(t2, k))
}

// Not inlined.
function $IsValid'$1_simple_map_SimpleMap'address_address''(t: Table int (int)): bool {
    $IsValid'u64'(LenTable(t)) &&
    (forall i: int:: ContainsTable(t, i) ==> $IsValid'address'(GetTable(t, i)))
}
procedure {:inline 2} $1_simple_map_create'address_address'() returns (v: Table int (int)) {
    v := EmptyTable();
}
procedure {:inline 2} $1_simple_map_destroy_empty'address_address'(t: Table int (int)) {
    if (LenTable(t) != 0) {
        call $Abort($StdError(1/*INVALID_STATE*/, 102/*ENOT_EMPTY*/));
    }
}
procedure {:inline 2} $1_simple_map_length'address_address'(t: (Table int (int))) returns (l: int) {
    l := LenTable(t);
}
procedure {:inline 2} $1_simple_map_contains_key'address_address'(t: (Table int (int)), k: int) returns (r: bool) {
    r := ContainsTable(t, $EncodeKey'address'(k));
}
procedure {:inline 2} $1_simple_map_add'address_address'(m: $Mutation (Table int (int)), k: int, v: int) returns (m': $Mutation(Table int (int))) {
    var enc_k: int;
    var t: Table int (int);
    enc_k := $EncodeKey'address'(k);
    t := $Dereference(m);
    if (ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 100/*EALREADY_EXISTS*/));
    } else {
        m' := $UpdateMutation(m, AddTable(t, enc_k, v));
    }
}
procedure {:inline 2} $1_simple_map_remove'address_address'(m: $Mutation (Table int (int)), k: int)
returns (k': int, v: int, m': $Mutation(Table int (int))) {
    var enc_k: int;
    var t: Table int (int);
    enc_k := $EncodeKey'address'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        k' := k;
        v := GetTable(t, enc_k);
        m' := $UpdateMutation(m, RemoveTable(t, enc_k));
    }
}
procedure {:inline 2} $1_simple_map_borrow'address_address'(t: Table int (int), k: int) returns (v: int) {
    var enc_k: int;
    enc_k := $EncodeKey'address'(k);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        v := GetTable(t, $EncodeKey'address'(k));
    }
}
procedure {:inline 2} $1_simple_map_borrow_mut'address_address'(m: $Mutation (Table int (int)), k: int)
returns (dst: $Mutation (int), m': $Mutation (Table int (int))) {
    var enc_k: int;
    var t: Table int (int);
    enc_k := $EncodeKey'address'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        dst := $Mutation(m->l, ExtendVec(m->p, enc_k), GetTable(t, enc_k));
        m' := m;
    }
}
function {:inline} $1_simple_map_spec_len'address_address'(t: (Table int (int))): int {
    LenTable(t)
}
function {:inline} $1_simple_map_spec_contains_key'address_address'(t: (Table int (int)), k: int): bool {
    ContainsTable(t, $EncodeKey'address'(k))
}
function {:inline} $1_simple_map_spec_set'address_address'(t: Table int (int), k: int, v: int): Table int (int) {
    (var enc_k := $EncodeKey'address'(k);
    if (ContainsTable(t, enc_k)) then
        UpdateTable(t, enc_k, v)
    else
        AddTable(t, enc_k, v))
}
function {:inline} $1_simple_map_spec_remove'address_address'(t: Table int (int), k: int): Table int (int) {
    RemoveTable(t, $EncodeKey'address'(k))
}
function {:inline} $1_simple_map_spec_get'address_address'(t: Table int (int), k: int): int {
    GetTable(t, $EncodeKey'address'(k))
}



// ----------------------------------------------------------------------------------
// Native Table implementation for type `(address,$1_staking_contract_StakingContract)`

function $IsEqual'$1_simple_map_SimpleMap'address_$1_staking_contract_StakingContract''(t1: Table int ($1_staking_contract_StakingContract), t2: Table int ($1_staking_contract_StakingContract)): bool {
    LenTable(t1) == LenTable(t2) &&
    (forall k: int :: ContainsTable(t1, k) <==> ContainsTable(t2, k)) &&
    (forall k: int :: ContainsTable(t1, k) ==> GetTable(t1, k) == GetTable(t2, k)) &&
    (forall k: int :: ContainsTable(t2, k) ==> GetTable(t1, k) == GetTable(t2, k))
}

// Not inlined.
function $IsValid'$1_simple_map_SimpleMap'address_$1_staking_contract_StakingContract''(t: Table int ($1_staking_contract_StakingContract)): bool {
    $IsValid'u64'(LenTable(t)) &&
    (forall i: int:: ContainsTable(t, i) ==> $IsValid'$1_staking_contract_StakingContract'(GetTable(t, i)))
}
procedure {:inline 2} $1_simple_map_create'address_$1_staking_contract_StakingContract'() returns (v: Table int ($1_staking_contract_StakingContract)) {
    v := EmptyTable();
}
procedure {:inline 2} $1_simple_map_destroy_empty'address_$1_staking_contract_StakingContract'(t: Table int ($1_staking_contract_StakingContract)) {
    if (LenTable(t) != 0) {
        call $Abort($StdError(1/*INVALID_STATE*/, 102/*ENOT_EMPTY*/));
    }
}
procedure {:inline 2} $1_simple_map_length'address_$1_staking_contract_StakingContract'(t: (Table int ($1_staking_contract_StakingContract))) returns (l: int) {
    l := LenTable(t);
}
procedure {:inline 2} $1_simple_map_contains_key'address_$1_staking_contract_StakingContract'(t: (Table int ($1_staking_contract_StakingContract)), k: int) returns (r: bool) {
    r := ContainsTable(t, $EncodeKey'address'(k));
}
procedure {:inline 2} $1_simple_map_add'address_$1_staking_contract_StakingContract'(m: $Mutation (Table int ($1_staking_contract_StakingContract)), k: int, v: $1_staking_contract_StakingContract) returns (m': $Mutation(Table int ($1_staking_contract_StakingContract))) {
    var enc_k: int;
    var t: Table int ($1_staking_contract_StakingContract);
    enc_k := $EncodeKey'address'(k);
    t := $Dereference(m);
    if (ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 100/*EALREADY_EXISTS*/));
    } else {
        m' := $UpdateMutation(m, AddTable(t, enc_k, v));
    }
}
procedure {:inline 2} $1_simple_map_remove'address_$1_staking_contract_StakingContract'(m: $Mutation (Table int ($1_staking_contract_StakingContract)), k: int)
returns (k': int, v: $1_staking_contract_StakingContract, m': $Mutation(Table int ($1_staking_contract_StakingContract))) {
    var enc_k: int;
    var t: Table int ($1_staking_contract_StakingContract);
    enc_k := $EncodeKey'address'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        k' := k;
        v := GetTable(t, enc_k);
        m' := $UpdateMutation(m, RemoveTable(t, enc_k));
    }
}
procedure {:inline 2} $1_simple_map_borrow'address_$1_staking_contract_StakingContract'(t: Table int ($1_staking_contract_StakingContract), k: int) returns (v: $1_staking_contract_StakingContract) {
    var enc_k: int;
    enc_k := $EncodeKey'address'(k);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        v := GetTable(t, $EncodeKey'address'(k));
    }
}
procedure {:inline 2} $1_simple_map_borrow_mut'address_$1_staking_contract_StakingContract'(m: $Mutation (Table int ($1_staking_contract_StakingContract)), k: int)
returns (dst: $Mutation ($1_staking_contract_StakingContract), m': $Mutation (Table int ($1_staking_contract_StakingContract))) {
    var enc_k: int;
    var t: Table int ($1_staking_contract_StakingContract);
    enc_k := $EncodeKey'address'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        dst := $Mutation(m->l, ExtendVec(m->p, enc_k), GetTable(t, enc_k));
        m' := m;
    }
}
function {:inline} $1_simple_map_spec_len'address_$1_staking_contract_StakingContract'(t: (Table int ($1_staking_contract_StakingContract))): int {
    LenTable(t)
}
function {:inline} $1_simple_map_spec_contains_key'address_$1_staking_contract_StakingContract'(t: (Table int ($1_staking_contract_StakingContract)), k: int): bool {
    ContainsTable(t, $EncodeKey'address'(k))
}
function {:inline} $1_simple_map_spec_set'address_$1_staking_contract_StakingContract'(t: Table int ($1_staking_contract_StakingContract), k: int, v: $1_staking_contract_StakingContract): Table int ($1_staking_contract_StakingContract) {
    (var enc_k := $EncodeKey'address'(k);
    if (ContainsTable(t, enc_k)) then
        UpdateTable(t, enc_k, v)
    else
        AddTable(t, enc_k, v))
}
function {:inline} $1_simple_map_spec_remove'address_$1_staking_contract_StakingContract'(t: Table int ($1_staking_contract_StakingContract), k: int): Table int ($1_staking_contract_StakingContract) {
    RemoveTable(t, $EncodeKey'address'(k))
}
function {:inline} $1_simple_map_spec_get'address_$1_staking_contract_StakingContract'(t: Table int ($1_staking_contract_StakingContract), k: int): $1_staking_contract_StakingContract {
    GetTable(t, $EncodeKey'address'(k))
}



// ==================================================================================
// Native Hash

// Hash is modeled as an otherwise uninterpreted injection.
// In truth, it is not an injection since the domain has greater cardinality
// (arbitrary length vectors) than the co-domain (vectors of length 32).  But it is
// common to assume in code there are no hash collisions in practice.  Fortunately,
// Boogie is not smart enough to recognized that there is an inconsistency.
// FIXME: If we were using a reliable extensional theory of arrays, and if we could use ==
// instead of $IsEqual, we might be able to avoid so many quantified formulas by
// using a sha2_inverse function in the ensures conditions of Hash_sha2_256 to
// assert that sha2/3 are injections without using global quantified axioms.


function $1_hash_sha2(val: Vec int): Vec int;

// This says that Hash_sha2 is bijective.
axiom (forall v1,v2: Vec int :: {$1_hash_sha2(v1), $1_hash_sha2(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_hash_sha2(v1), $1_hash_sha2(v2)));

procedure $1_hash_sha2_256(val: Vec int) returns (res: Vec int);
ensures res == $1_hash_sha2(val);     // returns Hash_sha2 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_hash_$sha2_256(val: Vec int): Vec int {
    $1_hash_sha2(val)
}

// similarly for Hash_sha3
function $1_hash_sha3(val: Vec int): Vec int;

axiom (forall v1,v2: Vec int :: {$1_hash_sha3(v1), $1_hash_sha3(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_hash_sha3(v1), $1_hash_sha3(v2)));

procedure $1_hash_sha3_256(val: Vec int) returns (res: Vec int);
ensures res == $1_hash_sha3(val);     // returns Hash_sha3 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_hash_$sha3_256(val: Vec int): Vec int {
    $1_hash_sha3(val)
}

// ==================================================================================
// Native string

// TODO: correct implementation of strings

procedure {:inline 1} $1_string_internal_check_utf8(x: Vec int) returns (r: bool) {
}

procedure {:inline 1} $1_string_internal_sub_string(x: Vec int, i: int, j: int) returns (r: Vec int) {
}

procedure {:inline 1} $1_string_internal_index_of(x: Vec int, y: Vec int) returns (r: int) {
}

procedure {:inline 1} $1_string_internal_is_char_boundary(x: Vec int, i: int) returns (r: bool) {
}




// ==================================================================================
// Native diem_account

procedure {:inline 1} $1_DiemAccount_create_signer(
  addr: int
) returns (signer: $signer) {
    // A signer is currently identical to an address.
    signer := $signer(addr);
}

procedure {:inline 1} $1_DiemAccount_destroy_signer(
  signer: $signer
) {
  return;
}

// ==================================================================================
// Native account

procedure {:inline 1} $1_Account_create_signer(
  addr: int
) returns (signer: $signer) {
    // A signer is currently identical to an address.
    signer := $signer(addr);
}

// ==================================================================================
// Native Signer

datatype $signer {
    $signer($addr: int)
}
function {:inline} $IsValid'signer'(s: $signer): bool {
    $IsValid'address'(s->$addr)
}
function {:inline} $IsEqual'signer'(s1: $signer, s2: $signer): bool {
    s1 == s2
}

procedure {:inline 1} $1_signer_borrow_address(signer: $signer) returns (res: int) {
    res := signer->$addr;
}

function {:inline} $1_signer_$borrow_address(signer: $signer): int
{
    signer->$addr
}

function $1_signer_is_txn_signer(s: $signer): bool;

function $1_signer_is_txn_signer_addr(a: int): bool;


// ==================================================================================
// Native signature

// Signature related functionality is handled via uninterpreted functions. This is sound
// currently because we verify every code path based on signature verification with
// an arbitrary interpretation.

function $1_Signature_$ed25519_validate_pubkey(public_key: Vec int): bool;
function $1_Signature_$ed25519_verify(signature: Vec int, public_key: Vec int, message: Vec int): bool;

// Needed because we do not have extensional equality:
axiom (forall k1, k2: Vec int ::
    {$1_Signature_$ed25519_validate_pubkey(k1), $1_Signature_$ed25519_validate_pubkey(k2)}
    $IsEqual'vec'u8''(k1, k2) ==> $1_Signature_$ed25519_validate_pubkey(k1) == $1_Signature_$ed25519_validate_pubkey(k2));
axiom (forall s1, s2, k1, k2, m1, m2: Vec int ::
    {$1_Signature_$ed25519_verify(s1, k1, m1), $1_Signature_$ed25519_verify(s2, k2, m2)}
    $IsEqual'vec'u8''(s1, s2) && $IsEqual'vec'u8''(k1, k2) && $IsEqual'vec'u8''(m1, m2)
    ==> $1_Signature_$ed25519_verify(s1, k1, m1) == $1_Signature_$ed25519_verify(s2, k2, m2));


procedure {:inline 1} $1_Signature_ed25519_validate_pubkey(public_key: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_validate_pubkey(public_key);
}

procedure {:inline 1} $1_Signature_ed25519_verify(
        signature: Vec int, public_key: Vec int, message: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_verify(signature, public_key, message);
}


// ==================================================================================
// Native bcs::serialize


// ==================================================================================
// Native Event module



procedure {:inline 1} $InitEventStore() {
}

// ============================================================================================
// Type Reflection on Type Parameters

datatype $TypeParamInfo {
    $TypeParamBool(),
    $TypeParamU8(),
    $TypeParamU16(),
    $TypeParamU32(),
    $TypeParamU64(),
    $TypeParamU128(),
    $TypeParamU256(),
    $TypeParamAddress(),
    $TypeParamSigner(),
    $TypeParamVector(e: $TypeParamInfo),
    $TypeParamStruct(a: int, m: Vec int, s: Vec int)
}



//==================================
// Begin Translation

function $TypeName(t: $TypeParamInfo): Vec int;
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamBool ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 98][1 := 111][2 := 111][3 := 108], 4)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 98][1 := 111][2 := 111][3 := 108], 4)) ==> t is $TypeParamBool);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU8 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 56], 2)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 56], 2)) ==> t is $TypeParamU8);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU16 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 49][2 := 54], 3)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 49][2 := 54], 3)) ==> t is $TypeParamU16);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU32 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 51][2 := 50], 3)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 51][2 := 50], 3)) ==> t is $TypeParamU32);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU64 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 54][2 := 52], 3)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 54][2 := 52], 3)) ==> t is $TypeParamU64);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU128 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 49][2 := 50][3 := 56], 4)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 49][2 := 50][3 := 56], 4)) ==> t is $TypeParamU128);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU256 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 50][2 := 53][3 := 54], 4)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 50][2 := 53][3 := 54], 4)) ==> t is $TypeParamU256);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamAddress ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 97][1 := 100][2 := 100][3 := 114][4 := 101][5 := 115][6 := 115], 7)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 97][1 := 100][2 := 100][3 := 114][4 := 101][5 := 115][6 := 115], 7)) ==> t is $TypeParamAddress);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamSigner ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 115][1 := 105][2 := 103][3 := 110][4 := 101][5 := 114], 6)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 115][1 := 105][2 := 103][3 := 110][4 := 101][5 := 114], 6)) ==> t is $TypeParamSigner);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamVector ==> $IsEqual'vec'u8''($TypeName(t), ConcatVec(ConcatVec(Vec(DefaultVecMap()[0 := 118][1 := 101][2 := 99][3 := 116][4 := 111][5 := 114][6 := 60], 7), $TypeName(t->e)), Vec(DefaultVecMap()[0 := 62], 1))));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} ($IsPrefix'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 118][1 := 101][2 := 99][3 := 116][4 := 111][5 := 114][6 := 60], 7)) && $IsSuffix'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 62], 1))) ==> t is $TypeParamVector);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamStruct ==> $IsEqual'vec'u8''($TypeName(t), ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(Vec(DefaultVecMap()[0 := 48][1 := 120], 2), MakeVec1(t->a)), Vec(DefaultVecMap()[0 := 58][1 := 58], 2)), t->m), Vec(DefaultVecMap()[0 := 58][1 := 58], 2)), t->s)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsPrefix'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 48][1 := 120], 2)) ==> t is $TypeParamVector);


// Given Types for Type Parameters

type #0;
function {:inline} $IsEqual'#0'(x1: #0, x2: #0): bool { x1 == x2 }
function {:inline} $IsValid'#0'(x: #0): bool { true }
var #0_info: $TypeParamInfo;
var #0_$memory: $Memory #0;

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <bool>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'bool'(b1), $1_from_bcs_deserializable'bool'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <u8>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'u8'(b1), $1_from_bcs_deserializable'u8'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <u64>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'u64'(b1), $1_from_bcs_deserializable'u64'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <u128>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'u128'(b1), $1_from_bcs_deserializable'u128'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <u256>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'u256'(b1), $1_from_bcs_deserializable'u256'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <address>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'address'(b1), $1_from_bcs_deserializable'address'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <signer>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'signer'(b1), $1_from_bcs_deserializable'signer'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<u8>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'u8''(b1), $1_from_bcs_deserializable'vec'u8''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<u64>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'u64''(b1), $1_from_bcs_deserializable'vec'u64''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<address>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'address''(b1), $1_from_bcs_deserializable'vec'address''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<aggregator::Aggregator>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_aggregator_Aggregator''(b1), $1_from_bcs_deserializable'vec'$1_aggregator_Aggregator''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<optional_aggregator::Integer>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_optional_aggregator_Integer''(b1), $1_from_bcs_deserializable'vec'$1_optional_aggregator_Integer''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<optional_aggregator::OptionalAggregator>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_optional_aggregator_OptionalAggregator''(b1), $1_from_bcs_deserializable'vec'$1_optional_aggregator_OptionalAggregator''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<fixed_point32::FixedPoint32>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_fixed_point32_FixedPoint32''(b1), $1_from_bcs_deserializable'vec'$1_fixed_point32_FixedPoint32''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<stake::IndividualValidatorPerformance>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_stake_IndividualValidatorPerformance''(b1), $1_from_bcs_deserializable'vec'$1_stake_IndividualValidatorPerformance''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<stake::ValidatorInfo>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_stake_ValidatorInfo''(b1), $1_from_bcs_deserializable'vec'$1_stake_ValidatorInfo''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<#0>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'#0''(b1), $1_from_bcs_deserializable'vec'#0''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <option::Option<u64>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_option_Option'u64''(b1), $1_from_bcs_deserializable'$1_option_Option'u64''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <option::Option<aggregator::Aggregator>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_option_Option'$1_aggregator_Aggregator''(b1), $1_from_bcs_deserializable'$1_option_Option'$1_aggregator_Aggregator''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <option::Option<optional_aggregator::Integer>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_option_Option'$1_optional_aggregator_Integer''(b1), $1_from_bcs_deserializable'$1_option_Option'$1_optional_aggregator_Integer''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <option::Option<optional_aggregator::OptionalAggregator>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(b1), $1_from_bcs_deserializable'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <string::String>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_string_String'(b1), $1_from_bcs_deserializable'$1_string_String'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <type_info::TypeInfo>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_type_info_TypeInfo'(b1), $1_from_bcs_deserializable'$1_type_info_TypeInfo'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <guid::GUID>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_guid_GUID'(b1), $1_from_bcs_deserializable'$1_guid_GUID'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <guid::ID>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_guid_ID'(b1), $1_from_bcs_deserializable'$1_guid_ID'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<coin::DepositEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_coin_DepositEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_coin_DepositEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<coin::WithdrawEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_coin_WithdrawEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_coin_WithdrawEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<stake::AddStakeEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_AddStakeEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_AddStakeEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<stake::DistributeRewardsEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_DistributeRewardsEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_DistributeRewardsEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<stake::IncreaseLockupEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_IncreaseLockupEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_IncreaseLockupEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<stake::JoinValidatorSetEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_JoinValidatorSetEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_JoinValidatorSetEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<stake::LeaveValidatorSetEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_LeaveValidatorSetEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_LeaveValidatorSetEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<stake::ReactivateStakeEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_ReactivateStakeEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_ReactivateStakeEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<stake::RegisterValidatorCandidateEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<stake::RotateConsensusKeyEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_RotateConsensusKeyEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_RotateConsensusKeyEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<stake::SetOperatorEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_SetOperatorEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_SetOperatorEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<stake::UnlockStakeEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_UnlockStakeEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_UnlockStakeEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<stake::UpdateNetworkAndFullnodeAddressesEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<stake::WithdrawStakeEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_WithdrawStakeEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_WithdrawStakeEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<reconfiguration::NewEpochEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<staking_contract::AddStakeEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_AddStakeEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_AddStakeEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<staking_contract::UnlockStakeEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_UnlockStakeEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_UnlockStakeEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<staking_contract::AddDistributionEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<staking_contract::CreateStakingContractEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<staking_contract::DistributeEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_DistributeEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_DistributeEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<staking_contract::RequestCommissionEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<staking_contract::ResetLockupEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_ResetLockupEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_ResetLockupEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<staking_contract::SwitchOperatorEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<staking_contract::UpdateVoterEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_UpdateVoterEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_UpdateVoterEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<vesting::DistributeEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_DistributeEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_DistributeEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<vesting::ResetLockupEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_ResetLockupEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_ResetLockupEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<vesting::UpdateVoterEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_UpdateVoterEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_UpdateVoterEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<vesting::AdminWithdrawEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_AdminWithdrawEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_AdminWithdrawEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<vesting::CreateVestingContractEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_CreateVestingContractEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_CreateVestingContractEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<vesting::SetBeneficiaryEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_SetBeneficiaryEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_SetBeneficiaryEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<vesting::TerminateEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_TerminateEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_TerminateEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<vesting::UnlockRewardsEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_UnlockRewardsEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_UnlockRewardsEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<vesting::UpdateOperatorEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_UpdateOperatorEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_UpdateOperatorEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<vesting::VestEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_VestEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_VestEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <account::SignerCapability>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_account_SignerCapability'(b1), $1_from_bcs_deserializable'$1_account_SignerCapability'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <aggregator::Aggregator>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_aggregator_Aggregator'(b1), $1_from_bcs_deserializable'$1_aggregator_Aggregator'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <optional_aggregator::Integer>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_optional_aggregator_Integer'(b1), $1_from_bcs_deserializable'$1_optional_aggregator_Integer'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <optional_aggregator::OptionalAggregator>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_optional_aggregator_OptionalAggregator'(b1), $1_from_bcs_deserializable'$1_optional_aggregator_OptionalAggregator'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <coin::Coin<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_coin_Coin'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserializable'$1_coin_Coin'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <coin::CoinInfo<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserializable'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <coin::CoinStore<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserializable'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <coin::DepositEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_coin_DepositEvent'(b1), $1_from_bcs_deserializable'$1_coin_DepositEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <coin::Ghost$supply<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserializable'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserializable'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <aptos_coin::AptosCoin>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_aptos_coin_AptosCoin'(b1), $1_from_bcs_deserializable'$1_aptos_coin_AptosCoin'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <chain_status::GenesisEndMarker>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_chain_status_GenesisEndMarker'(b1), $1_from_bcs_deserializable'$1_chain_status_GenesisEndMarker'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <timestamp::CurrentTimeMicroseconds>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_timestamp_CurrentTimeMicroseconds'(b1), $1_from_bcs_deserializable'$1_timestamp_CurrentTimeMicroseconds'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <simple_map::SimpleMap<address, u64>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_simple_map_SimpleMap'address_u64''(b1), $1_from_bcs_deserializable'$1_simple_map_SimpleMap'address_u64''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <simple_map::SimpleMap<address, address>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_simple_map_SimpleMap'address_address''(b1), $1_from_bcs_deserializable'$1_simple_map_SimpleMap'address_address''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <simple_map::SimpleMap<address, staking_contract::StakingContract>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_simple_map_SimpleMap'address_$1_staking_contract_StakingContract''(b1), $1_from_bcs_deserializable'$1_simple_map_SimpleMap'address_$1_staking_contract_StakingContract''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <stake::OwnerCapability>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_stake_OwnerCapability'(b1), $1_from_bcs_deserializable'$1_stake_OwnerCapability'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <stake::SetOperatorEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_stake_SetOperatorEvent'(b1), $1_from_bcs_deserializable'$1_stake_SetOperatorEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <stake::StakePool>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_stake_StakePool'(b1), $1_from_bcs_deserializable'$1_stake_StakePool'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <stake::UnlockStakeEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_stake_UnlockStakeEvent'(b1), $1_from_bcs_deserializable'$1_stake_UnlockStakeEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <stake::ValidatorConfig>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_stake_ValidatorConfig'(b1), $1_from_bcs_deserializable'$1_stake_ValidatorConfig'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <stake::ValidatorInfo>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_stake_ValidatorInfo'(b1), $1_from_bcs_deserializable'$1_stake_ValidatorInfo'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <stake::ValidatorPerformance>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_stake_ValidatorPerformance'(b1), $1_from_bcs_deserializable'$1_stake_ValidatorPerformance'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <stake::ValidatorSet>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_stake_ValidatorSet'(b1), $1_from_bcs_deserializable'$1_stake_ValidatorSet'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <stake::WithdrawStakeEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_stake_WithdrawStakeEvent'(b1), $1_from_bcs_deserializable'$1_stake_WithdrawStakeEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <reconfiguration::Configuration>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_reconfiguration_Configuration'(b1), $1_from_bcs_deserializable'$1_reconfiguration_Configuration'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <pool_u64::Pool>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_pool_u64_Pool'(b1), $1_from_bcs_deserializable'$1_pool_u64_Pool'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <staking_contract::AddDistributionEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_staking_contract_AddDistributionEvent'(b1), $1_from_bcs_deserializable'$1_staking_contract_AddDistributionEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <staking_contract::DistributeEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_staking_contract_DistributeEvent'(b1), $1_from_bcs_deserializable'$1_staking_contract_DistributeEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <staking_contract::RequestCommissionEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_staking_contract_RequestCommissionEvent'(b1), $1_from_bcs_deserializable'$1_staking_contract_RequestCommissionEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <staking_contract::StakingContract>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_staking_contract_StakingContract'(b1), $1_from_bcs_deserializable'$1_staking_contract_StakingContract'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <staking_contract::Store>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_staking_contract_Store'(b1), $1_from_bcs_deserializable'$1_staking_contract_Store'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <staking_contract::SwitchOperatorEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_staking_contract_SwitchOperatorEvent'(b1), $1_from_bcs_deserializable'$1_staking_contract_SwitchOperatorEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <staking_contract::UpdateVoterEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_staking_contract_UpdateVoterEvent'(b1), $1_from_bcs_deserializable'$1_staking_contract_UpdateVoterEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vesting::UpdateVoterEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_vesting_UpdateVoterEvent'(b1), $1_from_bcs_deserializable'$1_vesting_UpdateVoterEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vesting::AdminStore>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_vesting_AdminStore'(b1), $1_from_bcs_deserializable'$1_vesting_AdminStore'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vesting::StakingInfo>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_vesting_StakingInfo'(b1), $1_from_bcs_deserializable'$1_vesting_StakingInfo'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vesting::UpdateOperatorEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_vesting_UpdateOperatorEvent'(b1), $1_from_bcs_deserializable'$1_vesting_UpdateOperatorEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vesting::VestingContract>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_vesting_VestingContract'(b1), $1_from_bcs_deserializable'$1_vesting_VestingContract'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vesting::VestingSchedule>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_vesting_VestingSchedule'(b1), $1_from_bcs_deserializable'$1_vesting_VestingSchedule'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <#0>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'#0'(b1), $1_from_bcs_deserializable'#0'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <bool>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserialize'bool'(b1), $1_from_bcs_deserialize'bool'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <u8>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'u8'($1_from_bcs_deserialize'u8'(b1), $1_from_bcs_deserialize'u8'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <u64>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'u64'($1_from_bcs_deserialize'u64'(b1), $1_from_bcs_deserialize'u64'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <u128>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'u128'($1_from_bcs_deserialize'u128'(b1), $1_from_bcs_deserialize'u128'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <u256>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'u256'($1_from_bcs_deserialize'u256'(b1), $1_from_bcs_deserialize'u256'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <address>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'address'($1_from_bcs_deserialize'address'(b1), $1_from_bcs_deserialize'address'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <signer>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'signer'($1_from_bcs_deserialize'signer'(b1), $1_from_bcs_deserialize'signer'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<u8>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'u8''($1_from_bcs_deserialize'vec'u8''(b1), $1_from_bcs_deserialize'vec'u8''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<u64>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'u64''($1_from_bcs_deserialize'vec'u64''(b1), $1_from_bcs_deserialize'vec'u64''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<address>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'address''($1_from_bcs_deserialize'vec'address''(b1), $1_from_bcs_deserialize'vec'address''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<aggregator::Aggregator>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_aggregator_Aggregator''($1_from_bcs_deserialize'vec'$1_aggregator_Aggregator''(b1), $1_from_bcs_deserialize'vec'$1_aggregator_Aggregator''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<optional_aggregator::Integer>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_optional_aggregator_Integer''($1_from_bcs_deserialize'vec'$1_optional_aggregator_Integer''(b1), $1_from_bcs_deserialize'vec'$1_optional_aggregator_Integer''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<optional_aggregator::OptionalAggregator>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_optional_aggregator_OptionalAggregator''($1_from_bcs_deserialize'vec'$1_optional_aggregator_OptionalAggregator''(b1), $1_from_bcs_deserialize'vec'$1_optional_aggregator_OptionalAggregator''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<fixed_point32::FixedPoint32>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_fixed_point32_FixedPoint32''($1_from_bcs_deserialize'vec'$1_fixed_point32_FixedPoint32''(b1), $1_from_bcs_deserialize'vec'$1_fixed_point32_FixedPoint32''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<stake::IndividualValidatorPerformance>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_stake_IndividualValidatorPerformance''($1_from_bcs_deserialize'vec'$1_stake_IndividualValidatorPerformance''(b1), $1_from_bcs_deserialize'vec'$1_stake_IndividualValidatorPerformance''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<stake::ValidatorInfo>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_stake_ValidatorInfo''($1_from_bcs_deserialize'vec'$1_stake_ValidatorInfo''(b1), $1_from_bcs_deserialize'vec'$1_stake_ValidatorInfo''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<#0>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'#0''($1_from_bcs_deserialize'vec'#0''(b1), $1_from_bcs_deserialize'vec'#0''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <option::Option<u64>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_option_Option'u64''($1_from_bcs_deserialize'$1_option_Option'u64''(b1), $1_from_bcs_deserialize'$1_option_Option'u64''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <option::Option<aggregator::Aggregator>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_option_Option'$1_aggregator_Aggregator''($1_from_bcs_deserialize'$1_option_Option'$1_aggregator_Aggregator''(b1), $1_from_bcs_deserialize'$1_option_Option'$1_aggregator_Aggregator''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <option::Option<optional_aggregator::Integer>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_option_Option'$1_optional_aggregator_Integer''($1_from_bcs_deserialize'$1_option_Option'$1_optional_aggregator_Integer''(b1), $1_from_bcs_deserialize'$1_option_Option'$1_optional_aggregator_Integer''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <option::Option<optional_aggregator::OptionalAggregator>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_option_Option'$1_optional_aggregator_OptionalAggregator''($1_from_bcs_deserialize'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(b1), $1_from_bcs_deserialize'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <string::String>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_string_String'($1_from_bcs_deserialize'$1_string_String'(b1), $1_from_bcs_deserialize'$1_string_String'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <type_info::TypeInfo>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_type_info_TypeInfo'($1_from_bcs_deserialize'$1_type_info_TypeInfo'(b1), $1_from_bcs_deserialize'$1_type_info_TypeInfo'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <guid::GUID>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_guid_GUID'($1_from_bcs_deserialize'$1_guid_GUID'(b1), $1_from_bcs_deserialize'$1_guid_GUID'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <guid::ID>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_guid_ID'($1_from_bcs_deserialize'$1_guid_ID'(b1), $1_from_bcs_deserialize'$1_guid_ID'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<coin::DepositEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_coin_DepositEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_coin_DepositEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_coin_DepositEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<coin::WithdrawEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_coin_WithdrawEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_coin_WithdrawEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_coin_WithdrawEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<stake::AddStakeEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_stake_AddStakeEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_AddStakeEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_AddStakeEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<stake::DistributeRewardsEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_stake_DistributeRewardsEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_DistributeRewardsEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_DistributeRewardsEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<stake::IncreaseLockupEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_stake_IncreaseLockupEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_IncreaseLockupEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_IncreaseLockupEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<stake::JoinValidatorSetEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_stake_JoinValidatorSetEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_JoinValidatorSetEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_JoinValidatorSetEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<stake::LeaveValidatorSetEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_stake_LeaveValidatorSetEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_LeaveValidatorSetEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_LeaveValidatorSetEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<stake::ReactivateStakeEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_stake_ReactivateStakeEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_ReactivateStakeEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_ReactivateStakeEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<stake::RegisterValidatorCandidateEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<stake::RotateConsensusKeyEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_stake_RotateConsensusKeyEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_RotateConsensusKeyEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_RotateConsensusKeyEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<stake::SetOperatorEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_stake_SetOperatorEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_SetOperatorEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_SetOperatorEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<stake::UnlockStakeEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_stake_UnlockStakeEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_UnlockStakeEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_UnlockStakeEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<stake::UpdateNetworkAndFullnodeAddressesEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<stake::WithdrawStakeEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_stake_WithdrawStakeEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_WithdrawStakeEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_WithdrawStakeEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<reconfiguration::NewEpochEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<staking_contract::AddStakeEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_staking_contract_AddStakeEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_AddStakeEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_AddStakeEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<staking_contract::UnlockStakeEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_staking_contract_UnlockStakeEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_UnlockStakeEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_UnlockStakeEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<staking_contract::AddDistributionEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<staking_contract::CreateStakingContractEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<staking_contract::DistributeEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_staking_contract_DistributeEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_DistributeEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_DistributeEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<staking_contract::RequestCommissionEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<staking_contract::ResetLockupEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_staking_contract_ResetLockupEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_ResetLockupEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_ResetLockupEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<staking_contract::SwitchOperatorEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<staking_contract::UpdateVoterEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_staking_contract_UpdateVoterEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_UpdateVoterEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_UpdateVoterEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<vesting::DistributeEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_vesting_DistributeEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_DistributeEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_DistributeEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<vesting::ResetLockupEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_vesting_ResetLockupEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_ResetLockupEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_ResetLockupEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<vesting::UpdateVoterEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_vesting_UpdateVoterEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_UpdateVoterEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_UpdateVoterEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<vesting::AdminWithdrawEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_vesting_AdminWithdrawEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_AdminWithdrawEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_AdminWithdrawEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<vesting::CreateVestingContractEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_vesting_CreateVestingContractEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_CreateVestingContractEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_CreateVestingContractEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<vesting::SetBeneficiaryEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_vesting_SetBeneficiaryEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_SetBeneficiaryEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_SetBeneficiaryEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<vesting::TerminateEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_vesting_TerminateEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_TerminateEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_TerminateEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<vesting::UnlockRewardsEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_vesting_UnlockRewardsEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_UnlockRewardsEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_UnlockRewardsEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<vesting::UpdateOperatorEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_vesting_UpdateOperatorEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_UpdateOperatorEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_UpdateOperatorEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<vesting::VestEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_vesting_VestEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_VestEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_VestEvent''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <account::SignerCapability>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_account_SignerCapability'($1_from_bcs_deserialize'$1_account_SignerCapability'(b1), $1_from_bcs_deserialize'$1_account_SignerCapability'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <aggregator::Aggregator>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_aggregator_Aggregator'($1_from_bcs_deserialize'$1_aggregator_Aggregator'(b1), $1_from_bcs_deserialize'$1_aggregator_Aggregator'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <optional_aggregator::Integer>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_optional_aggregator_Integer'($1_from_bcs_deserialize'$1_optional_aggregator_Integer'(b1), $1_from_bcs_deserialize'$1_optional_aggregator_Integer'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <optional_aggregator::OptionalAggregator>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_optional_aggregator_OptionalAggregator'($1_from_bcs_deserialize'$1_optional_aggregator_OptionalAggregator'(b1), $1_from_bcs_deserialize'$1_optional_aggregator_OptionalAggregator'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <coin::Coin<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_coin_Coin'$1_aptos_coin_AptosCoin''($1_from_bcs_deserialize'$1_coin_Coin'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserialize'$1_coin_Coin'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <coin::CoinInfo<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''($1_from_bcs_deserialize'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserialize'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <coin::CoinStore<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''($1_from_bcs_deserialize'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserialize'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <coin::DepositEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_coin_DepositEvent'($1_from_bcs_deserialize'$1_coin_DepositEvent'(b1), $1_from_bcs_deserialize'$1_coin_DepositEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <coin::Ghost$supply<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''($1_from_bcs_deserialize'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserialize'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''($1_from_bcs_deserialize'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserialize'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <aptos_coin::AptosCoin>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_aptos_coin_AptosCoin'($1_from_bcs_deserialize'$1_aptos_coin_AptosCoin'(b1), $1_from_bcs_deserialize'$1_aptos_coin_AptosCoin'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <chain_status::GenesisEndMarker>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_chain_status_GenesisEndMarker'($1_from_bcs_deserialize'$1_chain_status_GenesisEndMarker'(b1), $1_from_bcs_deserialize'$1_chain_status_GenesisEndMarker'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <timestamp::CurrentTimeMicroseconds>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_timestamp_CurrentTimeMicroseconds'($1_from_bcs_deserialize'$1_timestamp_CurrentTimeMicroseconds'(b1), $1_from_bcs_deserialize'$1_timestamp_CurrentTimeMicroseconds'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <simple_map::SimpleMap<address, u64>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_simple_map_SimpleMap'address_u64''($1_from_bcs_deserialize'$1_simple_map_SimpleMap'address_u64''(b1), $1_from_bcs_deserialize'$1_simple_map_SimpleMap'address_u64''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <simple_map::SimpleMap<address, address>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_simple_map_SimpleMap'address_address''($1_from_bcs_deserialize'$1_simple_map_SimpleMap'address_address''(b1), $1_from_bcs_deserialize'$1_simple_map_SimpleMap'address_address''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <simple_map::SimpleMap<address, staking_contract::StakingContract>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_simple_map_SimpleMap'address_$1_staking_contract_StakingContract''($1_from_bcs_deserialize'$1_simple_map_SimpleMap'address_$1_staking_contract_StakingContract''(b1), $1_from_bcs_deserialize'$1_simple_map_SimpleMap'address_$1_staking_contract_StakingContract''(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <stake::OwnerCapability>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_stake_OwnerCapability'($1_from_bcs_deserialize'$1_stake_OwnerCapability'(b1), $1_from_bcs_deserialize'$1_stake_OwnerCapability'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <stake::SetOperatorEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_stake_SetOperatorEvent'($1_from_bcs_deserialize'$1_stake_SetOperatorEvent'(b1), $1_from_bcs_deserialize'$1_stake_SetOperatorEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <stake::StakePool>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_stake_StakePool'($1_from_bcs_deserialize'$1_stake_StakePool'(b1), $1_from_bcs_deserialize'$1_stake_StakePool'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <stake::UnlockStakeEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_stake_UnlockStakeEvent'($1_from_bcs_deserialize'$1_stake_UnlockStakeEvent'(b1), $1_from_bcs_deserialize'$1_stake_UnlockStakeEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <stake::ValidatorConfig>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_stake_ValidatorConfig'($1_from_bcs_deserialize'$1_stake_ValidatorConfig'(b1), $1_from_bcs_deserialize'$1_stake_ValidatorConfig'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <stake::ValidatorInfo>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_stake_ValidatorInfo'($1_from_bcs_deserialize'$1_stake_ValidatorInfo'(b1), $1_from_bcs_deserialize'$1_stake_ValidatorInfo'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <stake::ValidatorPerformance>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_stake_ValidatorPerformance'($1_from_bcs_deserialize'$1_stake_ValidatorPerformance'(b1), $1_from_bcs_deserialize'$1_stake_ValidatorPerformance'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <stake::ValidatorSet>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_stake_ValidatorSet'($1_from_bcs_deserialize'$1_stake_ValidatorSet'(b1), $1_from_bcs_deserialize'$1_stake_ValidatorSet'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <stake::WithdrawStakeEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_stake_WithdrawStakeEvent'($1_from_bcs_deserialize'$1_stake_WithdrawStakeEvent'(b1), $1_from_bcs_deserialize'$1_stake_WithdrawStakeEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <reconfiguration::Configuration>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_reconfiguration_Configuration'($1_from_bcs_deserialize'$1_reconfiguration_Configuration'(b1), $1_from_bcs_deserialize'$1_reconfiguration_Configuration'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <pool_u64::Pool>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_pool_u64_Pool'($1_from_bcs_deserialize'$1_pool_u64_Pool'(b1), $1_from_bcs_deserialize'$1_pool_u64_Pool'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <staking_contract::AddDistributionEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_staking_contract_AddDistributionEvent'($1_from_bcs_deserialize'$1_staking_contract_AddDistributionEvent'(b1), $1_from_bcs_deserialize'$1_staking_contract_AddDistributionEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <staking_contract::DistributeEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_staking_contract_DistributeEvent'($1_from_bcs_deserialize'$1_staking_contract_DistributeEvent'(b1), $1_from_bcs_deserialize'$1_staking_contract_DistributeEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <staking_contract::RequestCommissionEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_staking_contract_RequestCommissionEvent'($1_from_bcs_deserialize'$1_staking_contract_RequestCommissionEvent'(b1), $1_from_bcs_deserialize'$1_staking_contract_RequestCommissionEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <staking_contract::StakingContract>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_staking_contract_StakingContract'($1_from_bcs_deserialize'$1_staking_contract_StakingContract'(b1), $1_from_bcs_deserialize'$1_staking_contract_StakingContract'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <staking_contract::Store>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_staking_contract_Store'($1_from_bcs_deserialize'$1_staking_contract_Store'(b1), $1_from_bcs_deserialize'$1_staking_contract_Store'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <staking_contract::SwitchOperatorEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_staking_contract_SwitchOperatorEvent'($1_from_bcs_deserialize'$1_staking_contract_SwitchOperatorEvent'(b1), $1_from_bcs_deserialize'$1_staking_contract_SwitchOperatorEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <staking_contract::UpdateVoterEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_staking_contract_UpdateVoterEvent'($1_from_bcs_deserialize'$1_staking_contract_UpdateVoterEvent'(b1), $1_from_bcs_deserialize'$1_staking_contract_UpdateVoterEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vesting::UpdateVoterEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_vesting_UpdateVoterEvent'($1_from_bcs_deserialize'$1_vesting_UpdateVoterEvent'(b1), $1_from_bcs_deserialize'$1_vesting_UpdateVoterEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vesting::AdminStore>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_vesting_AdminStore'($1_from_bcs_deserialize'$1_vesting_AdminStore'(b1), $1_from_bcs_deserialize'$1_vesting_AdminStore'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vesting::StakingInfo>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_vesting_StakingInfo'($1_from_bcs_deserialize'$1_vesting_StakingInfo'(b1), $1_from_bcs_deserialize'$1_vesting_StakingInfo'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vesting::UpdateOperatorEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_vesting_UpdateOperatorEvent'($1_from_bcs_deserialize'$1_vesting_UpdateOperatorEvent'(b1), $1_from_bcs_deserialize'$1_vesting_UpdateOperatorEvent'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vesting::VestingContract>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_vesting_VestingContract'($1_from_bcs_deserialize'$1_vesting_VestingContract'(b1), $1_from_bcs_deserialize'$1_vesting_VestingContract'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vesting::VestingSchedule>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_vesting_VestingSchedule'($1_from_bcs_deserialize'$1_vesting_VestingSchedule'(b1), $1_from_bcs_deserialize'$1_vesting_VestingSchedule'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <#0>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'#0'($1_from_bcs_deserialize'#0'(b1), $1_from_bcs_deserialize'#0'(b2)))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:8:9+113
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''($1_aptos_hash_spec_keccak256(b1), $1_aptos_hash_spec_keccak256(b2)) ==> $IsEqual'vec'u8''(b1, b2))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:13:9+129
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''($1_aptos_hash_spec_sha2_512_internal(b1), $1_aptos_hash_spec_sha2_512_internal(b2)) ==> $IsEqual'vec'u8''(b1, b2))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:18:9+129
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''($1_aptos_hash_spec_sha3_512_internal(b1), $1_aptos_hash_spec_sha3_512_internal(b2)) ==> $IsEqual'vec'u8''(b1, b2))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:23:9+131
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''($1_aptos_hash_spec_ripemd160_internal(b1), $1_aptos_hash_spec_ripemd160_internal(b2)) ==> $IsEqual'vec'u8''(b1, b2))));

// axiom at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:28:9+135
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''($1_aptos_hash_spec_blake2b_256_internal(b1), $1_aptos_hash_spec_blake2b_256_internal(b2)) ==> $IsEqual'vec'u8''(b1, b2))));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:146:5+86
function {:inline} $1_vector_$is_empty'u64'(v: Vec (int)): bool {
    $IsEqual'u64'($1_vector_$length'u64'(v), 0)
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:146:5+86
function {:inline} $1_vector_$is_empty'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator)): bool {
    $IsEqual'u64'($1_vector_$length'$1_aggregator_Aggregator'(v), 0)
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:146:5+86
function {:inline} $1_vector_$is_empty'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer)): bool {
    $IsEqual'u64'($1_vector_$length'$1_optional_aggregator_Integer'(v), 0)
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:628:9+110
function {:inline} $1_vector_spec_contains'address'(v: Vec (int), e: int): bool {
    (var $range_0 := v; (exists $i_1: int :: InRangeVec($range_0, $i_1) && (var x := ReadVec($range_0, $i_1);
    ($IsEqual'address'(x, e)))))
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:102:5+145
function {:inline} $1_option_$borrow'u64'(t: $1_option_Option'u64'): int {
    $1_vector_$borrow'u64'(t->$vec, 0)
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:102:5+145
function {:inline} $1_option_$borrow'$1_aggregator_Aggregator'(t: $1_option_Option'$1_aggregator_Aggregator'): $1_aggregator_Aggregator {
    $1_vector_$borrow'$1_aggregator_Aggregator'(t->$vec, 0)
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:102:5+145
function {:inline} $1_option_$borrow'$1_optional_aggregator_Integer'(t: $1_option_Option'$1_optional_aggregator_Integer'): $1_optional_aggregator_Integer {
    $1_vector_$borrow'$1_optional_aggregator_Integer'(t->$vec, 0)
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:61:5+95
function {:inline} $1_option_$is_none'u64'(t: $1_option_Option'u64'): bool {
    $1_vector_$is_empty'u64'(t->$vec)
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:61:5+95
function {:inline} $1_option_$is_none'$1_aggregator_Aggregator'(t: $1_option_Option'$1_aggregator_Aggregator'): bool {
    $1_vector_$is_empty'$1_aggregator_Aggregator'(t->$vec)
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:61:5+95
function {:inline} $1_option_$is_none'$1_optional_aggregator_Integer'(t: $1_option_Option'$1_optional_aggregator_Integer'): bool {
    $1_vector_$is_empty'$1_optional_aggregator_Integer'(t->$vec)
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:74:5+96
function {:inline} $1_option_$is_some'u64'(t: $1_option_Option'u64'): bool {
    !$1_vector_$is_empty'u64'(t->$vec)
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:74:5+96
function {:inline} $1_option_$is_some'$1_aggregator_Aggregator'(t: $1_option_Option'$1_aggregator_Aggregator'): bool {
    !$1_vector_$is_empty'$1_aggregator_Aggregator'(t->$vec)
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:74:5+96
function {:inline} $1_option_$is_some'$1_optional_aggregator_Integer'(t: $1_option_Option'$1_optional_aggregator_Integer'): bool {
    !$1_vector_$is_empty'$1_optional_aggregator_Integer'(t->$vec)
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:82:10+92
function {:inline} $1_option_spec_is_some'u64'(t: $1_option_Option'u64'): bool {
    !$1_vector_$is_empty'u64'(t->$vec)
}

// struct option::Option<u64> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:7:5+81
datatype $1_option_Option'u64' {
    $1_option_Option'u64'($vec: Vec (int))
}
function {:inline} $Update'$1_option_Option'u64''_vec(s: $1_option_Option'u64', x: Vec (int)): $1_option_Option'u64' {
    $1_option_Option'u64'(x)
}
function $IsValid'$1_option_Option'u64''(s: $1_option_Option'u64'): bool {
    $IsValid'vec'u64''(s->$vec)
}
function {:inline} $IsEqual'$1_option_Option'u64''(s1: $1_option_Option'u64', s2: $1_option_Option'u64'): bool {
    $IsEqual'vec'u64''(s1->$vec, s2->$vec)}

// struct option::Option<aggregator::Aggregator> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:7:5+81
datatype $1_option_Option'$1_aggregator_Aggregator' {
    $1_option_Option'$1_aggregator_Aggregator'($vec: Vec ($1_aggregator_Aggregator))
}
function {:inline} $Update'$1_option_Option'$1_aggregator_Aggregator''_vec(s: $1_option_Option'$1_aggregator_Aggregator', x: Vec ($1_aggregator_Aggregator)): $1_option_Option'$1_aggregator_Aggregator' {
    $1_option_Option'$1_aggregator_Aggregator'(x)
}
function $IsValid'$1_option_Option'$1_aggregator_Aggregator''(s: $1_option_Option'$1_aggregator_Aggregator'): bool {
    $IsValid'vec'$1_aggregator_Aggregator''(s->$vec)
}
function {:inline} $IsEqual'$1_option_Option'$1_aggregator_Aggregator''(s1: $1_option_Option'$1_aggregator_Aggregator', s2: $1_option_Option'$1_aggregator_Aggregator'): bool {
    $IsEqual'vec'$1_aggregator_Aggregator''(s1->$vec, s2->$vec)}

// struct option::Option<optional_aggregator::Integer> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:7:5+81
datatype $1_option_Option'$1_optional_aggregator_Integer' {
    $1_option_Option'$1_optional_aggregator_Integer'($vec: Vec ($1_optional_aggregator_Integer))
}
function {:inline} $Update'$1_option_Option'$1_optional_aggregator_Integer''_vec(s: $1_option_Option'$1_optional_aggregator_Integer', x: Vec ($1_optional_aggregator_Integer)): $1_option_Option'$1_optional_aggregator_Integer' {
    $1_option_Option'$1_optional_aggregator_Integer'(x)
}
function $IsValid'$1_option_Option'$1_optional_aggregator_Integer''(s: $1_option_Option'$1_optional_aggregator_Integer'): bool {
    $IsValid'vec'$1_optional_aggregator_Integer''(s->$vec)
}
function {:inline} $IsEqual'$1_option_Option'$1_optional_aggregator_Integer''(s1: $1_option_Option'$1_optional_aggregator_Integer', s2: $1_option_Option'$1_optional_aggregator_Integer'): bool {
    $IsEqual'vec'$1_optional_aggregator_Integer''(s1->$vec, s2->$vec)}

// struct option::Option<optional_aggregator::OptionalAggregator> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:7:5+81
datatype $1_option_Option'$1_optional_aggregator_OptionalAggregator' {
    $1_option_Option'$1_optional_aggregator_OptionalAggregator'($vec: Vec ($1_optional_aggregator_OptionalAggregator))
}
function {:inline} $Update'$1_option_Option'$1_optional_aggregator_OptionalAggregator''_vec(s: $1_option_Option'$1_optional_aggregator_OptionalAggregator', x: Vec ($1_optional_aggregator_OptionalAggregator)): $1_option_Option'$1_optional_aggregator_OptionalAggregator' {
    $1_option_Option'$1_optional_aggregator_OptionalAggregator'(x)
}
function $IsValid'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(s: $1_option_Option'$1_optional_aggregator_OptionalAggregator'): bool {
    $IsValid'vec'$1_optional_aggregator_OptionalAggregator''(s->$vec)
}
function {:inline} $IsEqual'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(s1: $1_option_Option'$1_optional_aggregator_OptionalAggregator', s2: $1_option_Option'$1_optional_aggregator_OptionalAggregator'): bool {
    $IsEqual'vec'$1_optional_aggregator_OptionalAggregator''(s1->$vec, s2->$vec)}

// struct string::String at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:13:5+70
datatype $1_string_String {
    $1_string_String($bytes: Vec (int))
}
function {:inline} $Update'$1_string_String'_bytes(s: $1_string_String, x: Vec (int)): $1_string_String {
    $1_string_String(x)
}
function $IsValid'$1_string_String'(s: $1_string_String): bool {
    $IsValid'vec'u8''(s->$bytes)
}
function {:inline} $IsEqual'$1_string_String'(s1: $1_string_String, s2: $1_string_String): bool {
    $IsEqual'vec'u8''(s1->$bytes, s2->$bytes)}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:12:5+77
function {:inline} $1_signer_$address_of(s: $signer): int {
    $1_signer_$borrow_address(s)
}

// fun signer::address_of [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:12:5+77
procedure {:inline 1} $1_signer_address_of(_$t0: $signer) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t0: $signer;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[s]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:12:5+1
    assume {:print "$at(14,396,397)"} true;
    assume {:print "$track_local(3,0,0):", $t0} $t0 == $t0;

    // $t1 := signer::borrow_address($t0) on_abort goto L2 with $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:13:10+17
    assume {:print "$at(14,450,467)"} true;
    call $t1 := $1_signer_borrow_address($t0);
    if ($abort_flag) {
        assume {:print "$at(14,450,467)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(3,0):", $t2} $t2 == $t2;
        goto L2;
    }

    // trace_return[0]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:13:9+18
    assume {:print "$track_return(3,0,0):", $t1} $t1 == $t1;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:14:5+1
    assume {:print "$at(14,472,473)"} true;
L1:

    // return $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:14:5+1
    assume {:print "$at(14,472,473)"} true;
    $ret0 := $t1;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:14:5+1
L2:

    // abort($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:14:5+1
    assume {:print "$at(14,472,473)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun error::invalid_argument [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:3+76
procedure {:inline 1} $1_error_invalid_argument(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:3+1
    assume {:print "$at(10,3082,3083)"} true;
    assume {:print "$track_local(4,4,0):", $t0} $t0 == $t0;

    // $t1 := 1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:57+16
    $t1 := 1;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:69:5+29
    assume {:print "$at(10,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:47+30
    assume {:print "$at(10,3126,3156)"} true;

    // assume WellFormed($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:47+30
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:47+30
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:47+30

    // trace_return[0]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:47+30
    assume {:print "$track_return(4,4,0):", $t3} $t3 == $t3;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:78+1
L1:

    // return $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:78+1
    assume {:print "$at(10,3157,3158)"} true;
    $ret0 := $t3;
    return;

}

// fun error::invalid_state [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:3+70
procedure {:inline 1} $1_error_invalid_state(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:3+1
    assume {:print "$at(10,3232,3233)"} true;
    assume {:print "$track_local(4,5,0):", $t0} $t0 == $t0;

    // $t1 := 3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:54+13
    $t1 := 3;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:69:5+29
    assume {:print "$at(10,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:44+27
    assume {:print "$at(10,3273,3300)"} true;

    // assume WellFormed($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:44+27
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:44+27
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:44+27

    // trace_return[0]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:44+27
    assume {:print "$track_return(4,5,0):", $t3} $t3 == $t3;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:72+1
L1:

    // return $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:72+1
    assume {:print "$at(10,3301,3302)"} true;
    $ret0 := $t3;
    return;

}

// fun error::not_found [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:3+61
procedure {:inline 1} $1_error_not_found(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:3+1
    assume {:print "$at(10,3461,3462)"} true;
    assume {:print "$track_local(4,6,0):", $t0} $t0 == $t0;

    // $t1 := 6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:49+9
    $t1 := 6;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:69:5+29
    assume {:print "$at(10,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:39+23
    assume {:print "$at(10,3497,3520)"} true;

    // assume WellFormed($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:39+23
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:39+23
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:39+23

    // trace_return[0]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:39+23
    assume {:print "$track_return(4,6,0):", $t3} $t3 == $t3;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:63+1
L1:

    // return $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:63+1
    assume {:print "$at(10,3521,3522)"} true;
    $ret0 := $t3;
    return;

}

// fun error::permission_denied [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:3+77
procedure {:inline 1} $1_error_permission_denied(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:3+1
    assume {:print "$at(10,3381,3382)"} true;
    assume {:print "$track_local(4,9,0):", $t0} $t0 == $t0;

    // $t1 := 5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:57+17
    $t1 := 5;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:69:5+29
    assume {:print "$at(10,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:47+31
    assume {:print "$at(10,3425,3456)"} true;

    // assume WellFormed($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:47+31
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:47+31
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:47+31

    // trace_return[0]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:47+31
    assume {:print "$track_return(4,9,0):", $t3} $t3 == $t3;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:79+1
L1:

    // return $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:79+1
    assume {:print "$at(10,3457,3458)"} true;
    $ret0 := $t3;
    return;

}

// fun error::unauthenticated [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:79:3+73
procedure {:inline 1} $1_error_unauthenticated(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:79:3+1
    assume {:print "$at(10,3305,3306)"} true;
    assume {:print "$track_local(4,11,0):", $t0} $t0 == $t0;

    // $t1 := 4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:79:55+15
    $t1 := 4;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:69:5+29
    assume {:print "$at(10,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:79:45+29
    assume {:print "$at(10,3347,3376)"} true;

    // assume WellFormed($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:79:45+29
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:79:45+29
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:79:45+29

    // trace_return[0]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:79:45+29
    assume {:print "$track_return(4,11,0):", $t3} $t3 == $t3;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:79:75+1
L1:

    // return $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:79:75+1
    assume {:print "$at(10,3377,3378)"} true;
    $ret0 := $t3;
    return;

}

// struct type_info::TypeInfo at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/type_info.move:17:5+145
datatype $1_type_info_TypeInfo {
    $1_type_info_TypeInfo($account_address: int, $module_name: Vec (int), $struct_name: Vec (int))
}
function {:inline} $Update'$1_type_info_TypeInfo'_account_address(s: $1_type_info_TypeInfo, x: int): $1_type_info_TypeInfo {
    $1_type_info_TypeInfo(x, s->$module_name, s->$struct_name)
}
function {:inline} $Update'$1_type_info_TypeInfo'_module_name(s: $1_type_info_TypeInfo, x: Vec (int)): $1_type_info_TypeInfo {
    $1_type_info_TypeInfo(s->$account_address, x, s->$struct_name)
}
function {:inline} $Update'$1_type_info_TypeInfo'_struct_name(s: $1_type_info_TypeInfo, x: Vec (int)): $1_type_info_TypeInfo {
    $1_type_info_TypeInfo(s->$account_address, s->$module_name, x)
}
function $IsValid'$1_type_info_TypeInfo'(s: $1_type_info_TypeInfo): bool {
    $IsValid'address'(s->$account_address)
      && $IsValid'vec'u8''(s->$module_name)
      && $IsValid'vec'u8''(s->$struct_name)
}
function {:inline} $IsEqual'$1_type_info_TypeInfo'(s1: $1_type_info_TypeInfo, s2: $1_type_info_TypeInfo): bool {
    $IsEqual'address'(s1->$account_address, s2->$account_address)
    && $IsEqual'vec'u8''(s1->$module_name, s2->$module_name)
    && $IsEqual'vec'u8''(s1->$struct_name, s2->$struct_name)}

// struct guid::GUID at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:7:5+50
datatype $1_guid_GUID {
    $1_guid_GUID($id: $1_guid_ID)
}
function {:inline} $Update'$1_guid_GUID'_id(s: $1_guid_GUID, x: $1_guid_ID): $1_guid_GUID {
    $1_guid_GUID(x)
}
function $IsValid'$1_guid_GUID'(s: $1_guid_GUID): bool {
    $IsValid'$1_guid_ID'(s->$id)
}
function {:inline} $IsEqual'$1_guid_GUID'(s1: $1_guid_GUID, s2: $1_guid_GUID): bool {
    s1 == s2
}

// struct guid::ID at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:12:5+209
datatype $1_guid_ID {
    $1_guid_ID($creation_num: int, $addr: int)
}
function {:inline} $Update'$1_guid_ID'_creation_num(s: $1_guid_ID, x: int): $1_guid_ID {
    $1_guid_ID(x, s->$addr)
}
function {:inline} $Update'$1_guid_ID'_addr(s: $1_guid_ID, x: int): $1_guid_ID {
    $1_guid_ID(s->$creation_num, x)
}
function $IsValid'$1_guid_ID'(s: $1_guid_ID): bool {
    $IsValid'u64'(s->$creation_num)
      && $IsValid'address'(s->$addr)
}
function {:inline} $IsEqual'$1_guid_ID'(s1: $1_guid_ID, s2: $1_guid_ID): bool {
    s1 == s2
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'bool'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'bool'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'u8'(bytes: Vec (int)): int;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'u8'(bytes);
$IsValid'u8'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'u64'(bytes: Vec (int)): int;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'u64'(bytes);
$IsValid'u64'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'u128'(bytes: Vec (int)): int;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'u128'(bytes);
$IsValid'u128'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'u256'(bytes: Vec (int)): int;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'u256'(bytes);
$IsValid'u256'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'address'(bytes: Vec (int)): int;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'address'(bytes);
$IsValid'address'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'signer'(bytes: Vec (int)): $signer;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'signer'(bytes);
$IsValid'signer'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'u8''(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'u8''(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'u64''(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'u64''(bytes);
$IsValid'vec'u64''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'address''(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'address''(bytes);
$IsValid'vec'address''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_aggregator_Aggregator''(bytes: Vec (int)): Vec ($1_aggregator_Aggregator);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_aggregator_Aggregator''(bytes);
$IsValid'vec'$1_aggregator_Aggregator''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_optional_aggregator_Integer''(bytes: Vec (int)): Vec ($1_optional_aggregator_Integer);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_optional_aggregator_Integer''(bytes);
$IsValid'vec'$1_optional_aggregator_Integer''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_optional_aggregator_OptionalAggregator''(bytes: Vec (int)): Vec ($1_optional_aggregator_OptionalAggregator);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_optional_aggregator_OptionalAggregator''(bytes);
$IsValid'vec'$1_optional_aggregator_OptionalAggregator''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_fixed_point32_FixedPoint32''(bytes: Vec (int)): Vec ($1_fixed_point32_FixedPoint32);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_fixed_point32_FixedPoint32''(bytes);
$IsValid'vec'$1_fixed_point32_FixedPoint32''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_stake_IndividualValidatorPerformance''(bytes: Vec (int)): Vec ($1_stake_IndividualValidatorPerformance);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_stake_IndividualValidatorPerformance''(bytes);
$IsValid'vec'$1_stake_IndividualValidatorPerformance''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_stake_ValidatorInfo''(bytes: Vec (int)): Vec ($1_stake_ValidatorInfo);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_stake_ValidatorInfo''(bytes);
$IsValid'vec'$1_stake_ValidatorInfo''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'#0''(bytes: Vec (int)): Vec (#0);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'#0''(bytes);
$IsValid'vec'#0''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_option_Option'u64''(bytes: Vec (int)): $1_option_Option'u64';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_option_Option'u64''(bytes);
$IsValid'$1_option_Option'u64''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_option_Option'$1_aggregator_Aggregator''(bytes: Vec (int)): $1_option_Option'$1_aggregator_Aggregator';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_option_Option'$1_aggregator_Aggregator''(bytes);
$IsValid'$1_option_Option'$1_aggregator_Aggregator''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_option_Option'$1_optional_aggregator_Integer''(bytes: Vec (int)): $1_option_Option'$1_optional_aggregator_Integer';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_option_Option'$1_optional_aggregator_Integer''(bytes);
$IsValid'$1_option_Option'$1_optional_aggregator_Integer''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(bytes: Vec (int)): $1_option_Option'$1_optional_aggregator_OptionalAggregator';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(bytes);
$IsValid'$1_option_Option'$1_optional_aggregator_OptionalAggregator''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_string_String'(bytes: Vec (int)): $1_string_String;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_string_String'(bytes);
$IsValid'$1_string_String'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_type_info_TypeInfo'(bytes: Vec (int)): $1_type_info_TypeInfo;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_type_info_TypeInfo'(bytes);
$IsValid'$1_type_info_TypeInfo'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_guid_GUID'(bytes: Vec (int)): $1_guid_GUID;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_guid_GUID'(bytes);
$IsValid'$1_guid_GUID'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_guid_ID'(bytes: Vec (int)): $1_guid_ID;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_guid_ID'(bytes);
$IsValid'$1_guid_ID'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_coin_DepositEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_coin_DepositEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_coin_DepositEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_coin_DepositEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_coin_WithdrawEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_coin_WithdrawEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_coin_WithdrawEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_coin_WithdrawEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_AddStakeEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_stake_AddStakeEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_AddStakeEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_stake_AddStakeEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_DistributeRewardsEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_stake_DistributeRewardsEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_DistributeRewardsEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_stake_DistributeRewardsEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_IncreaseLockupEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_stake_IncreaseLockupEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_IncreaseLockupEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_stake_IncreaseLockupEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_JoinValidatorSetEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_stake_JoinValidatorSetEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_JoinValidatorSetEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_stake_JoinValidatorSetEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_LeaveValidatorSetEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_stake_LeaveValidatorSetEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_LeaveValidatorSetEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_stake_LeaveValidatorSetEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_ReactivateStakeEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_stake_ReactivateStakeEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_ReactivateStakeEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_stake_ReactivateStakeEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_RotateConsensusKeyEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_stake_RotateConsensusKeyEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_RotateConsensusKeyEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_stake_RotateConsensusKeyEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_SetOperatorEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_stake_SetOperatorEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_SetOperatorEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_stake_SetOperatorEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_UnlockStakeEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_stake_UnlockStakeEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_UnlockStakeEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_stake_UnlockStakeEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_WithdrawStakeEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_stake_WithdrawStakeEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_stake_WithdrawStakeEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_stake_WithdrawStakeEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_reconfiguration_NewEpochEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_AddStakeEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_staking_contract_AddStakeEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_AddStakeEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_staking_contract_AddStakeEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_UnlockStakeEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_staking_contract_UnlockStakeEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_UnlockStakeEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_staking_contract_UnlockStakeEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_staking_contract_AddDistributionEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_DistributeEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_staking_contract_DistributeEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_DistributeEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_staking_contract_DistributeEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_staking_contract_RequestCommissionEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_ResetLockupEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_staking_contract_ResetLockupEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_ResetLockupEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_staking_contract_ResetLockupEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_UpdateVoterEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_staking_contract_UpdateVoterEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_staking_contract_UpdateVoterEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_staking_contract_UpdateVoterEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_DistributeEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_vesting_DistributeEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_DistributeEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_vesting_DistributeEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_ResetLockupEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_vesting_ResetLockupEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_ResetLockupEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_vesting_ResetLockupEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_UpdateVoterEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_vesting_UpdateVoterEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_UpdateVoterEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_vesting_UpdateVoterEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_AdminWithdrawEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_vesting_AdminWithdrawEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_AdminWithdrawEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_vesting_AdminWithdrawEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_CreateVestingContractEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_vesting_CreateVestingContractEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_CreateVestingContractEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_vesting_CreateVestingContractEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_SetBeneficiaryEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_vesting_SetBeneficiaryEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_SetBeneficiaryEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_vesting_SetBeneficiaryEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_TerminateEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_vesting_TerminateEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_TerminateEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_vesting_TerminateEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_UnlockRewardsEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_vesting_UnlockRewardsEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_UnlockRewardsEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_vesting_UnlockRewardsEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_UpdateOperatorEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_vesting_UpdateOperatorEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_UpdateOperatorEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_vesting_UpdateOperatorEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_VestEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_vesting_VestEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_vesting_VestEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_vesting_VestEvent''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_account_SignerCapability'(bytes: Vec (int)): $1_account_SignerCapability;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_account_SignerCapability'(bytes);
$IsValid'$1_account_SignerCapability'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_aggregator_Aggregator'(bytes: Vec (int)): $1_aggregator_Aggregator;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_aggregator_Aggregator'(bytes);
$IsValid'$1_aggregator_Aggregator'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_optional_aggregator_Integer'(bytes: Vec (int)): $1_optional_aggregator_Integer;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_optional_aggregator_Integer'(bytes);
$IsValid'$1_optional_aggregator_Integer'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_optional_aggregator_OptionalAggregator'(bytes: Vec (int)): $1_optional_aggregator_OptionalAggregator;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_optional_aggregator_OptionalAggregator'(bytes);
$IsValid'$1_optional_aggregator_OptionalAggregator'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_coin_Coin'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): $1_coin_Coin'$1_aptos_coin_AptosCoin';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_coin_Coin'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'$1_coin_Coin'$1_aptos_coin_AptosCoin''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): $1_coin_CoinInfo'$1_aptos_coin_AptosCoin';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): $1_coin_CoinStore'$1_aptos_coin_AptosCoin';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_coin_DepositEvent'(bytes: Vec (int)): $1_coin_DepositEvent;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_coin_DepositEvent'(bytes);
$IsValid'$1_coin_DepositEvent'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_aptos_coin_AptosCoin'(bytes: Vec (int)): $1_aptos_coin_AptosCoin;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_aptos_coin_AptosCoin'(bytes);
$IsValid'$1_aptos_coin_AptosCoin'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_chain_status_GenesisEndMarker'(bytes: Vec (int)): $1_chain_status_GenesisEndMarker;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_chain_status_GenesisEndMarker'(bytes);
$IsValid'$1_chain_status_GenesisEndMarker'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_timestamp_CurrentTimeMicroseconds'(bytes: Vec (int)): $1_timestamp_CurrentTimeMicroseconds;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_timestamp_CurrentTimeMicroseconds'(bytes);
$IsValid'$1_timestamp_CurrentTimeMicroseconds'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_simple_map_SimpleMap'address_u64''(bytes: Vec (int)): Table int (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_simple_map_SimpleMap'address_u64''(bytes);
$IsValid'$1_simple_map_SimpleMap'address_u64''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_simple_map_SimpleMap'address_address''(bytes: Vec (int)): Table int (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_simple_map_SimpleMap'address_address''(bytes);
$IsValid'$1_simple_map_SimpleMap'address_address''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_simple_map_SimpleMap'address_$1_staking_contract_StakingContract''(bytes: Vec (int)): Table int ($1_staking_contract_StakingContract);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_simple_map_SimpleMap'address_$1_staking_contract_StakingContract''(bytes);
$IsValid'$1_simple_map_SimpleMap'address_$1_staking_contract_StakingContract''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_stake_OwnerCapability'(bytes: Vec (int)): $1_stake_OwnerCapability;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_stake_OwnerCapability'(bytes);
$IsValid'$1_stake_OwnerCapability'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_stake_SetOperatorEvent'(bytes: Vec (int)): $1_stake_SetOperatorEvent;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_stake_SetOperatorEvent'(bytes);
$IsValid'$1_stake_SetOperatorEvent'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_stake_StakePool'(bytes: Vec (int)): $1_stake_StakePool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_stake_StakePool'(bytes);
$IsValid'$1_stake_StakePool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_stake_UnlockStakeEvent'(bytes: Vec (int)): $1_stake_UnlockStakeEvent;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_stake_UnlockStakeEvent'(bytes);
$IsValid'$1_stake_UnlockStakeEvent'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_stake_ValidatorConfig'(bytes: Vec (int)): $1_stake_ValidatorConfig;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_stake_ValidatorConfig'(bytes);
$IsValid'$1_stake_ValidatorConfig'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_stake_ValidatorInfo'(bytes: Vec (int)): $1_stake_ValidatorInfo;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_stake_ValidatorInfo'(bytes);
$IsValid'$1_stake_ValidatorInfo'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_stake_ValidatorPerformance'(bytes: Vec (int)): $1_stake_ValidatorPerformance;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_stake_ValidatorPerformance'(bytes);
$IsValid'$1_stake_ValidatorPerformance'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_stake_ValidatorSet'(bytes: Vec (int)): $1_stake_ValidatorSet;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_stake_ValidatorSet'(bytes);
$IsValid'$1_stake_ValidatorSet'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_stake_WithdrawStakeEvent'(bytes: Vec (int)): $1_stake_WithdrawStakeEvent;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_stake_WithdrawStakeEvent'(bytes);
$IsValid'$1_stake_WithdrawStakeEvent'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_reconfiguration_Configuration'(bytes: Vec (int)): $1_reconfiguration_Configuration;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_reconfiguration_Configuration'(bytes);
$IsValid'$1_reconfiguration_Configuration'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_pool_u64_Pool'(bytes: Vec (int)): $1_pool_u64_Pool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_pool_u64_Pool'(bytes);
$IsValid'$1_pool_u64_Pool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_staking_contract_AddDistributionEvent'(bytes: Vec (int)): $1_staking_contract_AddDistributionEvent;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_staking_contract_AddDistributionEvent'(bytes);
$IsValid'$1_staking_contract_AddDistributionEvent'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_staking_contract_DistributeEvent'(bytes: Vec (int)): $1_staking_contract_DistributeEvent;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_staking_contract_DistributeEvent'(bytes);
$IsValid'$1_staking_contract_DistributeEvent'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_staking_contract_RequestCommissionEvent'(bytes: Vec (int)): $1_staking_contract_RequestCommissionEvent;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_staking_contract_RequestCommissionEvent'(bytes);
$IsValid'$1_staking_contract_RequestCommissionEvent'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_staking_contract_StakingContract'(bytes: Vec (int)): $1_staking_contract_StakingContract;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_staking_contract_StakingContract'(bytes);
$IsValid'$1_staking_contract_StakingContract'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_staking_contract_Store'(bytes: Vec (int)): $1_staking_contract_Store;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_staking_contract_Store'(bytes);
$IsValid'$1_staking_contract_Store'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_staking_contract_SwitchOperatorEvent'(bytes: Vec (int)): $1_staking_contract_SwitchOperatorEvent;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_staking_contract_SwitchOperatorEvent'(bytes);
$IsValid'$1_staking_contract_SwitchOperatorEvent'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_staking_contract_UpdateVoterEvent'(bytes: Vec (int)): $1_staking_contract_UpdateVoterEvent;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_staking_contract_UpdateVoterEvent'(bytes);
$IsValid'$1_staking_contract_UpdateVoterEvent'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_vesting_UpdateVoterEvent'(bytes: Vec (int)): $1_vesting_UpdateVoterEvent;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_vesting_UpdateVoterEvent'(bytes);
$IsValid'$1_vesting_UpdateVoterEvent'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_vesting_AdminStore'(bytes: Vec (int)): $1_vesting_AdminStore;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_vesting_AdminStore'(bytes);
$IsValid'$1_vesting_AdminStore'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_vesting_StakingInfo'(bytes: Vec (int)): $1_vesting_StakingInfo;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_vesting_StakingInfo'(bytes);
$IsValid'$1_vesting_StakingInfo'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_vesting_UpdateOperatorEvent'(bytes: Vec (int)): $1_vesting_UpdateOperatorEvent;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_vesting_UpdateOperatorEvent'(bytes);
$IsValid'$1_vesting_UpdateOperatorEvent'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_vesting_VestingContract'(bytes: Vec (int)): $1_vesting_VestingContract;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_vesting_VestingContract'(bytes);
$IsValid'$1_vesting_VestingContract'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_vesting_VestingSchedule'(bytes: Vec (int)): $1_vesting_VestingSchedule;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_vesting_VestingSchedule'(bytes);
$IsValid'$1_vesting_VestingSchedule'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'#0'(bytes: Vec (int)): #0;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'#0'(bytes);
$IsValid'#0'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'bool'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'bool'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'u8'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'u8'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'u64'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'u64'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'u128'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'u128'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'u256'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'u256'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'address'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'address'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'signer'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'signer'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'u8''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'u8''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'u64''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'u64''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'address''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'address''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_aggregator_Aggregator''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_aggregator_Aggregator''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_optional_aggregator_Integer''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_optional_aggregator_Integer''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_optional_aggregator_OptionalAggregator''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_optional_aggregator_OptionalAggregator''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_fixed_point32_FixedPoint32''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_fixed_point32_FixedPoint32''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_stake_IndividualValidatorPerformance''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_stake_IndividualValidatorPerformance''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_stake_ValidatorInfo''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_stake_ValidatorInfo''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'#0''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'#0''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_option_Option'u64''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_option_Option'u64''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_option_Option'$1_aggregator_Aggregator''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_option_Option'$1_aggregator_Aggregator''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_option_Option'$1_optional_aggregator_Integer''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_option_Option'$1_optional_aggregator_Integer''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_string_String'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_string_String'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_type_info_TypeInfo'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_type_info_TypeInfo'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_guid_GUID'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_guid_GUID'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_guid_ID'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_guid_ID'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_coin_DepositEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_coin_DepositEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_coin_WithdrawEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_coin_WithdrawEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_AddStakeEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_AddStakeEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_DistributeRewardsEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_DistributeRewardsEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_IncreaseLockupEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_IncreaseLockupEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_JoinValidatorSetEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_JoinValidatorSetEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_LeaveValidatorSetEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_LeaveValidatorSetEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_ReactivateStakeEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_ReactivateStakeEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_RotateConsensusKeyEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_RotateConsensusKeyEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_SetOperatorEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_SetOperatorEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_UnlockStakeEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_UnlockStakeEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_WithdrawStakeEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_stake_WithdrawStakeEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_AddStakeEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_AddStakeEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_UnlockStakeEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_UnlockStakeEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_DistributeEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_DistributeEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_ResetLockupEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_ResetLockupEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_UpdateVoterEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_staking_contract_UpdateVoterEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_DistributeEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_DistributeEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_ResetLockupEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_ResetLockupEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_UpdateVoterEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_UpdateVoterEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_AdminWithdrawEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_AdminWithdrawEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_CreateVestingContractEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_CreateVestingContractEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_SetBeneficiaryEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_SetBeneficiaryEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_TerminateEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_TerminateEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_UnlockRewardsEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_UnlockRewardsEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_UpdateOperatorEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_UpdateOperatorEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_VestEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_vesting_VestEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_account_SignerCapability'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_account_SignerCapability'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_aggregator_Aggregator'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_aggregator_Aggregator'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_optional_aggregator_Integer'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_optional_aggregator_Integer'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_optional_aggregator_OptionalAggregator'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_optional_aggregator_OptionalAggregator'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_coin_Coin'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_coin_Coin'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_coin_DepositEvent'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_coin_DepositEvent'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_aptos_coin_AptosCoin'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_aptos_coin_AptosCoin'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_chain_status_GenesisEndMarker'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_chain_status_GenesisEndMarker'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_timestamp_CurrentTimeMicroseconds'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_timestamp_CurrentTimeMicroseconds'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_simple_map_SimpleMap'address_u64''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_simple_map_SimpleMap'address_u64''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_simple_map_SimpleMap'address_address''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_simple_map_SimpleMap'address_address''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_simple_map_SimpleMap'address_$1_staking_contract_StakingContract''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_simple_map_SimpleMap'address_$1_staking_contract_StakingContract''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_stake_OwnerCapability'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_stake_OwnerCapability'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_stake_SetOperatorEvent'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_stake_SetOperatorEvent'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_stake_StakePool'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_stake_StakePool'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_stake_UnlockStakeEvent'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_stake_UnlockStakeEvent'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_stake_ValidatorConfig'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_stake_ValidatorConfig'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_stake_ValidatorInfo'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_stake_ValidatorInfo'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_stake_ValidatorPerformance'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_stake_ValidatorPerformance'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_stake_ValidatorSet'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_stake_ValidatorSet'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_stake_WithdrawStakeEvent'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_stake_WithdrawStakeEvent'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_reconfiguration_Configuration'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_reconfiguration_Configuration'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_pool_u64_Pool'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_pool_u64_Pool'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_staking_contract_AddDistributionEvent'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_staking_contract_AddDistributionEvent'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_staking_contract_DistributeEvent'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_staking_contract_DistributeEvent'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_staking_contract_RequestCommissionEvent'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_staking_contract_RequestCommissionEvent'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_staking_contract_StakingContract'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_staking_contract_StakingContract'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_staking_contract_Store'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_staking_contract_Store'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_staking_contract_SwitchOperatorEvent'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_staking_contract_SwitchOperatorEvent'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_staking_contract_UpdateVoterEvent'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_staking_contract_UpdateVoterEvent'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_vesting_UpdateVoterEvent'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_vesting_UpdateVoterEvent'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_vesting_AdminStore'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_vesting_AdminStore'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_vesting_StakingInfo'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_vesting_StakingInfo'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_vesting_UpdateOperatorEvent'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_vesting_UpdateOperatorEvent'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_vesting_VestingContract'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_vesting_VestingContract'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_vesting_VestingSchedule'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_vesting_VestingSchedule'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'#0'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'#0'(bytes);
$IsValid'bool'($$res)));

// struct event::EventHandle<coin::DepositEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_coin_DepositEvent' {
    $1_event_EventHandle'$1_coin_DepositEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_coin_DepositEvent''_counter(s: $1_event_EventHandle'$1_coin_DepositEvent', x: int): $1_event_EventHandle'$1_coin_DepositEvent' {
    $1_event_EventHandle'$1_coin_DepositEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_coin_DepositEvent''_guid(s: $1_event_EventHandle'$1_coin_DepositEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_coin_DepositEvent' {
    $1_event_EventHandle'$1_coin_DepositEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_coin_DepositEvent''(s: $1_event_EventHandle'$1_coin_DepositEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_coin_DepositEvent''(s1: $1_event_EventHandle'$1_coin_DepositEvent', s2: $1_event_EventHandle'$1_coin_DepositEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<coin::WithdrawEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_coin_WithdrawEvent' {
    $1_event_EventHandle'$1_coin_WithdrawEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_coin_WithdrawEvent''_counter(s: $1_event_EventHandle'$1_coin_WithdrawEvent', x: int): $1_event_EventHandle'$1_coin_WithdrawEvent' {
    $1_event_EventHandle'$1_coin_WithdrawEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_coin_WithdrawEvent''_guid(s: $1_event_EventHandle'$1_coin_WithdrawEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_coin_WithdrawEvent' {
    $1_event_EventHandle'$1_coin_WithdrawEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_coin_WithdrawEvent''(s: $1_event_EventHandle'$1_coin_WithdrawEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_coin_WithdrawEvent''(s1: $1_event_EventHandle'$1_coin_WithdrawEvent', s2: $1_event_EventHandle'$1_coin_WithdrawEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<stake::AddStakeEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_stake_AddStakeEvent' {
    $1_event_EventHandle'$1_stake_AddStakeEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_AddStakeEvent''_counter(s: $1_event_EventHandle'$1_stake_AddStakeEvent', x: int): $1_event_EventHandle'$1_stake_AddStakeEvent' {
    $1_event_EventHandle'$1_stake_AddStakeEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_AddStakeEvent''_guid(s: $1_event_EventHandle'$1_stake_AddStakeEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_stake_AddStakeEvent' {
    $1_event_EventHandle'$1_stake_AddStakeEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_stake_AddStakeEvent''(s: $1_event_EventHandle'$1_stake_AddStakeEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_stake_AddStakeEvent''(s1: $1_event_EventHandle'$1_stake_AddStakeEvent', s2: $1_event_EventHandle'$1_stake_AddStakeEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<stake::DistributeRewardsEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_stake_DistributeRewardsEvent' {
    $1_event_EventHandle'$1_stake_DistributeRewardsEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_DistributeRewardsEvent''_counter(s: $1_event_EventHandle'$1_stake_DistributeRewardsEvent', x: int): $1_event_EventHandle'$1_stake_DistributeRewardsEvent' {
    $1_event_EventHandle'$1_stake_DistributeRewardsEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_DistributeRewardsEvent''_guid(s: $1_event_EventHandle'$1_stake_DistributeRewardsEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_stake_DistributeRewardsEvent' {
    $1_event_EventHandle'$1_stake_DistributeRewardsEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_stake_DistributeRewardsEvent''(s: $1_event_EventHandle'$1_stake_DistributeRewardsEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_stake_DistributeRewardsEvent''(s1: $1_event_EventHandle'$1_stake_DistributeRewardsEvent', s2: $1_event_EventHandle'$1_stake_DistributeRewardsEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<stake::IncreaseLockupEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_stake_IncreaseLockupEvent' {
    $1_event_EventHandle'$1_stake_IncreaseLockupEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_IncreaseLockupEvent''_counter(s: $1_event_EventHandle'$1_stake_IncreaseLockupEvent', x: int): $1_event_EventHandle'$1_stake_IncreaseLockupEvent' {
    $1_event_EventHandle'$1_stake_IncreaseLockupEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_IncreaseLockupEvent''_guid(s: $1_event_EventHandle'$1_stake_IncreaseLockupEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_stake_IncreaseLockupEvent' {
    $1_event_EventHandle'$1_stake_IncreaseLockupEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_stake_IncreaseLockupEvent''(s: $1_event_EventHandle'$1_stake_IncreaseLockupEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_stake_IncreaseLockupEvent''(s1: $1_event_EventHandle'$1_stake_IncreaseLockupEvent', s2: $1_event_EventHandle'$1_stake_IncreaseLockupEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<stake::JoinValidatorSetEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_stake_JoinValidatorSetEvent' {
    $1_event_EventHandle'$1_stake_JoinValidatorSetEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_JoinValidatorSetEvent''_counter(s: $1_event_EventHandle'$1_stake_JoinValidatorSetEvent', x: int): $1_event_EventHandle'$1_stake_JoinValidatorSetEvent' {
    $1_event_EventHandle'$1_stake_JoinValidatorSetEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_JoinValidatorSetEvent''_guid(s: $1_event_EventHandle'$1_stake_JoinValidatorSetEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_stake_JoinValidatorSetEvent' {
    $1_event_EventHandle'$1_stake_JoinValidatorSetEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_stake_JoinValidatorSetEvent''(s: $1_event_EventHandle'$1_stake_JoinValidatorSetEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_stake_JoinValidatorSetEvent''(s1: $1_event_EventHandle'$1_stake_JoinValidatorSetEvent', s2: $1_event_EventHandle'$1_stake_JoinValidatorSetEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<stake::LeaveValidatorSetEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_stake_LeaveValidatorSetEvent' {
    $1_event_EventHandle'$1_stake_LeaveValidatorSetEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_LeaveValidatorSetEvent''_counter(s: $1_event_EventHandle'$1_stake_LeaveValidatorSetEvent', x: int): $1_event_EventHandle'$1_stake_LeaveValidatorSetEvent' {
    $1_event_EventHandle'$1_stake_LeaveValidatorSetEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_LeaveValidatorSetEvent''_guid(s: $1_event_EventHandle'$1_stake_LeaveValidatorSetEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_stake_LeaveValidatorSetEvent' {
    $1_event_EventHandle'$1_stake_LeaveValidatorSetEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_stake_LeaveValidatorSetEvent''(s: $1_event_EventHandle'$1_stake_LeaveValidatorSetEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_stake_LeaveValidatorSetEvent''(s1: $1_event_EventHandle'$1_stake_LeaveValidatorSetEvent', s2: $1_event_EventHandle'$1_stake_LeaveValidatorSetEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<stake::ReactivateStakeEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_stake_ReactivateStakeEvent' {
    $1_event_EventHandle'$1_stake_ReactivateStakeEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_ReactivateStakeEvent''_counter(s: $1_event_EventHandle'$1_stake_ReactivateStakeEvent', x: int): $1_event_EventHandle'$1_stake_ReactivateStakeEvent' {
    $1_event_EventHandle'$1_stake_ReactivateStakeEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_ReactivateStakeEvent''_guid(s: $1_event_EventHandle'$1_stake_ReactivateStakeEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_stake_ReactivateStakeEvent' {
    $1_event_EventHandle'$1_stake_ReactivateStakeEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_stake_ReactivateStakeEvent''(s: $1_event_EventHandle'$1_stake_ReactivateStakeEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_stake_ReactivateStakeEvent''(s1: $1_event_EventHandle'$1_stake_ReactivateStakeEvent', s2: $1_event_EventHandle'$1_stake_ReactivateStakeEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<stake::RegisterValidatorCandidateEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent' {
    $1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent''_counter(s: $1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent', x: int): $1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent' {
    $1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent''_guid(s: $1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent' {
    $1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent''(s: $1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent''(s1: $1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent', s2: $1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<stake::RotateConsensusKeyEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_stake_RotateConsensusKeyEvent' {
    $1_event_EventHandle'$1_stake_RotateConsensusKeyEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_RotateConsensusKeyEvent''_counter(s: $1_event_EventHandle'$1_stake_RotateConsensusKeyEvent', x: int): $1_event_EventHandle'$1_stake_RotateConsensusKeyEvent' {
    $1_event_EventHandle'$1_stake_RotateConsensusKeyEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_RotateConsensusKeyEvent''_guid(s: $1_event_EventHandle'$1_stake_RotateConsensusKeyEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_stake_RotateConsensusKeyEvent' {
    $1_event_EventHandle'$1_stake_RotateConsensusKeyEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_stake_RotateConsensusKeyEvent''(s: $1_event_EventHandle'$1_stake_RotateConsensusKeyEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_stake_RotateConsensusKeyEvent''(s1: $1_event_EventHandle'$1_stake_RotateConsensusKeyEvent', s2: $1_event_EventHandle'$1_stake_RotateConsensusKeyEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<stake::SetOperatorEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_stake_SetOperatorEvent' {
    $1_event_EventHandle'$1_stake_SetOperatorEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_SetOperatorEvent''_counter(s: $1_event_EventHandle'$1_stake_SetOperatorEvent', x: int): $1_event_EventHandle'$1_stake_SetOperatorEvent' {
    $1_event_EventHandle'$1_stake_SetOperatorEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_SetOperatorEvent''_guid(s: $1_event_EventHandle'$1_stake_SetOperatorEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_stake_SetOperatorEvent' {
    $1_event_EventHandle'$1_stake_SetOperatorEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_stake_SetOperatorEvent''(s: $1_event_EventHandle'$1_stake_SetOperatorEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_stake_SetOperatorEvent''(s1: $1_event_EventHandle'$1_stake_SetOperatorEvent', s2: $1_event_EventHandle'$1_stake_SetOperatorEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<stake::UnlockStakeEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_stake_UnlockStakeEvent' {
    $1_event_EventHandle'$1_stake_UnlockStakeEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_UnlockStakeEvent''_counter(s: $1_event_EventHandle'$1_stake_UnlockStakeEvent', x: int): $1_event_EventHandle'$1_stake_UnlockStakeEvent' {
    $1_event_EventHandle'$1_stake_UnlockStakeEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_UnlockStakeEvent''_guid(s: $1_event_EventHandle'$1_stake_UnlockStakeEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_stake_UnlockStakeEvent' {
    $1_event_EventHandle'$1_stake_UnlockStakeEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_stake_UnlockStakeEvent''(s: $1_event_EventHandle'$1_stake_UnlockStakeEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_stake_UnlockStakeEvent''(s1: $1_event_EventHandle'$1_stake_UnlockStakeEvent', s2: $1_event_EventHandle'$1_stake_UnlockStakeEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<stake::UpdateNetworkAndFullnodeAddressesEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent' {
    $1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent''_counter(s: $1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent', x: int): $1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent' {
    $1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent''_guid(s: $1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent' {
    $1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent''(s: $1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent''(s1: $1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent', s2: $1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<stake::WithdrawStakeEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_stake_WithdrawStakeEvent' {
    $1_event_EventHandle'$1_stake_WithdrawStakeEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_WithdrawStakeEvent''_counter(s: $1_event_EventHandle'$1_stake_WithdrawStakeEvent', x: int): $1_event_EventHandle'$1_stake_WithdrawStakeEvent' {
    $1_event_EventHandle'$1_stake_WithdrawStakeEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_stake_WithdrawStakeEvent''_guid(s: $1_event_EventHandle'$1_stake_WithdrawStakeEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_stake_WithdrawStakeEvent' {
    $1_event_EventHandle'$1_stake_WithdrawStakeEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_stake_WithdrawStakeEvent''(s: $1_event_EventHandle'$1_stake_WithdrawStakeEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_stake_WithdrawStakeEvent''(s1: $1_event_EventHandle'$1_stake_WithdrawStakeEvent', s2: $1_event_EventHandle'$1_stake_WithdrawStakeEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<reconfiguration::NewEpochEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_reconfiguration_NewEpochEvent' {
    $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''_counter(s: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent', x: int): $1_event_EventHandle'$1_reconfiguration_NewEpochEvent' {
    $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''_guid(s: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_reconfiguration_NewEpochEvent' {
    $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(s: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(s1: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent', s2: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<staking_contract::AddStakeEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_staking_contract_AddStakeEvent' {
    $1_event_EventHandle'$1_staking_contract_AddStakeEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_AddStakeEvent''_counter(s: $1_event_EventHandle'$1_staking_contract_AddStakeEvent', x: int): $1_event_EventHandle'$1_staking_contract_AddStakeEvent' {
    $1_event_EventHandle'$1_staking_contract_AddStakeEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_AddStakeEvent''_guid(s: $1_event_EventHandle'$1_staking_contract_AddStakeEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_staking_contract_AddStakeEvent' {
    $1_event_EventHandle'$1_staking_contract_AddStakeEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_staking_contract_AddStakeEvent''(s: $1_event_EventHandle'$1_staking_contract_AddStakeEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_staking_contract_AddStakeEvent''(s1: $1_event_EventHandle'$1_staking_contract_AddStakeEvent', s2: $1_event_EventHandle'$1_staking_contract_AddStakeEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<staking_contract::UnlockStakeEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_staking_contract_UnlockStakeEvent' {
    $1_event_EventHandle'$1_staking_contract_UnlockStakeEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_UnlockStakeEvent''_counter(s: $1_event_EventHandle'$1_staking_contract_UnlockStakeEvent', x: int): $1_event_EventHandle'$1_staking_contract_UnlockStakeEvent' {
    $1_event_EventHandle'$1_staking_contract_UnlockStakeEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_UnlockStakeEvent''_guid(s: $1_event_EventHandle'$1_staking_contract_UnlockStakeEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_staking_contract_UnlockStakeEvent' {
    $1_event_EventHandle'$1_staking_contract_UnlockStakeEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_staking_contract_UnlockStakeEvent''(s: $1_event_EventHandle'$1_staking_contract_UnlockStakeEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_staking_contract_UnlockStakeEvent''(s1: $1_event_EventHandle'$1_staking_contract_UnlockStakeEvent', s2: $1_event_EventHandle'$1_staking_contract_UnlockStakeEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<staking_contract::AddDistributionEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_staking_contract_AddDistributionEvent' {
    $1_event_EventHandle'$1_staking_contract_AddDistributionEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''_counter(s: $1_event_EventHandle'$1_staking_contract_AddDistributionEvent', x: int): $1_event_EventHandle'$1_staking_contract_AddDistributionEvent' {
    $1_event_EventHandle'$1_staking_contract_AddDistributionEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''_guid(s: $1_event_EventHandle'$1_staking_contract_AddDistributionEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_staking_contract_AddDistributionEvent' {
    $1_event_EventHandle'$1_staking_contract_AddDistributionEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''(s: $1_event_EventHandle'$1_staking_contract_AddDistributionEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''(s1: $1_event_EventHandle'$1_staking_contract_AddDistributionEvent', s2: $1_event_EventHandle'$1_staking_contract_AddDistributionEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<staking_contract::CreateStakingContractEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent' {
    $1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent''_counter(s: $1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent', x: int): $1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent' {
    $1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent''_guid(s: $1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent' {
    $1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent''(s: $1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent''(s1: $1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent', s2: $1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<staking_contract::DistributeEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_staking_contract_DistributeEvent' {
    $1_event_EventHandle'$1_staking_contract_DistributeEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_DistributeEvent''_counter(s: $1_event_EventHandle'$1_staking_contract_DistributeEvent', x: int): $1_event_EventHandle'$1_staking_contract_DistributeEvent' {
    $1_event_EventHandle'$1_staking_contract_DistributeEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_DistributeEvent''_guid(s: $1_event_EventHandle'$1_staking_contract_DistributeEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_staking_contract_DistributeEvent' {
    $1_event_EventHandle'$1_staking_contract_DistributeEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_staking_contract_DistributeEvent''(s: $1_event_EventHandle'$1_staking_contract_DistributeEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_staking_contract_DistributeEvent''(s1: $1_event_EventHandle'$1_staking_contract_DistributeEvent', s2: $1_event_EventHandle'$1_staking_contract_DistributeEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<staking_contract::RequestCommissionEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_staking_contract_RequestCommissionEvent' {
    $1_event_EventHandle'$1_staking_contract_RequestCommissionEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''_counter(s: $1_event_EventHandle'$1_staking_contract_RequestCommissionEvent', x: int): $1_event_EventHandle'$1_staking_contract_RequestCommissionEvent' {
    $1_event_EventHandle'$1_staking_contract_RequestCommissionEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''_guid(s: $1_event_EventHandle'$1_staking_contract_RequestCommissionEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_staking_contract_RequestCommissionEvent' {
    $1_event_EventHandle'$1_staking_contract_RequestCommissionEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''(s: $1_event_EventHandle'$1_staking_contract_RequestCommissionEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''(s1: $1_event_EventHandle'$1_staking_contract_RequestCommissionEvent', s2: $1_event_EventHandle'$1_staking_contract_RequestCommissionEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<staking_contract::ResetLockupEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_staking_contract_ResetLockupEvent' {
    $1_event_EventHandle'$1_staking_contract_ResetLockupEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_ResetLockupEvent''_counter(s: $1_event_EventHandle'$1_staking_contract_ResetLockupEvent', x: int): $1_event_EventHandle'$1_staking_contract_ResetLockupEvent' {
    $1_event_EventHandle'$1_staking_contract_ResetLockupEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_ResetLockupEvent''_guid(s: $1_event_EventHandle'$1_staking_contract_ResetLockupEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_staking_contract_ResetLockupEvent' {
    $1_event_EventHandle'$1_staking_contract_ResetLockupEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_staking_contract_ResetLockupEvent''(s: $1_event_EventHandle'$1_staking_contract_ResetLockupEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_staking_contract_ResetLockupEvent''(s1: $1_event_EventHandle'$1_staking_contract_ResetLockupEvent', s2: $1_event_EventHandle'$1_staking_contract_ResetLockupEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<staking_contract::SwitchOperatorEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent' {
    $1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent''_counter(s: $1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent', x: int): $1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent' {
    $1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent''_guid(s: $1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent' {
    $1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent''(s: $1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent''(s1: $1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent', s2: $1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<staking_contract::UpdateVoterEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_staking_contract_UpdateVoterEvent' {
    $1_event_EventHandle'$1_staking_contract_UpdateVoterEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_UpdateVoterEvent''_counter(s: $1_event_EventHandle'$1_staking_contract_UpdateVoterEvent', x: int): $1_event_EventHandle'$1_staking_contract_UpdateVoterEvent' {
    $1_event_EventHandle'$1_staking_contract_UpdateVoterEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_staking_contract_UpdateVoterEvent''_guid(s: $1_event_EventHandle'$1_staking_contract_UpdateVoterEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_staking_contract_UpdateVoterEvent' {
    $1_event_EventHandle'$1_staking_contract_UpdateVoterEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_staking_contract_UpdateVoterEvent''(s: $1_event_EventHandle'$1_staking_contract_UpdateVoterEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_staking_contract_UpdateVoterEvent''(s1: $1_event_EventHandle'$1_staking_contract_UpdateVoterEvent', s2: $1_event_EventHandle'$1_staking_contract_UpdateVoterEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<vesting::DistributeEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_vesting_DistributeEvent' {
    $1_event_EventHandle'$1_vesting_DistributeEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_DistributeEvent''_counter(s: $1_event_EventHandle'$1_vesting_DistributeEvent', x: int): $1_event_EventHandle'$1_vesting_DistributeEvent' {
    $1_event_EventHandle'$1_vesting_DistributeEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_DistributeEvent''_guid(s: $1_event_EventHandle'$1_vesting_DistributeEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_vesting_DistributeEvent' {
    $1_event_EventHandle'$1_vesting_DistributeEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_vesting_DistributeEvent''(s: $1_event_EventHandle'$1_vesting_DistributeEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_vesting_DistributeEvent''(s1: $1_event_EventHandle'$1_vesting_DistributeEvent', s2: $1_event_EventHandle'$1_vesting_DistributeEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<vesting::ResetLockupEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_vesting_ResetLockupEvent' {
    $1_event_EventHandle'$1_vesting_ResetLockupEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_ResetLockupEvent''_counter(s: $1_event_EventHandle'$1_vesting_ResetLockupEvent', x: int): $1_event_EventHandle'$1_vesting_ResetLockupEvent' {
    $1_event_EventHandle'$1_vesting_ResetLockupEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_ResetLockupEvent''_guid(s: $1_event_EventHandle'$1_vesting_ResetLockupEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_vesting_ResetLockupEvent' {
    $1_event_EventHandle'$1_vesting_ResetLockupEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_vesting_ResetLockupEvent''(s: $1_event_EventHandle'$1_vesting_ResetLockupEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_vesting_ResetLockupEvent''(s1: $1_event_EventHandle'$1_vesting_ResetLockupEvent', s2: $1_event_EventHandle'$1_vesting_ResetLockupEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<vesting::UpdateVoterEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_vesting_UpdateVoterEvent' {
    $1_event_EventHandle'$1_vesting_UpdateVoterEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_UpdateVoterEvent''_counter(s: $1_event_EventHandle'$1_vesting_UpdateVoterEvent', x: int): $1_event_EventHandle'$1_vesting_UpdateVoterEvent' {
    $1_event_EventHandle'$1_vesting_UpdateVoterEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_UpdateVoterEvent''_guid(s: $1_event_EventHandle'$1_vesting_UpdateVoterEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_vesting_UpdateVoterEvent' {
    $1_event_EventHandle'$1_vesting_UpdateVoterEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_vesting_UpdateVoterEvent''(s: $1_event_EventHandle'$1_vesting_UpdateVoterEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_vesting_UpdateVoterEvent''(s1: $1_event_EventHandle'$1_vesting_UpdateVoterEvent', s2: $1_event_EventHandle'$1_vesting_UpdateVoterEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<vesting::AdminWithdrawEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_vesting_AdminWithdrawEvent' {
    $1_event_EventHandle'$1_vesting_AdminWithdrawEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_AdminWithdrawEvent''_counter(s: $1_event_EventHandle'$1_vesting_AdminWithdrawEvent', x: int): $1_event_EventHandle'$1_vesting_AdminWithdrawEvent' {
    $1_event_EventHandle'$1_vesting_AdminWithdrawEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_AdminWithdrawEvent''_guid(s: $1_event_EventHandle'$1_vesting_AdminWithdrawEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_vesting_AdminWithdrawEvent' {
    $1_event_EventHandle'$1_vesting_AdminWithdrawEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_vesting_AdminWithdrawEvent''(s: $1_event_EventHandle'$1_vesting_AdminWithdrawEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_vesting_AdminWithdrawEvent''(s1: $1_event_EventHandle'$1_vesting_AdminWithdrawEvent', s2: $1_event_EventHandle'$1_vesting_AdminWithdrawEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<vesting::CreateVestingContractEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_vesting_CreateVestingContractEvent' {
    $1_event_EventHandle'$1_vesting_CreateVestingContractEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_CreateVestingContractEvent''_counter(s: $1_event_EventHandle'$1_vesting_CreateVestingContractEvent', x: int): $1_event_EventHandle'$1_vesting_CreateVestingContractEvent' {
    $1_event_EventHandle'$1_vesting_CreateVestingContractEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_CreateVestingContractEvent''_guid(s: $1_event_EventHandle'$1_vesting_CreateVestingContractEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_vesting_CreateVestingContractEvent' {
    $1_event_EventHandle'$1_vesting_CreateVestingContractEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_vesting_CreateVestingContractEvent''(s: $1_event_EventHandle'$1_vesting_CreateVestingContractEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_vesting_CreateVestingContractEvent''(s1: $1_event_EventHandle'$1_vesting_CreateVestingContractEvent', s2: $1_event_EventHandle'$1_vesting_CreateVestingContractEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<vesting::SetBeneficiaryEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_vesting_SetBeneficiaryEvent' {
    $1_event_EventHandle'$1_vesting_SetBeneficiaryEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_SetBeneficiaryEvent''_counter(s: $1_event_EventHandle'$1_vesting_SetBeneficiaryEvent', x: int): $1_event_EventHandle'$1_vesting_SetBeneficiaryEvent' {
    $1_event_EventHandle'$1_vesting_SetBeneficiaryEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_SetBeneficiaryEvent''_guid(s: $1_event_EventHandle'$1_vesting_SetBeneficiaryEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_vesting_SetBeneficiaryEvent' {
    $1_event_EventHandle'$1_vesting_SetBeneficiaryEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_vesting_SetBeneficiaryEvent''(s: $1_event_EventHandle'$1_vesting_SetBeneficiaryEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_vesting_SetBeneficiaryEvent''(s1: $1_event_EventHandle'$1_vesting_SetBeneficiaryEvent', s2: $1_event_EventHandle'$1_vesting_SetBeneficiaryEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<vesting::TerminateEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_vesting_TerminateEvent' {
    $1_event_EventHandle'$1_vesting_TerminateEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_TerminateEvent''_counter(s: $1_event_EventHandle'$1_vesting_TerminateEvent', x: int): $1_event_EventHandle'$1_vesting_TerminateEvent' {
    $1_event_EventHandle'$1_vesting_TerminateEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_TerminateEvent''_guid(s: $1_event_EventHandle'$1_vesting_TerminateEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_vesting_TerminateEvent' {
    $1_event_EventHandle'$1_vesting_TerminateEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_vesting_TerminateEvent''(s: $1_event_EventHandle'$1_vesting_TerminateEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_vesting_TerminateEvent''(s1: $1_event_EventHandle'$1_vesting_TerminateEvent', s2: $1_event_EventHandle'$1_vesting_TerminateEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<vesting::UnlockRewardsEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_vesting_UnlockRewardsEvent' {
    $1_event_EventHandle'$1_vesting_UnlockRewardsEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_UnlockRewardsEvent''_counter(s: $1_event_EventHandle'$1_vesting_UnlockRewardsEvent', x: int): $1_event_EventHandle'$1_vesting_UnlockRewardsEvent' {
    $1_event_EventHandle'$1_vesting_UnlockRewardsEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_UnlockRewardsEvent''_guid(s: $1_event_EventHandle'$1_vesting_UnlockRewardsEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_vesting_UnlockRewardsEvent' {
    $1_event_EventHandle'$1_vesting_UnlockRewardsEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_vesting_UnlockRewardsEvent''(s: $1_event_EventHandle'$1_vesting_UnlockRewardsEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_vesting_UnlockRewardsEvent''(s1: $1_event_EventHandle'$1_vesting_UnlockRewardsEvent', s2: $1_event_EventHandle'$1_vesting_UnlockRewardsEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<vesting::UpdateOperatorEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_vesting_UpdateOperatorEvent' {
    $1_event_EventHandle'$1_vesting_UpdateOperatorEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_UpdateOperatorEvent''_counter(s: $1_event_EventHandle'$1_vesting_UpdateOperatorEvent', x: int): $1_event_EventHandle'$1_vesting_UpdateOperatorEvent' {
    $1_event_EventHandle'$1_vesting_UpdateOperatorEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_UpdateOperatorEvent''_guid(s: $1_event_EventHandle'$1_vesting_UpdateOperatorEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_vesting_UpdateOperatorEvent' {
    $1_event_EventHandle'$1_vesting_UpdateOperatorEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_vesting_UpdateOperatorEvent''(s: $1_event_EventHandle'$1_vesting_UpdateOperatorEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_vesting_UpdateOperatorEvent''(s1: $1_event_EventHandle'$1_vesting_UpdateOperatorEvent', s2: $1_event_EventHandle'$1_vesting_UpdateOperatorEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<vesting::VestEvent> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:39:5+224
datatype $1_event_EventHandle'$1_vesting_VestEvent' {
    $1_event_EventHandle'$1_vesting_VestEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_VestEvent''_counter(s: $1_event_EventHandle'$1_vesting_VestEvent', x: int): $1_event_EventHandle'$1_vesting_VestEvent' {
    $1_event_EventHandle'$1_vesting_VestEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_vesting_VestEvent''_guid(s: $1_event_EventHandle'$1_vesting_VestEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_vesting_VestEvent' {
    $1_event_EventHandle'$1_vesting_VestEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_vesting_VestEvent''(s: $1_event_EventHandle'$1_vesting_VestEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_vesting_VestEvent''(s1: $1_event_EventHandle'$1_vesting_VestEvent', s2: $1_event_EventHandle'$1_vesting_VestEvent'): bool {
    s1 == s2
}

// struct account::SignerCapability at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:50:5+60
datatype $1_account_SignerCapability {
    $1_account_SignerCapability($account: int)
}
function {:inline} $Update'$1_account_SignerCapability'_account(s: $1_account_SignerCapability, x: int): $1_account_SignerCapability {
    $1_account_SignerCapability(x)
}
function $IsValid'$1_account_SignerCapability'(s: $1_account_SignerCapability): bool {
    $IsValid'address'(s->$account)
}
function {:inline} $IsEqual'$1_account_SignerCapability'(s1: $1_account_SignerCapability, s2: $1_account_SignerCapability): bool {
    s1 == s2
}

// fun account::create_signer_with_capability [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:729:5+156
procedure {:inline 1} $1_account_create_signer_with_capability(_$t0: $1_account_SignerCapability) returns ($ret0: $signer)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: $signer;
    var $t0: $1_account_SignerCapability;
    var $temp_0'$1_account_SignerCapability': $1_account_SignerCapability;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t1, select account::SignerCapability.account($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.spec.move:481:9+30
    assume {:print "$at(82,23214,23244)"} true;
    assume ($t1 == $t0->$account);

    // trace_local[capability]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:729:5+1
    assume {:print "$at(81,40826,40827)"} true;
    assume {:print "$track_local(18,8,0):", $t0} $t0 == $t0;

    // $t2 := get_field<account::SignerCapability>.account($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:730:20+19
    assume {:print "$at(81,40927,40946)"} true;
    $t2 := $t0->$account;

    // $t3 := opaque begin: create_signer::create_signer($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:731:9+20
    assume {:print "$at(81,40956,40976)"} true;

    // assume WellFormed($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:731:9+20
    assume $IsValid'signer'($t3) && $1_signer_is_txn_signer($t3) && $1_signer_is_txn_signer_addr($t3->$addr);

    // assume Eq<address>(signer::$address_of($t3), $t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:731:9+20
    assume $IsEqual'address'($1_signer_$address_of($t3), $t2);

    // $t3 := opaque end: create_signer::create_signer($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:731:9+20

    // trace_return[0]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:731:9+20
    assume {:print "$track_return(18,8,0):", $t3} $t3 == $t3;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:732:5+1
    assume {:print "$at(81,40981,40982)"} true;
L1:

    // return $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.move:732:5+1
    assume {:print "$at(81,40981,40982)"} true;
    $ret0 := $t3;
    return;

}

// struct optional_aggregator::Integer at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:20:5+74
datatype $1_optional_aggregator_Integer {
    $1_optional_aggregator_Integer($value: int, $limit: int)
}
function {:inline} $Update'$1_optional_aggregator_Integer'_value(s: $1_optional_aggregator_Integer, x: int): $1_optional_aggregator_Integer {
    $1_optional_aggregator_Integer(x, s->$limit)
}
function {:inline} $Update'$1_optional_aggregator_Integer'_limit(s: $1_optional_aggregator_Integer, x: int): $1_optional_aggregator_Integer {
    $1_optional_aggregator_Integer(s->$value, x)
}
function $IsValid'$1_optional_aggregator_Integer'(s: $1_optional_aggregator_Integer): bool {
    $IsValid'u128'(s->$value)
      && $IsValid'u128'(s->$limit)
}
function {:inline} $IsEqual'$1_optional_aggregator_Integer'(s1: $1_optional_aggregator_Integer, s2: $1_optional_aggregator_Integer): bool {
    s1 == s2
}

// struct optional_aggregator::OptionalAggregator at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:64:5+175
datatype $1_optional_aggregator_OptionalAggregator {
    $1_optional_aggregator_OptionalAggregator($aggregator: $1_option_Option'$1_aggregator_Aggregator', $integer: $1_option_Option'$1_optional_aggregator_Integer')
}
function {:inline} $Update'$1_optional_aggregator_OptionalAggregator'_aggregator(s: $1_optional_aggregator_OptionalAggregator, x: $1_option_Option'$1_aggregator_Aggregator'): $1_optional_aggregator_OptionalAggregator {
    $1_optional_aggregator_OptionalAggregator(x, s->$integer)
}
function {:inline} $Update'$1_optional_aggregator_OptionalAggregator'_integer(s: $1_optional_aggregator_OptionalAggregator, x: $1_option_Option'$1_optional_aggregator_Integer'): $1_optional_aggregator_OptionalAggregator {
    $1_optional_aggregator_OptionalAggregator(s->$aggregator, x)
}
function $IsValid'$1_optional_aggregator_OptionalAggregator'(s: $1_optional_aggregator_OptionalAggregator): bool {
    $IsValid'$1_option_Option'$1_aggregator_Aggregator''(s->$aggregator)
      && $IsValid'$1_option_Option'$1_optional_aggregator_Integer''(s->$integer)
}
function {:inline} $IsEqual'$1_optional_aggregator_OptionalAggregator'(s1: $1_optional_aggregator_OptionalAggregator, s2: $1_optional_aggregator_OptionalAggregator): bool {
    $IsEqual'$1_option_Option'$1_aggregator_Aggregator''(s1->$aggregator, s2->$aggregator)
    && $IsEqual'$1_option_Option'$1_optional_aggregator_Integer''(s1->$integer, s2->$integer)}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:593:5+81
function {:inline} $1_coin_$value'$1_aptos_coin_AptosCoin'(coin: $1_coin_Coin'$1_aptos_coin_AptosCoin'): int {
    coin->$value
}

// struct coin::Coin<aptos_coin::AptosCoin> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:74:5+112
datatype $1_coin_Coin'$1_aptos_coin_AptosCoin' {
    $1_coin_Coin'$1_aptos_coin_AptosCoin'($value: int)
}
function {:inline} $Update'$1_coin_Coin'$1_aptos_coin_AptosCoin''_value(s: $1_coin_Coin'$1_aptos_coin_AptosCoin', x: int): $1_coin_Coin'$1_aptos_coin_AptosCoin' {
    $1_coin_Coin'$1_aptos_coin_AptosCoin'(x)
}
function $IsValid'$1_coin_Coin'$1_aptos_coin_AptosCoin''(s: $1_coin_Coin'$1_aptos_coin_AptosCoin'): bool {
    $IsValid'u64'(s->$value)
}
function {:inline} $IsEqual'$1_coin_Coin'$1_aptos_coin_AptosCoin''(s1: $1_coin_Coin'$1_aptos_coin_AptosCoin', s2: $1_coin_Coin'$1_aptos_coin_AptosCoin'): bool {
    s1 == s2
}

// struct coin::CoinInfo<aptos_coin::AptosCoin> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:109:5+564
datatype $1_coin_CoinInfo'$1_aptos_coin_AptosCoin' {
    $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'($name: $1_string_String, $symbol: $1_string_String, $decimals: int, $supply: $1_option_Option'$1_optional_aggregator_OptionalAggregator')
}
function {:inline} $Update'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''_name(s: $1_coin_CoinInfo'$1_aptos_coin_AptosCoin', x: $1_string_String): $1_coin_CoinInfo'$1_aptos_coin_AptosCoin' {
    $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'(x, s->$symbol, s->$decimals, s->$supply)
}
function {:inline} $Update'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''_symbol(s: $1_coin_CoinInfo'$1_aptos_coin_AptosCoin', x: $1_string_String): $1_coin_CoinInfo'$1_aptos_coin_AptosCoin' {
    $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'(s->$name, x, s->$decimals, s->$supply)
}
function {:inline} $Update'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''_decimals(s: $1_coin_CoinInfo'$1_aptos_coin_AptosCoin', x: int): $1_coin_CoinInfo'$1_aptos_coin_AptosCoin' {
    $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'(s->$name, s->$symbol, x, s->$supply)
}
function {:inline} $Update'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''_supply(s: $1_coin_CoinInfo'$1_aptos_coin_AptosCoin', x: $1_option_Option'$1_optional_aggregator_OptionalAggregator'): $1_coin_CoinInfo'$1_aptos_coin_AptosCoin' {
    $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'(s->$name, s->$symbol, s->$decimals, x)
}
function $IsValid'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''(s: $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'): bool {
    $IsValid'$1_string_String'(s->$name)
      && $IsValid'$1_string_String'(s->$symbol)
      && $IsValid'u8'(s->$decimals)
      && $IsValid'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(s->$supply)
}
function {:inline} $IsEqual'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''(s1: $1_coin_CoinInfo'$1_aptos_coin_AptosCoin', s2: $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'): bool {
    $IsEqual'$1_string_String'(s1->$name, s2->$name)
    && $IsEqual'$1_string_String'(s1->$symbol, s2->$symbol)
    && $IsEqual'u8'(s1->$decimals, s2->$decimals)
    && $IsEqual'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(s1->$supply, s2->$supply)}
var $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory: $Memory $1_coin_CoinInfo'$1_aptos_coin_AptosCoin';

// struct coin::CoinStore<aptos_coin::AptosCoin> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:92:5+206
datatype $1_coin_CoinStore'$1_aptos_coin_AptosCoin' {
    $1_coin_CoinStore'$1_aptos_coin_AptosCoin'($coin: $1_coin_Coin'$1_aptos_coin_AptosCoin', $frozen: bool, $deposit_events: $1_event_EventHandle'$1_coin_DepositEvent', $withdraw_events: $1_event_EventHandle'$1_coin_WithdrawEvent')
}
function {:inline} $Update'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''_coin(s: $1_coin_CoinStore'$1_aptos_coin_AptosCoin', x: $1_coin_Coin'$1_aptos_coin_AptosCoin'): $1_coin_CoinStore'$1_aptos_coin_AptosCoin' {
    $1_coin_CoinStore'$1_aptos_coin_AptosCoin'(x, s->$frozen, s->$deposit_events, s->$withdraw_events)
}
function {:inline} $Update'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''_frozen(s: $1_coin_CoinStore'$1_aptos_coin_AptosCoin', x: bool): $1_coin_CoinStore'$1_aptos_coin_AptosCoin' {
    $1_coin_CoinStore'$1_aptos_coin_AptosCoin'(s->$coin, x, s->$deposit_events, s->$withdraw_events)
}
function {:inline} $Update'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''_deposit_events(s: $1_coin_CoinStore'$1_aptos_coin_AptosCoin', x: $1_event_EventHandle'$1_coin_DepositEvent'): $1_coin_CoinStore'$1_aptos_coin_AptosCoin' {
    $1_coin_CoinStore'$1_aptos_coin_AptosCoin'(s->$coin, s->$frozen, x, s->$withdraw_events)
}
function {:inline} $Update'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''_withdraw_events(s: $1_coin_CoinStore'$1_aptos_coin_AptosCoin', x: $1_event_EventHandle'$1_coin_WithdrawEvent'): $1_coin_CoinStore'$1_aptos_coin_AptosCoin' {
    $1_coin_CoinStore'$1_aptos_coin_AptosCoin'(s->$coin, s->$frozen, s->$deposit_events, x)
}
function $IsValid'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''(s: $1_coin_CoinStore'$1_aptos_coin_AptosCoin'): bool {
    $IsValid'$1_coin_Coin'$1_aptos_coin_AptosCoin''(s->$coin)
      && $IsValid'bool'(s->$frozen)
      && $IsValid'$1_event_EventHandle'$1_coin_DepositEvent''(s->$deposit_events)
      && $IsValid'$1_event_EventHandle'$1_coin_WithdrawEvent''(s->$withdraw_events)
}
function {:inline} $IsEqual'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''(s1: $1_coin_CoinStore'$1_aptos_coin_AptosCoin', s2: $1_coin_CoinStore'$1_aptos_coin_AptosCoin'): bool {
    s1 == s2
}
var $1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory: $Memory $1_coin_CoinStore'$1_aptos_coin_AptosCoin';

// struct coin::DepositEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:123:5+64
datatype $1_coin_DepositEvent {
    $1_coin_DepositEvent($amount: int)
}
function {:inline} $Update'$1_coin_DepositEvent'_amount(s: $1_coin_DepositEvent, x: int): $1_coin_DepositEvent {
    $1_coin_DepositEvent(x)
}
function $IsValid'$1_coin_DepositEvent'(s: $1_coin_DepositEvent): bool {
    $IsValid'u64'(s->$amount)
}
function {:inline} $IsEqual'$1_coin_DepositEvent'(s1: $1_coin_DepositEvent, s2: $1_coin_DepositEvent): bool {
    s1 == s2
}

// struct coin::WithdrawEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:128:5+65
datatype $1_coin_WithdrawEvent {
    $1_coin_WithdrawEvent($amount: int)
}
function {:inline} $Update'$1_coin_WithdrawEvent'_amount(s: $1_coin_WithdrawEvent, x: int): $1_coin_WithdrawEvent {
    $1_coin_WithdrawEvent(x)
}
function $IsValid'$1_coin_WithdrawEvent'(s: $1_coin_WithdrawEvent): bool {
    $IsValid'u64'(s->$amount)
}
function {:inline} $IsEqual'$1_coin_WithdrawEvent'(s1: $1_coin_WithdrawEvent, s2: $1_coin_WithdrawEvent): bool {
    s1 == s2
}

// struct coin::Ghost$supply<aptos_coin::AptosCoin> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:4:9+29
datatype $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin' {
    $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'($v: int)
}
function {:inline} $Update'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''_v(s: $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin', x: int): $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin' {
    $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'(x)
}
function $IsValid'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''(s: $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'): bool {
    $IsValid'num'(s->$v)
}
function {:inline} $IsEqual'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''(s1: $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin', s2: $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'): bool {
    s1 == s2
}
var $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory: $Memory $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin';

// struct coin::Ghost$aggregate_supply<aptos_coin::AptosCoin> at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:5:9+39
datatype $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin' {
    $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'($v: int)
}
function {:inline} $Update'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''_v(s: $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin', x: int): $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin' {
    $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'(x)
}
function $IsValid'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''(s: $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'): bool {
    $IsValid'num'(s->$v)
}
function {:inline} $IsEqual'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''(s1: $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin', s2: $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'): bool {
    s1 == s2
}
var $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory: $Memory $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin';

// fun coin::extract<aptos_coin::AptosCoin> [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:393:5+434
procedure {:inline 1} $1_coin_extract'$1_aptos_coin_AptosCoin'(_$t0: $Mutation ($1_coin_Coin'$1_aptos_coin_AptosCoin'), _$t1: int) returns ($ret0: $1_coin_Coin'$1_aptos_coin_AptosCoin', $ret1: $Mutation ($1_coin_Coin'$1_aptos_coin_AptosCoin'))
{
    // declare local variables
    var $t2: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin';
    var $t9: int;
    var $t10: $Mutation ($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin');
    var $t11: int;
    var $t12: int;
    var $t13: $Mutation (int);
    var $t14: $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin';
    var $t15: int;
    var $t16: $Mutation ($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin');
    var $t17: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $t0: $Mutation ($1_coin_Coin'$1_aptos_coin_AptosCoin');
    var $t1: int;
    var $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'': $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t2, select coin::CoinInfo.supply(global<coin::CoinInfo<#0>>(select type_info::TypeInfo.account_address(type_info::$type_of<#0>())))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:32:9+99
    assume {:print "$at(105,1664,1763)"} true;
    assume ($t2 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply);

    // trace_local[coin]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:393:5+1
    assume {:print "$at(104,14869,14870)"} true;
    $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'' := $Dereference($t0);
    assume {:print "$track_local(23,13,0):", $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin''} $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'' == $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'';

    // trace_local[amount]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:393:5+1
    assume {:print "$track_local(23,13,1):", $t1} $t1 == $t1;

    // $t3 := get_field<coin::Coin<#0>>.value($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:394:17+10
    assume {:print "$at(104,14972,14982)"} true;
    $t3 := $Dereference($t0)->$value;

    // $t4 := >=($t3, $t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:394:28+2
    call $t4 := $Ge($t3, $t1);

    // if ($t4) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:394:9+77
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:394:9+77
L1:

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:394:9+77
    assume {:print "$at(104,14964,15041)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:394:9+77
L0:

    // destroy($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:394:9+77
    assume {:print "$at(104,14964,15041)"} true;

    // $t5 := 6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:394:63+21
    $t5 := 6;
    assume $IsValid'u64'($t5);

    // $t6 := error::invalid_argument($t5) on_abort goto L4 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:394:39+46
    call $t6 := $1_error_invalid_argument($t5);
    if ($abort_flag) {
        assume {:print "$at(104,14994,15040)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(23,13):", $t7} $t7 == $t7;
        goto L4;
    }

    // trace_abort($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:394:9+77
    assume {:print "$at(104,14964,15041)"} true;
    assume {:print "$track_abort(23,13):", $t6} $t6 == $t6;

    // $t7 := move($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:394:9+77
    $t7 := $t6;

    // goto L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:394:9+77
    goto L4;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:395:9+81
    assume {:print "$at(104,15051,15132)"} true;
L2:

    // assume Identical($t8, pack coin::Ghost$supply<#0>(Sub(select coin::Ghost$supply.v<#0>(global<coin::Ghost$supply<#0>>(0x0)), $t1))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:396:13+52
    assume {:print "$at(104,15070,15122)"} true;
    assume ($t8 == $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'(($ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, 0)->$v - $t1)));

    // assume Identical($t9, 0x0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:396:13+52
    assume ($t9 == 0);

    // $t10 := borrow_global<coin::Ghost$supply<#0>>($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:396:13+52
    if (!$ResourceExists($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $t9)) {
        call $ExecFailureAbort();
    } else {
        $t10 := $Mutation($Global($t9), EmptyVec(), $ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $t9));
    }

    // write_ref($t10, $t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:396:13+52
    $t10 := $UpdateMutation($t10, $t8);

    // write_back[coin::Ghost$supply<#0>@]($t10) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:396:13+52
    $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory := $ResourceUpdate($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $GlobalLocationAddress($t10),
        $Dereference($t10));

    // $t11 := get_field<coin::Coin<#0>>.value($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:398:22+10
    assume {:print "$at(104,15155,15165)"} true;
    $t11 := $Dereference($t0)->$value;

    // $t12 := -($t11, $t1) on_abort goto L4 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:398:33+1
    call $t12 := $Sub($t11, $t1);
    if ($abort_flag) {
        assume {:print "$at(104,15166,15167)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(23,13):", $t7} $t7 == $t7;
        goto L4;
    }

    // $t13 := borrow_field<coin::Coin<#0>>.value($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:398:9+10
    $t13 := $ChildMutation($t0, 0, $Dereference($t0)->$value);

    // write_ref($t13, $t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:398:9+32
    $t13 := $UpdateMutation($t13, $t12);

    // write_back[Reference($t0).value (u64)]($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:398:9+32
    $t0 := $UpdateMutation($t0, $Update'$1_coin_Coin'$1_aptos_coin_AptosCoin''_value($Dereference($t0), $Dereference($t13)));

    // trace_local[coin]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:398:9+32
    $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'' := $Dereference($t0);
    assume {:print "$track_local(23,13,0):", $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin''} $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'' == $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'';

    // assume Identical($t14, pack coin::Ghost$supply<#0>(Add(select coin::Ghost$supply.v<#0>(global<coin::Ghost$supply<#0>>(0x0)), $t1))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:400:13+52
    assume {:print "$at(104,15203,15255)"} true;
    assume ($t14 == $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'(($ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, 0)->$v + $t1)));

    // assume Identical($t15, 0x0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:400:13+52
    assume ($t15 == 0);

    // $t16 := borrow_global<coin::Ghost$supply<#0>>($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:400:13+52
    if (!$ResourceExists($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $t15)) {
        call $ExecFailureAbort();
    } else {
        $t16 := $Mutation($Global($t15), EmptyVec(), $ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $t15));
    }

    // write_ref($t16, $t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:400:13+52
    $t16 := $UpdateMutation($t16, $t14);

    // write_back[coin::Ghost$supply<#0>@]($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:400:13+52
    $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory := $ResourceUpdate($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $GlobalLocationAddress($t16),
        $Dereference($t16));

    // $t17 := pack coin::Coin<#0>($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:402:9+22
    assume {:print "$at(104,15275,15297)"} true;
    $t17 := $1_coin_Coin'$1_aptos_coin_AptosCoin'($t1);

    // trace_return[0]($t17) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:402:9+22
    assume {:print "$track_return(23,13,0):", $t17} $t17 == $t17;

    // trace_local[coin]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:402:9+22
    $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'' := $Dereference($t0);
    assume {:print "$track_local(23,13,0):", $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin''} $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'' == $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'';

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:403:5+1
    assume {:print "$at(104,15302,15303)"} true;
L3:

    // return $t17 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:403:5+1
    assume {:print "$at(104,15302,15303)"} true;
    $ret0 := $t17;
    $ret1 := $t0;
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:403:5+1
L4:

    // abort($t7) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:403:5+1
    assume {:print "$at(104,15302,15303)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun coin::value<aptos_coin::AptosCoin> [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:593:5+81
procedure {:inline 1} $1_coin_value'$1_aptos_coin_AptosCoin'(_$t0: $1_coin_Coin'$1_aptos_coin_AptosCoin') returns ($ret0: int)
{
    // declare local variables
    var $t1: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t2: int;
    var $t0: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'': $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t1, select coin::CoinInfo.supply(global<coin::CoinInfo<#0>>(select type_info::TypeInfo.account_address(type_info::$type_of<#0>())))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:32:9+99
    assume {:print "$at(105,1664,1763)"} true;
    assume ($t1 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply);

    // trace_local[coin]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:593:5+1
    assume {:print "$at(104,22576,22577)"} true;
    assume {:print "$track_local(23,36,0):", $t0} $t0 == $t0;

    // $t2 := get_field<coin::Coin<#0>>.value($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:594:9+10
    assume {:print "$at(104,22641,22651)"} true;
    $t2 := $t0->$value;

    // trace_return[0]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:594:9+10
    assume {:print "$track_return(23,36,0):", $t2} $t2 == $t2;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:595:5+1
    assume {:print "$at(104,22656,22657)"} true;
L1:

    // return $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:595:5+1
    assume {:print "$at(104,22656,22657)"} true;
    $ret0 := $t2;
    return;

}

// fun coin::deposit<aptos_coin::AptosCoin> [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:348:5+621
procedure {:inline 1} $1_coin_deposit'$1_aptos_coin_AptosCoin'(_$t0: int, _$t1: $1_coin_Coin'$1_aptos_coin_AptosCoin') returns ()
{
    // declare local variables
    var $t2: $Mutation ($1_coin_CoinStore'$1_aptos_coin_AptosCoin');
    var $t3: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t4: $1_coin_CoinStore'$1_aptos_coin_AptosCoin';
    var $t5: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: $Mutation ($1_coin_CoinStore'$1_aptos_coin_AptosCoin');
    var $t11: bool;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: $Mutation ($1_event_EventHandle'$1_coin_DepositEvent');
    var $t16: int;
    var $t17: $1_coin_DepositEvent;
    var $t18: $Mutation ($1_coin_Coin'$1_aptos_coin_AptosCoin');
    var $t19: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t0: int;
    var $t1: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$modifies: [int]bool;
    var $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'': $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $temp_0'$1_coin_CoinStore'$1_aptos_coin_AptosCoin'': $1_coin_CoinStore'$1_aptos_coin_AptosCoin';
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t3, select coin::CoinInfo.supply(global<coin::CoinInfo<#0>>(select type_info::TypeInfo.account_address(type_info::$type_of<#0>())))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:32:9+99
    assume {:print "$at(105,1664,1763)"} true;
    assume ($t3 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply);

    // assume Identical($t4, global<coin::CoinStore<#0>>($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:197:9+59
    assume {:print "$at(105,8484,8543)"} true;
    assume ($t4 == $ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $t0));

    // trace_local[account_addr]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:348:5+1
    assume {:print "$at(104,13036,13037)"} true;
    assume {:print "$track_local(23,7,0):", $t0} $t0 == $t0;

    // trace_local[coin]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:348:5+1
    assume {:print "$track_local(23,7,1):", $t1} $t1 == $t1;

    // assume Identical($t5, select coin::CoinInfo.supply(global<coin::CoinInfo<#0>>(select type_info::TypeInfo.account_address(type_info::$type_of<#0>())))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:32:9+99
    assume {:print "$at(105,1664,1763)"} true;
    assume ($t5 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply);

    // $t6 := coin::is_account_registered<#0>($t0) on_abort goto L7 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:350:13+45
    assume {:print "$at(104,13160,13205)"} true;
    call $t6 := $1_coin_is_account_registered'$1_aptos_coin_AptosCoin'($t0);
    if ($abort_flag) {
        assume {:print "$at(104,13160,13205)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(23,7):", $t7} $t7 == $t7;
        goto L7;
    }

    // if ($t6) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:349:9+134
    assume {:print "$at(104,13139,13273)"} true;
    if ($t6) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:349:9+134
L1:

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:349:9+134
    assume {:print "$at(104,13139,13273)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:351:30+25
    assume {:print "$at(104,13236,13261)"} true;
L0:

    // $t8 := 5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:351:30+25
    assume {:print "$at(104,13236,13261)"} true;
    $t8 := 5;
    assume $IsValid'u64'($t8);

    // $t9 := error::not_found($t8) on_abort goto L7 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:351:13+43
    call $t9 := $1_error_not_found($t8);
    if ($abort_flag) {
        assume {:print "$at(104,13219,13262)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(23,7):", $t7} $t7 == $t7;
        goto L7;
    }

    // trace_abort($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:349:9+134
    assume {:print "$at(104,13139,13273)"} true;
    assume {:print "$track_abort(23,7):", $t9} $t9 == $t9;

    // $t7 := move($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:349:9+134
    $t7 := $t9;

    // goto L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:349:9+134
    goto L7;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:354:65+12
    assume {:print "$at(104,13340,13352)"} true;
L2:

    // $t10 := borrow_global<coin::CoinStore<#0>>($t0) on_abort goto L7 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:354:26+17
    assume {:print "$at(104,13301,13318)"} true;
    if (!$ResourceExists($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t10 := $Mutation($Global($t0), EmptyVec(), $ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $t0));
    }
    if ($abort_flag) {
        assume {:print "$at(104,13301,13318)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(23,7):", $t7} $t7 == $t7;
        goto L7;
    }

    // trace_local[coin_store]($t10) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:354:13+10
    $temp_0'$1_coin_CoinStore'$1_aptos_coin_AptosCoin'' := $Dereference($t10);
    assume {:print "$track_local(23,7,2):", $temp_0'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''} $temp_0'$1_coin_CoinStore'$1_aptos_coin_AptosCoin'' == $temp_0'$1_coin_CoinStore'$1_aptos_coin_AptosCoin'';

    // $t11 := get_field<coin::CoinStore<#0>>.frozen($t10) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:356:14+17
    assume {:print "$at(104,13385,13402)"} true;
    $t11 := $Dereference($t10)->$frozen;

    // $t12 := !($t11) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:356:13+1
    call $t12 := $Not($t11);

    // if ($t12) goto L4 else goto L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:355:9+97
    assume {:print "$at(104,13363,13460)"} true;
    if ($t12) { goto L4; } else { goto L3; }

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:355:9+97
L4:

    // goto L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:355:9+97
    assume {:print "$at(104,13363,13460)"} true;
    goto L5;

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:355:9+97
L3:

    // destroy($t10) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:355:9+97
    assume {:print "$at(104,13363,13460)"} true;

    // $t13 := 10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:357:38+7
    assume {:print "$at(104,13441,13448)"} true;
    $t13 := 10;
    assume $IsValid'u64'($t13);

    // $t14 := error::permission_denied($t13) on_abort goto L7 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:357:13+33
    call $t14 := $1_error_permission_denied($t13);
    if ($abort_flag) {
        assume {:print "$at(104,13416,13449)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(23,7):", $t7} $t7 == $t7;
        goto L7;
    }

    // trace_abort($t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:355:9+97
    assume {:print "$at(104,13363,13460)"} true;
    assume {:print "$track_abort(23,7):", $t14} $t14 == $t14;

    // $t7 := move($t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:355:9+97
    $t7 := $t14;

    // goto L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:355:9+97
    goto L7;

    // label L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:361:18+10
    assume {:print "$at(104,13521,13531)"} true;
L5:

    // $t15 := borrow_field<coin::CoinStore<#0>>.deposit_events($t10) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:361:13+30
    assume {:print "$at(104,13516,13546)"} true;
    $t15 := $ChildMutation($t10, 2, $Dereference($t10)->$deposit_events);

    // $t16 := get_field<coin::Coin<#0>>.value($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:362:36+10
    assume {:print "$at(104,13583,13593)"} true;
    $t16 := $t1->$value;

    // $t17 := pack coin::DepositEvent($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:362:13+35
    $t17 := $1_coin_DepositEvent($t16);

    // opaque begin: event::emit_event<coin::DepositEvent>($t15, $t17) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:360:9+135
    assume {:print "$at(104,13471,13606)"} true;

    // opaque end: event::emit_event<coin::DepositEvent>($t15, $t17) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:360:9+135

    // write_back[Reference($t10).deposit_events (event::EventHandle<coin::DepositEvent>)]($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:360:9+135
    $t10 := $UpdateMutation($t10, $Update'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''_deposit_events($Dereference($t10), $Dereference($t15)));

    // $t18 := borrow_field<coin::CoinStore<#0>>.coin($t10) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:365:15+20
    assume {:print "$at(104,13623,13643)"} true;
    $t18 := $ChildMutation($t10, 0, $Dereference($t10)->$coin);

    // assume Identical($t19, select coin::CoinInfo.supply(global<coin::CoinInfo<#0>>(select type_info::TypeInfo.account_address(type_info::$type_of<#0>())))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:32:9+99
    assume {:print "$at(105,1664,1763)"} true;
    assume ($t19 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply);

    // coin::merge<#0>($t18, $t1) on_abort goto L7 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:365:9+33
    assume {:print "$at(104,13617,13650)"} true;
    call $t18 := $1_coin_merge'$1_aptos_coin_AptosCoin'($t18, $t1);
    if ($abort_flag) {
        assume {:print "$at(104,13617,13650)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(23,7):", $t7} $t7 == $t7;
        goto L7;
    }

    // write_back[Reference($t10).coin (coin::Coin<#0>)]($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:365:9+33
    $t10 := $UpdateMutation($t10, $Update'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''_coin($Dereference($t10), $Dereference($t18)));

    // write_back[coin::CoinStore<#0>@]($t10) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:365:9+33
    $1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory := $ResourceUpdate($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $GlobalLocationAddress($t10),
        $Dereference($t10));

    // label L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:366:5+1
    assume {:print "$at(104,13656,13657)"} true;
L6:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:366:5+1
    assume {:print "$at(104,13656,13657)"} true;
    return;

    // label L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:366:5+1
L7:

    // abort($t7) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:366:5+1
    assume {:print "$at(104,13656,13657)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun coin::destroy_zero<aptos_coin::AptosCoin> [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:384:5+292
procedure {:inline 1} $1_coin_destroy_zero'$1_aptos_coin_AptosCoin'(_$t0: $1_coin_Coin'$1_aptos_coin_AptosCoin') returns ()
{
    // declare local variables
    var $t1: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t2: $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin';
    var $t3: int;
    var $t4: $Mutation ($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin');
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t0: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'': $1_coin_Coin'$1_aptos_coin_AptosCoin';
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t1, select coin::CoinInfo.supply(global<coin::CoinInfo<#0>>(select type_info::TypeInfo.account_address(type_info::$type_of<#0>())))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:32:9+99
    assume {:print "$at(105,1664,1763)"} true;
    assume ($t1 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply);

    // trace_local[zero_coin]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:384:5+1
    assume {:print "$at(104,14471,14472)"} true;
    assume {:print "$track_local(23,11,0):", $t0} $t0 == $t0;

    // assume Identical($t2, pack coin::Ghost$supply<#0>(Sub(select coin::Ghost$supply.v<#0>(global<coin::Ghost$supply<#0>>(0x0)), select coin::Coin.value($t0)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:386:13+61
    assume {:print "$at(104,14561,14622)"} true;
    assume ($t2 == $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'(($ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, 0)->$v - $t0->$value)));

    // assume Identical($t3, 0x0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:386:13+61
    assume ($t3 == 0);

    // $t4 := borrow_global<coin::Ghost$supply<#0>>($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:386:13+61
    if (!$ResourceExists($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $t3)) {
        call $ExecFailureAbort();
    } else {
        $t4 := $Mutation($Global($t3), EmptyVec(), $ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $t3));
    }

    // write_ref($t4, $t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:386:13+61
    $t4 := $UpdateMutation($t4, $t2);

    // write_back[coin::Ghost$supply<#0>@]($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:386:13+61
    $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory := $ResourceUpdate($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $GlobalLocationAddress($t4),
        $Dereference($t4));

    // $t5 := unpack coin::Coin<#0>($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:388:13+14
    assume {:print "$at(104,14646,14660)"} true;
    $t5 := $t0->$value;

    // $t6 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:389:26+1
    assume {:print "$at(104,14699,14700)"} true;
    $t6 := 0;
    assume $IsValid'u64'($t6);

    // $t7 := ==($t5, $t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:389:23+2
    $t7 := $IsEqual'u64'($t5, $t6);

    // if ($t7) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:389:9+75
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:389:9+75
L1:

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:389:9+75
    assume {:print "$at(104,14682,14757)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:389:53+29
L0:

    // $t8 := 7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:389:53+29
    assume {:print "$at(104,14726,14755)"} true;
    $t8 := 7;
    assume $IsValid'u64'($t8);

    // $t9 := error::invalid_argument($t8) on_abort goto L4 with $t10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:389:29+54
    call $t9 := $1_error_invalid_argument($t8);
    if ($abort_flag) {
        assume {:print "$at(104,14702,14756)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(23,11):", $t10} $t10 == $t10;
        goto L4;
    }

    // trace_abort($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:389:9+75
    assume {:print "$at(104,14682,14757)"} true;
    assume {:print "$track_abort(23,11):", $t9} $t9 == $t9;

    // $t10 := move($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:389:9+75
    $t10 := $t9;

    // goto L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:389:9+75
    goto L4;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:389:9+75
L2:

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:390:5+1
    assume {:print "$at(104,14762,14763)"} true;
L3:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:390:5+1
    assume {:print "$at(104,14762,14763)"} true;
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:390:5+1
L4:

    // abort($t10) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:390:5+1
    assume {:print "$at(104,14762,14763)"} true;
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun coin::extract_all<aptos_coin::AptosCoin> [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:406:5+372
procedure {:inline 1} $1_coin_extract_all'$1_aptos_coin_AptosCoin'(_$t0: $Mutation ($1_coin_Coin'$1_aptos_coin_AptosCoin')) returns ($ret0: $1_coin_Coin'$1_aptos_coin_AptosCoin', $ret1: $Mutation ($1_coin_Coin'$1_aptos_coin_AptosCoin'))
{
    // declare local variables
    var $t1: int;
    var $t2: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t3: int;
    var $t4: $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin';
    var $t5: int;
    var $t6: $Mutation ($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin');
    var $t7: int;
    var $t8: $Mutation (int);
    var $t9: $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin';
    var $t10: int;
    var $t11: $Mutation ($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin');
    var $t12: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $t0: $Mutation ($1_coin_Coin'$1_aptos_coin_AptosCoin');
    var $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'': $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t2, select coin::CoinInfo.supply(global<coin::CoinInfo<#0>>(select type_info::TypeInfo.account_address(type_info::$type_of<#0>())))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:32:9+99
    assume {:print "$at(105,1664,1763)"} true;
    assume ($t2 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply);

    // trace_local[coin]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:406:5+1
    assume {:print "$at(104,15418,15419)"} true;
    $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'' := $Dereference($t0);
    assume {:print "$track_local(23,14,0):", $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin''} $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'' == $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'';

    // $t3 := get_field<coin::Coin<#0>>.value($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:407:27+10
    assume {:print "$at(104,15522,15532)"} true;
    $t3 := $Dereference($t0)->$value;

    // trace_local[total_value]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:407:13+11
    assume {:print "$track_local(23,14,1):", $t3} $t3 == $t3;

    // assume Identical($t4, pack coin::Ghost$supply<#0>(Sub(select coin::Ghost$supply.v<#0>(global<coin::Ghost$supply<#0>>(0x0)), select coin::Coin.value($t0)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:409:13+56
    assume {:print "$at(104,15561,15617)"} true;
    assume ($t4 == $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'(($ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, 0)->$v - $Dereference($t0)->$value)));

    // assume Identical($t5, 0x0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:409:13+56
    assume ($t5 == 0);

    // $t6 := borrow_global<coin::Ghost$supply<#0>>($t5) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:409:13+56
    if (!$ResourceExists($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $t5)) {
        call $ExecFailureAbort();
    } else {
        $t6 := $Mutation($Global($t5), EmptyVec(), $ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $t5));
    }

    // write_ref($t6, $t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:409:13+56
    $t6 := $UpdateMutation($t6, $t4);

    // write_back[coin::Ghost$supply<#0>@]($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:409:13+56
    $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory := $ResourceUpdate($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $GlobalLocationAddress($t6),
        $Dereference($t6));

    // $t7 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:411:22+1
    assume {:print "$at(104,15650,15651)"} true;
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // $t8 := borrow_field<coin::Coin<#0>>.value($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:411:9+10
    $t8 := $ChildMutation($t0, 0, $Dereference($t0)->$value);

    // write_ref($t8, $t7) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:411:9+14
    $t8 := $UpdateMutation($t8, $t7);

    // write_back[Reference($t0).value (u64)]($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:411:9+14
    $t0 := $UpdateMutation($t0, $Update'$1_coin_Coin'$1_aptos_coin_AptosCoin''_value($Dereference($t0), $Dereference($t8)));

    // trace_local[coin]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:411:9+14
    $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'' := $Dereference($t0);
    assume {:print "$track_local(23,14,0):", $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin''} $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'' == $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'';

    // assume Identical($t9, pack coin::Ghost$supply<#0>(Add(select coin::Ghost$supply.v<#0>(global<coin::Ghost$supply<#0>>(0x0)), $t3))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:413:13+57
    assume {:print "$at(104,15680,15737)"} true;
    assume ($t9 == $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'(($ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, 0)->$v + $t3)));

    // assume Identical($t10, 0x0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:413:13+57
    assume ($t10 == 0);

    // $t11 := borrow_global<coin::Ghost$supply<#0>>($t10) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:413:13+57
    if (!$ResourceExists($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $t10)) {
        call $ExecFailureAbort();
    } else {
        $t11 := $Mutation($Global($t10), EmptyVec(), $ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $t10));
    }

    // write_ref($t11, $t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:413:13+57
    $t11 := $UpdateMutation($t11, $t9);

    // write_back[coin::Ghost$supply<#0>@]($t11) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:413:13+57
    $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory := $ResourceUpdate($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $GlobalLocationAddress($t11),
        $Dereference($t11));

    // $t12 := pack coin::Coin<#0>($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:415:9+27
    assume {:print "$at(104,15757,15784)"} true;
    $t12 := $1_coin_Coin'$1_aptos_coin_AptosCoin'($t3);

    // trace_return[0]($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:415:9+27
    assume {:print "$track_return(23,14,0):", $t12} $t12 == $t12;

    // trace_local[coin]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:415:9+27
    $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'' := $Dereference($t0);
    assume {:print "$track_local(23,14,0):", $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin''} $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'' == $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'';

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:416:5+1
    assume {:print "$at(104,15789,15790)"} true;
L1:

    // return $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:416:5+1
    assume {:print "$at(104,15789,15790)"} true;
    $ret0 := $t12;
    $ret1 := $t0;
    return;

}

// fun coin::is_account_registered<aptos_coin::AptosCoin> [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:266:5+129
procedure {:inline 1} $1_coin_is_account_registered'$1_aptos_coin_AptosCoin'(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t2: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t1, select coin::CoinInfo.supply(global<coin::CoinInfo<#0>>(select type_info::TypeInfo.account_address(type_info::$type_of<#0>())))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:32:9+99
    assume {:print "$at(105,1664,1763)"} true;
    assume ($t1 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply);

    // trace_local[account_addr]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:266:5+1
    assume {:print "$at(104,9762,9763)"} true;
    assume {:print "$track_local(23,22,0):", $t0} $t0 == $t0;

    // $t2 := exists<coin::CoinStore<#0>>($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:267:9+6
    assume {:print "$at(104,9844,9850)"} true;
    $t2 := $ResourceExists($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $t0);

    // trace_return[0]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:267:9+41
    assume {:print "$track_return(23,22,0):", $t2} $t2 == $t2;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:268:5+1
    assume {:print "$at(104,9890,9891)"} true;
L1:

    // return $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:268:5+1
    assume {:print "$at(104,9890,9891)"} true;
    $ret0 := $t2;
    return;

}

// fun coin::merge<aptos_coin::AptosCoin> [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:527:5+469
procedure {:inline 1} $1_coin_merge'$1_aptos_coin_AptosCoin'(_$t0: $Mutation ($1_coin_Coin'$1_aptos_coin_AptosCoin'), _$t1: $1_coin_Coin'$1_aptos_coin_AptosCoin') returns ($ret0: $Mutation ($1_coin_Coin'$1_aptos_coin_AptosCoin'))
{
    // declare local variables
    var $t2: int;
    var $t3: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t4: $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin';
    var $t5: int;
    var $t6: $Mutation ($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin');
    var $t7: int;
    var $t8: $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin';
    var $t9: int;
    var $t10: $Mutation ($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin');
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: $Mutation (int);
    var $t0: $Mutation ($1_coin_Coin'$1_aptos_coin_AptosCoin');
    var $t1: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'': $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t3, select coin::CoinInfo.supply(global<coin::CoinInfo<#0>>(select type_info::TypeInfo.account_address(type_info::$type_of<#0>())))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:32:9+99
    assume {:print "$at(105,1664,1763)"} true;
    assume ($t3 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply);

    // trace_local[dst_coin]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:527:5+1
    assume {:print "$at(104,20263,20264)"} true;
    $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'' := $Dereference($t0);
    assume {:print "$track_local(23,26,0):", $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin''} $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'' == $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'';

    // trace_local[source_coin]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:527:5+1
    assume {:print "$track_local(23,26,1):", $t1} $t1 == $t1;

    // assume Le(Add(select coin::Coin.value($t0), select coin::Coin.value($t1)), 18446744073709551615) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:529:13+53
    assume {:print "$at(104,20379,20432)"} true;
    assume (($Dereference($t0)->$value + $t1->$value) <= 18446744073709551615);

    // assume Identical($t4, pack coin::Ghost$supply<#0>(Sub(select coin::Ghost$supply.v<#0>(global<coin::Ghost$supply<#0>>(0x0)), select coin::Coin.value($t1)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:532:13+63
    assume {:print "$at(104,20471,20534)"} true;
    assume ($t4 == $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'(($ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, 0)->$v - $t1->$value)));

    // assume Identical($t5, 0x0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:532:13+63
    assume ($t5 == 0);

    // $t6 := borrow_global<coin::Ghost$supply<#0>>($t5) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:532:13+63
    if (!$ResourceExists($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $t5)) {
        call $ExecFailureAbort();
    } else {
        $t6 := $Mutation($Global($t5), EmptyVec(), $ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $t5));
    }

    // write_ref($t6, $t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:532:13+63
    $t6 := $UpdateMutation($t6, $t4);

    // write_back[coin::Ghost$supply<#0>@]($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:532:13+63
    $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory := $ResourceUpdate($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $GlobalLocationAddress($t6),
        $Dereference($t6));

    // $t7 := unpack coin::Coin<#0>($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:534:13+14
    assume {:print "$at(104,20558,20572)"} true;
    $t7 := $t1->$value;

    // trace_local[value]($t7) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:534:20+5
    assume {:print "$track_local(23,26,2):", $t7} $t7 == $t7;

    // assume Identical($t8, pack coin::Ghost$supply<#0>(Add(select coin::Ghost$supply.v<#0>(global<coin::Ghost$supply<#0>>(0x0)), $t7))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:536:13+51
    assume {:print "$at(104,20615,20666)"} true;
    assume ($t8 == $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'(($ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, 0)->$v + $t7)));

    // assume Identical($t9, 0x0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:536:13+51
    assume ($t9 == 0);

    // $t10 := borrow_global<coin::Ghost$supply<#0>>($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:536:13+51
    if (!$ResourceExists($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $t9)) {
        call $ExecFailureAbort();
    } else {
        $t10 := $Mutation($Global($t9), EmptyVec(), $ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $t9));
    }

    // write_ref($t10, $t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:536:13+51
    $t10 := $UpdateMutation($t10, $t8);

    // write_back[coin::Ghost$supply<#0>@]($t10) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:536:13+51
    $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory := $ResourceUpdate($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $GlobalLocationAddress($t10),
        $Dereference($t10));

    // $t11 := get_field<coin::Coin<#0>>.value($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:538:26+14
    assume {:print "$at(104,20703,20717)"} true;
    $t11 := $Dereference($t0)->$value;

    // $t12 := +($t11, $t7) on_abort goto L2 with $t13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:538:41+1
    call $t12 := $AddU64($t11, $t7);
    if ($abort_flag) {
        assume {:print "$at(104,20718,20719)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(23,26):", $t13} $t13 == $t13;
        goto L2;
    }

    // $t14 := borrow_field<coin::Coin<#0>>.value($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:538:9+14
    $t14 := $ChildMutation($t0, 0, $Dereference($t0)->$value);

    // write_ref($t14, $t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:538:9+39
    $t14 := $UpdateMutation($t14, $t12);

    // write_back[Reference($t0).value (u64)]($t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:538:9+39
    $t0 := $UpdateMutation($t0, $Update'$1_coin_Coin'$1_aptos_coin_AptosCoin''_value($Dereference($t0), $Dereference($t14)));

    // trace_local[dst_coin]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:538:9+39
    $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'' := $Dereference($t0);
    assume {:print "$track_local(23,26,0):", $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin''} $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'' == $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'';

    // trace_local[dst_coin]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:538:48+1
    $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'' := $Dereference($t0);
    assume {:print "$track_local(23,26,0):", $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin''} $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'' == $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'';

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:539:5+1
    assume {:print "$at(104,20731,20732)"} true;
L1:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:539:5+1
    assume {:print "$at(104,20731,20732)"} true;
    $ret0 := $t0;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:539:5+1
L2:

    // abort($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:539:5+1
    assume {:print "$at(104,20731,20732)"} true;
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// fun coin::zero<aptos_coin::AptosCoin> [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:623:5+193
procedure {:inline 1} $1_coin_zero'$1_aptos_coin_AptosCoin'() returns ($ret0: $1_coin_Coin'$1_aptos_coin_AptosCoin')
{
    // declare local variables
    var $t0: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t1: $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin';
    var $t2: int;
    var $t3: $Mutation ($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin');
    var $t4: int;
    var $t5: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'': $1_coin_Coin'$1_aptos_coin_AptosCoin';

    // bytecode translation starts here
    // assume Identical($t0, select coin::CoinInfo.supply(global<coin::CoinInfo<#0>>(select type_info::TypeInfo.account_address(type_info::$type_of<#0>())))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:32:9+99
    assume {:print "$at(105,1664,1763)"} true;
    assume ($t0 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply);

    // assume Identical($t1, pack coin::Ghost$supply<#0>(Add(select coin::Ghost$supply.v<#0>(global<coin::Ghost$supply<#0>>(0x0)), 0))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:625:13+47
    assume {:print "$at(104,23578,23625)"} true;
    assume ($t1 == $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'(($ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, 0)->$v + 0)));

    // assume Identical($t2, 0x0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:625:13+47
    assume ($t2 == 0);

    // $t3 := borrow_global<coin::Ghost$supply<#0>>($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:625:13+47
    if (!$ResourceExists($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $t2)) {
        call $ExecFailureAbort();
    } else {
        $t3 := $Mutation($Global($t2), EmptyVec(), $ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $t2));
    }

    // write_ref($t3, $t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:625:13+47
    $t3 := $UpdateMutation($t3, $t1);

    // write_back[coin::Ghost$supply<#0>@]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:625:13+47
    $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory := $ResourceUpdate($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $GlobalLocationAddress($t3),
        $Dereference($t3));

    // $t4 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:628:20+1
    assume {:print "$at(104,23681,23682)"} true;
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // $t5 := pack coin::Coin<#0>($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:627:9+47
    assume {:print "$at(104,23645,23692)"} true;
    $t5 := $1_coin_Coin'$1_aptos_coin_AptosCoin'($t4);

    // trace_return[0]($t5) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:627:9+47
    assume {:print "$track_return(23,38,0):", $t5} $t5 == $t5;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:630:5+1
    assume {:print "$at(104,23697,23698)"} true;
L1:

    // return $t5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:630:5+1
    assume {:print "$at(104,23697,23698)"} true;
    $ret0 := $t5;
    return;

}

// struct aptos_coin::AptosCoin at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_coin.move:22:5+27
datatype $1_aptos_coin_AptosCoin {
    $1_aptos_coin_AptosCoin($dummy_field: bool)
}
function {:inline} $Update'$1_aptos_coin_AptosCoin'_dummy_field(s: $1_aptos_coin_AptosCoin, x: bool): $1_aptos_coin_AptosCoin {
    $1_aptos_coin_AptosCoin(x)
}
function $IsValid'$1_aptos_coin_AptosCoin'(s: $1_aptos_coin_AptosCoin): bool {
    $IsValid'bool'(s->$dummy_field)
}
function {:inline} $IsEqual'$1_aptos_coin_AptosCoin'(s1: $1_aptos_coin_AptosCoin, s2: $1_aptos_coin_AptosCoin): bool {
    s1 == s2
}
var $1_aptos_coin_AptosCoin_$memory: $Memory $1_aptos_coin_AptosCoin;

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/chain_status.move:35:5+90
function {:inline} $1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory: $Memory $1_chain_status_GenesisEndMarker): bool {
    $ResourceExists($1_chain_status_GenesisEndMarker_$memory, 1)
}

// struct chain_status::GenesisEndMarker at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/chain_status.move:12:5+34
datatype $1_chain_status_GenesisEndMarker {
    $1_chain_status_GenesisEndMarker($dummy_field: bool)
}
function {:inline} $Update'$1_chain_status_GenesisEndMarker'_dummy_field(s: $1_chain_status_GenesisEndMarker, x: bool): $1_chain_status_GenesisEndMarker {
    $1_chain_status_GenesisEndMarker(x)
}
function $IsValid'$1_chain_status_GenesisEndMarker'(s: $1_chain_status_GenesisEndMarker): bool {
    $IsValid'bool'(s->$dummy_field)
}
function {:inline} $IsEqual'$1_chain_status_GenesisEndMarker'(s1: $1_chain_status_GenesisEndMarker, s2: $1_chain_status_GenesisEndMarker): bool {
    s1 == s2
}
var $1_chain_status_GenesisEndMarker_$memory: $Memory $1_chain_status_GenesisEndMarker;

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.spec.move:22:10+111
function {:inline} $1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory: $Memory $1_timestamp_CurrentTimeMicroseconds): int {
    $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, 1)->$microseconds
}

// struct timestamp::CurrentTimeMicroseconds at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:12:5+73
datatype $1_timestamp_CurrentTimeMicroseconds {
    $1_timestamp_CurrentTimeMicroseconds($microseconds: int)
}
function {:inline} $Update'$1_timestamp_CurrentTimeMicroseconds'_microseconds(s: $1_timestamp_CurrentTimeMicroseconds, x: int): $1_timestamp_CurrentTimeMicroseconds {
    $1_timestamp_CurrentTimeMicroseconds(x)
}
function $IsValid'$1_timestamp_CurrentTimeMicroseconds'(s: $1_timestamp_CurrentTimeMicroseconds): bool {
    $IsValid'u64'(s->$microseconds)
}
function {:inline} $IsEqual'$1_timestamp_CurrentTimeMicroseconds'(s1: $1_timestamp_CurrentTimeMicroseconds, s2: $1_timestamp_CurrentTimeMicroseconds): bool {
    s1 == s2
}
var $1_timestamp_CurrentTimeMicroseconds_$memory: $Memory $1_timestamp_CurrentTimeMicroseconds;

// fun timestamp::now_microseconds [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:61:5+153
procedure {:inline 1} $1_timestamp_now_microseconds() returns ($ret0: int)
{
    // declare local variables
    var $t0: int;
    var $t1: $1_timestamp_CurrentTimeMicroseconds;
    var $t2: int;
    var $t3: int;
    var $temp_0'u64': int;

    // bytecode translation starts here
    // $t0 := 0x1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:62:48+16
    assume {:print "$at(151,2511,2527)"} true;
    $t0 := 1;
    assume $IsValid'address'($t0);

    // $t1 := get_global<timestamp::CurrentTimeMicroseconds>($t0) on_abort goto L2 with $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:62:9+13
    if (!$ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t1 := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(151,2472,2485)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(28,0):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_field<timestamp::CurrentTimeMicroseconds>.microseconds($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:62:9+69
    $t3 := $t1->$microseconds;

    // trace_return[0]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:62:9+69
    assume {:print "$track_return(28,0,0):", $t3} $t3 == $t3;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:63:5+1
    assume {:print "$at(151,2546,2547)"} true;
L1:

    // return $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:63:5+1
    assume {:print "$at(151,2546,2547)"} true;
    $ret0 := $t3;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:63:5+1
L2:

    // abort($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:63:5+1
    assume {:print "$at(151,2546,2547)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun timestamp::now_seconds [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:67:5+123
procedure {:inline 1} $1_timestamp_now_seconds() returns ($ret0: int)
{
    // declare local variables
    var $t0: int;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $temp_0'u64': int;

    // bytecode translation starts here
    // $t0 := timestamp::now_microseconds() on_abort goto L2 with $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:68:9+18
    assume {:print "$at(151,2680,2698)"} true;
    call $t0 := $1_timestamp_now_microseconds();
    if ($abort_flag) {
        assume {:print "$at(151,2680,2698)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(28,1):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := 1000000 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:68:30+23
    $t2 := 1000000;
    assume $IsValid'u64'($t2);

    // $t3 := /($t0, $t2) on_abort goto L2 with $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:68:28+1
    call $t3 := $Div($t0, $t2);
    if ($abort_flag) {
        assume {:print "$at(151,2699,2700)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(28,1):", $t1} $t1 == $t1;
        goto L2;
    }

    // trace_return[0]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:68:9+44
    assume {:print "$track_return(28,1,0):", $t3} $t3 == $t3;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:69:5+1
    assume {:print "$at(151,2729,2730)"} true;
L1:

    // return $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:69:5+1
    assume {:print "$at(151,2729,2730)"} true;
    $ret0 := $t3;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:69:5+1
L2:

    // abort($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:69:5+1
    assume {:print "$at(151,2729,2730)"} true;
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// struct fixed_point32::FixedPoint32 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/fixed_point32.move:15:5+56
datatype $1_fixed_point32_FixedPoint32 {
    $1_fixed_point32_FixedPoint32($value: int)
}
function {:inline} $Update'$1_fixed_point32_FixedPoint32'_value(s: $1_fixed_point32_FixedPoint32, x: int): $1_fixed_point32_FixedPoint32 {
    $1_fixed_point32_FixedPoint32(x)
}
function $IsValid'$1_fixed_point32_FixedPoint32'(s: $1_fixed_point32_FixedPoint32): bool {
    $IsValid'u64'(s->$value)
}
function {:inline} $IsEqual'$1_fixed_point32_FixedPoint32'(s1: $1_fixed_point32_FixedPoint32, s2: $1_fixed_point32_FixedPoint32): bool {
    s1 == s2
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/math64.move:17:5+71
function {:inline} $1_math64_$min(a: int, b: int): int {
    (if ((a < b)) then (a) else (b))
}

// fun math64::min [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/math64.move:17:5+71
procedure {:inline 1} $1_math64_min(_$t0: int, _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: bool;
    var $t0: int;
    var $t1: int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[a]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/math64.move:17:5+1
    assume {:print "$at(63,467,468)"} true;
    assume {:print "$track_local(36,5,0):", $t0} $t0 == $t0;

    // trace_local[b]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/math64.move:17:5+1
    assume {:print "$track_local(36,5,1):", $t1} $t1 == $t1;

    // $t3 := <($t0, $t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/math64.move:18:15+1
    assume {:print "$at(63,519,520)"} true;
    call $t3 := $Lt($t0, $t1);

    // if ($t3) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/math64.move:18:9+19
    if ($t3) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/math64.move:18:20+1
L1:

    // $t2 := $t0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/math64.move:18:9+19
    assume {:print "$at(63,513,532)"} true;
    $t2 := $t0;

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/math64.move:18:9+19
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/math64.move:18:27+1
L0:

    // $t2 := $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/math64.move:18:9+19
    assume {:print "$at(63,513,532)"} true;
    $t2 := $t1;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/math64.move:18:9+19
L2:

    // trace_return[0]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/math64.move:18:9+19
    assume {:print "$at(63,513,532)"} true;
    assume {:print "$track_return(36,5,0):", $t2} $t2 == $t2;

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/math64.move:19:5+1
    assume {:print "$at(63,537,538)"} true;
L3:

    // return $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/math64.move:19:5+1
    assume {:print "$at(63,537,538)"} true;
    $ret0 := $t2;
    return;

}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:400:5+89
function {:inline} $1_stake_$stake_pool_exists($1_stake_StakePool_$memory: $Memory $1_stake_StakePool, addr: int): bool {
    $ResourceExists($1_stake_StakePool_$memory, addr)
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:16:10+500
function {:inline} $1_stake_validator_set_is_valid($1_stake_StakePool_$memory: $Memory $1_stake_StakePool, $1_stake_ValidatorConfig_$memory: $Memory $1_stake_ValidatorConfig, $1_stake_ValidatorPerformance_$memory: $Memory $1_stake_ValidatorPerformance, $1_stake_ValidatorSet_$memory: $Memory $1_stake_ValidatorSet): bool {
    (var validator_set := $ResourceValue($1_stake_ValidatorSet_$memory, 1); (((($1_stake_spec_validators_are_initialized($1_stake_StakePool_$memory, $1_stake_ValidatorConfig_$memory, validator_set->$active_validators) && $1_stake_spec_validators_are_initialized($1_stake_StakePool_$memory, $1_stake_ValidatorConfig_$memory, validator_set->$pending_inactive)) && $1_stake_spec_validators_are_initialized($1_stake_StakePool_$memory, $1_stake_ValidatorConfig_$memory, validator_set->$pending_active)) && $1_stake_spec_validator_indices_are_valid($1_stake_ValidatorConfig_$memory, $1_stake_ValidatorPerformance_$memory, validator_set->$active_validators)) && $1_stake_spec_validator_indices_are_valid($1_stake_ValidatorConfig_$memory, $1_stake_ValidatorPerformance_$memory, validator_set->$pending_inactive)))
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:306:10+241
function {:inline} $1_stake_spec_validators_are_initialized($1_stake_StakePool_$memory: $Memory $1_stake_StakePool, $1_stake_ValidatorConfig_$memory: $Memory $1_stake_ValidatorConfig, validators: Vec ($1_stake_ValidatorInfo)): bool {
    (var $range_0 := $Range(0, LenVec(validators)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (($1_stake_spec_has_stake_pool($1_stake_StakePool_$memory, ReadVec(validators, i)->$addr) && $1_stake_spec_has_validator_config($1_stake_ValidatorConfig_$memory, ReadVec(validators, i)->$addr))))))
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:313:10+234
function {:inline} $1_stake_spec_validator_indices_are_valid($1_stake_ValidatorConfig_$memory: $Memory $1_stake_ValidatorConfig, $1_stake_ValidatorPerformance_$memory: $Memory $1_stake_ValidatorPerformance, validators: Vec ($1_stake_ValidatorInfo)): bool {
    (var $range_2 := $Range(0, LenVec(validators)); (forall $i_3: int :: $InRange($range_2, $i_3) ==> (var i := $i_3;
    (($ResourceValue($1_stake_ValidatorConfig_$memory, ReadVec(validators, i)->$addr)->$validator_index < $1_stake_spec_validator_index_upper_bound($1_stake_ValidatorPerformance_$memory))))))
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:319:10+122
function {:inline} $1_stake_spec_validator_index_upper_bound($1_stake_ValidatorPerformance_$memory: $Memory $1_stake_ValidatorPerformance): int {
    LenVec($ResourceValue($1_stake_ValidatorPerformance_$memory, 1)->$validators)
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:323:10+78
function {:inline} $1_stake_spec_has_stake_pool($1_stake_StakePool_$memory: $Memory $1_stake_StakePool, a: int): bool {
    $ResourceExists($1_stake_StakePool_$memory, a)
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:327:10+90
function {:inline} $1_stake_spec_has_validator_config($1_stake_ValidatorConfig_$memory: $Memory $1_stake_ValidatorConfig, a: int): bool {
    $ResourceExists($1_stake_ValidatorConfig_$memory, a)
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:340:10+148
function {:inline} $1_stake_spec_contains(validators: Vec ($1_stake_ValidatorInfo), addr: int): bool {
    (var $range_4 := $Range(0, LenVec(validators)); (exists $i_5: int :: $InRange($range_4, $i_5) && (var i := $i_5;
    ($IsEqual'address'(ReadVec(validators, i)->$addr, addr)))))
}

// struct stake::AddStakeEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:210:5+102
datatype $1_stake_AddStakeEvent {
    $1_stake_AddStakeEvent($pool_address: int, $amount_added: int)
}
function {:inline} $Update'$1_stake_AddStakeEvent'_pool_address(s: $1_stake_AddStakeEvent, x: int): $1_stake_AddStakeEvent {
    $1_stake_AddStakeEvent(x, s->$amount_added)
}
function {:inline} $Update'$1_stake_AddStakeEvent'_amount_added(s: $1_stake_AddStakeEvent, x: int): $1_stake_AddStakeEvent {
    $1_stake_AddStakeEvent(s->$pool_address, x)
}
function $IsValid'$1_stake_AddStakeEvent'(s: $1_stake_AddStakeEvent): bool {
    $IsValid'address'(s->$pool_address)
      && $IsValid'u64'(s->$amount_added)
}
function {:inline} $IsEqual'$1_stake_AddStakeEvent'(s1: $1_stake_AddStakeEvent, s2: $1_stake_AddStakeEvent): bool {
    s1 == s2
}

// struct stake::DistributeRewardsEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:244:5+113
datatype $1_stake_DistributeRewardsEvent {
    $1_stake_DistributeRewardsEvent($pool_address: int, $rewards_amount: int)
}
function {:inline} $Update'$1_stake_DistributeRewardsEvent'_pool_address(s: $1_stake_DistributeRewardsEvent, x: int): $1_stake_DistributeRewardsEvent {
    $1_stake_DistributeRewardsEvent(x, s->$rewards_amount)
}
function {:inline} $Update'$1_stake_DistributeRewardsEvent'_rewards_amount(s: $1_stake_DistributeRewardsEvent, x: int): $1_stake_DistributeRewardsEvent {
    $1_stake_DistributeRewardsEvent(s->$pool_address, x)
}
function $IsValid'$1_stake_DistributeRewardsEvent'(s: $1_stake_DistributeRewardsEvent): bool {
    $IsValid'address'(s->$pool_address)
      && $IsValid'u64'(s->$rewards_amount)
}
function {:inline} $IsEqual'$1_stake_DistributeRewardsEvent'(s1: $1_stake_DistributeRewardsEvent, s2: $1_stake_DistributeRewardsEvent): bool {
    s1 == s2
}

// struct stake::IncreaseLockupEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:234:5+153
datatype $1_stake_IncreaseLockupEvent {
    $1_stake_IncreaseLockupEvent($pool_address: int, $old_locked_until_secs: int, $new_locked_until_secs: int)
}
function {:inline} $Update'$1_stake_IncreaseLockupEvent'_pool_address(s: $1_stake_IncreaseLockupEvent, x: int): $1_stake_IncreaseLockupEvent {
    $1_stake_IncreaseLockupEvent(x, s->$old_locked_until_secs, s->$new_locked_until_secs)
}
function {:inline} $Update'$1_stake_IncreaseLockupEvent'_old_locked_until_secs(s: $1_stake_IncreaseLockupEvent, x: int): $1_stake_IncreaseLockupEvent {
    $1_stake_IncreaseLockupEvent(s->$pool_address, x, s->$new_locked_until_secs)
}
function {:inline} $Update'$1_stake_IncreaseLockupEvent'_new_locked_until_secs(s: $1_stake_IncreaseLockupEvent, x: int): $1_stake_IncreaseLockupEvent {
    $1_stake_IncreaseLockupEvent(s->$pool_address, s->$old_locked_until_secs, x)
}
function $IsValid'$1_stake_IncreaseLockupEvent'(s: $1_stake_IncreaseLockupEvent): bool {
    $IsValid'address'(s->$pool_address)
      && $IsValid'u64'(s->$old_locked_until_secs)
      && $IsValid'u64'(s->$new_locked_until_secs)
}
function {:inline} $IsEqual'$1_stake_IncreaseLockupEvent'(s1: $1_stake_IncreaseLockupEvent, s2: $1_stake_IncreaseLockupEvent): bool {
    s1 == s2
}

// struct stake::IndividualValidatorPerformance at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:191:5+127
datatype $1_stake_IndividualValidatorPerformance {
    $1_stake_IndividualValidatorPerformance($successful_proposals: int, $failed_proposals: int)
}
function {:inline} $Update'$1_stake_IndividualValidatorPerformance'_successful_proposals(s: $1_stake_IndividualValidatorPerformance, x: int): $1_stake_IndividualValidatorPerformance {
    $1_stake_IndividualValidatorPerformance(x, s->$failed_proposals)
}
function {:inline} $Update'$1_stake_IndividualValidatorPerformance'_failed_proposals(s: $1_stake_IndividualValidatorPerformance, x: int): $1_stake_IndividualValidatorPerformance {
    $1_stake_IndividualValidatorPerformance(s->$successful_proposals, x)
}
function $IsValid'$1_stake_IndividualValidatorPerformance'(s: $1_stake_IndividualValidatorPerformance): bool {
    $IsValid'u64'(s->$successful_proposals)
      && $IsValid'u64'(s->$failed_proposals)
}
function {:inline} $IsEqual'$1_stake_IndividualValidatorPerformance'(s1: $1_stake_IndividualValidatorPerformance, s2: $1_stake_IndividualValidatorPerformance): bool {
    s1 == s2
}

// struct stake::JoinValidatorSetEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:240:5+83
datatype $1_stake_JoinValidatorSetEvent {
    $1_stake_JoinValidatorSetEvent($pool_address: int)
}
function {:inline} $Update'$1_stake_JoinValidatorSetEvent'_pool_address(s: $1_stake_JoinValidatorSetEvent, x: int): $1_stake_JoinValidatorSetEvent {
    $1_stake_JoinValidatorSetEvent(x)
}
function $IsValid'$1_stake_JoinValidatorSetEvent'(s: $1_stake_JoinValidatorSetEvent): bool {
    $IsValid'address'(s->$pool_address)
}
function {:inline} $IsEqual'$1_stake_JoinValidatorSetEvent'(s1: $1_stake_JoinValidatorSetEvent, s2: $1_stake_JoinValidatorSetEvent): bool {
    s1 == s2
}

// struct stake::LeaveValidatorSetEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:259:5+84
datatype $1_stake_LeaveValidatorSetEvent {
    $1_stake_LeaveValidatorSetEvent($pool_address: int)
}
function {:inline} $Update'$1_stake_LeaveValidatorSetEvent'_pool_address(s: $1_stake_LeaveValidatorSetEvent, x: int): $1_stake_LeaveValidatorSetEvent {
    $1_stake_LeaveValidatorSetEvent(x)
}
function $IsValid'$1_stake_LeaveValidatorSetEvent'(s: $1_stake_LeaveValidatorSetEvent): bool {
    $IsValid'address'(s->$pool_address)
}
function {:inline} $IsEqual'$1_stake_LeaveValidatorSetEvent'(s1: $1_stake_LeaveValidatorSetEvent, s2: $1_stake_LeaveValidatorSetEvent): bool {
    s1 == s2
}

// struct stake::OwnerCapability at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:100:5+76
datatype $1_stake_OwnerCapability {
    $1_stake_OwnerCapability($pool_address: int)
}
function {:inline} $Update'$1_stake_OwnerCapability'_pool_address(s: $1_stake_OwnerCapability, x: int): $1_stake_OwnerCapability {
    $1_stake_OwnerCapability(x)
}
function $IsValid'$1_stake_OwnerCapability'(s: $1_stake_OwnerCapability): bool {
    $IsValid'address'(s->$pool_address)
}
function {:inline} $IsEqual'$1_stake_OwnerCapability'(s1: $1_stake_OwnerCapability, s2: $1_stake_OwnerCapability): bool {
    s1 == s2
}
var $1_stake_OwnerCapability_$memory: $Memory $1_stake_OwnerCapability;

// struct stake::ReactivateStakeEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:215:5+103
datatype $1_stake_ReactivateStakeEvent {
    $1_stake_ReactivateStakeEvent($pool_address: int, $amount: int)
}
function {:inline} $Update'$1_stake_ReactivateStakeEvent'_pool_address(s: $1_stake_ReactivateStakeEvent, x: int): $1_stake_ReactivateStakeEvent {
    $1_stake_ReactivateStakeEvent(x, s->$amount)
}
function {:inline} $Update'$1_stake_ReactivateStakeEvent'_amount(s: $1_stake_ReactivateStakeEvent, x: int): $1_stake_ReactivateStakeEvent {
    $1_stake_ReactivateStakeEvent(s->$pool_address, x)
}
function $IsValid'$1_stake_ReactivateStakeEvent'(s: $1_stake_ReactivateStakeEvent): bool {
    $IsValid'address'(s->$pool_address)
      && $IsValid'u64'(s->$amount)
}
function {:inline} $IsEqual'$1_stake_ReactivateStakeEvent'(s1: $1_stake_ReactivateStakeEvent, s2: $1_stake_ReactivateStakeEvent): bool {
    s1 == s2
}

// struct stake::RegisterValidatorCandidateEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:200:5+93
datatype $1_stake_RegisterValidatorCandidateEvent {
    $1_stake_RegisterValidatorCandidateEvent($pool_address: int)
}
function {:inline} $Update'$1_stake_RegisterValidatorCandidateEvent'_pool_address(s: $1_stake_RegisterValidatorCandidateEvent, x: int): $1_stake_RegisterValidatorCandidateEvent {
    $1_stake_RegisterValidatorCandidateEvent(x)
}
function $IsValid'$1_stake_RegisterValidatorCandidateEvent'(s: $1_stake_RegisterValidatorCandidateEvent): bool {
    $IsValid'address'(s->$pool_address)
}
function {:inline} $IsEqual'$1_stake_RegisterValidatorCandidateEvent'(s1: $1_stake_RegisterValidatorCandidateEvent, s2: $1_stake_RegisterValidatorCandidateEvent): bool {
    s1 == s2
}

// struct stake::RotateConsensusKeyEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:220:5+169
datatype $1_stake_RotateConsensusKeyEvent {
    $1_stake_RotateConsensusKeyEvent($pool_address: int, $old_consensus_pubkey: Vec (int), $new_consensus_pubkey: Vec (int))
}
function {:inline} $Update'$1_stake_RotateConsensusKeyEvent'_pool_address(s: $1_stake_RotateConsensusKeyEvent, x: int): $1_stake_RotateConsensusKeyEvent {
    $1_stake_RotateConsensusKeyEvent(x, s->$old_consensus_pubkey, s->$new_consensus_pubkey)
}
function {:inline} $Update'$1_stake_RotateConsensusKeyEvent'_old_consensus_pubkey(s: $1_stake_RotateConsensusKeyEvent, x: Vec (int)): $1_stake_RotateConsensusKeyEvent {
    $1_stake_RotateConsensusKeyEvent(s->$pool_address, x, s->$new_consensus_pubkey)
}
function {:inline} $Update'$1_stake_RotateConsensusKeyEvent'_new_consensus_pubkey(s: $1_stake_RotateConsensusKeyEvent, x: Vec (int)): $1_stake_RotateConsensusKeyEvent {
    $1_stake_RotateConsensusKeyEvent(s->$pool_address, s->$old_consensus_pubkey, x)
}
function $IsValid'$1_stake_RotateConsensusKeyEvent'(s: $1_stake_RotateConsensusKeyEvent): bool {
    $IsValid'address'(s->$pool_address)
      && $IsValid'vec'u8''(s->$old_consensus_pubkey)
      && $IsValid'vec'u8''(s->$new_consensus_pubkey)
}
function {:inline} $IsEqual'$1_stake_RotateConsensusKeyEvent'(s1: $1_stake_RotateConsensusKeyEvent, s2: $1_stake_RotateConsensusKeyEvent): bool {
    $IsEqual'address'(s1->$pool_address, s2->$pool_address)
    && $IsEqual'vec'u8''(s1->$old_consensus_pubkey, s2->$old_consensus_pubkey)
    && $IsEqual'vec'u8''(s1->$new_consensus_pubkey, s2->$new_consensus_pubkey)}

// struct stake::SetOperatorEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:204:5+140
datatype $1_stake_SetOperatorEvent {
    $1_stake_SetOperatorEvent($pool_address: int, $old_operator: int, $new_operator: int)
}
function {:inline} $Update'$1_stake_SetOperatorEvent'_pool_address(s: $1_stake_SetOperatorEvent, x: int): $1_stake_SetOperatorEvent {
    $1_stake_SetOperatorEvent(x, s->$old_operator, s->$new_operator)
}
function {:inline} $Update'$1_stake_SetOperatorEvent'_old_operator(s: $1_stake_SetOperatorEvent, x: int): $1_stake_SetOperatorEvent {
    $1_stake_SetOperatorEvent(s->$pool_address, x, s->$new_operator)
}
function {:inline} $Update'$1_stake_SetOperatorEvent'_new_operator(s: $1_stake_SetOperatorEvent, x: int): $1_stake_SetOperatorEvent {
    $1_stake_SetOperatorEvent(s->$pool_address, s->$old_operator, x)
}
function $IsValid'$1_stake_SetOperatorEvent'(s: $1_stake_SetOperatorEvent): bool {
    $IsValid'address'(s->$pool_address)
      && $IsValid'address'(s->$old_operator)
      && $IsValid'address'(s->$new_operator)
}
function {:inline} $IsEqual'$1_stake_SetOperatorEvent'(s1: $1_stake_SetOperatorEvent, s2: $1_stake_SetOperatorEvent): bool {
    s1 == s2
}

// struct stake::StakePool at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:115:5+1829
datatype $1_stake_StakePool {
    $1_stake_StakePool($active: $1_coin_Coin'$1_aptos_coin_AptosCoin', $inactive: $1_coin_Coin'$1_aptos_coin_AptosCoin', $pending_active: $1_coin_Coin'$1_aptos_coin_AptosCoin', $pending_inactive: $1_coin_Coin'$1_aptos_coin_AptosCoin', $locked_until_secs: int, $operator_address: int, $delegated_voter: int, $initialize_validator_events: $1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent', $set_operator_events: $1_event_EventHandle'$1_stake_SetOperatorEvent', $add_stake_events: $1_event_EventHandle'$1_stake_AddStakeEvent', $reactivate_stake_events: $1_event_EventHandle'$1_stake_ReactivateStakeEvent', $rotate_consensus_key_events: $1_event_EventHandle'$1_stake_RotateConsensusKeyEvent', $update_network_and_fullnode_addresses_events: $1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent', $increase_lockup_events: $1_event_EventHandle'$1_stake_IncreaseLockupEvent', $join_validator_set_events: $1_event_EventHandle'$1_stake_JoinValidatorSetEvent', $distribute_rewards_events: $1_event_EventHandle'$1_stake_DistributeRewardsEvent', $unlock_stake_events: $1_event_EventHandle'$1_stake_UnlockStakeEvent', $withdraw_stake_events: $1_event_EventHandle'$1_stake_WithdrawStakeEvent', $leave_validator_set_events: $1_event_EventHandle'$1_stake_LeaveValidatorSetEvent')
}
function {:inline} $Update'$1_stake_StakePool'_active(s: $1_stake_StakePool, x: $1_coin_Coin'$1_aptos_coin_AptosCoin'): $1_stake_StakePool {
    $1_stake_StakePool(x, s->$inactive, s->$pending_active, s->$pending_inactive, s->$locked_until_secs, s->$operator_address, s->$delegated_voter, s->$initialize_validator_events, s->$set_operator_events, s->$add_stake_events, s->$reactivate_stake_events, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, s->$join_validator_set_events, s->$distribute_rewards_events, s->$unlock_stake_events, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_inactive(s: $1_stake_StakePool, x: $1_coin_Coin'$1_aptos_coin_AptosCoin'): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, x, s->$pending_active, s->$pending_inactive, s->$locked_until_secs, s->$operator_address, s->$delegated_voter, s->$initialize_validator_events, s->$set_operator_events, s->$add_stake_events, s->$reactivate_stake_events, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, s->$join_validator_set_events, s->$distribute_rewards_events, s->$unlock_stake_events, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_pending_active(s: $1_stake_StakePool, x: $1_coin_Coin'$1_aptos_coin_AptosCoin'): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, x, s->$pending_inactive, s->$locked_until_secs, s->$operator_address, s->$delegated_voter, s->$initialize_validator_events, s->$set_operator_events, s->$add_stake_events, s->$reactivate_stake_events, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, s->$join_validator_set_events, s->$distribute_rewards_events, s->$unlock_stake_events, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_pending_inactive(s: $1_stake_StakePool, x: $1_coin_Coin'$1_aptos_coin_AptosCoin'): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, s->$pending_active, x, s->$locked_until_secs, s->$operator_address, s->$delegated_voter, s->$initialize_validator_events, s->$set_operator_events, s->$add_stake_events, s->$reactivate_stake_events, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, s->$join_validator_set_events, s->$distribute_rewards_events, s->$unlock_stake_events, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_locked_until_secs(s: $1_stake_StakePool, x: int): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, s->$pending_active, s->$pending_inactive, x, s->$operator_address, s->$delegated_voter, s->$initialize_validator_events, s->$set_operator_events, s->$add_stake_events, s->$reactivate_stake_events, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, s->$join_validator_set_events, s->$distribute_rewards_events, s->$unlock_stake_events, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_operator_address(s: $1_stake_StakePool, x: int): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, s->$pending_active, s->$pending_inactive, s->$locked_until_secs, x, s->$delegated_voter, s->$initialize_validator_events, s->$set_operator_events, s->$add_stake_events, s->$reactivate_stake_events, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, s->$join_validator_set_events, s->$distribute_rewards_events, s->$unlock_stake_events, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_delegated_voter(s: $1_stake_StakePool, x: int): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, s->$pending_active, s->$pending_inactive, s->$locked_until_secs, s->$operator_address, x, s->$initialize_validator_events, s->$set_operator_events, s->$add_stake_events, s->$reactivate_stake_events, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, s->$join_validator_set_events, s->$distribute_rewards_events, s->$unlock_stake_events, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_initialize_validator_events(s: $1_stake_StakePool, x: $1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent'): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, s->$pending_active, s->$pending_inactive, s->$locked_until_secs, s->$operator_address, s->$delegated_voter, x, s->$set_operator_events, s->$add_stake_events, s->$reactivate_stake_events, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, s->$join_validator_set_events, s->$distribute_rewards_events, s->$unlock_stake_events, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_set_operator_events(s: $1_stake_StakePool, x: $1_event_EventHandle'$1_stake_SetOperatorEvent'): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, s->$pending_active, s->$pending_inactive, s->$locked_until_secs, s->$operator_address, s->$delegated_voter, s->$initialize_validator_events, x, s->$add_stake_events, s->$reactivate_stake_events, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, s->$join_validator_set_events, s->$distribute_rewards_events, s->$unlock_stake_events, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_add_stake_events(s: $1_stake_StakePool, x: $1_event_EventHandle'$1_stake_AddStakeEvent'): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, s->$pending_active, s->$pending_inactive, s->$locked_until_secs, s->$operator_address, s->$delegated_voter, s->$initialize_validator_events, s->$set_operator_events, x, s->$reactivate_stake_events, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, s->$join_validator_set_events, s->$distribute_rewards_events, s->$unlock_stake_events, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_reactivate_stake_events(s: $1_stake_StakePool, x: $1_event_EventHandle'$1_stake_ReactivateStakeEvent'): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, s->$pending_active, s->$pending_inactive, s->$locked_until_secs, s->$operator_address, s->$delegated_voter, s->$initialize_validator_events, s->$set_operator_events, s->$add_stake_events, x, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, s->$join_validator_set_events, s->$distribute_rewards_events, s->$unlock_stake_events, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_rotate_consensus_key_events(s: $1_stake_StakePool, x: $1_event_EventHandle'$1_stake_RotateConsensusKeyEvent'): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, s->$pending_active, s->$pending_inactive, s->$locked_until_secs, s->$operator_address, s->$delegated_voter, s->$initialize_validator_events, s->$set_operator_events, s->$add_stake_events, s->$reactivate_stake_events, x, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, s->$join_validator_set_events, s->$distribute_rewards_events, s->$unlock_stake_events, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_update_network_and_fullnode_addresses_events(s: $1_stake_StakePool, x: $1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent'): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, s->$pending_active, s->$pending_inactive, s->$locked_until_secs, s->$operator_address, s->$delegated_voter, s->$initialize_validator_events, s->$set_operator_events, s->$add_stake_events, s->$reactivate_stake_events, s->$rotate_consensus_key_events, x, s->$increase_lockup_events, s->$join_validator_set_events, s->$distribute_rewards_events, s->$unlock_stake_events, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_increase_lockup_events(s: $1_stake_StakePool, x: $1_event_EventHandle'$1_stake_IncreaseLockupEvent'): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, s->$pending_active, s->$pending_inactive, s->$locked_until_secs, s->$operator_address, s->$delegated_voter, s->$initialize_validator_events, s->$set_operator_events, s->$add_stake_events, s->$reactivate_stake_events, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, x, s->$join_validator_set_events, s->$distribute_rewards_events, s->$unlock_stake_events, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_join_validator_set_events(s: $1_stake_StakePool, x: $1_event_EventHandle'$1_stake_JoinValidatorSetEvent'): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, s->$pending_active, s->$pending_inactive, s->$locked_until_secs, s->$operator_address, s->$delegated_voter, s->$initialize_validator_events, s->$set_operator_events, s->$add_stake_events, s->$reactivate_stake_events, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, x, s->$distribute_rewards_events, s->$unlock_stake_events, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_distribute_rewards_events(s: $1_stake_StakePool, x: $1_event_EventHandle'$1_stake_DistributeRewardsEvent'): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, s->$pending_active, s->$pending_inactive, s->$locked_until_secs, s->$operator_address, s->$delegated_voter, s->$initialize_validator_events, s->$set_operator_events, s->$add_stake_events, s->$reactivate_stake_events, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, s->$join_validator_set_events, x, s->$unlock_stake_events, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_unlock_stake_events(s: $1_stake_StakePool, x: $1_event_EventHandle'$1_stake_UnlockStakeEvent'): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, s->$pending_active, s->$pending_inactive, s->$locked_until_secs, s->$operator_address, s->$delegated_voter, s->$initialize_validator_events, s->$set_operator_events, s->$add_stake_events, s->$reactivate_stake_events, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, s->$join_validator_set_events, s->$distribute_rewards_events, x, s->$withdraw_stake_events, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_withdraw_stake_events(s: $1_stake_StakePool, x: $1_event_EventHandle'$1_stake_WithdrawStakeEvent'): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, s->$pending_active, s->$pending_inactive, s->$locked_until_secs, s->$operator_address, s->$delegated_voter, s->$initialize_validator_events, s->$set_operator_events, s->$add_stake_events, s->$reactivate_stake_events, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, s->$join_validator_set_events, s->$distribute_rewards_events, s->$unlock_stake_events, x, s->$leave_validator_set_events)
}
function {:inline} $Update'$1_stake_StakePool'_leave_validator_set_events(s: $1_stake_StakePool, x: $1_event_EventHandle'$1_stake_LeaveValidatorSetEvent'): $1_stake_StakePool {
    $1_stake_StakePool(s->$active, s->$inactive, s->$pending_active, s->$pending_inactive, s->$locked_until_secs, s->$operator_address, s->$delegated_voter, s->$initialize_validator_events, s->$set_operator_events, s->$add_stake_events, s->$reactivate_stake_events, s->$rotate_consensus_key_events, s->$update_network_and_fullnode_addresses_events, s->$increase_lockup_events, s->$join_validator_set_events, s->$distribute_rewards_events, s->$unlock_stake_events, s->$withdraw_stake_events, x)
}
function $IsValid'$1_stake_StakePool'(s: $1_stake_StakePool): bool {
    $IsValid'$1_coin_Coin'$1_aptos_coin_AptosCoin''(s->$active)
      && $IsValid'$1_coin_Coin'$1_aptos_coin_AptosCoin''(s->$inactive)
      && $IsValid'$1_coin_Coin'$1_aptos_coin_AptosCoin''(s->$pending_active)
      && $IsValid'$1_coin_Coin'$1_aptos_coin_AptosCoin''(s->$pending_inactive)
      && $IsValid'u64'(s->$locked_until_secs)
      && $IsValid'address'(s->$operator_address)
      && $IsValid'address'(s->$delegated_voter)
      && $IsValid'$1_event_EventHandle'$1_stake_RegisterValidatorCandidateEvent''(s->$initialize_validator_events)
      && $IsValid'$1_event_EventHandle'$1_stake_SetOperatorEvent''(s->$set_operator_events)
      && $IsValid'$1_event_EventHandle'$1_stake_AddStakeEvent''(s->$add_stake_events)
      && $IsValid'$1_event_EventHandle'$1_stake_ReactivateStakeEvent''(s->$reactivate_stake_events)
      && $IsValid'$1_event_EventHandle'$1_stake_RotateConsensusKeyEvent''(s->$rotate_consensus_key_events)
      && $IsValid'$1_event_EventHandle'$1_stake_UpdateNetworkAndFullnodeAddressesEvent''(s->$update_network_and_fullnode_addresses_events)
      && $IsValid'$1_event_EventHandle'$1_stake_IncreaseLockupEvent''(s->$increase_lockup_events)
      && $IsValid'$1_event_EventHandle'$1_stake_JoinValidatorSetEvent''(s->$join_validator_set_events)
      && $IsValid'$1_event_EventHandle'$1_stake_DistributeRewardsEvent''(s->$distribute_rewards_events)
      && $IsValid'$1_event_EventHandle'$1_stake_UnlockStakeEvent''(s->$unlock_stake_events)
      && $IsValid'$1_event_EventHandle'$1_stake_WithdrawStakeEvent''(s->$withdraw_stake_events)
      && $IsValid'$1_event_EventHandle'$1_stake_LeaveValidatorSetEvent''(s->$leave_validator_set_events)
}
function {:inline} $IsEqual'$1_stake_StakePool'(s1: $1_stake_StakePool, s2: $1_stake_StakePool): bool {
    s1 == s2
}
var $1_stake_StakePool_$memory: $Memory $1_stake_StakePool;

// struct stake::UnlockStakeEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:249:5+108
datatype $1_stake_UnlockStakeEvent {
    $1_stake_UnlockStakeEvent($pool_address: int, $amount_unlocked: int)
}
function {:inline} $Update'$1_stake_UnlockStakeEvent'_pool_address(s: $1_stake_UnlockStakeEvent, x: int): $1_stake_UnlockStakeEvent {
    $1_stake_UnlockStakeEvent(x, s->$amount_unlocked)
}
function {:inline} $Update'$1_stake_UnlockStakeEvent'_amount_unlocked(s: $1_stake_UnlockStakeEvent, x: int): $1_stake_UnlockStakeEvent {
    $1_stake_UnlockStakeEvent(s->$pool_address, x)
}
function $IsValid'$1_stake_UnlockStakeEvent'(s: $1_stake_UnlockStakeEvent): bool {
    $IsValid'address'(s->$pool_address)
      && $IsValid'u64'(s->$amount_unlocked)
}
function {:inline} $IsEqual'$1_stake_UnlockStakeEvent'(s1: $1_stake_UnlockStakeEvent, s2: $1_stake_UnlockStakeEvent): bool {
    s1 == s2
}

// struct stake::UpdateNetworkAndFullnodeAddressesEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:226:5+274
datatype $1_stake_UpdateNetworkAndFullnodeAddressesEvent {
    $1_stake_UpdateNetworkAndFullnodeAddressesEvent($pool_address: int, $old_network_addresses: Vec (int), $new_network_addresses: Vec (int), $old_fullnode_addresses: Vec (int), $new_fullnode_addresses: Vec (int))
}
function {:inline} $Update'$1_stake_UpdateNetworkAndFullnodeAddressesEvent'_pool_address(s: $1_stake_UpdateNetworkAndFullnodeAddressesEvent, x: int): $1_stake_UpdateNetworkAndFullnodeAddressesEvent {
    $1_stake_UpdateNetworkAndFullnodeAddressesEvent(x, s->$old_network_addresses, s->$new_network_addresses, s->$old_fullnode_addresses, s->$new_fullnode_addresses)
}
function {:inline} $Update'$1_stake_UpdateNetworkAndFullnodeAddressesEvent'_old_network_addresses(s: $1_stake_UpdateNetworkAndFullnodeAddressesEvent, x: Vec (int)): $1_stake_UpdateNetworkAndFullnodeAddressesEvent {
    $1_stake_UpdateNetworkAndFullnodeAddressesEvent(s->$pool_address, x, s->$new_network_addresses, s->$old_fullnode_addresses, s->$new_fullnode_addresses)
}
function {:inline} $Update'$1_stake_UpdateNetworkAndFullnodeAddressesEvent'_new_network_addresses(s: $1_stake_UpdateNetworkAndFullnodeAddressesEvent, x: Vec (int)): $1_stake_UpdateNetworkAndFullnodeAddressesEvent {
    $1_stake_UpdateNetworkAndFullnodeAddressesEvent(s->$pool_address, s->$old_network_addresses, x, s->$old_fullnode_addresses, s->$new_fullnode_addresses)
}
function {:inline} $Update'$1_stake_UpdateNetworkAndFullnodeAddressesEvent'_old_fullnode_addresses(s: $1_stake_UpdateNetworkAndFullnodeAddressesEvent, x: Vec (int)): $1_stake_UpdateNetworkAndFullnodeAddressesEvent {
    $1_stake_UpdateNetworkAndFullnodeAddressesEvent(s->$pool_address, s->$old_network_addresses, s->$new_network_addresses, x, s->$new_fullnode_addresses)
}
function {:inline} $Update'$1_stake_UpdateNetworkAndFullnodeAddressesEvent'_new_fullnode_addresses(s: $1_stake_UpdateNetworkAndFullnodeAddressesEvent, x: Vec (int)): $1_stake_UpdateNetworkAndFullnodeAddressesEvent {
    $1_stake_UpdateNetworkAndFullnodeAddressesEvent(s->$pool_address, s->$old_network_addresses, s->$new_network_addresses, s->$old_fullnode_addresses, x)
}
function $IsValid'$1_stake_UpdateNetworkAndFullnodeAddressesEvent'(s: $1_stake_UpdateNetworkAndFullnodeAddressesEvent): bool {
    $IsValid'address'(s->$pool_address)
      && $IsValid'vec'u8''(s->$old_network_addresses)
      && $IsValid'vec'u8''(s->$new_network_addresses)
      && $IsValid'vec'u8''(s->$old_fullnode_addresses)
      && $IsValid'vec'u8''(s->$new_fullnode_addresses)
}
function {:inline} $IsEqual'$1_stake_UpdateNetworkAndFullnodeAddressesEvent'(s1: $1_stake_UpdateNetworkAndFullnodeAddressesEvent, s2: $1_stake_UpdateNetworkAndFullnodeAddressesEvent): bool {
    $IsEqual'address'(s1->$pool_address, s2->$pool_address)
    && $IsEqual'vec'u8''(s1->$old_network_addresses, s2->$old_network_addresses)
    && $IsEqual'vec'u8''(s1->$new_network_addresses, s2->$new_network_addresses)
    && $IsEqual'vec'u8''(s1->$old_fullnode_addresses, s2->$old_fullnode_addresses)
    && $IsEqual'vec'u8''(s1->$new_fullnode_addresses, s2->$new_fullnode_addresses)}

// struct stake::ValidatorConfig at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:151:5+372
datatype $1_stake_ValidatorConfig {
    $1_stake_ValidatorConfig($consensus_pubkey: Vec (int), $network_addresses: Vec (int), $fullnode_addresses: Vec (int), $validator_index: int)
}
function {:inline} $Update'$1_stake_ValidatorConfig'_consensus_pubkey(s: $1_stake_ValidatorConfig, x: Vec (int)): $1_stake_ValidatorConfig {
    $1_stake_ValidatorConfig(x, s->$network_addresses, s->$fullnode_addresses, s->$validator_index)
}
function {:inline} $Update'$1_stake_ValidatorConfig'_network_addresses(s: $1_stake_ValidatorConfig, x: Vec (int)): $1_stake_ValidatorConfig {
    $1_stake_ValidatorConfig(s->$consensus_pubkey, x, s->$fullnode_addresses, s->$validator_index)
}
function {:inline} $Update'$1_stake_ValidatorConfig'_fullnode_addresses(s: $1_stake_ValidatorConfig, x: Vec (int)): $1_stake_ValidatorConfig {
    $1_stake_ValidatorConfig(s->$consensus_pubkey, s->$network_addresses, x, s->$validator_index)
}
function {:inline} $Update'$1_stake_ValidatorConfig'_validator_index(s: $1_stake_ValidatorConfig, x: int): $1_stake_ValidatorConfig {
    $1_stake_ValidatorConfig(s->$consensus_pubkey, s->$network_addresses, s->$fullnode_addresses, x)
}
function $IsValid'$1_stake_ValidatorConfig'(s: $1_stake_ValidatorConfig): bool {
    $IsValid'vec'u8''(s->$consensus_pubkey)
      && $IsValid'vec'u8''(s->$network_addresses)
      && $IsValid'vec'u8''(s->$fullnode_addresses)
      && $IsValid'u64'(s->$validator_index)
}
function {:inline} $IsEqual'$1_stake_ValidatorConfig'(s1: $1_stake_ValidatorConfig, s2: $1_stake_ValidatorConfig): bool {
    $IsEqual'vec'u8''(s1->$consensus_pubkey, s2->$consensus_pubkey)
    && $IsEqual'vec'u8''(s1->$network_addresses, s2->$network_addresses)
    && $IsEqual'vec'u8''(s1->$fullnode_addresses, s2->$fullnode_addresses)
    && $IsEqual'u64'(s1->$validator_index, s2->$validator_index)}
var $1_stake_ValidatorConfig_$memory: $Memory $1_stake_ValidatorConfig;

// struct stake::ValidatorInfo at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:161:5+133
datatype $1_stake_ValidatorInfo {
    $1_stake_ValidatorInfo($addr: int, $voting_power: int, $config: $1_stake_ValidatorConfig)
}
function {:inline} $Update'$1_stake_ValidatorInfo'_addr(s: $1_stake_ValidatorInfo, x: int): $1_stake_ValidatorInfo {
    $1_stake_ValidatorInfo(x, s->$voting_power, s->$config)
}
function {:inline} $Update'$1_stake_ValidatorInfo'_voting_power(s: $1_stake_ValidatorInfo, x: int): $1_stake_ValidatorInfo {
    $1_stake_ValidatorInfo(s->$addr, x, s->$config)
}
function {:inline} $Update'$1_stake_ValidatorInfo'_config(s: $1_stake_ValidatorInfo, x: $1_stake_ValidatorConfig): $1_stake_ValidatorInfo {
    $1_stake_ValidatorInfo(s->$addr, s->$voting_power, x)
}
function $IsValid'$1_stake_ValidatorInfo'(s: $1_stake_ValidatorInfo): bool {
    $IsValid'address'(s->$addr)
      && $IsValid'u64'(s->$voting_power)
      && $IsValid'$1_stake_ValidatorConfig'(s->$config)
}
function {:inline} $IsEqual'$1_stake_ValidatorInfo'(s1: $1_stake_ValidatorInfo, s2: $1_stake_ValidatorInfo): bool {
    $IsEqual'address'(s1->$addr, s2->$addr)
    && $IsEqual'u64'(s1->$voting_power, s2->$voting_power)
    && $IsEqual'$1_stake_ValidatorConfig'(s1->$config, s2->$config)}

// struct stake::ValidatorPerformance at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:196:5+103
datatype $1_stake_ValidatorPerformance {
    $1_stake_ValidatorPerformance($validators: Vec ($1_stake_IndividualValidatorPerformance))
}
function {:inline} $Update'$1_stake_ValidatorPerformance'_validators(s: $1_stake_ValidatorPerformance, x: Vec ($1_stake_IndividualValidatorPerformance)): $1_stake_ValidatorPerformance {
    $1_stake_ValidatorPerformance(x)
}
function $IsValid'$1_stake_ValidatorPerformance'(s: $1_stake_ValidatorPerformance): bool {
    $IsValid'vec'$1_stake_IndividualValidatorPerformance''(s->$validators)
}
function {:inline} $IsEqual'$1_stake_ValidatorPerformance'(s1: $1_stake_ValidatorPerformance, s2: $1_stake_ValidatorPerformance): bool {
    $IsEqual'vec'$1_stake_IndividualValidatorPerformance''(s1->$validators, s2->$validators)}
var $1_stake_ValidatorPerformance_$memory: $Memory $1_stake_ValidatorPerformance;

// struct stake::ValidatorSet at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:171:5+558
datatype $1_stake_ValidatorSet {
    $1_stake_ValidatorSet($consensus_scheme: int, $active_validators: Vec ($1_stake_ValidatorInfo), $pending_inactive: Vec ($1_stake_ValidatorInfo), $pending_active: Vec ($1_stake_ValidatorInfo), $total_voting_power: int, $total_joining_power: int)
}
function {:inline} $Update'$1_stake_ValidatorSet'_consensus_scheme(s: $1_stake_ValidatorSet, x: int): $1_stake_ValidatorSet {
    $1_stake_ValidatorSet(x, s->$active_validators, s->$pending_inactive, s->$pending_active, s->$total_voting_power, s->$total_joining_power)
}
function {:inline} $Update'$1_stake_ValidatorSet'_active_validators(s: $1_stake_ValidatorSet, x: Vec ($1_stake_ValidatorInfo)): $1_stake_ValidatorSet {
    $1_stake_ValidatorSet(s->$consensus_scheme, x, s->$pending_inactive, s->$pending_active, s->$total_voting_power, s->$total_joining_power)
}
function {:inline} $Update'$1_stake_ValidatorSet'_pending_inactive(s: $1_stake_ValidatorSet, x: Vec ($1_stake_ValidatorInfo)): $1_stake_ValidatorSet {
    $1_stake_ValidatorSet(s->$consensus_scheme, s->$active_validators, x, s->$pending_active, s->$total_voting_power, s->$total_joining_power)
}
function {:inline} $Update'$1_stake_ValidatorSet'_pending_active(s: $1_stake_ValidatorSet, x: Vec ($1_stake_ValidatorInfo)): $1_stake_ValidatorSet {
    $1_stake_ValidatorSet(s->$consensus_scheme, s->$active_validators, s->$pending_inactive, x, s->$total_voting_power, s->$total_joining_power)
}
function {:inline} $Update'$1_stake_ValidatorSet'_total_voting_power(s: $1_stake_ValidatorSet, x: int): $1_stake_ValidatorSet {
    $1_stake_ValidatorSet(s->$consensus_scheme, s->$active_validators, s->$pending_inactive, s->$pending_active, x, s->$total_joining_power)
}
function {:inline} $Update'$1_stake_ValidatorSet'_total_joining_power(s: $1_stake_ValidatorSet, x: int): $1_stake_ValidatorSet {
    $1_stake_ValidatorSet(s->$consensus_scheme, s->$active_validators, s->$pending_inactive, s->$pending_active, s->$total_voting_power, x)
}
function $IsValid'$1_stake_ValidatorSet'(s: $1_stake_ValidatorSet): bool {
    $IsValid'u8'(s->$consensus_scheme)
      && $IsValid'vec'$1_stake_ValidatorInfo''(s->$active_validators)
      && $IsValid'vec'$1_stake_ValidatorInfo''(s->$pending_inactive)
      && $IsValid'vec'$1_stake_ValidatorInfo''(s->$pending_active)
      && $IsValid'u128'(s->$total_voting_power)
      && $IsValid'u128'(s->$total_joining_power)
}
function {:inline} $IsEqual'$1_stake_ValidatorSet'(s1: $1_stake_ValidatorSet, s2: $1_stake_ValidatorSet): bool {
    $IsEqual'u8'(s1->$consensus_scheme, s2->$consensus_scheme)
    && $IsEqual'vec'$1_stake_ValidatorInfo''(s1->$active_validators, s2->$active_validators)
    && $IsEqual'vec'$1_stake_ValidatorInfo''(s1->$pending_inactive, s2->$pending_inactive)
    && $IsEqual'vec'$1_stake_ValidatorInfo''(s1->$pending_active, s2->$pending_active)
    && $IsEqual'u128'(s1->$total_voting_power, s2->$total_voting_power)
    && $IsEqual'u128'(s1->$total_joining_power, s2->$total_joining_power)}
var $1_stake_ValidatorSet_$memory: $Memory $1_stake_ValidatorSet;

// struct stake::WithdrawStakeEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:254:5+111
datatype $1_stake_WithdrawStakeEvent {
    $1_stake_WithdrawStakeEvent($pool_address: int, $amount_withdrawn: int)
}
function {:inline} $Update'$1_stake_WithdrawStakeEvent'_pool_address(s: $1_stake_WithdrawStakeEvent, x: int): $1_stake_WithdrawStakeEvent {
    $1_stake_WithdrawStakeEvent(x, s->$amount_withdrawn)
}
function {:inline} $Update'$1_stake_WithdrawStakeEvent'_amount_withdrawn(s: $1_stake_WithdrawStakeEvent, x: int): $1_stake_WithdrawStakeEvent {
    $1_stake_WithdrawStakeEvent(s->$pool_address, x)
}
function $IsValid'$1_stake_WithdrawStakeEvent'(s: $1_stake_WithdrawStakeEvent): bool {
    $IsValid'address'(s->$pool_address)
      && $IsValid'u64'(s->$amount_withdrawn)
}
function {:inline} $IsEqual'$1_stake_WithdrawStakeEvent'(s1: $1_stake_WithdrawStakeEvent, s2: $1_stake_WithdrawStakeEvent): bool {
    s1 == s2
}

// fun stake::assert_owner_cap_exists [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1350:5+140
procedure {:inline 1} $1_stake_assert_owner_cap_exists(_$t0: int) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t0: int;
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[owner]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1350:5+1
    assume {:print "$at(141,64386,64387)"} true;
    assume {:print "$track_local(38,4,0):", $t0} $t0 == $t0;

    // $t1 := exists<stake::OwnerCapability>($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1351:17+6
    assume {:print "$at(141,64448,64454)"} true;
    $t1 := $ResourceExists($1_stake_OwnerCapability_$memory, $t0);

    // if ($t1) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1351:9+79
    if ($t1) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1351:9+79
L1:

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1351:9+79
    assume {:print "$at(141,64440,64519)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1351:66+20
L0:

    // $t2 := 15 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1351:66+20
    assume {:print "$at(141,64497,64517)"} true;
    $t2 := 15;
    assume $IsValid'u64'($t2);

    // $t3 := error::not_found($t2) on_abort goto L4 with $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1351:49+38
    call $t3 := $1_error_not_found($t2);
    if ($abort_flag) {
        assume {:print "$at(141,64480,64518)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(38,4):", $t4} $t4 == $t4;
        goto L4;
    }

    // trace_abort($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1351:9+79
    assume {:print "$at(141,64440,64519)"} true;
    assume {:print "$track_abort(38,4):", $t3} $t3 == $t3;

    // $t4 := move($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1351:9+79
    $t4 := $t3;

    // goto L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1351:9+79
    goto L4;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1351:88+1
L2:

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1352:5+1
    assume {:print "$at(141,64525,64526)"} true;
L3:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1352:5+1
    assume {:print "$at(141,64525,64526)"} true;
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1352:5+1
L4:

    // abort($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1352:5+1
    assume {:print "$at(141,64525,64526)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun stake::assert_stake_pool_exists [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1319:5+162
procedure {:inline 1} $1_stake_assert_stake_pool_exists(_$t0: int) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t0: int;
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[pool_address]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1319:5+1
    assume {:print "$at(141,62960,62961)"} true;
    assume {:print "$track_local(38,5,0):", $t0} $t0 == $t0;

    // $t1 := stake::stake_pool_exists($t0) on_abort goto L4 with $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1320:17+31
    assume {:print "$at(141,63030,63061)"} true;
    call $t1 := $1_stake_stake_pool_exists($t0);
    if ($abort_flag) {
        assume {:print "$at(141,63030,63061)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(38,5):", $t2} $t2 == $t2;
        goto L4;
    }

    // if ($t1) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1320:9+93
    if ($t1) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1320:9+93
L1:

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1320:9+93
    assume {:print "$at(141,63022,63115)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1320:74+26
L0:

    // $t3 := 14 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1320:74+26
    assume {:print "$at(141,63087,63113)"} true;
    $t3 := 14;
    assume $IsValid'u64'($t3);

    // $t4 := error::invalid_argument($t3) on_abort goto L4 with $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1320:50+51
    call $t4 := $1_error_invalid_argument($t3);
    if ($abort_flag) {
        assume {:print "$at(141,63063,63114)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(38,5):", $t2} $t2 == $t2;
        goto L4;
    }

    // trace_abort($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1320:9+93
    assume {:print "$at(141,63022,63115)"} true;
    assume {:print "$track_abort(38,5):", $t4} $t4 == $t4;

    // $t2 := move($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1320:9+93
    $t2 := $t4;

    // goto L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1320:9+93
    goto L4;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1320:102+1
L2:

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1321:5+1
    assume {:print "$at(141,63121,63122)"} true;
L3:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1321:5+1
    assume {:print "$at(141,63121,63122)"} true;
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1321:5+1
L4:

    // abort($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:1321:5+1
    assume {:print "$at(141,63121,63122)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun stake::get_delegated_voter [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:359:5+200
procedure {:inline 1} $1_stake_get_delegated_voter(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: $1_stake_StakePool;
    var $t3: int;
    var $t0: int;
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[pool_address]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:359:5+1
    assume {:print "$at(141,16317,16318)"} true;
    assume {:print "$track_local(38,17,0):", $t0} $t0 == $t0;

    // stake::assert_stake_pool_exists($t0) on_abort goto L2 with $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:360:9+38
    assume {:print "$at(141,16409,16447)"} true;
    call $1_stake_assert_stake_pool_exists($t0);
    if ($abort_flag) {
        assume {:print "$at(141,16409,16447)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(38,17):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := get_global<stake::StakePool>($t0) on_abort goto L2 with $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:361:9+13
    assume {:print "$at(141,16457,16470)"} true;
    if (!$ResourceExists($1_stake_StakePool_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t2 := $ResourceValue($1_stake_StakePool_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(141,16457,16470)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(38,17):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t3 := get_field<stake::StakePool>.delegated_voter($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:361:9+54
    $t3 := $t2->$delegated_voter;

    // trace_return[0]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:361:9+54
    assume {:print "$track_return(38,17,0):", $t3} $t3 == $t3;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:362:5+1
    assume {:print "$at(141,16516,16517)"} true;
L1:

    // return $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:362:5+1
    assume {:print "$at(141,16516,16517)"} true;
    $ret0 := $t3;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:362:5+1
L2:

    // abort($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:362:5+1
    assume {:print "$at(141,16516,16517)"} true;
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun stake::get_stake [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:315:5+425
procedure {:inline 1} $1_stake_get_stake(_$t0: int) returns ($ret0: int, $ret1: int, $ret2: int, $ret3: int)
{
    // declare local variables
    var $t1: $1_stake_StakePool;
    var $t2: int;
    var $t3: $1_stake_StakePool;
    var $t4: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $t5: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t6: int;
    var $t7: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $t8: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t9: int;
    var $t10: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $t11: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t12: int;
    var $t13: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $t14: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t15: int;
    var $t0: int;
    var $temp_0'$1_stake_StakePool': $1_stake_StakePool;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[pool_address]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:315:5+1
    assume {:print "$at(141,14196,14197)"} true;
    assume {:print "$track_local(38,23,0):", $t0} $t0 == $t0;

    // stake::assert_stake_pool_exists($t0) on_abort goto L2 with $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:316:9+38
    assume {:print "$at(141,14291,14329)"} true;
    call $1_stake_assert_stake_pool_exists($t0);
    if ($abort_flag) {
        assume {:print "$at(141,14291,14329)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(38,23):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_global<stake::StakePool>($t0) on_abort goto L2 with $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:317:26+13
    assume {:print "$at(141,14356,14369)"} true;
    if (!$ResourceExists($1_stake_StakePool_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t3 := $ResourceValue($1_stake_StakePool_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(141,14356,14369)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(38,23):", $t2} $t2 == $t2;
        goto L2;
    }

    // trace_local[stake_pool]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:317:13+10
    assume {:print "$track_local(38,23,1):", $t3} $t3 == $t3;

    // $t4 := get_field<stake::StakePool>.active($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:319:25+18
    assume {:print "$at(141,14430,14448)"} true;
    $t4 := $t3->$active;

    // assume Identical($t5, select coin::CoinInfo.supply(global<coin::CoinInfo<aptos_coin::AptosCoin>>(select type_info::TypeInfo.account_address(type_info::$type_of<aptos_coin::AptosCoin>())))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:32:9+99
    assume {:print "$at(105,1664,1763)"} true;
    assume ($t5 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply);

    // $t6 := coin::value<aptos_coin::AptosCoin>($t4) on_abort goto L2 with $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:319:13+31
    assume {:print "$at(141,14418,14449)"} true;
    call $t6 := $1_coin_value'$1_aptos_coin_AptosCoin'($t4);
    if ($abort_flag) {
        assume {:print "$at(141,14418,14449)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(38,23):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t7 := get_field<stake::StakePool>.inactive($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:320:25+20
    assume {:print "$at(141,14475,14495)"} true;
    $t7 := $t3->$inactive;

    // assume Identical($t8, select coin::CoinInfo.supply(global<coin::CoinInfo<aptos_coin::AptosCoin>>(select type_info::TypeInfo.account_address(type_info::$type_of<aptos_coin::AptosCoin>())))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:32:9+99
    assume {:print "$at(105,1664,1763)"} true;
    assume ($t8 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply);

    // $t9 := coin::value<aptos_coin::AptosCoin>($t7) on_abort goto L2 with $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:320:13+33
    assume {:print "$at(141,14463,14496)"} true;
    call $t9 := $1_coin_value'$1_aptos_coin_AptosCoin'($t7);
    if ($abort_flag) {
        assume {:print "$at(141,14463,14496)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(38,23):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t10 := get_field<stake::StakePool>.pending_active($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:321:25+26
    assume {:print "$at(141,14522,14548)"} true;
    $t10 := $t3->$pending_active;

    // assume Identical($t11, select coin::CoinInfo.supply(global<coin::CoinInfo<aptos_coin::AptosCoin>>(select type_info::TypeInfo.account_address(type_info::$type_of<aptos_coin::AptosCoin>())))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:32:9+99
    assume {:print "$at(105,1664,1763)"} true;
    assume ($t11 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply);

    // $t12 := coin::value<aptos_coin::AptosCoin>($t10) on_abort goto L2 with $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:321:13+39
    assume {:print "$at(141,14510,14549)"} true;
    call $t12 := $1_coin_value'$1_aptos_coin_AptosCoin'($t10);
    if ($abort_flag) {
        assume {:print "$at(141,14510,14549)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(38,23):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t13 := get_field<stake::StakePool>.pending_inactive($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:322:25+28
    assume {:print "$at(141,14575,14603)"} true;
    $t13 := $t3->$pending_inactive;

    // assume Identical($t14, select coin::CoinInfo.supply(global<coin::CoinInfo<aptos_coin::AptosCoin>>(select type_info::TypeInfo.account_address(type_info::$type_of<aptos_coin::AptosCoin>())))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:32:9+99
    assume {:print "$at(105,1664,1763)"} true;
    assume ($t14 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply);

    // $t15 := coin::value<aptos_coin::AptosCoin>($t13) on_abort goto L2 with $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:322:13+41
    assume {:print "$at(141,14563,14604)"} true;
    call $t15 := $1_coin_value'$1_aptos_coin_AptosCoin'($t13);
    if ($abort_flag) {
        assume {:print "$at(141,14563,14604)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(38,23):", $t2} $t2 == $t2;
        goto L2;
    }

    // trace_return[0]($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:318:9+211
    assume {:print "$at(141,14404,14615)"} true;
    assume {:print "$track_return(38,23,0):", $t6} $t6 == $t6;

    // trace_return[1]($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:318:9+211
    assume {:print "$track_return(38,23,1):", $t9} $t9 == $t9;

    // trace_return[2]($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:318:9+211
    assume {:print "$track_return(38,23,2):", $t12} $t12 == $t12;

    // trace_return[3]($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:318:9+211
    assume {:print "$track_return(38,23,3):", $t15} $t15 == $t15;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:324:5+1
    assume {:print "$at(141,14620,14621)"} true;
L1:

    // return ($t6, $t9, $t12, $t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:324:5+1
    assume {:print "$at(141,14620,14621)"} true;
    $ret0 := $t6;
    $ret1 := $t9;
    $ret2 := $t12;
    $ret3 := $t15;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:324:5+1
L2:

    // abort($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:324:5+1
    assume {:print "$at(141,14620,14621)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun stake::get_validator_state [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:328:5+652
procedure {:inline 1} $1_stake_get_validator_state(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: $1_option_Option'u64';
    var $t2: $1_option_Option'u64';
    var $t3: $1_option_Option'u64';
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $1_stake_ValidatorSet;
    var $t8: $1_stake_ValidatorSet;
    var $t9: int;
    var $t10: $1_stake_ValidatorSet;
    var $t11: int;
    var $t12: Vec ($1_stake_ValidatorInfo);
    var $t13: $1_option_Option'u64';
    var $t14: bool;
    var $t15: int;
    var $t16: Vec ($1_stake_ValidatorInfo);
    var $t17: $1_option_Option'u64';
    var $t18: bool;
    var $t19: int;
    var $t20: Vec ($1_stake_ValidatorInfo);
    var $t21: $1_option_Option'u64';
    var $t22: bool;
    var $t23: int;
    var $t24: int;
    var $t0: int;
    var $temp_0'$1_stake_ValidatorSet': $1_stake_ValidatorSet;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t8, global<stake::ValidatorSet>(0x1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:246:9+59
    assume {:print "$at(142,10599,10658)"} true;
    assume ($t8 == $ResourceValue($1_stake_ValidatorSet_$memory, 1));

    // trace_local[pool_address]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:328:5+1
    assume {:print "$at(141,14678,14679)"} true;
    assume {:print "$track_local(38,26,0):", $t0} $t0 == $t0;

    // $t9 := 0x1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:329:57+16
    assume {:print "$at(141,14817,14833)"} true;
    $t9 := 1;
    assume $IsValid'address'($t9);

    // $t10 := get_global<stake::ValidatorSet>($t9) on_abort goto L10 with $t11 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:329:29+13
    if (!$ResourceExists($1_stake_ValidatorSet_$memory, $t9)) {
        call $ExecFailureAbort();
    } else {
        $t10 := $ResourceValue($1_stake_ValidatorSet_$memory, $t9);
    }
    if ($abort_flag) {
        assume {:print "$at(141,14789,14802)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(38,26):", $t11} $t11 == $t11;
        goto L10;
    }

    // trace_local[validator_set]($t10) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:329:13+13
    assume {:print "$track_local(38,26,7):", $t10} $t10 == $t10;

    // $t12 := get_field<stake::ValidatorSet>.pending_active($t10) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:330:45+29
    assume {:print "$at(141,14880,14909)"} true;
    $t12 := $t10->$pending_active;

    // $t13 := opaque begin: stake::find_validator($t12, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:330:30+59

    // assume And(WellFormed($t13), Le(Len<u64>(select option::Option.vec($t13)), 1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:330:30+59
    assume ($IsValid'$1_option_Option'u64''($t13) && (LenVec($t13->$vec) <= 1));

    // assume Implies(option::$is_none<u64>($t13), forall i: num: Range(0, Len<stake::ValidatorInfo>($t12)): Neq<address>(select stake::ValidatorInfo.addr(Index($t12, i)), $t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:330:30+59
    assume ($1_option_$is_none'u64'($t13) ==> (var $range_0 := $Range(0, LenVec($t12)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'address'(ReadVec($t12, i)->$addr, $t0))))));

    // assume Implies(option::$is_some<u64>($t13), Eq<address>(select stake::ValidatorInfo.addr(Index($t12, option::$borrow<u64>($t13))), $t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:330:30+59
    assume ($1_option_$is_some'u64'($t13) ==> $IsEqual'address'(ReadVec($t12, $1_option_$borrow'u64'($t13))->$addr, $t0));

    // assume Implies(option::$is_some<u64>($t13), stake::spec_contains($t12, $t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:330:30+59
    assume ($1_option_$is_some'u64'($t13) ==> $1_stake_spec_contains($t12, $t0));

    // $t13 := opaque end: stake::find_validator($t12, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:330:30+59

    // $t14 := opaque begin: option::is_some<u64>($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:330:13+77

    // assume WellFormed($t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:330:13+77
    assume $IsValid'bool'($t14);

    // assume Eq<bool>($t14, option::spec_is_some<u64>($t13)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:330:13+77
    assume $IsEqual'bool'($t14, $1_option_spec_is_some'u64'($t13));

    // $t14 := opaque end: option::is_some<u64>($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:330:13+77

    // if ($t14) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:330:9+480
    if ($t14) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:330:9+480
L1:

    // $t15 := 1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:331:13+31
    assume {:print "$at(141,14941,14972)"} true;
    $t15 := 1;
    assume $IsValid'u64'($t15);

    // $t6 := $t15 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:330:9+480
    assume {:print "$at(141,14844,15324)"} true;
    $t6 := $t15;

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:330:9+480
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:332:53+13
    assume {:print "$at(141,15025,15038)"} true;
L0:

    // $t16 := get_field<stake::ValidatorSet>.active_validators($t10) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:332:52+32
    assume {:print "$at(141,15024,15056)"} true;
    $t16 := $t10->$active_validators;

    // $t17 := opaque begin: stake::find_validator($t16, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:332:37+62

    // assume And(WellFormed($t17), Le(Len<u64>(select option::Option.vec($t17)), 1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:332:37+62
    assume ($IsValid'$1_option_Option'u64''($t17) && (LenVec($t17->$vec) <= 1));

    // assume Implies(option::$is_none<u64>($t17), forall i: num: Range(0, Len<stake::ValidatorInfo>($t16)): Neq<address>(select stake::ValidatorInfo.addr(Index($t16, i)), $t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:332:37+62
    assume ($1_option_$is_none'u64'($t17) ==> (var $range_0 := $Range(0, LenVec($t16)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'address'(ReadVec($t16, i)->$addr, $t0))))));

    // assume Implies(option::$is_some<u64>($t17), Eq<address>(select stake::ValidatorInfo.addr(Index($t16, option::$borrow<u64>($t17))), $t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:332:37+62
    assume ($1_option_$is_some'u64'($t17) ==> $IsEqual'address'(ReadVec($t16, $1_option_$borrow'u64'($t17))->$addr, $t0));

    // assume Implies(option::$is_some<u64>($t17), stake::spec_contains($t16, $t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:332:37+62
    assume ($1_option_$is_some'u64'($t17) ==> $1_stake_spec_contains($t16, $t0));

    // $t17 := opaque end: stake::find_validator($t16, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:332:37+62

    // $t18 := opaque begin: option::is_some<u64>($t17) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:332:20+80

    // assume WellFormed($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:332:20+80
    assume $IsValid'bool'($t18);

    // assume Eq<bool>($t18, option::spec_is_some<u64>($t17)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:332:20+80
    assume $IsEqual'bool'($t18, $1_option_spec_is_some'u64'($t17));

    // $t18 := opaque end: option::is_some<u64>($t17) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:332:20+80

    // if ($t18) goto L4 else goto L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:332:16+336
    if ($t18) { goto L4; } else { goto L3; }

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:332:16+336
L4:

    // $t19 := 2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:333:13+23
    assume {:print "$at(141,15088,15111)"} true;
    $t19 := 2;
    assume $IsValid'u64'($t19);

    // $t5 := $t19 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:332:16+336
    assume {:print "$at(141,14988,15324)"} true;
    $t5 := $t19;

    // goto L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:332:16+336
    goto L5;

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:334:53+13
    assume {:print "$at(141,15164,15177)"} true;
L3:

    // $t20 := get_field<stake::ValidatorSet>.pending_inactive($t10) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:334:52+31
    assume {:print "$at(141,15163,15194)"} true;
    $t20 := $t10->$pending_inactive;

    // $t21 := opaque begin: stake::find_validator($t20, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:334:37+61

    // assume And(WellFormed($t21), Le(Len<u64>(select option::Option.vec($t21)), 1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:334:37+61
    assume ($IsValid'$1_option_Option'u64''($t21) && (LenVec($t21->$vec) <= 1));

    // assume Implies(option::$is_none<u64>($t21), forall i: num: Range(0, Len<stake::ValidatorInfo>($t20)): Neq<address>(select stake::ValidatorInfo.addr(Index($t20, i)), $t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:334:37+61
    assume ($1_option_$is_none'u64'($t21) ==> (var $range_0 := $Range(0, LenVec($t20)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'address'(ReadVec($t20, i)->$addr, $t0))))));

    // assume Implies(option::$is_some<u64>($t21), Eq<address>(select stake::ValidatorInfo.addr(Index($t20, option::$borrow<u64>($t21))), $t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:334:37+61
    assume ($1_option_$is_some'u64'($t21) ==> $IsEqual'address'(ReadVec($t20, $1_option_$borrow'u64'($t21))->$addr, $t0));

    // assume Implies(option::$is_some<u64>($t21), stake::spec_contains($t20, $t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:334:37+61
    assume ($1_option_$is_some'u64'($t21) ==> $1_stake_spec_contains($t20, $t0));

    // $t21 := opaque end: stake::find_validator($t20, $t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:334:37+61

    // $t22 := opaque begin: option::is_some<u64>($t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:334:20+79

    // assume WellFormed($t22) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:334:20+79
    assume $IsValid'bool'($t22);

    // assume Eq<bool>($t22, option::spec_is_some<u64>($t21)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:334:20+79
    assume $IsEqual'bool'($t22, $1_option_spec_is_some'u64'($t21));

    // $t22 := opaque end: option::is_some<u64>($t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:334:20+79

    // if ($t22) goto L7 else goto L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:334:16+197
    if ($t22) { goto L7; } else { goto L6; }

    // label L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:335:13+33
    assume {:print "$at(141,15226,15259)"} true;
L7:

    // $t23 := 3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:335:13+33
    assume {:print "$at(141,15226,15259)"} true;
    $t23 := 3;
    assume $IsValid'u64'($t23);

    // $t4 := $t23 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:334:16+197
    assume {:print "$at(141,15127,15324)"} true;
    $t4 := $t23;

    // goto L8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:334:16+197
    goto L8;

    // label L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:337:13+25
    assume {:print "$at(141,15289,15314)"} true;
L6:

    // $t24 := 4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:337:13+25
    assume {:print "$at(141,15289,15314)"} true;
    $t24 := 4;
    assume $IsValid'u64'($t24);

    // $t4 := $t24 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:334:16+197
    assume {:print "$at(141,15127,15324)"} true;
    $t4 := $t24;

    // label L8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:334:16+197
L8:

    // $t5 := $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:332:16+336
    assume {:print "$at(141,14988,15324)"} true;
    $t5 := $t4;

    // label L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:332:16+336
L5:

    // $t6 := $t5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:330:9+480
    assume {:print "$at(141,14844,15324)"} true;
    $t6 := $t5;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:330:9+480
L2:

    // trace_return[0]($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:330:9+480
    assume {:print "$at(141,14844,15324)"} true;
    assume {:print "$track_return(38,26,0):", $t6} $t6 == $t6;

    // label L9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:339:5+1
    assume {:print "$at(141,15329,15330)"} true;
L9:

    // return $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:339:5+1
    assume {:print "$at(141,15329,15330)"} true;
    $ret0 := $t6;
    return;

    // label L10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:339:5+1
L10:

    // abort($t11) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:339:5+1
    assume {:print "$at(141,15329,15330)"} true;
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun stake::set_delegated_voter [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:593:5+358
procedure {:inline 1} $1_stake_set_delegated_voter(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: $1_stake_OwnerCapability;
    var $t6: int;
    var $t0: $signer;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[owner]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:593:5+1
    assume {:print "$at(141,26864,26865)"} true;
    assume {:print "$track_local(38,44,0):", $t0} $t0 == $t0;

    // trace_local[new_voter]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:593:5+1
    assume {:print "$track_local(38,44,1):", $t1} $t1 == $t1;

    // $t3 := signer::address_of($t0) on_abort goto L2 with $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:594:29+25
    assume {:print "$at(141,27003,27028)"} true;
    call $t3 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(141,27003,27028)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(38,44):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_local[owner_address]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:594:13+13
    assume {:print "$track_local(38,44,2):", $t3} $t3 == $t3;

    // stake::assert_owner_cap_exists($t3) on_abort goto L2 with $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:595:9+38
    assume {:print "$at(141,27038,27076)"} true;
    call $1_stake_assert_owner_cap_exists($t3);
    if ($abort_flag) {
        assume {:print "$at(141,27038,27076)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(38,44):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t5 := get_global<stake::OwnerCapability>($t3) on_abort goto L2 with $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:596:29+13
    assume {:print "$at(141,27106,27119)"} true;
    if (!$ResourceExists($1_stake_OwnerCapability_$memory, $t3)) {
        call $ExecFailureAbort();
    } else {
        $t5 := $ResourceValue($1_stake_OwnerCapability_$memory, $t3);
    }
    if ($abort_flag) {
        assume {:print "$at(141,27106,27119)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(38,44):", $t4} $t4 == $t4;
        goto L2;
    }

    // assume Identical($t6, select stake::OwnerCapability.pool_address($t5)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:136:9+42
    assume {:print "$at(142,6139,6181)"} true;
    assume ($t6 == $t5->$pool_address);

    // stake::set_delegated_voter_with_cap($t5, $t1) on_abort goto L2 with $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:597:9+54
    assume {:print "$at(141,27161,27215)"} true;
    call $1_stake_set_delegated_voter_with_cap($t5, $t1);
    if ($abort_flag) {
        assume {:print "$at(141,27161,27215)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(38,44):", $t4} $t4 == $t4;
        goto L2;
    }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:598:5+1
    assume {:print "$at(141,27221,27222)"} true;
L1:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:598:5+1
    assume {:print "$at(141,27221,27222)"} true;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:598:5+1
L2:

    // abort($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:598:5+1
    assume {:print "$at(141,27221,27222)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun stake::set_delegated_voter_with_cap [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:601:5+331
procedure {:inline 1} $1_stake_set_delegated_voter_with_cap(_$t0: $1_stake_OwnerCapability, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: $Mutation ($1_stake_StakePool);
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $Mutation ($1_stake_StakePool);
    var $t8: $Mutation (int);
    var $t0: $1_stake_OwnerCapability;
    var $t1: int;
    var $1_stake_StakePool_$modifies: [int]bool;
    var $temp_0'$1_stake_OwnerCapability': $1_stake_OwnerCapability;
    var $temp_0'$1_stake_StakePool': $1_stake_StakePool;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t4, select stake::OwnerCapability.pool_address($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:136:9+42
    assume {:print "$at(142,6139,6181)"} true;
    assume ($t4 == $t0->$pool_address);

    // trace_local[owner_cap]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:601:5+1
    assume {:print "$at(141,27301,27302)"} true;
    assume {:print "$track_local(38,45,0):", $t0} $t0 == $t0;

    // trace_local[new_voter]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:601:5+1
    assume {:print "$track_local(38,45,1):", $t1} $t1 == $t1;

    // $t5 := get_field<stake::OwnerCapability>.pool_address($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:602:28+22
    assume {:print "$at(141,27438,27460)"} true;
    $t5 := $t0->$pool_address;

    // trace_local[pool_address]($t5) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:602:13+12
    assume {:print "$track_local(38,45,2):", $t5} $t5 == $t5;

    // stake::assert_stake_pool_exists($t5) on_abort goto L2 with $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:603:9+38
    assume {:print "$at(141,27470,27508)"} true;
    call $1_stake_assert_stake_pool_exists($t5);
    if ($abort_flag) {
        assume {:print "$at(141,27470,27508)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(38,45):", $t6} $t6 == $t6;
        goto L2;
    }

    // $t7 := borrow_global<stake::StakePool>($t5) on_abort goto L2 with $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:604:26+17
    assume {:print "$at(141,27535,27552)"} true;
    if (!$ResourceExists($1_stake_StakePool_$memory, $t5)) {
        call $ExecFailureAbort();
    } else {
        $t7 := $Mutation($Global($t5), EmptyVec(), $ResourceValue($1_stake_StakePool_$memory, $t5));
    }
    if ($abort_flag) {
        assume {:print "$at(141,27535,27552)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(38,45):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[stake_pool]($t7) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:604:13+10
    $temp_0'$1_stake_StakePool' := $Dereference($t7);
    assume {:print "$track_local(38,45,3):", $temp_0'$1_stake_StakePool'} $temp_0'$1_stake_StakePool' == $temp_0'$1_stake_StakePool';

    // $t8 := borrow_field<stake::StakePool>.delegated_voter($t7) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:605:9+26
    assume {:print "$at(141,27587,27613)"} true;
    $t8 := $ChildMutation($t7, 6, $Dereference($t7)->$delegated_voter);

    // write_ref($t8, $t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:605:9+38
    $t8 := $UpdateMutation($t8, $t1);

    // write_back[Reference($t7).delegated_voter (address)]($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:605:9+38
    $t7 := $UpdateMutation($t7, $Update'$1_stake_StakePool'_delegated_voter($Dereference($t7), $Dereference($t8)));

    // write_back[stake::StakePool@]($t7) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:605:9+38
    $1_stake_StakePool_$memory := $ResourceUpdate($1_stake_StakePool_$memory, $GlobalLocationAddress($t7),
        $Dereference($t7));

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:606:5+1
    assume {:print "$at(141,27631,27632)"} true;
L1:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:606:5+1
    assume {:print "$at(141,27631,27632)"} true;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:606:5+1
L2:

    // abort($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:606:5+1
    assume {:print "$at(141,27631,27632)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun stake::set_operator [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:567:5+350
procedure {:inline 1} $1_stake_set_operator(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: $1_stake_OwnerCapability;
    var $t6: int;
    var $t0: $signer;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[owner]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:567:5+1
    assume {:print "$at(141,25724,25725)"} true;
    assume {:print "$track_local(38,46,0):", $t0} $t0 == $t0;

    // trace_local[new_operator]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:567:5+1
    assume {:print "$track_local(38,46,1):", $t1} $t1 == $t1;

    // $t3 := signer::address_of($t0) on_abort goto L2 with $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:568:29+25
    assume {:print "$at(141,25859,25884)"} true;
    call $t3 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(141,25859,25884)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(38,46):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_local[owner_address]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:568:13+13
    assume {:print "$track_local(38,46,2):", $t3} $t3 == $t3;

    // stake::assert_owner_cap_exists($t3) on_abort goto L2 with $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:569:9+38
    assume {:print "$at(141,25894,25932)"} true;
    call $1_stake_assert_owner_cap_exists($t3);
    if ($abort_flag) {
        assume {:print "$at(141,25894,25932)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(38,46):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t5 := get_global<stake::OwnerCapability>($t3) on_abort goto L2 with $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:570:29+13
    assume {:print "$at(141,25962,25975)"} true;
    if (!$ResourceExists($1_stake_OwnerCapability_$memory, $t3)) {
        call $ExecFailureAbort();
    } else {
        $t5 := $ResourceValue($1_stake_OwnerCapability_$memory, $t3);
    }
    if ($abort_flag) {
        assume {:print "$at(141,25962,25975)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(38,46):", $t4} $t4 == $t4;
        goto L2;
    }

    // assume Identical($t6, select stake::OwnerCapability.pool_address($t5)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:104:9+42
    assume {:print "$at(142,4820,4862)"} true;
    assume ($t6 == $t5->$pool_address);

    // stake::set_operator_with_cap($t5, $t1) on_abort goto L2 with $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:571:9+50
    assume {:print "$at(141,26017,26067)"} true;
    call $1_stake_set_operator_with_cap($t5, $t1);
    if ($abort_flag) {
        assume {:print "$at(141,26017,26067)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(38,46):", $t4} $t4 == $t4;
        goto L2;
    }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:572:5+1
    assume {:print "$at(141,26073,26074)"} true;
L1:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:572:5+1
    assume {:print "$at(141,26073,26074)"} true;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:572:5+1
L2:

    // abort($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:572:5+1
    assume {:print "$at(141,26073,26074)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun stake::set_operator_with_cap [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:575:5+611
procedure {:inline 1} $1_stake_set_operator_with_cap(_$t0: $1_stake_OwnerCapability, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: $Mutation ($1_stake_StakePool);
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: $Mutation ($1_stake_StakePool);
    var $t9: int;
    var $t10: $Mutation (int);
    var $t11: $Mutation ($1_event_EventHandle'$1_stake_SetOperatorEvent');
    var $t12: $1_stake_SetOperatorEvent;
    var $t0: $1_stake_OwnerCapability;
    var $t1: int;
    var $1_stake_StakePool_$modifies: [int]bool;
    var $temp_0'$1_stake_OwnerCapability': $1_stake_OwnerCapability;
    var $temp_0'$1_stake_StakePool': $1_stake_StakePool;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t5, select stake::OwnerCapability.pool_address($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:104:9+42
    assume {:print "$at(142,4820,4862)"} true;
    assume ($t5 == $t0->$pool_address);

    // trace_local[owner_cap]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:575:5+1
    assume {:print "$at(141,26174,26175)"} true;
    assume {:print "$track_local(38,47,0):", $t0} $t0 == $t0;

    // trace_local[new_operator]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:575:5+1
    assume {:print "$track_local(38,47,1):", $t1} $t1 == $t1;

    // $t6 := get_field<stake::OwnerCapability>.pool_address($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:576:28+22
    assume {:print "$at(141,26307,26329)"} true;
    $t6 := $t0->$pool_address;

    // trace_local[pool_address]($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:576:13+12
    assume {:print "$track_local(38,47,3):", $t6} $t6 == $t6;

    // stake::assert_stake_pool_exists($t6) on_abort goto L2 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:577:9+38
    assume {:print "$at(141,26339,26377)"} true;
    call $1_stake_assert_stake_pool_exists($t6);
    if ($abort_flag) {
        assume {:print "$at(141,26339,26377)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(38,47):", $t7} $t7 == $t7;
        goto L2;
    }

    // $t8 := borrow_global<stake::StakePool>($t6) on_abort goto L2 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:578:26+17
    assume {:print "$at(141,26404,26421)"} true;
    if (!$ResourceExists($1_stake_StakePool_$memory, $t6)) {
        call $ExecFailureAbort();
    } else {
        $t8 := $Mutation($Global($t6), EmptyVec(), $ResourceValue($1_stake_StakePool_$memory, $t6));
    }
    if ($abort_flag) {
        assume {:print "$at(141,26404,26421)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(38,47):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_local[stake_pool]($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:578:13+10
    $temp_0'$1_stake_StakePool' := $Dereference($t8);
    assume {:print "$track_local(38,47,4):", $temp_0'$1_stake_StakePool'} $temp_0'$1_stake_StakePool' == $temp_0'$1_stake_StakePool';

    // $t9 := get_field<stake::StakePool>.operator_address($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:579:28+27
    assume {:print "$at(141,26475,26502)"} true;
    $t9 := $Dereference($t8)->$operator_address;

    // trace_local[old_operator]($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:579:13+12
    assume {:print "$track_local(38,47,2):", $t9} $t9 == $t9;

    // $t10 := borrow_field<stake::StakePool>.operator_address($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:580:9+27
    assume {:print "$at(141,26512,26539)"} true;
    $t10 := $ChildMutation($t8, 5, $Dereference($t8)->$operator_address);

    // write_ref($t10, $t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:580:9+42
    $t10 := $UpdateMutation($t10, $t1);

    // write_back[Reference($t8).operator_address (address)]($t10) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:580:9+42
    $t8 := $UpdateMutation($t8, $Update'$1_stake_StakePool'_operator_address($Dereference($t8), $Dereference($t10)));

    // $t11 := borrow_field<stake::StakePool>.set_operator_events($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:583:13+35
    assume {:print "$at(141,26596,26631)"} true;
    $t11 := $ChildMutation($t8, 8, $Dereference($t8)->$set_operator_events);

    // $t12 := pack stake::SetOperatorEvent($t6, $t9, $t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:584:13+122
    assume {:print "$at(141,26645,26767)"} true;
    $t12 := $1_stake_SetOperatorEvent($t6, $t9, $t1);

    // opaque begin: event::emit_event<stake::SetOperatorEvent>($t11, $t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:582:9+213
    assume {:print "$at(141,26565,26778)"} true;

    // opaque end: event::emit_event<stake::SetOperatorEvent>($t11, $t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:582:9+213

    // write_back[Reference($t8).set_operator_events (event::EventHandle<stake::SetOperatorEvent>)]($t11) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:582:9+213
    $t8 := $UpdateMutation($t8, $Update'$1_stake_StakePool'_set_operator_events($Dereference($t8), $Dereference($t11)));

    // write_back[stake::StakePool@]($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:582:9+213
    $1_stake_StakePool_$memory := $ResourceUpdate($1_stake_StakePool_$memory, $GlobalLocationAddress($t8),
        $Dereference($t8));

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:590:5+1
    assume {:print "$at(141,26784,26785)"} true;
L1:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:590:5+1
    assume {:print "$at(141,26784,26785)"} true;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:590:5+1
L2:

    // abort($t7) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:590:5+1
    assume {:print "$at(141,26784,26785)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun stake::stake_pool_exists [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:400:5+89
procedure {:inline 1} $1_stake_stake_pool_exists(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[addr]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:400:5+1
    assume {:print "$at(141,18212,18213)"} true;
    assume {:print "$track_local(38,48,0):", $t0} $t0 == $t0;

    // $t1 := exists<stake::StakePool>($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:401:9+6
    assume {:print "$at(141,18272,18278)"} true;
    $t1 := $ResourceExists($1_stake_StakePool_$memory, $t0);

    // trace_return[0]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:401:9+23
    assume {:print "$track_return(38,48,0):", $t1} $t1 == $t1;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:402:5+1
    assume {:print "$at(141,18300,18301)"} true;
L1:

    // return $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:402:5+1
    assume {:print "$at(141,18300,18301)"} true;
    $ret0 := $t1;
    return;

}

// fun stake::unlock_with_cap [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:849:5+1066
procedure {:inline 1} $1_stake_unlock_with_cap(_$t0: int, _$t1: $1_stake_OwnerCapability) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: $Mutation ($1_stake_StakePool);
    var $t5: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $t6: int;
    var $t7: $1_stake_StakePool;
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: $Mutation ($1_stake_StakePool);
    var $t14: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $t15: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t16: int;
    var $t17: int;
    var $t18: $Mutation ($1_coin_Coin'$1_aptos_coin_AptosCoin');
    var $t19: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t20: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $t21: $Mutation ($1_coin_Coin'$1_aptos_coin_AptosCoin');
    var $t22: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t23: $Mutation ($1_event_EventHandle'$1_stake_UnlockStakeEvent');
    var $t24: $1_stake_UnlockStakeEvent;
    var $t0: int;
    var $t1: $1_stake_OwnerCapability;
    var $1_stake_StakePool_$modifies: [int]bool;
    var $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'': $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $temp_0'$1_stake_OwnerCapability': $1_stake_OwnerCapability;
    var $temp_0'$1_stake_StakePool': $1_stake_StakePool;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t6, select stake::OwnerCapability.pool_address($t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:56:9+42
    assume {:print "$at(142,2499,2541)"} true;
    assume ($t6 == $t1->$pool_address);

    // assume Identical($t7, global<stake::StakePool>($t6)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:57:9+53
    assume {:print "$at(142,2550,2603)"} true;
    assume ($t7 == $ResourceValue($1_stake_StakePool_$memory, $t6));

    // assume Identical($t8, math64::$min($t0, select coin::Coin.value(select stake::StakePool.active($t7)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:60:9+76
    assume {:print "$at(142,2725,2801)"} true;
    assume ($t8 == $1_math64_$min($t0, $t7->$active->$value));

    // trace_local[amount]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:849:5+1
    assume {:print "$at(141,39738,39739)"} true;
    assume {:print "$track_local(38,51,0):", $t0} $t0 == $t0;

    // trace_local[owner_cap]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:849:5+1
    assume {:print "$track_local(38,51,1):", $t1} $t1 == $t1;

    // $t9 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:851:23+1
    assume {:print "$at(141,39925,39926)"} true;
    $t9 := 0;
    assume $IsValid'u64'($t9);

    // $t10 := ==($t0, $t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:851:20+2
    $t10 := $IsEqual'u64'($t0, $t9);

    // if ($t10) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:851:9+47
    if ($t10) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:852:13+6
    assume {:print "$at(141,39942,39948)"} true;
L1:

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:852:13+6
    assume {:print "$at(141,39942,39948)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:857:28+9
    assume {:print "$at(141,40171,40180)"} true;
L0:

    // $t11 := get_field<stake::OwnerCapability>.pool_address($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:857:28+22
    assume {:print "$at(141,40171,40193)"} true;
    $t11 := $t1->$pool_address;

    // trace_local[pool_address]($t11) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:857:13+12
    assume {:print "$track_local(38,51,3):", $t11} $t11 == $t11;

    // stake::assert_stake_pool_exists($t11) on_abort goto L3 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:858:9+38
    assume {:print "$at(141,40203,40241)"} true;
    call $1_stake_assert_stake_pool_exists($t11);
    if ($abort_flag) {
        assume {:print "$at(141,40203,40241)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(38,51):", $t12} $t12 == $t12;
        goto L3;
    }

    // $t13 := borrow_global<stake::StakePool>($t11) on_abort goto L3 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:859:26+17
    assume {:print "$at(141,40268,40285)"} true;
    if (!$ResourceExists($1_stake_StakePool_$memory, $t11)) {
        call $ExecFailureAbort();
    } else {
        $t13 := $Mutation($Global($t11), EmptyVec(), $ResourceValue($1_stake_StakePool_$memory, $t11));
    }
    if ($abort_flag) {
        assume {:print "$at(141,40268,40285)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(38,51):", $t12} $t12 == $t12;
        goto L3;
    }

    // trace_local[stake_pool]($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:859:13+10
    $temp_0'$1_stake_StakePool' := $Dereference($t13);
    assume {:print "$track_local(38,51,4):", $temp_0'$1_stake_StakePool'} $temp_0'$1_stake_StakePool' == $temp_0'$1_stake_StakePool';

    // $t14 := get_field<stake::StakePool>.active($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:861:46+18
    assume {:print "$at(141,40414,40432)"} true;
    $t14 := $Dereference($t13)->$active;

    // assume Identical($t15, select coin::CoinInfo.supply(global<coin::CoinInfo<aptos_coin::AptosCoin>>(select type_info::TypeInfo.account_address(type_info::$type_of<aptos_coin::AptosCoin>())))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:32:9+99
    assume {:print "$at(105,1664,1763)"} true;
    assume ($t15 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply);

    // $t16 := coin::value<aptos_coin::AptosCoin>($t14) on_abort goto L3 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:861:34+31
    assume {:print "$at(141,40402,40433)"} true;
    call $t16 := $1_coin_value'$1_aptos_coin_AptosCoin'($t14);
    if ($abort_flag) {
        assume {:print "$at(141,40402,40433)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(38,51):", $t12} $t12 == $t12;
        goto L3;
    }

    // $t17 := math64::min($t0, $t16) on_abort goto L3 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:861:22+44
    call $t17 := $1_math64_min($t0, $t16);
    if ($abort_flag) {
        assume {:print "$at(141,40390,40434)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(38,51):", $t12} $t12 == $t12;
        goto L3;
    }

    // trace_local[amount#1]($t17) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:861:13+6
    assume {:print "$track_local(38,51,2):", $t17} $t17 == $t17;

    // $t18 := borrow_field<stake::StakePool>.active($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:862:44+22
    assume {:print "$at(141,40479,40501)"} true;
    $t18 := $ChildMutation($t13, 0, $Dereference($t13)->$active);

    // assume Identical($t19, select coin::CoinInfo.supply(global<coin::CoinInfo<aptos_coin::AptosCoin>>(select type_info::TypeInfo.account_address(type_info::$type_of<aptos_coin::AptosCoin>())))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:32:9+99
    assume {:print "$at(105,1664,1763)"} true;
    assume ($t19 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply);

    // $t20 := coin::extract<aptos_coin::AptosCoin>($t18, $t17) on_abort goto L3 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:862:30+45
    assume {:print "$at(141,40465,40510)"} true;
    call $t20,$t18 := $1_coin_extract'$1_aptos_coin_AptosCoin'($t18, $t17);
    if ($abort_flag) {
        assume {:print "$at(141,40465,40510)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(38,51):", $t12} $t12 == $t12;
        goto L3;
    }

    // write_back[Reference($t13).active (coin::Coin<aptos_coin::AptosCoin>)]($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:862:30+45
    $t13 := $UpdateMutation($t13, $Update'$1_stake_StakePool'_active($Dereference($t13), $Dereference($t18)));

    // trace_local[unlocked_stake]($t20) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:862:13+14
    assume {:print "$track_local(38,51,5):", $t20} $t20 == $t20;

    // $t21 := borrow_field<stake::StakePool>.pending_inactive($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:863:32+32
    assume {:print "$at(141,40543,40575)"} true;
    $t21 := $ChildMutation($t13, 3, $Dereference($t13)->$pending_inactive);

    // assume Identical($t22, select coin::CoinInfo.supply(global<coin::CoinInfo<aptos_coin::AptosCoin>>(select type_info::TypeInfo.account_address(type_info::$type_of<aptos_coin::AptosCoin>())))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:32:9+99
    assume {:print "$at(105,1664,1763)"} true;
    assume ($t22 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply);

    // coin::merge<aptos_coin::AptosCoin>($t21, $t20) on_abort goto L3 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:863:9+72
    assume {:print "$at(141,40520,40592)"} true;
    call $t21 := $1_coin_merge'$1_aptos_coin_AptosCoin'($t21, $t20);
    if ($abort_flag) {
        assume {:print "$at(141,40520,40592)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(38,51):", $t12} $t12 == $t12;
        goto L3;
    }

    // write_back[Reference($t13).pending_inactive (coin::Coin<aptos_coin::AptosCoin>)]($t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:863:9+72
    $t13 := $UpdateMutation($t13, $Update'$1_stake_StakePool'_pending_inactive($Dereference($t13), $Dereference($t21)));

    // $t23 := borrow_field<stake::StakePool>.unlock_stake_events($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:866:13+35
    assume {:print "$at(141,40634,40669)"} true;
    $t23 := $ChildMutation($t13, 16, $Dereference($t13)->$unlock_stake_events);

    // $t24 := pack stake::UnlockStakeEvent($t11, $t17) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:867:13+103
    assume {:print "$at(141,40683,40786)"} true;
    $t24 := $1_stake_UnlockStakeEvent($t11, $t17);

    // opaque begin: event::emit_event<stake::UnlockStakeEvent>($t23, $t24) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:865:9+194
    assume {:print "$at(141,40603,40797)"} true;

    // opaque end: event::emit_event<stake::UnlockStakeEvent>($t23, $t24) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:865:9+194

    // write_back[Reference($t13).unlock_stake_events (event::EventHandle<stake::UnlockStakeEvent>)]($t23) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:865:9+194
    $t13 := $UpdateMutation($t13, $Update'$1_stake_StakePool'_unlock_stake_events($Dereference($t13), $Dereference($t23)));

    // write_back[stake::StakePool@]($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:865:9+194
    $1_stake_StakePool_$memory := $ResourceUpdate($1_stake_StakePool_$memory, $GlobalLocationAddress($t13),
        $Dereference($t13));

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:872:5+1
    assume {:print "$at(141,40803,40804)"} true;
L2:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:872:5+1
    assume {:print "$at(141,40803,40804)"} true;
    return;

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:872:5+1
L3:

    // abort($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:872:5+1
    assume {:print "$at(141,40803,40804)"} true;
    $abort_code := $t12;
    $abort_flag := true;
    return;

}

// fun stake::withdraw_with_cap [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:887:5+1450
procedure {:inline 1} $1_stake_withdraw_with_cap(_$t0: $1_stake_OwnerCapability, _$t1: int) returns ($ret0: $1_coin_Coin'$1_aptos_coin_AptosCoin')
{
    // declare local variables
    var $t2: bool;
    var $t3: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $t4: int;
    var $t5: $Mutation ($1_stake_StakePool);
    var $t6: int;
    var $t7: int;
    var $t8: $Mutation ($1_stake_StakePool);
    var $t9: $1_stake_ValidatorSet;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: $Mutation ($1_coin_Coin'$1_aptos_coin_AptosCoin');
    var $t17: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t18: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $t19: $Mutation ($1_coin_Coin'$1_aptos_coin_AptosCoin');
    var $t20: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t21: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $t22: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: bool;
    var $t27: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t28: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $t29: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $t30: $Mutation ($1_event_EventHandle'$1_stake_WithdrawStakeEvent');
    var $t31: $1_stake_WithdrawStakeEvent;
    var $t32: $Mutation ($1_coin_Coin'$1_aptos_coin_AptosCoin');
    var $t33: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t34: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $t0: $1_stake_OwnerCapability;
    var $t1: int;
    var $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'': $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $temp_0'$1_stake_OwnerCapability': $1_stake_OwnerCapability;
    var $temp_0'$1_stake_StakePool': $1_stake_StakePool;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[owner_cap]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:887:5+1
    assume {:print "$at(141,41404,41405)"} true;
    assume {:print "$track_local(38,57,0):", $t0} $t0 == $t0;

    // trace_local[withdraw_amount]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:887:5+1
    assume {:print "$track_local(38,57,1):", $t1} $t1 == $t1;

    // $t6 := get_field<stake::OwnerCapability>.pool_address($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:891:28+22
    assume {:print "$at(141,41585,41607)"} true;
    $t6 := $t0->$pool_address;

    // trace_local[pool_address]($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:891:13+12
    assume {:print "$track_local(38,57,4):", $t6} $t6 == $t6;

    // stake::assert_stake_pool_exists($t6) on_abort goto L8 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:892:9+38
    assume {:print "$at(141,41617,41655)"} true;
    call $1_stake_assert_stake_pool_exists($t6);
    if ($abort_flag) {
        assume {:print "$at(141,41617,41655)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(38,57):", $t7} $t7 == $t7;
        goto L8;
    }

    // $t8 := borrow_global<stake::StakePool>($t6) on_abort goto L8 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:893:26+17
    assume {:print "$at(141,41682,41699)"} true;
    if (!$ResourceExists($1_stake_StakePool_$memory, $t6)) {
        call $ExecFailureAbort();
    } else {
        $t8 := $Mutation($Global($t6), EmptyVec(), $ResourceValue($1_stake_StakePool_$memory, $t6));
    }
    if ($abort_flag) {
        assume {:print "$at(141,41682,41699)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(38,57):", $t7} $t7 == $t7;
        goto L8;
    }

    // trace_local[stake_pool]($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:893:13+10
    $temp_0'$1_stake_StakePool' := $Dereference($t8);
    assume {:print "$track_local(38,57,5):", $temp_0'$1_stake_StakePool'} $temp_0'$1_stake_StakePool' == $temp_0'$1_stake_StakePool';

    // assume Identical($t9, global<stake::ValidatorSet>(0x1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:246:9+59
    assume {:print "$at(142,10599,10658)"} true;
    assume ($t9 == $ResourceValue($1_stake_ValidatorSet_$memory, 1));

    // $t10 := stake::get_validator_state($t6) on_abort goto L8 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:897:13+33
    assume {:print "$at(141,42040,42073)"} true;
    call $t10 := $1_stake_get_validator_state($t6);
    if ($abort_flag) {
        assume {:print "$at(141,42040,42073)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(38,57):", $t7} $t7 == $t7;
        goto L8;
    }

    // $t11 := 4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:897:50+25
    $t11 := 4;
    assume $IsValid'u64'($t11);

    // $t12 := ==($t10, $t11) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:897:47+2
    $t12 := $IsEqual'u64'($t10, $t11);

    // if ($t12) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:897:13+134
    if ($t12) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:898:13+24
    assume {:print "$at(141,42118,42142)"} true;
L1:

    // $t13 := timestamp::now_seconds() on_abort goto L8 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:898:13+24
    assume {:print "$at(141,42118,42142)"} true;
    call $t13 := $1_timestamp_now_seconds();
    if ($abort_flag) {
        assume {:print "$at(141,42118,42142)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(38,57):", $t7} $t7 == $t7;
        goto L8;
    }

    // $t14 := get_field<stake::StakePool>.locked_until_secs($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:898:41+28
    $t14 := $Dereference($t8)->$locked_until_secs;

    // $t2 := >=($t13, $t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:898:38+2
    call $t2 := $Ge($t13, $t14);

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:897:13+134
    assume {:print "$at(141,42040,42174)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:897:13+134
L0:

    // $t15 := false at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:897:13+134
    assume {:print "$at(141,42040,42174)"} true;
    $t15 := false;
    assume $IsValid'bool'($t15);

    // $t2 := $t15 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:897:13+134
    $t2 := $t15;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:897:13+134
L2:

    // if ($t2) goto L4 else goto L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:897:9+320
    assume {:print "$at(141,42036,42356)"} true;
    if ($t2) { goto L4; } else { goto L3; }

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:899:65+10
    assume {:print "$at(141,42242,42252)"} true;
L4:

    // $t16 := borrow_field<stake::StakePool>.pending_inactive($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:899:60+32
    assume {:print "$at(141,42237,42269)"} true;
    $t16 := $ChildMutation($t8, 3, $Dereference($t8)->$pending_inactive);

    // assume Identical($t17, select coin::CoinInfo.supply(global<coin::CoinInfo<aptos_coin::AptosCoin>>(select type_info::TypeInfo.account_address(type_info::$type_of<aptos_coin::AptosCoin>())))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:32:9+99
    assume {:print "$at(105,1664,1763)"} true;
    assume ($t17 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply);

    // $t18 := coin::extract_all<aptos_coin::AptosCoin>($t16) on_abort goto L8 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:899:42+51
    assume {:print "$at(141,42219,42270)"} true;
    call $t18,$t16 := $1_coin_extract_all'$1_aptos_coin_AptosCoin'($t16);
    if ($abort_flag) {
        assume {:print "$at(141,42219,42270)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(38,57):", $t7} $t7 == $t7;
        goto L8;
    }

    // write_back[Reference($t8).pending_inactive (coin::Coin<aptos_coin::AptosCoin>)]($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:899:42+51
    $t8 := $UpdateMutation($t8, $Update'$1_stake_StakePool'_pending_inactive($Dereference($t8), $Dereference($t16)));

    // trace_local[pending_inactive_stake]($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:899:17+22
    assume {:print "$track_local(38,57,3):", $t18} $t18 == $t18;

    // $t19 := borrow_field<stake::StakePool>.inactive($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:900:25+24
    assume {:print "$at(141,42296,42320)"} true;
    $t19 := $ChildMutation($t8, 1, $Dereference($t8)->$inactive);

    // assume Identical($t20, select coin::CoinInfo.supply(global<coin::CoinInfo<aptos_coin::AptosCoin>>(select type_info::TypeInfo.account_address(type_info::$type_of<aptos_coin::AptosCoin>())))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:32:9+99
    assume {:print "$at(105,1664,1763)"} true;
    assume ($t20 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply);

    // coin::merge<aptos_coin::AptosCoin>($t19, $t18) on_abort goto L8 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:900:13+61
    assume {:print "$at(141,42284,42345)"} true;
    call $t19 := $1_coin_merge'$1_aptos_coin_AptosCoin'($t19, $t18);
    if ($abort_flag) {
        assume {:print "$at(141,42284,42345)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(38,57):", $t7} $t7 == $t7;
        goto L8;
    }

    // write_back[Reference($t8).inactive (coin::Coin<aptos_coin::AptosCoin>)]($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:900:13+61
    $t8 := $UpdateMutation($t8, $Update'$1_stake_StakePool'_inactive($Dereference($t8), $Dereference($t19)));

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:904:31+15
    assume {:print "$at(141,42445,42460)"} true;
L3:

    // $t21 := get_field<stake::StakePool>.inactive($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:904:60+20
    assume {:print "$at(141,42474,42494)"} true;
    $t21 := $Dereference($t8)->$inactive;

    // assume Identical($t22, select coin::CoinInfo.supply(global<coin::CoinInfo<aptos_coin::AptosCoin>>(select type_info::TypeInfo.account_address(type_info::$type_of<aptos_coin::AptosCoin>())))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:32:9+99
    assume {:print "$at(105,1664,1763)"} true;
    assume ($t22 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply);

    // $t23 := coin::value<aptos_coin::AptosCoin>($t21) on_abort goto L8 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:904:48+33
    assume {:print "$at(141,42462,42495)"} true;
    call $t23 := $1_coin_value'$1_aptos_coin_AptosCoin'($t21);
    if ($abort_flag) {
        assume {:print "$at(141,42462,42495)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(38,57):", $t7} $t7 == $t7;
        goto L8;
    }

    // $t24 := math64::min($t1, $t23) on_abort goto L8 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:904:27+55
    call $t24 := $1_math64_min($t1, $t23);
    if ($abort_flag) {
        assume {:print "$at(141,42441,42496)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(38,57):", $t7} $t7 == $t7;
        goto L8;
    }

    // trace_local[withdraw_amount]($t24) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:904:9+15
    assume {:print "$track_local(38,57,1):", $t24} $t24 == $t24;

    // $t25 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:905:32+1
    assume {:print "$at(141,42529,42530)"} true;
    $t25 := 0;
    assume $IsValid'u64'($t25);

    // $t26 := ==($t24, $t25) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:905:29+2
    $t26 := $IsEqual'u64'($t24, $t25);

    // if ($t26) goto L6 else goto L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:905:9+56
    if ($t26) { goto L6; } else { goto L5; }

    // label L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:905:35+30
L6:

    // write_back[stake::StakePool@]($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:905:35+30
    assume {:print "$at(141,42532,42562)"} true;
    $1_stake_StakePool_$memory := $ResourceUpdate($1_stake_StakePool_$memory, $GlobalLocationAddress($t8),
        $Dereference($t8));

    // destroy($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:905:35+30

    // assume Identical($t27, select coin::CoinInfo.supply(global<coin::CoinInfo<aptos_coin::AptosCoin>>(select type_info::TypeInfo.account_address(type_info::$type_of<aptos_coin::AptosCoin>())))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:32:9+99
    assume {:print "$at(105,1664,1763)"} true;
    assume ($t27 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply);

    // $t28 := coin::zero<aptos_coin::AptosCoin>() on_abort goto L8 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:905:42+23
    assume {:print "$at(141,42539,42562)"} true;
    call $t28 := $1_coin_zero'$1_aptos_coin_AptosCoin'();
    if ($abort_flag) {
        assume {:print "$at(141,42539,42562)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(38,57):", $t7} $t7 == $t7;
        goto L8;
    }

    // trace_return[0]($t28) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:905:35+30
    assume {:print "$track_return(38,57,0):", $t28} $t28 == $t28;

    // $t29 := move($t28) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:905:35+30
    $t29 := $t28;

    // goto L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:905:35+30
    goto L7;

    // label L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:908:18+10
    assume {:print "$at(141,42609,42619)"} true;
L5:

    // $t30 := borrow_field<stake::StakePool>.withdraw_stake_events($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:908:13+37
    assume {:print "$at(141,42604,42641)"} true;
    $t30 := $ChildMutation($t8, 17, $Dereference($t8)->$withdraw_stake_events);

    // $t31 := pack stake::WithdrawStakeEvent($t6, $t24) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:909:13+115
    assume {:print "$at(141,42655,42770)"} true;
    $t31 := $1_stake_WithdrawStakeEvent($t6, $t24);

    // opaque begin: event::emit_event<stake::WithdrawStakeEvent>($t30, $t31) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:907:9+208
    assume {:print "$at(141,42573,42781)"} true;

    // opaque end: event::emit_event<stake::WithdrawStakeEvent>($t30, $t31) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:907:9+208

    // write_back[Reference($t8).withdraw_stake_events (event::EventHandle<stake::WithdrawStakeEvent>)]($t30) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:907:9+208
    $t8 := $UpdateMutation($t8, $Update'$1_stake_StakePool'_withdraw_stake_events($Dereference($t8), $Dereference($t30)));

    // $t32 := borrow_field<stake::StakePool>.inactive($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:915:23+24
    assume {:print "$at(141,42806,42830)"} true;
    $t32 := $ChildMutation($t8, 1, $Dereference($t8)->$inactive);

    // assume Identical($t33, select coin::CoinInfo.supply(global<coin::CoinInfo<aptos_coin::AptosCoin>>(select type_info::TypeInfo.account_address(type_info::$type_of<aptos_coin::AptosCoin>())))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:32:9+99
    assume {:print "$at(105,1664,1763)"} true;
    assume ($t33 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply);

    // $t34 := coin::extract<aptos_coin::AptosCoin>($t32, $t24) on_abort goto L8 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:915:9+56
    assume {:print "$at(141,42792,42848)"} true;
    call $t34,$t32 := $1_coin_extract'$1_aptos_coin_AptosCoin'($t32, $t24);
    if ($abort_flag) {
        assume {:print "$at(141,42792,42848)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(38,57):", $t7} $t7 == $t7;
        goto L8;
    }

    // write_back[Reference($t8).inactive (coin::Coin<aptos_coin::AptosCoin>)]($t32) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:915:9+56
    $t8 := $UpdateMutation($t8, $Update'$1_stake_StakePool'_inactive($Dereference($t8), $Dereference($t32)));

    // write_back[stake::StakePool@]($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:915:9+56
    $1_stake_StakePool_$memory := $ResourceUpdate($1_stake_StakePool_$memory, $GlobalLocationAddress($t8),
        $Dereference($t8));

    // trace_return[0]($t34) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:915:9+56
    assume {:print "$track_return(38,57,0):", $t34} $t34 == $t34;

    // $t29 := move($t34) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:915:9+56
    $t29 := $t34;

    // label L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:916:5+1
    assume {:print "$at(141,42853,42854)"} true;
L7:

    // return $t29 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:916:5+1
    assume {:print "$at(141,42853,42854)"} true;
    $ret0 := $t29;
    return;

    // label L8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:916:5+1
L8:

    // abort($t7) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.move:916:5+1
    assume {:print "$at(141,42853,42854)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:7:9+50
function  $1_aptos_hash_spec_keccak256(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_aptos_hash_spec_keccak256(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:12:9+58
function  $1_aptos_hash_spec_sha2_512_internal(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_aptos_hash_spec_sha2_512_internal(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:17:9+58
function  $1_aptos_hash_spec_sha3_512_internal(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_aptos_hash_spec_sha3_512_internal(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:22:9+59
function  $1_aptos_hash_spec_ripemd160_internal(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_aptos_hash_spec_ripemd160_internal(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:27:9+61
function  $1_aptos_hash_spec_blake2b_256_internal(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_aptos_hash_spec_blake2b_256_internal(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.move:154:5+155
function {:inline} $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory: $Memory $1_reconfiguration_Configuration): int {
    $ResourceValue($1_reconfiguration_Configuration_$memory, 1)->$last_reconfiguration_time
}

// struct reconfiguration::Configuration at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.move:33:5+306
datatype $1_reconfiguration_Configuration {
    $1_reconfiguration_Configuration($epoch: int, $last_reconfiguration_time: int, $events: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent')
}
function {:inline} $Update'$1_reconfiguration_Configuration'_epoch(s: $1_reconfiguration_Configuration, x: int): $1_reconfiguration_Configuration {
    $1_reconfiguration_Configuration(x, s->$last_reconfiguration_time, s->$events)
}
function {:inline} $Update'$1_reconfiguration_Configuration'_last_reconfiguration_time(s: $1_reconfiguration_Configuration, x: int): $1_reconfiguration_Configuration {
    $1_reconfiguration_Configuration(s->$epoch, x, s->$events)
}
function {:inline} $Update'$1_reconfiguration_Configuration'_events(s: $1_reconfiguration_Configuration, x: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'): $1_reconfiguration_Configuration {
    $1_reconfiguration_Configuration(s->$epoch, s->$last_reconfiguration_time, x)
}
function $IsValid'$1_reconfiguration_Configuration'(s: $1_reconfiguration_Configuration): bool {
    $IsValid'u64'(s->$epoch)
      && $IsValid'u64'(s->$last_reconfiguration_time)
      && $IsValid'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(s->$events)
}
function {:inline} $IsEqual'$1_reconfiguration_Configuration'(s1: $1_reconfiguration_Configuration, s2: $1_reconfiguration_Configuration): bool {
    s1 == s2
}
var $1_reconfiguration_Configuration_$memory: $Memory $1_reconfiguration_Configuration;

// struct reconfiguration::NewEpochEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.move:28:5+64
datatype $1_reconfiguration_NewEpochEvent {
    $1_reconfiguration_NewEpochEvent($epoch: int)
}
function {:inline} $Update'$1_reconfiguration_NewEpochEvent'_epoch(s: $1_reconfiguration_NewEpochEvent, x: int): $1_reconfiguration_NewEpochEvent {
    $1_reconfiguration_NewEpochEvent(x)
}
function $IsValid'$1_reconfiguration_NewEpochEvent'(s: $1_reconfiguration_NewEpochEvent): bool {
    $IsValid'u64'(s->$epoch)
}
function {:inline} $IsEqual'$1_reconfiguration_NewEpochEvent'(s1: $1_reconfiguration_NewEpochEvent, s2: $1_reconfiguration_NewEpochEvent): bool {
    s1 == s2
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:38:10+241
function {:inline} $1_pool_u64_spec_shares(pool: $1_pool_u64_Pool, shareholder: int): int {
    (if ($1_simple_map_spec_contains_key'address_u64'(pool->$shares, shareholder)) then ($1_simple_map_spec_get'address_u64'(pool->$shares, shareholder)) else (0))
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:105:10+310
function {:inline} $1_pool_u64_spec_amount_to_shares_with_total_coins(pool: $1_pool_u64_Pool, coins_amount: int, total_coins: int): int {
    (if (($IsEqual'u64'(pool->$total_coins, 0) || $IsEqual'u64'(pool->$total_shares, 0))) then ((coins_amount * pool->$scaling_factor)) else (((coins_amount * pool->$total_shares) div total_coins)))
}

// spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:129:10+265
function {:inline} $1_pool_u64_spec_shares_to_amount_with_total_coins(pool: $1_pool_u64_Pool, shares: int, total_coins: int): int {
    (if (($IsEqual'u64'(pool->$total_coins, 0) || $IsEqual'u64'(pool->$total_shares, 0))) then (0) else (((shares * total_coins) div pool->$total_shares)))
}

// struct pool_u64::Pool at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:38:5+449
datatype $1_pool_u64_Pool {
    $1_pool_u64_Pool($shareholders_limit: int, $total_coins: int, $total_shares: int, $shares: Table int (int), $shareholders: Vec (int), $scaling_factor: int)
}
function {:inline} $Update'$1_pool_u64_Pool'_shareholders_limit(s: $1_pool_u64_Pool, x: int): $1_pool_u64_Pool {
    $1_pool_u64_Pool(x, s->$total_coins, s->$total_shares, s->$shares, s->$shareholders, s->$scaling_factor)
}
function {:inline} $Update'$1_pool_u64_Pool'_total_coins(s: $1_pool_u64_Pool, x: int): $1_pool_u64_Pool {
    $1_pool_u64_Pool(s->$shareholders_limit, x, s->$total_shares, s->$shares, s->$shareholders, s->$scaling_factor)
}
function {:inline} $Update'$1_pool_u64_Pool'_total_shares(s: $1_pool_u64_Pool, x: int): $1_pool_u64_Pool {
    $1_pool_u64_Pool(s->$shareholders_limit, s->$total_coins, x, s->$shares, s->$shareholders, s->$scaling_factor)
}
function {:inline} $Update'$1_pool_u64_Pool'_shares(s: $1_pool_u64_Pool, x: Table int (int)): $1_pool_u64_Pool {
    $1_pool_u64_Pool(s->$shareholders_limit, s->$total_coins, s->$total_shares, x, s->$shareholders, s->$scaling_factor)
}
function {:inline} $Update'$1_pool_u64_Pool'_shareholders(s: $1_pool_u64_Pool, x: Vec (int)): $1_pool_u64_Pool {
    $1_pool_u64_Pool(s->$shareholders_limit, s->$total_coins, s->$total_shares, s->$shares, x, s->$scaling_factor)
}
function {:inline} $Update'$1_pool_u64_Pool'_scaling_factor(s: $1_pool_u64_Pool, x: int): $1_pool_u64_Pool {
    $1_pool_u64_Pool(s->$shareholders_limit, s->$total_coins, s->$total_shares, s->$shares, s->$shareholders, x)
}
function $IsValid'$1_pool_u64_Pool'(s: $1_pool_u64_Pool): bool {
    $IsValid'u64'(s->$shareholders_limit)
      && $IsValid'u64'(s->$total_coins)
      && $IsValid'u64'(s->$total_shares)
      && $IsValid'$1_simple_map_SimpleMap'address_u64''(s->$shares)
      && $IsValid'vec'address''(s->$shareholders)
      && $IsValid'u64'(s->$scaling_factor)
}
function {:inline} $IsEqual'$1_pool_u64_Pool'(s1: $1_pool_u64_Pool, s2: $1_pool_u64_Pool): bool {
    $IsEqual'u64'(s1->$shareholders_limit, s2->$shareholders_limit)
    && $IsEqual'u64'(s1->$total_coins, s2->$total_coins)
    && $IsEqual'u64'(s1->$total_shares, s2->$total_shares)
    && $IsEqual'$1_simple_map_SimpleMap'address_u64''(s1->$shares, s2->$shares)
    && $IsEqual'vec'address''(s1->$shareholders, s2->$shareholders)
    && $IsEqual'u64'(s1->$scaling_factor, s2->$scaling_factor)}

// fun pool_u64::contains [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:98:5+129
procedure {:inline 1} $1_pool_u64_contains(_$t0: $1_pool_u64_Pool, _$t1: int) returns ($ret0: bool)
{
    // declare local variables
    var $t2: Table int (int);
    var $t3: bool;
    var $t4: int;
    var $t0: $1_pool_u64_Pool;
    var $t1: int;
    var $temp_0'$1_pool_u64_Pool': $1_pool_u64_Pool;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:98:5+1
    assume {:print "$at(67,3815,3816)"} true;
    assume {:print "$track_local(57,5,0):", $t0} $t0 == $t0;

    // trace_local[shareholder]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:98:5+1
    assume {:print "$track_local(57,5,1):", $t1} $t1 == $t1;

    // $t2 := get_field<pool_u64::Pool>.shares($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:99:34+12
    assume {:print "$at(67,3911,3923)"} true;
    $t2 := $t0->$shares;

    // $t3 := simple_map::contains_key<address, u64>($t2, $t1) on_abort goto L2 with $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:99:9+52
    call $t3 := $1_simple_map_contains_key'address_u64'($t2, $t1);
    if ($abort_flag) {
        assume {:print "$at(67,3886,3938)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(57,5):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_return[0]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:99:9+52
    assume {:print "$track_return(57,5,0):", $t3} $t3 == $t3;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:100:5+1
    assume {:print "$at(67,3943,3944)"} true;
L1:

    // return $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:100:5+1
    assume {:print "$at(67,3943,3944)"} true;
    $ret0 := $t3;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:100:5+1
L2:

    // abort($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:100:5+1
    assume {:print "$at(67,3943,3944)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun pool_u64::to_u128 [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:266:5+57
procedure {:inline 1} $1_pool_u64_to_u128(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t0: int;
    var $temp_0'u128': int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[num]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:266:5+1
    assume {:print "$at(67,11617,11618)"} true;
    assume {:print "$track_local(57,18,0):", $t0} $t0 == $t0;

    // $t1 := (u128)($t0) on_abort goto L2 with $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:267:9+13
    assume {:print "$at(67,11655,11668)"} true;
    call $t1 := $CastU128($t0);
    if ($abort_flag) {
        assume {:print "$at(67,11655,11668)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(57,18):", $t2} $t2 == $t2;
        goto L2;
    }

    // trace_return[0]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:267:9+13
    assume {:print "$track_return(57,18,0):", $t1} $t1 == $t1;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:268:5+1
    assume {:print "$at(67,11673,11674)"} true;
L1:

    // return $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:268:5+1
    assume {:print "$at(67,11673,11674)"} true;
    $ret0 := $t1;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:268:5+1
L2:

    // abort($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:268:5+1
    assume {:print "$at(67,11673,11674)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun pool_u64::balance [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:112:5+161
procedure {:inline 1} $1_pool_u64_balance(_$t0: $1_pool_u64_Pool, _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t0: $1_pool_u64_Pool;
    var $t1: int;
    var $temp_0'$1_pool_u64_Pool': $1_pool_u64_Pool;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t3, pool_u64::spec_shares($t0, $t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:53:9+44
    assume {:print "$at(68,1730,1774)"} true;
    assume ($t3 == $1_pool_u64_spec_shares($t0, $t1));

    // assume Identical($t4, select pool_u64::Pool.total_coins($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:54:9+35
    assume {:print "$at(68,1783,1818)"} true;
    assume ($t4 == $t0->$total_coins);

    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:112:5+1
    assume {:print "$at(67,4293,4294)"} true;
    assume {:print "$track_local(57,3,0):", $t0} $t0 == $t0;

    // trace_local[shareholder]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:112:5+1
    assume {:print "$track_local(57,3,1):", $t1} $t1 == $t1;

    // $t5 := pool_u64::shares($t0, $t1) on_abort goto L2 with $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:113:26+25
    assume {:print "$at(67,4379,4404)"} true;
    call $t5 := $1_pool_u64_shares($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(67,4379,4404)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(57,3):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[num_shares]($t5) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:113:13+10
    assume {:print "$track_local(57,3,2):", $t5} $t5 == $t5;

    // $t7 := pool_u64::shares_to_amount($t0, $t5) on_abort goto L2 with $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:114:9+34
    assume {:print "$at(67,4414,4448)"} true;
    call $t7 := $1_pool_u64_shares_to_amount($t0, $t5);
    if ($abort_flag) {
        assume {:print "$at(67,4414,4448)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(57,3):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_return[0]($t7) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:114:9+34
    assume {:print "$track_return(57,3,0):", $t7} $t7 == $t7;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:115:5+1
    assume {:print "$at(67,4453,4454)"} true;
L1:

    // return $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:115:5+1
    assume {:print "$at(67,4453,4454)"} true;
    $ret0 := $t7;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:115:5+1
L2:

    // abort($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:115:5+1
    assume {:print "$at(67,4453,4454)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun pool_u64::add_shares [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:148:5+900
procedure {:inline 1} $1_pool_u64_add_shares(_$t0: $Mutation ($1_pool_u64_Pool), _$t1: int, _$t2: int) returns ($ret0: int, $ret1: $Mutation ($1_pool_u64_Pool))
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $Mutation (int);
    var $t8: bool;
    var $t9: bool;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: $1_pool_u64_Pool;
    var $t14: bool;
    var $t15: int;
    var $t16: $Mutation (Table int (int));
    var $t17: $Mutation (int);
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: bool;
    var $t27: Vec (int);
    var $t28: int;
    var $t29: int;
    var $t30: bool;
    var $t31: int;
    var $t32: int;
    var $t33: $Mutation (Vec (int));
    var $t34: $Mutation (Table int (int));
    var $t0: $Mutation ($1_pool_u64_Pool);
    var $t1: int;
    var $t2: int;
    var $temp_0'$1_pool_u64_Pool': $1_pool_u64_Pool;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // assume Identical($t8, simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares($t0), $t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:74:9+73
    assume {:print "$at(68,2864,2937)"} true;
    assume ($t8 == $1_simple_map_spec_contains_key'address_u64'($Dereference($t0)->$shares, $t1));

    // assume Identical($t9, simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares($t0), $t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:83:9+73
    assume {:print "$at(68,3186,3259)"} true;
    assume ($t9 == $1_simple_map_spec_contains_key'address_u64'($Dereference($t0)->$shares, $t1));

    // assume Identical($t10, simple_map::spec_get<address, u64>(select pool_u64::Pool.shares($t0), $t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:84:9+68
    assume {:print "$at(68,3268,3336)"} true;
    assume ($t10 == $1_simple_map_spec_get'address_u64'($Dereference($t0)->$shares, $t1));

    // assume Identical($t11, simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares($t0), $t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:94:9+73
    assume {:print "$at(68,3636,3709)"} true;
    assume ($t11 == $1_simple_map_spec_contains_key'address_u64'($Dereference($t0)->$shares, $t1));

    // assume Identical($t12, simple_map::spec_get<address, u64>(select pool_u64::Pool.shares($t0), $t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:95:9+68
    assume {:print "$at(68,3718,3786)"} true;
    assume ($t12 == $1_simple_map_spec_get'address_u64'($Dereference($t0)->$shares, $t1));

    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:148:5+1
    assume {:print "$at(67,5818,5819)"} true;
    $temp_0'$1_pool_u64_Pool' := $Dereference($t0);
    assume {:print "$track_local(57,0,0):", $temp_0'$1_pool_u64_Pool'} $temp_0'$1_pool_u64_Pool' == $temp_0'$1_pool_u64_Pool';

    // trace_local[shareholder]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:148:5+1
    assume {:print "$track_local(57,0,1):", $t1} $t1 == $t1;

    // trace_local[new_shares]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:148:5+1
    assume {:print "$track_local(57,0,2):", $t2} $t2 == $t2;

    // $t13 := read_ref($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:149:21+19
    assume {:print "$at(67,5916,5935)"} true;
    $t13 := $Dereference($t0);

    // $t14 := pool_u64::contains($t13, $t1) on_abort goto L14 with $t15 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:149:13+27
    call $t14 := $1_pool_u64_contains($t13, $t1);
    if ($abort_flag) {
        assume {:print "$at(67,5908,5935)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(57,0):", $t15} $t15 == $t15;
        goto L14;
    }

    // if ($t14) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:149:9+808
    if ($t14) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:150:63+4
    assume {:print "$at(67,6001,6005)"} true;
L1:

    // $t16 := borrow_field<pool_u64::Pool>.shares($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:150:58+16
    assume {:print "$at(67,5996,6012)"} true;
    $t16 := $ChildMutation($t0, 3, $Dereference($t0)->$shares);

    // $t17 := simple_map::borrow_mut<address, u64>($t16, $t1) on_abort goto L14 with $t15 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:150:35+54
    call $t17,$t16 := $1_simple_map_borrow_mut'address_u64'($t16, $t1);
    if ($abort_flag) {
        assume {:print "$at(67,5973,6027)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(57,0):", $t15} $t15 == $t15;
        goto L14;
    }

    // trace_local[existing_shares]($t17) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:150:17+15
    $temp_0'u64' := $Dereference($t17);
    assume {:print "$track_local(57,0,7):", $temp_0'u64'} $temp_0'u64' == $temp_0'u64';

    // $t18 := read_ref($t17) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:151:34+16
    assume {:print "$at(67,6062,6078)"} true;
    $t18 := $Dereference($t17);

    // trace_local[current_shares]($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:151:17+14
    assume {:print "$track_local(57,0,6):", $t18} $t18 == $t18;

    // $t19 := 18446744073709551615 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:152:21+7
    assume {:print "$at(67,6100,6107)"} true;
    $t19 := 18446744073709551615;
    assume $IsValid'u64'($t19);

    // $t20 := -($t19, $t18) on_abort goto L14 with $t15 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:152:29+1
    call $t20 := $Sub($t19, $t18);
    if ($abort_flag) {
        assume {:print "$at(67,6108,6109)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(57,0):", $t15} $t15 == $t15;
        goto L14;
    }

    // $t21 := >=($t20, $t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:152:46+2
    call $t21 := $Ge($t20, $t2);

    // if ($t21) goto L3 else goto L15 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:152:13+102
    if ($t21) { goto L3; } else { goto L15; }

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:152:13+102
L3:

    // goto L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:152:13+102
    assume {:print "$at(67,6092,6194)"} true;
    goto L4;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:152:13+102
L2:

    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:152:13+102
    assume {:print "$at(67,6092,6194)"} true;
    $temp_0'$1_pool_u64_Pool' := $Dereference($t0);
    assume {:print "$track_local(57,0,0):", $temp_0'$1_pool_u64_Pool'} $temp_0'$1_pool_u64_Pool' == $temp_0'$1_pool_u64_Pool';

    // destroy($t17) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:152:13+102

    // $t22 := 5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:152:85+28
    $t22 := 5;
    assume $IsValid'u64'($t22);

    // $t23 := error::invalid_argument($t22) on_abort goto L14 with $t15 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:152:61+53
    call $t23 := $1_error_invalid_argument($t22);
    if ($abort_flag) {
        assume {:print "$at(67,6140,6193)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(57,0):", $t15} $t15 == $t15;
        goto L14;
    }

    // trace_abort($t23) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:152:13+102
    assume {:print "$at(67,6092,6194)"} true;
    assume {:print "$track_abort(57,0):", $t23} $t23 == $t23;

    // $t15 := move($t23) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:152:13+102
    $t15 := $t23;

    // goto L14 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:152:13+102
    goto L14;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:154:32+14
    assume {:print "$at(67,6228,6242)"} true;
L4:

    // $t24 := +($t18, $t2) on_abort goto L14 with $t15 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:154:47+1
    assume {:print "$at(67,6243,6244)"} true;
    call $t24 := $AddU64($t18, $t2);
    if ($abort_flag) {
        assume {:print "$at(67,6243,6244)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(57,0):", $t15} $t15 == $t15;
        goto L14;
    }

    // write_ref($t17, $t24) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:154:13+46
    $t17 := $UpdateMutation($t17, $t24);

    // $t5 := read_ref($t17) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:155:13+16
    assume {:print "$at(67,6269,6285)"} true;
    $t5 := $Dereference($t17);

    // write_back[Reference($t16)[]]($t17) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:155:13+16
    $t16 := $UpdateMutation($t16, UpdateTable($Dereference($t16), ReadVec($t17->p, LenVec($t16->p)), $Dereference($t17)));

    // write_back[Reference($t0).shares (simple_map::SimpleMap<address, u64>)]($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:155:13+16
    $t0 := $UpdateMutation($t0, $Update'$1_pool_u64_Pool'_shares($Dereference($t0), $Dereference($t16)));

    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:155:13+16
    $temp_0'$1_pool_u64_Pool' := $Dereference($t0);
    assume {:print "$track_local(57,0,0):", $temp_0'$1_pool_u64_Pool'} $temp_0'$1_pool_u64_Pool' == $temp_0'$1_pool_u64_Pool';

    // goto L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:149:9+808
    assume {:print "$at(67,5904,6712)"} true;
    goto L5;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:156:20+10
    assume {:print "$at(67,6305,6315)"} true;
L0:

    // $t25 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:156:33+1
    assume {:print "$at(67,6318,6319)"} true;
    $t25 := 0;
    assume $IsValid'u64'($t25);

    // $t26 := >($t2, $t25) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:156:31+1
    call $t26 := $Gt($t2, $t25);

    // if ($t26) goto L7 else goto L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:156:16+411
    if ($t26) { goto L7; } else { goto L6; }

    // label L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:158:33+4
    assume {:print "$at(67,6376,6380)"} true;
L7:

    // $t27 := get_field<pool_u64::Pool>.shareholders($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:158:32+18
    assume {:print "$at(67,6375,6393)"} true;
    $t27 := $Dereference($t0)->$shareholders;

    // $t28 := vector::length<address>($t27) on_abort goto L14 with $t15 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:158:17+34
    call $t28 := $1_vector_length'address'($t27);
    if ($abort_flag) {
        assume {:print "$at(67,6360,6394)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(57,0):", $t15} $t15 == $t15;
        goto L14;
    }

    // $t29 := get_field<pool_u64::Pool>.shareholders_limit($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:158:54+23
    $t29 := $Dereference($t0)->$shareholders_limit;

    // $t30 := <($t28, $t29) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:158:52+1
    call $t30 := $Lt($t28, $t29);

    // if ($t30) goto L9 else goto L8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:157:13+162
    assume {:print "$at(67,6335,6497)"} true;
    if ($t30) { goto L9; } else { goto L8; }

    // label L9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:157:13+162
L9:

    // goto L10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:157:13+162
    assume {:print "$at(67,6335,6497)"} true;
    goto L10;

    // label L8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:157:13+162
L8:

    // pack_ref_deep($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:157:13+162
    assume {:print "$at(67,6335,6497)"} true;

    // destroy($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:157:13+162

    // $t31 := 2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:159:38+22
    assume {:print "$at(67,6459,6481)"} true;
    $t31 := 2;
    assume $IsValid'u64'($t31);

    // $t32 := error::invalid_state($t31) on_abort goto L14 with $t15 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:159:17+44
    call $t32 := $1_error_invalid_state($t31);
    if ($abort_flag) {
        assume {:print "$at(67,6438,6482)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(57,0):", $t15} $t15 == $t15;
        goto L14;
    }

    // trace_abort($t32) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:157:13+162
    assume {:print "$at(67,6335,6497)"} true;
    assume {:print "$track_abort(57,0):", $t32} $t32 == $t32;

    // $t15 := move($t32) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:157:13+162
    $t15 := $t32;

    // goto L14 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:157:13+162
    goto L14;

    // label L10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:162:36+4
    assume {:print "$at(67,6535,6539)"} true;
L10:

    // $t33 := borrow_field<pool_u64::Pool>.shareholders($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:162:31+22
    assume {:print "$at(67,6530,6552)"} true;
    $t33 := $ChildMutation($t0, 4, $Dereference($t0)->$shareholders);

    // vector::push_back<address>($t33, $t1) on_abort goto L14 with $t15 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:162:13+54
    call $t33 := $1_vector_push_back'address'($t33, $t1);
    if ($abort_flag) {
        assume {:print "$at(67,6512,6566)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(57,0):", $t15} $t15 == $t15;
        goto L14;
    }

    // write_back[Reference($t0).shareholders (vector<address>)]($t33) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:162:13+54
    $t0 := $UpdateMutation($t0, $Update'$1_pool_u64_Pool'_shareholders($Dereference($t0), $Dereference($t33)));

    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:162:13+54
    $temp_0'$1_pool_u64_Pool' := $Dereference($t0);
    assume {:print "$track_local(57,0,0):", $temp_0'$1_pool_u64_Pool'} $temp_0'$1_pool_u64_Pool' == $temp_0'$1_pool_u64_Pool';

    // $t34 := borrow_field<pool_u64::Pool>.shares($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:163:29+16
    assume {:print "$at(67,6596,6612)"} true;
    $t34 := $ChildMutation($t0, 3, $Dereference($t0)->$shares);

    // simple_map::add<address, u64>($t34, $t1, $t2) on_abort goto L14 with $t15 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:163:13+58
    call $t34 := $1_simple_map_add'address_u64'($t34, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(67,6580,6638)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(57,0):", $t15} $t15 == $t15;
        goto L14;
    }

    // write_back[Reference($t0).shares (simple_map::SimpleMap<address, u64>)]($t34) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:163:13+58
    $t0 := $UpdateMutation($t0, $Update'$1_pool_u64_Pool'_shares($Dereference($t0), $Dereference($t34)));

    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:163:13+58
    $temp_0'$1_pool_u64_Pool' := $Dereference($t0);
    assume {:print "$track_local(57,0,0):", $temp_0'$1_pool_u64_Pool'} $temp_0'$1_pool_u64_Pool' == $temp_0'$1_pool_u64_Pool';

    // goto L11 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:156:16+411
    assume {:print "$at(67,6301,6712)"} true;
    goto L11;

    // label L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:156:16+411
L6:

    // destroy($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:156:16+411
    assume {:print "$at(67,6301,6712)"} true;

    // label L11 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:156:16+411
L11:

    // $t5 := $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:149:9+808
    assume {:print "$at(67,5904,6712)"} true;
    $t5 := $t2;

    // label L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:149:9+808
L5:

    // trace_return[0]($t5) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:149:9+808
    assume {:print "$at(67,5904,6712)"} true;
    assume {:print "$track_return(57,0,0):", $t5} $t5 == $t5;

    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:149:9+808
    $temp_0'$1_pool_u64_Pool' := $Dereference($t0);
    assume {:print "$track_local(57,0,0):", $temp_0'$1_pool_u64_Pool'} $temp_0'$1_pool_u64_Pool' == $temp_0'$1_pool_u64_Pool';

    // pack_ref_deep($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:149:9+808

    // goto L13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:149:9+808
    goto L13;

    // label L12 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L12:

    // destroy($t0) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L2 at <internal>:1:1+10
    goto L2;

    // label L13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:168:5+1
    assume {:print "$at(67,6717,6718)"} true;
L13:

    // return $t5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:168:5+1
    assume {:print "$at(67,6717,6718)"} true;
    $ret0 := $t5;
    $ret1 := $t0;
    return;

    // label L14 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:168:5+1
L14:

    // abort($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:168:5+1
    assume {:print "$at(67,6717,6718)"} true;
    $abort_code := $t15;
    $abort_flag := true;
    return;

    // label L15 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L15:

    // destroy($t16) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L12 at <internal>:1:1+10
    goto L12;

}

// fun pool_u64::amount_to_shares [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:221:5+152
procedure {:inline 1} $1_pool_u64_amount_to_shares(_$t0: $1_pool_u64_Pool, _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t0: $1_pool_u64_Pool;
    var $t1: int;
    var $temp_0'$1_pool_u64_Pool': $1_pool_u64_Pool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:221:5+1
    assume {:print "$at(67,9164,9165)"} true;
    assume {:print "$track_local(57,1,0):", $t0} $t0 == $t0;

    // trace_local[coins_amount]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:221:5+1
    assume {:print "$track_local(57,1,1):", $t1} $t1 == $t1;

    // $t2 := get_field<pool_u64::Pool>.total_coins($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:222:63+16
    assume {:print "$at(67,9293,9309)"} true;
    $t2 := $t0->$total_coins;

    // $t3 := pool_u64::amount_to_shares_with_total_coins($t0, $t1, $t2) on_abort goto L2 with $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:222:9+71
    call $t3 := $1_pool_u64_amount_to_shares_with_total_coins($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(67,9239,9310)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(57,1):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_return[0]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:222:9+71
    assume {:print "$track_return(57,1,0):", $t3} $t3 == $t3;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:223:5+1
    assume {:print "$at(67,9315,9316)"} true;
L1:

    // return $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:223:5+1
    assume {:print "$at(67,9315,9316)"} true;
    $ret0 := $t3;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:223:5+1
L2:

    // abort($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:223:5+1
    assume {:print "$at(67,9315,9316)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun pool_u64::amount_to_shares_with_total_coins [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:227:5+904
procedure {:inline 1} $1_pool_u64_amount_to_shares_with_total_coins(_$t0: $1_pool_u64_Pool, _$t1: int, _$t2: int) returns ($ret0: int)
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t0: $1_pool_u64_Pool;
    var $t1: int;
    var $t2: int;
    var $temp_0'$1_pool_u64_Pool': $1_pool_u64_Pool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:227:5+1
    assume {:print "$at(67,9492,9493)"} true;
    assume {:print "$track_local(57,2,0):", $t0} $t0 == $t0;

    // trace_local[coins_amount]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:227:5+1
    assume {:print "$track_local(57,2,1):", $t1} $t1 == $t1;

    // trace_local[total_coins]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:227:5+1
    assume {:print "$track_local(57,2,2):", $t2} $t2 == $t2;

    // $t5 := get_field<pool_u64::Pool>.total_coins($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:229:13+16
    assume {:print "$at(67,9677,9693)"} true;
    $t5 := $t0->$total_coins;

    // $t6 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:229:33+1
    $t6 := 0;
    assume $IsValid'u64'($t6);

    // $t7 := ==($t5, $t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:229:30+2
    $t7 := $IsEqual'u64'($t5, $t6);

    // if ($t7) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:229:13+47
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:229:13+47
L1:

    // $t8 := true at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:229:13+47
    assume {:print "$at(67,9677,9724)"} true;
    $t8 := true;
    assume $IsValid'bool'($t8);

    // $t3 := $t8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:229:13+47
    $t3 := $t8;

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:229:13+47
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:229:38+4
L0:

    // $t9 := get_field<pool_u64::Pool>.total_shares($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:229:38+17
    assume {:print "$at(67,9702,9719)"} true;
    $t9 := $t0->$total_shares;

    // $t10 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:229:59+1
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // $t3 := ==($t9, $t10) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:229:56+2
    $t3 := $IsEqual'u64'($t9, $t10);

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:229:13+47
L2:

    // if ($t3) goto L4 else goto L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:229:9+717
    assume {:print "$at(67,9673,10390)"} true;
    if ($t3) { goto L4; } else { goto L3; }

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:232:13+12
    assume {:print "$at(67,9975,9987)"} true;
L4:

    // $t11 := get_field<pool_u64::Pool>.scaling_factor($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:232:28+19
    assume {:print "$at(67,9990,10009)"} true;
    $t11 := $t0->$scaling_factor;

    // $t4 := *($t1, $t11) on_abort goto L7 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:232:26+1
    call $t4 := $MulU64($t1, $t11);
    if ($abort_flag) {
        assume {:print "$at(67,9988,9989)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(57,2):", $t12} $t12 == $t12;
        goto L7;
    }

    // goto L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:229:9+717
    assume {:print "$at(67,9673,10390)"} true;
    goto L5;

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:237:34+4
    assume {:print "$at(67,10329,10333)"} true;
L3:

    // $t13 := get_field<pool_u64::Pool>.total_shares($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:237:54+17
    assume {:print "$at(67,10349,10366)"} true;
    $t13 := $t0->$total_shares;

    // $t4 := pool_u64::multiply_then_divide($t0, $t1, $t13, $t2) on_abort goto L7 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:237:13+72
    call $t4 := $1_pool_u64_multiply_then_divide($t0, $t1, $t13, $t2);
    if ($abort_flag) {
        assume {:print "$at(67,10308,10380)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(57,2):", $t12} $t12 == $t12;
        goto L7;
    }

    // label L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:229:9+717
    assume {:print "$at(67,9673,10390)"} true;
L5:

    // trace_return[0]($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:229:9+717
    assume {:print "$at(67,9673,10390)"} true;
    assume {:print "$track_return(57,2,0):", $t4} $t4 == $t4;

    // label L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:239:5+1
    assume {:print "$at(67,10395,10396)"} true;
L6:

    // return $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:239:5+1
    assume {:print "$at(67,10395,10396)"} true;
    $ret0 := $t4;
    return;

    // label L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:239:5+1
L7:

    // abort($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:239:5+1
    assume {:print "$at(67,10395,10396)"} true;
    $abort_code := $t12;
    $abort_flag := true;
    return;

}

// fun pool_u64::total_coins [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:88:5+73
procedure {:inline 1} $1_pool_u64_total_coins(_$t0: $1_pool_u64_Pool) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $1_pool_u64_Pool;
    var $temp_0'$1_pool_u64_Pool': $1_pool_u64_Pool;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:88:5+1
    assume {:print "$at(67,3527,3528)"} true;
    assume {:print "$track_local(57,19,0):", $t0} $t0 == $t0;

    // $t1 := get_field<pool_u64::Pool>.total_coins($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:89:9+16
    assume {:print "$at(67,3578,3594)"} true;
    $t1 := $t0->$total_coins;

    // trace_return[0]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:89:9+16
    assume {:print "$track_return(57,19,0):", $t1} $t1 == $t1;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:90:5+1
    assume {:print "$at(67,3599,3600)"} true;
L1:

    // return $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:90:5+1
    assume {:print "$at(67,3599,3600)"} true;
    $ret0 := $t1;
    return;

}

// fun pool_u64::buy_in [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:133:5+611
procedure {:inline 1} $1_pool_u64_buy_in(_$t0: $Mutation ($1_pool_u64_Pool), _$t1: int, _$t2: int) returns ($ret0: int, $ret1: $Mutation ($1_pool_u64_Pool))
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t14: $1_pool_u64_Pool;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: bool;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: $Mutation (int);
    var $t32: int;
    var $t33: int;
    var $t34: $Mutation (int);
    var $t35: bool;
    var $t36: bool;
    var $t37: int;
    var $t38: bool;
    var $t39: int;
    var $t40: int;
    var $t0: $Mutation ($1_pool_u64_Pool);
    var $t1: int;
    var $t2: int;
    var $temp_0'$1_pool_u64_Pool': $1_pool_u64_Pool;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // assume Identical($t5, pool_u64::spec_amount_to_shares_with_total_coins($t0, $t2, select pool_u64::Pool.total_coins($t0))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:60:9+94
    assume {:print "$at(68,2129,2223)"} true;
    assume ($t5 == $1_pool_u64_spec_amount_to_shares_with_total_coins($Dereference($t0), $t2, $Dereference($t0)->$total_coins));

    // assume Identical($t6, simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares($t0), $t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:83:9+73
    assume {:print "$at(68,3186,3259)"} true;
    assume ($t6 == $1_simple_map_spec_contains_key'address_u64'($Dereference($t0)->$shares, $t1));

    // assume Identical($t7, simple_map::spec_get<address, u64>(select pool_u64::Pool.shares($t0), $t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:84:9+68
    assume {:print "$at(68,3268,3336)"} true;
    assume ($t7 == $1_simple_map_spec_get'address_u64'($Dereference($t0)->$shares, $t1));

    // assume Identical($t8, simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares($t0), $t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:94:9+73
    assume {:print "$at(68,3636,3709)"} true;
    assume ($t8 == $1_simple_map_spec_contains_key'address_u64'($Dereference($t0)->$shares, $t1));

    // assume Identical($t9, simple_map::spec_get<address, u64>(select pool_u64::Pool.shares($t0), $t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:95:9+68
    assume {:print "$at(68,3718,3786)"} true;
    assume ($t9 == $1_simple_map_spec_get'address_u64'($Dereference($t0)->$shares, $t1));

    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:133:5+1
    assume {:print "$at(67,5039,5040)"} true;
    $temp_0'$1_pool_u64_Pool' := $Dereference($t0);
    assume {:print "$track_local(57,4,0):", $temp_0'$1_pool_u64_Pool'} $temp_0'$1_pool_u64_Pool' == $temp_0'$1_pool_u64_Pool';

    // trace_local[shareholder]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:133:5+1
    assume {:print "$track_local(57,4,1):", $t1} $t1 == $t1;

    // trace_local[coins_amount]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:133:5+1
    assume {:print "$track_local(57,4,2):", $t2} $t2 == $t2;

    // $t10 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:134:29+1
    assume {:print "$at(67,5150,5151)"} true;
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // $t11 := ==($t2, $t10) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:134:26+2
    $t11 := $IsEqual'u64'($t2, $t10);

    // if ($t11) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:134:9+31
    if ($t11) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:134:32+8
L1:

    // destroy($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:134:32+8
    assume {:print "$at(67,5153,5161)"} true;

    // $t12 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:134:39+1
    $t12 := 0;
    assume $IsValid'u64'($t12);

    // trace_return[0]($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:134:32+8
    assume {:print "$track_return(57,4,0):", $t12} $t12 == $t12;

    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:134:32+8
    $temp_0'$1_pool_u64_Pool' := $Dereference($t0);
    assume {:print "$track_local(57,4,0):", $temp_0'$1_pool_u64_Pool'} $temp_0'$1_pool_u64_Pool' == $temp_0'$1_pool_u64_Pool';

    // pack_ref_deep($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:134:32+8

    // $t13 := move($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:134:32+8
    $t13 := $t12;

    // goto L8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:134:32+8
    goto L8;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:136:43+4
    assume {:print "$at(67,5206,5210)"} true;
L0:

    // $t14 := read_ref($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:136:42+20
    assume {:print "$at(67,5205,5225)"} true;
    $t14 := $Dereference($t0);

    // $t15 := pool_u64::amount_to_shares($t14, $t2) on_abort goto L9 with $t16 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:136:26+36
    call $t15 := $1_pool_u64_amount_to_shares($t14, $t2);
    if ($abort_flag) {
        assume {:print "$at(67,5189,5225)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(57,4):", $t16} $t16 == $t16;
        goto L9;
    }

    // trace_local[new_shares]($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:136:13+10
    assume {:print "$track_local(57,4,4):", $t15} $t15 == $t15;

    // $t17 := 18446744073709551615 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:137:17+7
    assume {:print "$at(67,5243,5250)"} true;
    $t17 := 18446744073709551615;
    assume $IsValid'u64'($t17);

    // $t18 := get_field<pool_u64::Pool>.total_coins($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:137:27+16
    $t18 := $Dereference($t0)->$total_coins;

    // $t19 := -($t17, $t18) on_abort goto L9 with $t16 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:137:25+1
    call $t19 := $Sub($t17, $t18);
    if ($abort_flag) {
        assume {:print "$at(67,5251,5252)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(57,4):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t20 := >=($t19, $t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:137:44+2
    call $t20 := $Ge($t19, $t2);

    // if ($t20) goto L3 else goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:137:9+104
    if ($t20) { goto L3; } else { goto L2; }

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:137:9+104
L3:

    // goto L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:137:9+104
    assume {:print "$at(67,5235,5339)"} true;
    goto L4;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:137:9+104
L2:

    // pack_ref_deep($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:137:9+104
    assume {:print "$at(67,5235,5339)"} true;

    // destroy($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:137:9+104

    // $t21 := 6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:137:85+26
    $t21 := 6;
    assume $IsValid'u64'($t21);

    // $t22 := error::invalid_argument($t21) on_abort goto L9 with $t16 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:137:61+51
    call $t22 := $1_error_invalid_argument($t21);
    if ($abort_flag) {
        assume {:print "$at(67,5287,5338)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(57,4):", $t16} $t16 == $t16;
        goto L9;
    }

    // trace_abort($t22) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:137:9+104
    assume {:print "$at(67,5235,5339)"} true;
    assume {:print "$track_abort(57,4):", $t22} $t22 == $t22;

    // $t16 := move($t22) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:137:9+104
    $t16 := $t22;

    // goto L9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:137:9+104
    goto L9;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:138:17+7
    assume {:print "$at(67,5357,5364)"} true;
L4:

    // $t23 := 18446744073709551615 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:138:17+7
    assume {:print "$at(67,5357,5364)"} true;
    $t23 := 18446744073709551615;
    assume $IsValid'u64'($t23);

    // $t24 := get_field<pool_u64::Pool>.total_shares($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:138:27+17
    $t24 := $Dereference($t0)->$total_shares;

    // $t25 := -($t23, $t24) on_abort goto L9 with $t16 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:138:25+1
    call $t25 := $Sub($t23, $t24);
    if ($abort_flag) {
        assume {:print "$at(67,5365,5366)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(57,4):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t26 := >=($t25, $t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:138:45+2
    call $t26 := $Ge($t25, $t15);

    // if ($t26) goto L6 else goto L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:138:9+103
    if ($t26) { goto L6; } else { goto L5; }

    // label L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:138:9+103
L6:

    // goto L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:138:9+103
    assume {:print "$at(67,5349,5452)"} true;
    goto L7;

    // label L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:138:9+103
L5:

    // pack_ref_deep($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:138:9+103
    assume {:print "$at(67,5349,5452)"} true;

    // destroy($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:138:9+103

    // $t27 := 6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:138:84+26
    $t27 := 6;
    assume $IsValid'u64'($t27);

    // $t28 := error::invalid_argument($t27) on_abort goto L9 with $t16 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:138:60+51
    call $t28 := $1_error_invalid_argument($t27);
    if ($abort_flag) {
        assume {:print "$at(67,5400,5451)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(57,4):", $t16} $t16 == $t16;
        goto L9;
    }

    // trace_abort($t28) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:138:9+103
    assume {:print "$at(67,5349,5452)"} true;
    assume {:print "$track_abort(57,4):", $t28} $t28 == $t28;

    // $t16 := move($t28) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:138:9+103
    $t16 := $t28;

    // goto L9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:138:9+103
    goto L9;

    // label L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:140:28+4
    assume {:print "$at(67,5482,5486)"} true;
L7:

    // $t29 := get_field<pool_u64::Pool>.total_coins($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:140:28+16
    assume {:print "$at(67,5482,5498)"} true;
    $t29 := $Dereference($t0)->$total_coins;

    // $t30 := +($t29, $t2) on_abort goto L9 with $t16 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:140:45+1
    call $t30 := $AddU64($t29, $t2);
    if ($abort_flag) {
        assume {:print "$at(67,5499,5500)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(57,4):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t31 := borrow_field<pool_u64::Pool>.total_coins($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:140:9+16
    $t31 := $ChildMutation($t0, 1, $Dereference($t0)->$total_coins);

    // write_ref($t31, $t30) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:140:9+50
    $t31 := $UpdateMutation($t31, $t30);

    // write_back[Reference($t0).total_coins (u64)]($t31) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:140:9+50
    $t0 := $UpdateMutation($t0, $Update'$1_pool_u64_Pool'_total_coins($Dereference($t0), $Dereference($t31)));

    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:140:9+50
    $temp_0'$1_pool_u64_Pool' := $Dereference($t0);
    assume {:print "$track_local(57,4,0):", $temp_0'$1_pool_u64_Pool'} $temp_0'$1_pool_u64_Pool' == $temp_0'$1_pool_u64_Pool';

    // $t32 := get_field<pool_u64::Pool>.total_shares($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:141:29+17
    assume {:print "$at(67,5543,5560)"} true;
    $t32 := $Dereference($t0)->$total_shares;

    // $t33 := +($t32, $t15) on_abort goto L9 with $t16 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:141:47+1
    call $t33 := $AddU64($t32, $t15);
    if ($abort_flag) {
        assume {:print "$at(67,5561,5562)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(57,4):", $t16} $t16 == $t16;
        goto L9;
    }

    // $t34 := borrow_field<pool_u64::Pool>.total_shares($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:141:9+17
    $t34 := $ChildMutation($t0, 2, $Dereference($t0)->$total_shares);

    // write_ref($t34, $t33) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:141:9+50
    $t34 := $UpdateMutation($t34, $t33);

    // write_back[Reference($t0).total_shares (u64)]($t34) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:141:9+50
    $t0 := $UpdateMutation($t0, $Update'$1_pool_u64_Pool'_total_shares($Dereference($t0), $Dereference($t34)));

    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:141:9+50
    $temp_0'$1_pool_u64_Pool' := $Dereference($t0);
    assume {:print "$track_local(57,4,0):", $temp_0'$1_pool_u64_Pool'} $temp_0'$1_pool_u64_Pool' == $temp_0'$1_pool_u64_Pool';

    // assume Identical($t35, simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares($t0), $t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:74:9+73
    assume {:print "$at(68,2864,2937)"} true;
    assume ($t35 == $1_simple_map_spec_contains_key'address_u64'($Dereference($t0)->$shares, $t1));

    // assume Identical($t36, simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares($t0), $t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:83:9+73
    assume {:print "$at(68,3186,3259)"} true;
    assume ($t36 == $1_simple_map_spec_contains_key'address_u64'($Dereference($t0)->$shares, $t1));

    // assume Identical($t37, simple_map::spec_get<address, u64>(select pool_u64::Pool.shares($t0), $t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:84:9+68
    assume {:print "$at(68,3268,3336)"} true;
    assume ($t37 == $1_simple_map_spec_get'address_u64'($Dereference($t0)->$shares, $t1));

    // assume Identical($t38, simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares($t0), $t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:94:9+73
    assume {:print "$at(68,3636,3709)"} true;
    assume ($t38 == $1_simple_map_spec_contains_key'address_u64'($Dereference($t0)->$shares, $t1));

    // assume Identical($t39, simple_map::spec_get<address, u64>(select pool_u64::Pool.shares($t0), $t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:95:9+68
    assume {:print "$at(68,3718,3786)"} true;
    assume ($t39 == $1_simple_map_spec_get'address_u64'($Dereference($t0)->$shares, $t1));

    // $t40 := pool_u64::add_shares($t0, $t1, $t15) on_abort goto L9 with $t16 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:142:9+41
    assume {:print "$at(67,5583,5624)"} true;
    call $t40,$t0 := $1_pool_u64_add_shares($t0, $t1, $t15);
    if ($abort_flag) {
        assume {:print "$at(67,5583,5624)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(57,4):", $t16} $t16 == $t16;
        goto L9;
    }

    // destroy($t40) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:142:9+41

    // trace_return[0]($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:143:9+10
    assume {:print "$at(67,5634,5644)"} true;
    assume {:print "$track_return(57,4,0):", $t15} $t15 == $t15;

    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:143:9+10
    $temp_0'$1_pool_u64_Pool' := $Dereference($t0);
    assume {:print "$track_local(57,4,0):", $temp_0'$1_pool_u64_Pool'} $temp_0'$1_pool_u64_Pool' == $temp_0'$1_pool_u64_Pool';

    // pack_ref_deep($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:143:9+10

    // $t13 := move($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:143:9+10
    $t13 := $t15;

    // label L8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:144:5+1
    assume {:print "$at(67,5649,5650)"} true;
L8:

    // return $t13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:144:5+1
    assume {:print "$at(67,5649,5650)"} true;
    $ret0 := $t13;
    $ret1 := $t0;
    return;

    // label L9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:144:5+1
L9:

    // abort($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:144:5+1
    assume {:print "$at(67,5649,5650)"} true;
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun pool_u64::deduct_shares [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:201:5+857
procedure {:inline 1} $1_pool_u64_deduct_shares(_$t0: $Mutation ($1_pool_u64_Pool), _$t1: int, _$t2: int) returns ($ret0: int, $ret1: $Mutation ($1_pool_u64_Pool))
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: $Mutation (int);
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: $1_pool_u64_Pool;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: $1_pool_u64_Pool;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: $Mutation (Table int (int));
    var $t21: $Mutation (int);
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: bool;
    var $t27: Vec (int);
    var $t28: bool;
    var $t29: int;
    var $t30: $Mutation (Vec (int));
    var $t31: int;
    var $t32: $Mutation (Table int (int));
    var $t33: int;
    var $t34: int;
    var $t0: $Mutation ($1_pool_u64_Pool);
    var $t1: int;
    var $t2: int;
    var $temp_0'$1_pool_u64_Pool': $1_pool_u64_Pool;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // assume Identical($t8, Sub(simple_map::spec_get<address, u64>(select pool_u64::Pool.shares($t0), $t1), $t2)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:173:9+83
    assume {:print "$at(68,7278,7361)"} true;
    assume ($t8 == ($1_simple_map_spec_get'address_u64'($Dereference($t0)->$shares, $t1) - $t2));

    // assume Identical($t9, Sub(simple_map::spec_get<address, u64>(select pool_u64::Pool.shares($t0), $t1), $t2)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:181:9+83
    assume {:print "$at(68,7643,7726)"} true;
    assume ($t9 == ($1_simple_map_spec_get'address_u64'($Dereference($t0)->$shares, $t1) - $t2));

    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:201:5+1
    assume {:print "$at(67,8164,8165)"} true;
    $temp_0'$1_pool_u64_Pool' := $Dereference($t0);
    assume {:print "$track_local(57,8,0):", $temp_0'$1_pool_u64_Pool'} $temp_0'$1_pool_u64_Pool' == $temp_0'$1_pool_u64_Pool';

    // trace_local[shareholder]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:201:5+1
    assume {:print "$track_local(57,8,1):", $t1} $t1 == $t1;

    // trace_local[num_shares]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:201:5+1
    assume {:print "$track_local(57,8,2):", $t2} $t2 == $t2;

    // $t10 := read_ref($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:202:25+19
    assume {:print "$at(67,8269,8288)"} true;
    $t10 := $Dereference($t0);

    // $t11 := pool_u64::contains($t10, $t1) on_abort goto L10 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:202:17+27
    call $t11 := $1_pool_u64_contains($t10, $t1);
    if ($abort_flag) {
        assume {:print "$at(67,8261,8288)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(57,8):", $t12} $t12 == $t12;
        goto L10;
    }

    // if ($t11) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:202:9+85
    if ($t11) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:202:9+85
L1:

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:202:9+85
    assume {:print "$at(67,8253,8338)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:202:9+85
L0:

    // pack_ref_deep($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:202:9+85
    assume {:print "$at(67,8253,8338)"} true;

    // destroy($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:202:9+85

    // $t13 := 1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:202:70+22
    $t13 := 1;
    assume $IsValid'u64'($t13);

    // $t14 := error::invalid_argument($t13) on_abort goto L10 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:202:46+47
    call $t14 := $1_error_invalid_argument($t13);
    if ($abort_flag) {
        assume {:print "$at(67,8290,8337)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(57,8):", $t12} $t12 == $t12;
        goto L10;
    }

    // trace_abort($t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:202:9+85
    assume {:print "$at(67,8253,8338)"} true;
    assume {:print "$track_abort(57,8):", $t14} $t14 == $t14;

    // $t12 := move($t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:202:9+85
    $t12 := $t14;

    // goto L10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:202:9+85
    goto L10;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:203:24+4
    assume {:print "$at(67,8363,8367)"} true;
L2:

    // $t15 := read_ref($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:203:23+19
    assume {:print "$at(67,8362,8381)"} true;
    $t15 := $Dereference($t0);

    // $t16 := pool_u64::shares($t15, $t1) on_abort goto L10 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:203:17+25
    call $t16 := $1_pool_u64_shares($t15, $t1);
    if ($abort_flag) {
        assume {:print "$at(67,8356,8381)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(57,8):", $t12} $t12 == $t12;
        goto L10;
    }

    // $t17 := >=($t16, $t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:203:43+2
    call $t17 := $Ge($t16, $t2);

    // if ($t17) goto L4 else goto L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:203:9+95
    if ($t17) { goto L4; } else { goto L3; }

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:203:9+95
L4:

    // goto L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:203:9+95
    assume {:print "$at(67,8348,8443)"} true;
    goto L5;

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:203:9+95
L3:

    // pack_ref_deep($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:203:9+95
    assume {:print "$at(67,8348,8443)"} true;

    // destroy($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:203:9+95

    // $t18 := 4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:203:82+20
    $t18 := 4;
    assume $IsValid'u64'($t18);

    // $t19 := error::invalid_argument($t18) on_abort goto L10 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:203:58+45
    call $t19 := $1_error_invalid_argument($t18);
    if ($abort_flag) {
        assume {:print "$at(67,8397,8442)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(57,8):", $t12} $t12 == $t12;
        goto L10;
    }

    // trace_abort($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:203:9+95
    assume {:print "$at(67,8348,8443)"} true;
    assume {:print "$track_abort(57,8):", $t19} $t19 == $t19;

    // $t12 := move($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:203:9+95
    $t12 := $t19;

    // goto L10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:203:9+95
    goto L10;

    // label L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:205:59+4
    assume {:print "$at(67,8504,8508)"} true;
L5:

    // $t20 := borrow_field<pool_u64::Pool>.shares($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:205:54+16
    assume {:print "$at(67,8499,8515)"} true;
    $t20 := $ChildMutation($t0, 3, $Dereference($t0)->$shares);

    // $t21 := simple_map::borrow_mut<address, u64>($t20, $t1) on_abort goto L10 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:205:31+54
    call $t21,$t20 := $1_simple_map_borrow_mut'address_u64'($t20, $t1);
    if ($abort_flag) {
        assume {:print "$at(67,8476,8530)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(57,8):", $t12} $t12 == $t12;
        goto L10;
    }

    // trace_local[existing_shares]($t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:205:13+15
    $temp_0'u64' := $Dereference($t21);
    assume {:print "$track_local(57,8,5):", $temp_0'u64'} $temp_0'u64' == $temp_0'u64';

    // $t22 := read_ref($t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:206:28+16
    assume {:print "$at(67,8559,8575)"} true;
    $t22 := $Dereference($t21);

    // $t23 := -($t22, $t2) on_abort goto L10 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:206:45+1
    call $t23 := $Sub($t22, $t2);
    if ($abort_flag) {
        assume {:print "$at(67,8576,8577)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(57,8):", $t12} $t12 == $t12;
        goto L10;
    }

    // write_ref($t21, $t23) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:206:9+48
    $t21 := $UpdateMutation($t21, $t23);

    // $t24 := read_ref($t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:209:32+16
    assume {:print "$at(67,8696,8712)"} true;
    $t24 := $Dereference($t21);

    // write_back[Reference($t20)[]]($t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:209:32+16
    $t20 := $UpdateMutation($t20, UpdateTable($Dereference($t20), ReadVec($t21->p, LenVec($t20->p)), $Dereference($t21)));

    // write_back[Reference($t0).shares (simple_map::SimpleMap<address, u64>)]($t20) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:209:32+16
    $t0 := $UpdateMutation($t0, $Update'$1_pool_u64_Pool'_shares($Dereference($t0), $Dereference($t20)));

    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:209:32+16
    $temp_0'$1_pool_u64_Pool' := $Dereference($t0);
    assume {:print "$track_local(57,8,0):", $temp_0'$1_pool_u64_Pool'} $temp_0'$1_pool_u64_Pool' == $temp_0'$1_pool_u64_Pool';

    // trace_local[remaining_shares]($t24) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:209:13+16
    assume {:print "$track_local(57,8,6):", $t24} $t24 == $t24;

    // $t25 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:210:33+1
    assume {:print "$at(67,8746,8747)"} true;
    $t25 := 0;
    assume $IsValid'u64'($t25);

    // $t26 := ==($t24, $t25) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:210:30+2
    $t26 := $IsEqual'u64'($t24, $t25);

    // if ($t26) goto L7 else goto L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:210:9+266
    if ($t26) { goto L7; } else { goto L6; }

    // label L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:211:60+4
    assume {:print "$at(67,8810,8814)"} true;
L7:

    // $t27 := get_field<pool_u64::Pool>.shareholders($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:211:59+18
    assume {:print "$at(67,8809,8827)"} true;
    $t27 := $Dereference($t0)->$shareholders;

    // ($t28, $t29) := vector::index_of<address>($t27, $t1) on_abort goto L10 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:211:42+50
    call $t28,$t29 := $1_vector_index_of'address'($t27, $t1);
    if ($abort_flag) {
        assume {:print "$at(67,8792,8842)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(57,8):", $t12} $t12 == $t12;
        goto L10;
    }

    // trace_local[shareholder_index]($t29) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:211:21+17
    assume {:print "$track_local(57,8,7):", $t29} $t29 == $t29;

    // destroy($t28) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:211:18+1

    // $t30 := borrow_field<pool_u64::Pool>.shareholders($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:212:28+22
    assume {:print "$at(67,8871,8893)"} true;
    $t30 := $ChildMutation($t0, 4, $Dereference($t0)->$shareholders);

    // $t31 := vector::remove<address>($t30, $t29) on_abort goto L10 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:212:13+57
    call $t31,$t30 := $1_vector_remove'address'($t30, $t29);
    if ($abort_flag) {
        assume {:print "$at(67,8856,8913)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(57,8):", $t12} $t12 == $t12;
        goto L10;
    }

    // write_back[Reference($t0).shareholders (vector<address>)]($t30) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:212:13+57
    $t0 := $UpdateMutation($t0, $Update'$1_pool_u64_Pool'_shareholders($Dereference($t0), $Dereference($t30)));

    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:212:13+57
    $temp_0'$1_pool_u64_Pool' := $Dereference($t0);
    assume {:print "$track_local(57,8,0):", $temp_0'$1_pool_u64_Pool'} $temp_0'$1_pool_u64_Pool' == $temp_0'$1_pool_u64_Pool';

    // destroy($t31) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:212:13+57

    // $t32 := borrow_field<pool_u64::Pool>.shares($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:213:32+16
    assume {:print "$at(67,8946,8962)"} true;
    $t32 := $ChildMutation($t0, 3, $Dereference($t0)->$shares);

    // ($t33, $t34) := simple_map::remove<address, u64>($t32, $t1) on_abort goto L10 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:213:13+50
    call $t33,$t34,$t32 := $1_simple_map_remove'address_u64'($t32, $t1);
    if ($abort_flag) {
        assume {:print "$at(67,8927,8977)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(57,8):", $t12} $t12 == $t12;
        goto L10;
    }

    // write_back[Reference($t0).shares (simple_map::SimpleMap<address, u64>)]($t32) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:213:13+50
    $t0 := $UpdateMutation($t0, $Update'$1_pool_u64_Pool'_shares($Dereference($t0), $Dereference($t32)));

    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:213:13+50
    $temp_0'$1_pool_u64_Pool' := $Dereference($t0);
    assume {:print "$track_local(57,8,0):", $temp_0'$1_pool_u64_Pool'} $temp_0'$1_pool_u64_Pool' == $temp_0'$1_pool_u64_Pool';

    // destroy($t34) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:213:13+50

    // destroy($t33) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:213:13+50

    // goto L8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:213:63+1
    goto L8;

    // label L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:210:9+266
    assume {:print "$at(67,8722,8988)"} true;
L6:

    // destroy($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:210:9+266
    assume {:print "$at(67,8722,8988)"} true;

    // label L8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:216:9+16
    assume {:print "$at(67,8999,9015)"} true;
L8:

    // trace_return[0]($t24) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:216:9+16
    assume {:print "$at(67,8999,9015)"} true;
    assume {:print "$track_return(57,8,0):", $t24} $t24 == $t24;

    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:216:9+16
    $temp_0'$1_pool_u64_Pool' := $Dereference($t0);
    assume {:print "$track_local(57,8,0):", $temp_0'$1_pool_u64_Pool'} $temp_0'$1_pool_u64_Pool' == $temp_0'$1_pool_u64_Pool';

    // pack_ref_deep($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:216:9+16

    // label L9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:217:5+1
    assume {:print "$at(67,9020,9021)"} true;
L9:

    // return $t24 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:217:5+1
    assume {:print "$at(67,9020,9021)"} true;
    $ret0 := $t24;
    $ret1 := $t0;
    return;

    // label L10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:217:5+1
L10:

    // abort($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:217:5+1
    assume {:print "$at(67,9020,9021)"} true;
    $abort_code := $t12;
    $abort_flag := true;
    return;

}

// fun pool_u64::multiply_then_divide [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:261:5+167
procedure {:inline 1} $1_pool_u64_multiply_then_divide(_$t0: $1_pool_u64_Pool, _$t1: int, _$t2: int, _$t3: int) returns ($ret0: int)
{
    // declare local variables
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t0: $1_pool_u64_Pool;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $temp_0'$1_pool_u64_Pool': $1_pool_u64_Pool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // trace_local[_pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:261:5+1
    assume {:print "$at(67,11444,11445)"} true;
    assume {:print "$track_local(57,10,0):", $t0} $t0 == $t0;

    // trace_local[x]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:261:5+1
    assume {:print "$track_local(57,10,1):", $t1} $t1 == $t1;

    // trace_local[y]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:261:5+1
    assume {:print "$track_local(57,10,2):", $t2} $t2 == $t2;

    // trace_local[z]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:261:5+1
    assume {:print "$track_local(57,10,3):", $t3} $t3 == $t3;

    // $t4 := pool_u64::to_u128($t1) on_abort goto L2 with $t5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:262:23+10
    assume {:print "$at(67,11543,11553)"} true;
    call $t4 := $1_pool_u64_to_u128($t1);
    if ($abort_flag) {
        assume {:print "$at(67,11543,11553)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(57,10):", $t5} $t5 == $t5;
        goto L2;
    }

    // $t6 := pool_u64::to_u128($t2) on_abort goto L2 with $t5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:262:36+10
    call $t6 := $1_pool_u64_to_u128($t2);
    if ($abort_flag) {
        assume {:print "$at(67,11556,11566)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(57,10):", $t5} $t5 == $t5;
        goto L2;
    }

    // $t7 := *($t4, $t6) on_abort goto L2 with $t5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:262:34+1
    call $t7 := $MulU128($t4, $t6);
    if ($abort_flag) {
        assume {:print "$at(67,11554,11555)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(57,10):", $t5} $t5 == $t5;
        goto L2;
    }

    // $t8 := pool_u64::to_u128($t3) on_abort goto L2 with $t5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:262:50+10
    call $t8 := $1_pool_u64_to_u128($t3);
    if ($abort_flag) {
        assume {:print "$at(67,11570,11580)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(57,10):", $t5} $t5 == $t5;
        goto L2;
    }

    // $t9 := /($t7, $t8) on_abort goto L2 with $t5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:262:48+1
    call $t9 := $Div($t7, $t8);
    if ($abort_flag) {
        assume {:print "$at(67,11568,11569)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(57,10):", $t5} $t5 == $t5;
        goto L2;
    }

    // $t10 := (u64)($t9) on_abort goto L2 with $t5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:263:9+15
    assume {:print "$at(67,11590,11605)"} true;
    call $t10 := $CastU64($t9);
    if ($abort_flag) {
        assume {:print "$at(67,11590,11605)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(57,10):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_return[0]($t10) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:263:9+15
    assume {:print "$track_return(57,10,0):", $t10} $t10 == $t10;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:264:5+1
    assume {:print "$at(67,11610,11611)"} true;
L1:

    // return $t10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:264:5+1
    assume {:print "$at(67,11610,11611)"} true;
    $ret0 := $t10;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:264:5+1
L2:

    // abort($t5) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:264:5+1
    assume {:print "$at(67,11610,11611)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun pool_u64::redeem_shares [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:171:5+635
procedure {:inline 1} $1_pool_u64_redeem_shares(_$t0: $Mutation ($1_pool_u64_Pool), _$t1: int, _$t2: int) returns ($ret0: int, $ret1: $Mutation ($1_pool_u64_Pool))
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $1_pool_u64_Pool;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: $1_pool_u64_Pool;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: $1_pool_u64_Pool;
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t27: $Mutation (int);
    var $t28: int;
    var $t29: int;
    var $t30: $Mutation (int);
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t0: $Mutation ($1_pool_u64_Pool);
    var $t1: int;
    var $t2: int;
    var $temp_0'$1_pool_u64_Pool': $1_pool_u64_Pool;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // assume Identical($t7, pool_u64::spec_shares_to_amount_with_total_coins($t0, $t2, select pool_u64::Pool.total_coins($t0))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:145:9+102
    assume {:print "$at(68,5992,6094)"} true;
    assume ($t7 == $1_pool_u64_spec_shares_to_amount_with_total_coins($Dereference($t0), $t2, $Dereference($t0)->$total_coins));

    // assume Identical($t8, Sub(simple_map::spec_get<address, u64>(select pool_u64::Pool.shares($t0), $t1), $t2)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:181:9+83
    assume {:print "$at(68,7643,7726)"} true;
    assume ($t8 == ($1_simple_map_spec_get'address_u64'($Dereference($t0)->$shares, $t1) - $t2));

    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:171:5+1
    assume {:print "$at(67,6796,6797)"} true;
    $temp_0'$1_pool_u64_Pool' := $Dereference($t0);
    assume {:print "$track_local(57,12,0):", $temp_0'$1_pool_u64_Pool'} $temp_0'$1_pool_u64_Pool' == $temp_0'$1_pool_u64_Pool';

    // trace_local[shareholder]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:171:5+1
    assume {:print "$track_local(57,12,1):", $t1} $t1 == $t1;

    // trace_local[shares_to_redeem]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:171:5+1
    assume {:print "$track_local(57,12,2):", $t2} $t2 == $t2;

    // $t9 := read_ref($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:172:25+19
    assume {:print "$at(67,6914,6933)"} true;
    $t9 := $Dereference($t0);

    // $t10 := pool_u64::contains($t9, $t1) on_abort goto L9 with $t11 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:172:17+27
    call $t10 := $1_pool_u64_contains($t9, $t1);
    if ($abort_flag) {
        assume {:print "$at(67,6906,6933)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(57,12):", $t11} $t11 == $t11;
        goto L9;
    }

    // if ($t10) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:172:9+85
    if ($t10) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:172:9+85
L1:

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:172:9+85
    assume {:print "$at(67,6898,6983)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:172:9+85
L0:

    // pack_ref_deep($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:172:9+85
    assume {:print "$at(67,6898,6983)"} true;

    // destroy($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:172:9+85

    // $t12 := 1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:172:70+22
    $t12 := 1;
    assume $IsValid'u64'($t12);

    // $t13 := error::invalid_argument($t12) on_abort goto L9 with $t11 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:172:46+47
    call $t13 := $1_error_invalid_argument($t12);
    if ($abort_flag) {
        assume {:print "$at(67,6935,6982)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(57,12):", $t11} $t11 == $t11;
        goto L9;
    }

    // trace_abort($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:172:9+85
    assume {:print "$at(67,6898,6983)"} true;
    assume {:print "$track_abort(57,12):", $t13} $t13 == $t13;

    // $t11 := move($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:172:9+85
    $t11 := $t13;

    // goto L9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:172:9+85
    goto L9;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:173:24+4
    assume {:print "$at(67,7008,7012)"} true;
L2:

    // $t14 := read_ref($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:173:23+19
    assume {:print "$at(67,7007,7026)"} true;
    $t14 := $Dereference($t0);

    // $t15 := pool_u64::shares($t14, $t1) on_abort goto L9 with $t11 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:173:17+25
    call $t15 := $1_pool_u64_shares($t14, $t1);
    if ($abort_flag) {
        assume {:print "$at(67,7001,7026)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(57,12):", $t11} $t11 == $t11;
        goto L9;
    }

    // $t16 := >=($t15, $t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:173:43+2
    call $t16 := $Ge($t15, $t2);

    // if ($t16) goto L4 else goto L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:173:9+101
    if ($t16) { goto L4; } else { goto L3; }

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:173:9+101
L4:

    // goto L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:173:9+101
    assume {:print "$at(67,6993,7094)"} true;
    goto L5;

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:173:9+101
L3:

    // pack_ref_deep($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:173:9+101
    assume {:print "$at(67,6993,7094)"} true;

    // destroy($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:173:9+101

    // $t17 := 4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:173:88+20
    $t17 := 4;
    assume $IsValid'u64'($t17);

    // $t18 := error::invalid_argument($t17) on_abort goto L9 with $t11 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:173:64+45
    call $t18 := $1_error_invalid_argument($t17);
    if ($abort_flag) {
        assume {:print "$at(67,7048,7093)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(57,12):", $t11} $t11 == $t11;
        goto L9;
    }

    // trace_abort($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:173:9+101
    assume {:print "$at(67,6993,7094)"} true;
    assume {:print "$track_abort(57,12):", $t18} $t18 == $t18;

    // $t11 := move($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:173:9+101
    $t11 := $t18;

    // goto L9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:173:9+101
    goto L9;

    // label L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:175:13+16
    assume {:print "$at(67,7109,7125)"} true;
L5:

    // $t19 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:175:33+1
    assume {:print "$at(67,7129,7130)"} true;
    $t19 := 0;
    assume $IsValid'u64'($t19);

    // $t20 := ==($t2, $t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:175:30+2
    $t20 := $IsEqual'u64'($t2, $t19);

    // if ($t20) goto L7 else goto L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:175:9+35
    if ($t20) { goto L7; } else { goto L6; }

    // label L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:175:36+8
L7:

    // destroy($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:175:36+8
    assume {:print "$at(67,7132,7140)"} true;

    // $t21 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:175:43+1
    $t21 := 0;
    assume $IsValid'u64'($t21);

    // trace_return[0]($t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:175:36+8
    assume {:print "$track_return(57,12,0):", $t21} $t21 == $t21;

    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:175:36+8
    $temp_0'$1_pool_u64_Pool' := $Dereference($t0);
    assume {:print "$track_local(57,12,0):", $temp_0'$1_pool_u64_Pool'} $temp_0'$1_pool_u64_Pool' == $temp_0'$1_pool_u64_Pool';

    // pack_ref_deep($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:175:36+8

    // $t22 := move($t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:175:36+8
    $t22 := $t21;

    // goto L8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:175:36+8
    goto L8;

    // label L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:177:47+4
    assume {:print "$at(67,7189,7193)"} true;
L6:

    // $t23 := read_ref($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:177:46+24
    assume {:print "$at(67,7188,7212)"} true;
    $t23 := $Dereference($t0);

    // $t24 := pool_u64::shares_to_amount($t23, $t2) on_abort goto L9 with $t11 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:177:30+40
    call $t24 := $1_pool_u64_shares_to_amount($t23, $t2);
    if ($abort_flag) {
        assume {:print "$at(67,7172,7212)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(57,12):", $t11} $t11 == $t11;
        goto L9;
    }

    // trace_local[redeemed_coins]($t24) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:177:13+14
    assume {:print "$track_local(57,12,6):", $t24} $t24 == $t24;

    // $t25 := get_field<pool_u64::Pool>.total_coins($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:178:28+16
    assume {:print "$at(67,7241,7257)"} true;
    $t25 := $Dereference($t0)->$total_coins;

    // $t26 := -($t25, $t24) on_abort goto L9 with $t11 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:178:45+1
    call $t26 := $Sub($t25, $t24);
    if ($abort_flag) {
        assume {:print "$at(67,7258,7259)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(57,12):", $t11} $t11 == $t11;
        goto L9;
    }

    // $t27 := borrow_field<pool_u64::Pool>.total_coins($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:178:9+16
    $t27 := $ChildMutation($t0, 1, $Dereference($t0)->$total_coins);

    // write_ref($t27, $t26) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:178:9+52
    $t27 := $UpdateMutation($t27, $t26);

    // write_back[Reference($t0).total_coins (u64)]($t27) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:178:9+52
    $t0 := $UpdateMutation($t0, $Update'$1_pool_u64_Pool'_total_coins($Dereference($t0), $Dereference($t27)));

    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:178:9+52
    $temp_0'$1_pool_u64_Pool' := $Dereference($t0);
    assume {:print "$track_local(57,12,0):", $temp_0'$1_pool_u64_Pool'} $temp_0'$1_pool_u64_Pool' == $temp_0'$1_pool_u64_Pool';

    // $t28 := get_field<pool_u64::Pool>.total_shares($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:179:29+17
    assume {:print "$at(67,7304,7321)"} true;
    $t28 := $Dereference($t0)->$total_shares;

    // $t29 := -($t28, $t2) on_abort goto L9 with $t11 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:179:47+1
    call $t29 := $Sub($t28, $t2);
    if ($abort_flag) {
        assume {:print "$at(67,7322,7323)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(57,12):", $t11} $t11 == $t11;
        goto L9;
    }

    // $t30 := borrow_field<pool_u64::Pool>.total_shares($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:179:9+17
    $t30 := $ChildMutation($t0, 2, $Dereference($t0)->$total_shares);

    // write_ref($t30, $t29) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:179:9+56
    $t30 := $UpdateMutation($t30, $t29);

    // write_back[Reference($t0).total_shares (u64)]($t30) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:179:9+56
    $t0 := $UpdateMutation($t0, $Update'$1_pool_u64_Pool'_total_shares($Dereference($t0), $Dereference($t30)));

    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:179:9+56
    $temp_0'$1_pool_u64_Pool' := $Dereference($t0);
    assume {:print "$track_local(57,12,0):", $temp_0'$1_pool_u64_Pool'} $temp_0'$1_pool_u64_Pool' == $temp_0'$1_pool_u64_Pool';

    // assume Identical($t31, Sub(simple_map::spec_get<address, u64>(select pool_u64::Pool.shares($t0), $t1), $t2)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:173:9+83
    assume {:print "$at(68,7278,7361)"} true;
    assume ($t31 == ($1_simple_map_spec_get'address_u64'($Dereference($t0)->$shares, $t1) - $t2));

    // assume Identical($t32, Sub(simple_map::spec_get<address, u64>(select pool_u64::Pool.shares($t0), $t1), $t2)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:181:9+83
    assume {:print "$at(68,7643,7726)"} true;
    assume ($t32 == ($1_simple_map_spec_get'address_u64'($Dereference($t0)->$shares, $t1) - $t2));

    // $t33 := pool_u64::deduct_shares($t0, $t1, $t2) on_abort goto L9 with $t11 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:180:9+50
    assume {:print "$at(67,7350,7400)"} true;
    call $t33,$t0 := $1_pool_u64_deduct_shares($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(67,7350,7400)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(57,12):", $t11} $t11 == $t11;
        goto L9;
    }

    // destroy($t33) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:180:9+50

    // trace_return[0]($t24) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:182:9+14
    assume {:print "$at(67,7411,7425)"} true;
    assume {:print "$track_return(57,12,0):", $t24} $t24 == $t24;

    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:182:9+14
    $temp_0'$1_pool_u64_Pool' := $Dereference($t0);
    assume {:print "$track_local(57,12,0):", $temp_0'$1_pool_u64_Pool'} $temp_0'$1_pool_u64_Pool' == $temp_0'$1_pool_u64_Pool';

    // pack_ref_deep($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:182:9+14

    // $t22 := move($t24) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:182:9+14
    $t22 := $t24;

    // label L8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:183:5+1
    assume {:print "$at(67,7430,7431)"} true;
L8:

    // return $t22 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:183:5+1
    assume {:print "$at(67,7430,7431)"} true;
    $ret0 := $t22;
    $ret1 := $t0;
    return;

    // label L9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:183:5+1
L9:

    // abort($t11) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:183:5+1
    assume {:print "$at(67,7430,7431)"} true;
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun pool_u64::shareholders [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:118:5+87
procedure {:inline 1} $1_pool_u64_shareholders(_$t0: $1_pool_u64_Pool) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t1: Vec (int);
    var $t0: $1_pool_u64_Pool;
    var $temp_0'$1_pool_u64_Pool': $1_pool_u64_Pool;
    var $temp_0'vec'address'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:118:5+1
    assume {:print "$at(67,4511,4512)"} true;
    assume {:print "$track_local(57,13,0):", $t0} $t0 == $t0;

    // $t1 := get_field<pool_u64::Pool>.shareholders($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:119:9+17
    assume {:print "$at(67,4575,4592)"} true;
    $t1 := $t0->$shareholders;

    // trace_return[0]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:119:9+17
    assume {:print "$track_return(57,13,0):", $t1} $t1 == $t1;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:120:5+1
    assume {:print "$at(67,4597,4598)"} true;
L1:

    // return $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:120:5+1
    assume {:print "$at(67,4597,4598)"} true;
    $ret0 := $t1;
    return;

}

// fun pool_u64::shareholders_count [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:123:5+98
procedure {:inline 1} $1_pool_u64_shareholders_count(_$t0: $1_pool_u64_Pool) returns ($ret0: int)
{
    // declare local variables
    var $t1: Vec (int);
    var $t2: int;
    var $t3: int;
    var $t0: $1_pool_u64_Pool;
    var $temp_0'$1_pool_u64_Pool': $1_pool_u64_Pool;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:123:5+1
    assume {:print "$at(67,4657,4658)"} true;
    assume {:print "$track_local(57,14,0):", $t0} $t0 == $t0;

    // $t1 := get_field<pool_u64::Pool>.shareholders($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:124:24+18
    assume {:print "$at(67,4730,4748)"} true;
    $t1 := $t0->$shareholders;

    // $t2 := vector::length<address>($t1) on_abort goto L2 with $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:124:9+34
    call $t2 := $1_vector_length'address'($t1);
    if ($abort_flag) {
        assume {:print "$at(67,4715,4749)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(57,14):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:124:9+34
    assume {:print "$track_return(57,14,0):", $t2} $t2 == $t2;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:125:5+1
    assume {:print "$at(67,4754,4755)"} true;
L1:

    // return $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:125:5+1
    assume {:print "$at(67,4754,4755)"} true;
    $ret0 := $t2;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:125:5+1
L2:

    // abort($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:125:5+1
    assume {:print "$at(67,4754,4755)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun pool_u64::shares [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:103:5+209
procedure {:inline 1} $1_pool_u64_shares(_$t0: $1_pool_u64_Pool, _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: Table int (int);
    var $t6: int;
    var $t0: $1_pool_u64_Pool;
    var $t1: int;
    var $temp_0'$1_pool_u64_Pool': $1_pool_u64_Pool;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:103:5+1
    assume {:print "$at(67,4014,4015)"} true;
    assume {:print "$track_local(57,15,0):", $t0} $t0 == $t0;

    // trace_local[shareholder]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:103:5+1
    assume {:print "$track_local(57,15,1):", $t1} $t1 == $t1;

    // $t3 := pool_u64::contains($t0, $t1) on_abort goto L4 with $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:104:13+27
    assume {:print "$at(67,4086,4113)"} true;
    call $t3 := $1_pool_u64_contains($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(67,4086,4113)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(57,15):", $t4} $t4 == $t4;
        goto L4;
    }

    // if ($t3) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:104:9+135
    if ($t3) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:105:34+4
    assume {:print "$at(67,4150,4154)"} true;
L1:

    // $t5 := get_field<pool_u64::Pool>.shares($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:105:33+12
    assume {:print "$at(67,4149,4161)"} true;
    $t5 := $t0->$shares;

    // $t2 := simple_map::borrow<address, u64>($t5, $t1) on_abort goto L4 with $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:105:14+46
    call $t2 := $1_simple_map_borrow'address_u64'($t5, $t1);
    if ($abort_flag) {
        assume {:print "$at(67,4130,4176)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(57,15):", $t4} $t4 == $t4;
        goto L4;
    }

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:104:9+135
    assume {:print "$at(67,4082,4217)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:104:9+135
L0:

    // $t6 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:107:13+1
    assume {:print "$at(67,4206,4207)"} true;
    $t6 := 0;
    assume $IsValid'u64'($t6);

    // $t2 := $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:104:9+135
    assume {:print "$at(67,4082,4217)"} true;
    $t2 := $t6;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:104:9+135
L2:

    // trace_return[0]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:104:9+135
    assume {:print "$at(67,4082,4217)"} true;
    assume {:print "$track_return(57,15,0):", $t2} $t2 == $t2;

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:109:5+1
    assume {:print "$at(67,4222,4223)"} true;
L3:

    // return $t2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:109:5+1
    assume {:print "$at(67,4222,4223)"} true;
    $ret0 := $t2;
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:109:5+1
L4:

    // abort($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:109:5+1
    assume {:print "$at(67,4222,4223)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun pool_u64::shares_to_amount [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:243:5+140
procedure {:inline 1} $1_pool_u64_shares_to_amount(_$t0: $1_pool_u64_Pool, _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t0: $1_pool_u64_Pool;
    var $t1: int;
    var $temp_0'$1_pool_u64_Pool': $1_pool_u64_Pool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:243:5+1
    assume {:print "$at(67,10530,10531)"} true;
    assume {:print "$track_local(57,16,0):", $t0} $t0 == $t0;

    // trace_local[shares]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:243:5+1
    assume {:print "$track_local(57,16,1):", $t1} $t1 == $t1;

    // $t2 := get_field<pool_u64::Pool>.total_coins($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:244:57+16
    assume {:print "$at(67,10647,10663)"} true;
    $t2 := $t0->$total_coins;

    // $t3 := pool_u64::shares_to_amount_with_total_coins($t0, $t1, $t2) on_abort goto L2 with $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:244:9+65
    call $t3 := $1_pool_u64_shares_to_amount_with_total_coins($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(67,10599,10664)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(57,16):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_return[0]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:244:9+65
    assume {:print "$track_return(57,16,0):", $t3} $t3 == $t3;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:245:5+1
    assume {:print "$at(67,10669,10670)"} true;
L1:

    // return $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:245:5+1
    assume {:print "$at(67,10669,10670)"} true;
    $ret0 := $t3;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:245:5+1
L2:

    // abort($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:245:5+1
    assume {:print "$at(67,10669,10670)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun pool_u64::shares_to_amount_with_total_coins [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:249:5+601
procedure {:inline 1} $1_pool_u64_shares_to_amount_with_total_coins(_$t0: $1_pool_u64_Pool, _$t1: int, _$t2: int) returns ($ret0: int)
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t0: $1_pool_u64_Pool;
    var $t1: int;
    var $t2: int;
    var $temp_0'$1_pool_u64_Pool': $1_pool_u64_Pool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:249:5+1
    assume {:print "$at(67,10837,10838)"} true;
    assume {:print "$track_local(57,17,0):", $t0} $t0 == $t0;

    // trace_local[shares]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:249:5+1
    assume {:print "$track_local(57,17,1):", $t1} $t1 == $t1;

    // trace_local[total_coins]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:249:5+1
    assume {:print "$track_local(57,17,2):", $t2} $t2 == $t2;

    // $t5 := get_field<pool_u64::Pool>.total_coins($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:251:13+16
    assume {:print "$at(67,11004,11020)"} true;
    $t5 := $t0->$total_coins;

    // $t6 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:251:33+1
    $t6 := 0;
    assume $IsValid'u64'($t6);

    // $t7 := ==($t5, $t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:251:30+2
    $t7 := $IsEqual'u64'($t5, $t6);

    // if ($t7) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:251:13+47
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:251:13+47
L1:

    // $t8 := true at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:251:13+47
    assume {:print "$at(67,11004,11051)"} true;
    $t8 := true;
    assume $IsValid'bool'($t8);

    // $t3 := $t8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:251:13+47
    $t3 := $t8;

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:251:13+47
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:251:38+4
L0:

    // $t9 := get_field<pool_u64::Pool>.total_shares($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:251:38+17
    assume {:print "$at(67,11029,11046)"} true;
    $t9 := $t0->$total_shares;

    // $t10 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:251:59+1
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // $t3 := ==($t9, $t10) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:251:56+2
    $t3 := $IsEqual'u64'($t9, $t10);

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:251:13+47
L2:

    // if ($t3) goto L4 else goto L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:251:9+432
    assume {:print "$at(67,11000,11432)"} true;
    if ($t3) { goto L4; } else { goto L3; }

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:251:9+432
L4:

    // $t11 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:252:13+1
    assume {:print "$at(67,11067,11068)"} true;
    $t11 := 0;
    assume $IsValid'u64'($t11);

    // $t4 := $t11 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:251:9+432
    assume {:print "$at(67,11000,11432)"} true;
    $t4 := $t11;

    // goto L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:251:9+432
    goto L5;

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:257:34+4
    assume {:print "$at(67,11377,11381)"} true;
L3:

    // $t12 := get_field<pool_u64::Pool>.total_shares($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:257:61+17
    assume {:print "$at(67,11404,11421)"} true;
    $t12 := $t0->$total_shares;

    // $t4 := pool_u64::multiply_then_divide($t0, $t1, $t2, $t12) on_abort goto L7 with $t13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:257:13+66
    call $t4 := $1_pool_u64_multiply_then_divide($t0, $t1, $t2, $t12);
    if ($abort_flag) {
        assume {:print "$at(67,11356,11422)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(57,17):", $t13} $t13 == $t13;
        goto L7;
    }

    // label L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:251:9+432
    assume {:print "$at(67,11000,11432)"} true;
L5:

    // trace_return[0]($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:251:9+432
    assume {:print "$at(67,11000,11432)"} true;
    assume {:print "$track_return(57,17,0):", $t4} $t4 == $t4;

    // label L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:259:5+1
    assume {:print "$at(67,11437,11438)"} true;
L6:

    // return $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:259:5+1
    assume {:print "$at(67,11437,11438)"} true;
    $ret0 := $t4;
    return;

    // label L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:259:5+1
L7:

    // abort($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:259:5+1
    assume {:print "$at(67,11437,11438)"} true;
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// fun pool_u64::transfer_shares [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:186:5+546
procedure {:inline 1} $1_pool_u64_transfer_shares(_$t0: $Mutation ($1_pool_u64_Pool), _$t1: int, _$t2: int, _$t3: int) returns ($ret0: $Mutation ($1_pool_u64_Pool))
{
    // declare local variables
    var $t4: int;
    var $t5: int;
    var $t6: $1_pool_u64_Pool;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: $1_pool_u64_Pool;
    var $t12: int;
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: bool;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: int;
    var $t0: $Mutation ($1_pool_u64_Pool);
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $temp_0'$1_pool_u64_Pool': $1_pool_u64_Pool;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:186:5+1
    assume {:print "$at(67,7502,7503)"} true;
    $temp_0'$1_pool_u64_Pool' := $Dereference($t0);
    assume {:print "$track_local(57,21,0):", $temp_0'$1_pool_u64_Pool'} $temp_0'$1_pool_u64_Pool' == $temp_0'$1_pool_u64_Pool';

    // trace_local[shareholder_1]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:186:5+1
    assume {:print "$track_local(57,21,1):", $t1} $t1 == $t1;

    // trace_local[shareholder_2]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:186:5+1
    assume {:print "$track_local(57,21,2):", $t2} $t2 == $t2;

    // trace_local[shares_to_transfer]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:186:5+1
    assume {:print "$track_local(57,21,3):", $t3} $t3 == $t3;

    // $t6 := read_ref($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:192:25+21
    assume {:print "$at(67,7684,7705)"} true;
    $t6 := $Dereference($t0);

    // $t7 := pool_u64::contains($t6, $t1) on_abort goto L9 with $t8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:192:17+29
    call $t7 := $1_pool_u64_contains($t6, $t1);
    if ($abort_flag) {
        assume {:print "$at(67,7676,7705)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(57,21):", $t8} $t8 == $t8;
        goto L9;
    }

    // if ($t7) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:192:9+87
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:192:9+87
L1:

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:192:9+87
    assume {:print "$at(67,7668,7755)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:192:9+87
L0:

    // pack_ref_deep($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:192:9+87
    assume {:print "$at(67,7668,7755)"} true;

    // destroy($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:192:9+87

    // $t9 := 1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:192:72+22
    $t9 := 1;
    assume $IsValid'u64'($t9);

    // $t10 := error::invalid_argument($t9) on_abort goto L9 with $t8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:192:48+47
    call $t10 := $1_error_invalid_argument($t9);
    if ($abort_flag) {
        assume {:print "$at(67,7707,7754)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(57,21):", $t8} $t8 == $t8;
        goto L9;
    }

    // trace_abort($t10) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:192:9+87
    assume {:print "$at(67,7668,7755)"} true;
    assume {:print "$track_abort(57,21):", $t10} $t10 == $t10;

    // $t8 := move($t10) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:192:9+87
    $t8 := $t10;

    // goto L9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:192:9+87
    goto L9;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:193:24+4
    assume {:print "$at(67,7780,7784)"} true;
L2:

    // $t11 := read_ref($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:193:23+21
    assume {:print "$at(67,7779,7800)"} true;
    $t11 := $Dereference($t0);

    // $t12 := pool_u64::shares($t11, $t1) on_abort goto L9 with $t8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:193:17+27
    call $t12 := $1_pool_u64_shares($t11, $t1);
    if ($abort_flag) {
        assume {:print "$at(67,7773,7800)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(57,21):", $t8} $t8 == $t8;
        goto L9;
    }

    // $t13 := >=($t12, $t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:193:45+2
    call $t13 := $Ge($t12, $t3);

    // if ($t13) goto L4 else goto L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:193:9+105
    if ($t13) { goto L4; } else { goto L3; }

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:193:9+105
L4:

    // goto L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:193:9+105
    assume {:print "$at(67,7765,7870)"} true;
    goto L5;

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:193:9+105
L3:

    // pack_ref_deep($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:193:9+105
    assume {:print "$at(67,7765,7870)"} true;

    // destroy($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:193:9+105

    // $t14 := 4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:193:92+20
    $t14 := 4;
    assume $IsValid'u64'($t14);

    // $t15 := error::invalid_argument($t14) on_abort goto L9 with $t8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:193:68+45
    call $t15 := $1_error_invalid_argument($t14);
    if ($abort_flag) {
        assume {:print "$at(67,7824,7869)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(57,21):", $t8} $t8 == $t8;
        goto L9;
    }

    // trace_abort($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:193:9+105
    assume {:print "$at(67,7765,7870)"} true;
    assume {:print "$track_abort(57,21):", $t15} $t15 == $t15;

    // $t8 := move($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:193:9+105
    $t8 := $t15;

    // goto L9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:193:9+105
    goto L9;

    // label L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:194:13+18
    assume {:print "$at(67,7884,7902)"} true;
L5:

    // $t16 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:194:35+1
    assume {:print "$at(67,7906,7907)"} true;
    $t16 := 0;
    assume $IsValid'u64'($t16);

    // $t17 := ==($t3, $t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:194:32+2
    $t17 := $IsEqual'u64'($t3, $t16);

    // if ($t17) goto L7 else goto L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:194:9+35
    if ($t17) { goto L7; } else { goto L6; }

    // label L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:194:38+6
L7:

    // destroy($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:194:38+6
    assume {:print "$at(67,7909,7915)"} true;

    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:194:38+6
    $temp_0'$1_pool_u64_Pool' := $Dereference($t0);
    assume {:print "$track_local(57,21,0):", $temp_0'$1_pool_u64_Pool'} $temp_0'$1_pool_u64_Pool' == $temp_0'$1_pool_u64_Pool';

    // pack_ref_deep($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:194:38+6

    // goto L8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:194:38+6
    goto L8;

    // label L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:196:23+4
    assume {:print "$at(67,7940,7944)"} true;
L6:

    // assume Identical($t18, Sub(simple_map::spec_get<address, u64>(select pool_u64::Pool.shares($t0), $t1), $t3)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:173:9+83
    assume {:print "$at(68,7278,7361)"} true;
    assume ($t18 == ($1_simple_map_spec_get'address_u64'($Dereference($t0)->$shares, $t1) - $t3));

    // assume Identical($t19, Sub(simple_map::spec_get<address, u64>(select pool_u64::Pool.shares($t0), $t1), $t3)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:181:9+83
    assume {:print "$at(68,7643,7726)"} true;
    assume ($t19 == ($1_simple_map_spec_get'address_u64'($Dereference($t0)->$shares, $t1) - $t3));

    // $t20 := pool_u64::deduct_shares($t0, $t1, $t3) on_abort goto L9 with $t8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:196:9+54
    assume {:print "$at(67,7926,7980)"} true;
    call $t20,$t0 := $1_pool_u64_deduct_shares($t0, $t1, $t3);
    if ($abort_flag) {
        assume {:print "$at(67,7926,7980)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(57,21):", $t8} $t8 == $t8;
        goto L9;
    }

    // destroy($t20) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:196:9+54

    // assume Identical($t21, simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares($t0), $t2)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:74:9+73
    assume {:print "$at(68,2864,2937)"} true;
    assume ($t21 == $1_simple_map_spec_contains_key'address_u64'($Dereference($t0)->$shares, $t2));

    // assume Identical($t22, simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares($t0), $t2)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:83:9+73
    assume {:print "$at(68,3186,3259)"} true;
    assume ($t22 == $1_simple_map_spec_contains_key'address_u64'($Dereference($t0)->$shares, $t2));

    // assume Identical($t23, simple_map::spec_get<address, u64>(select pool_u64::Pool.shares($t0), $t2)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:84:9+68
    assume {:print "$at(68,3268,3336)"} true;
    assume ($t23 == $1_simple_map_spec_get'address_u64'($Dereference($t0)->$shares, $t2));

    // assume Identical($t24, simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares($t0), $t2)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:94:9+73
    assume {:print "$at(68,3636,3709)"} true;
    assume ($t24 == $1_simple_map_spec_contains_key'address_u64'($Dereference($t0)->$shares, $t2));

    // assume Identical($t25, simple_map::spec_get<address, u64>(select pool_u64::Pool.shares($t0), $t2)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:95:9+68
    assume {:print "$at(68,3718,3786)"} true;
    assume ($t25 == $1_simple_map_spec_get'address_u64'($Dereference($t0)->$shares, $t2));

    // $t26 := pool_u64::add_shares($t0, $t2, $t3) on_abort goto L9 with $t8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:197:9+51
    assume {:print "$at(67,7990,8041)"} true;
    call $t26,$t0 := $1_pool_u64_add_shares($t0, $t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(67,7990,8041)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(57,21):", $t8} $t8 == $t8;
        goto L9;
    }

    // destroy($t26) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:197:9+51

    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:197:60+1
    $temp_0'$1_pool_u64_Pool' := $Dereference($t0);
    assume {:print "$track_local(57,21,0):", $temp_0'$1_pool_u64_Pool'} $temp_0'$1_pool_u64_Pool' == $temp_0'$1_pool_u64_Pool';

    // pack_ref_deep($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:197:60+1

    // label L8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:198:5+1
    assume {:print "$at(67,8047,8048)"} true;
L8:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:198:5+1
    assume {:print "$at(67,8047,8048)"} true;
    $ret0 := $t0;
    return;

    // label L9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:198:5+1
L9:

    // abort($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:198:5+1
    assume {:print "$at(67,8047,8048)"} true;
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun pool_u64::update_total_coins [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:128:5+120
procedure {:inline 1} $1_pool_u64_update_total_coins(_$t0: $Mutation ($1_pool_u64_Pool), _$t1: int) returns ($ret0: $Mutation ($1_pool_u64_Pool))
{
    // declare local variables
    var $t2: $Mutation (int);
    var $t0: $Mutation ($1_pool_u64_Pool);
    var $t1: int;
    var $temp_0'$1_pool_u64_Pool': $1_pool_u64_Pool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:128:5+1
    assume {:print "$at(67,4809,4810)"} true;
    $temp_0'$1_pool_u64_Pool' := $Dereference($t0);
    assume {:print "$track_local(57,22,0):", $temp_0'$1_pool_u64_Pool'} $temp_0'$1_pool_u64_Pool' == $temp_0'$1_pool_u64_Pool';

    // trace_local[new_total_coins]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:128:5+1
    assume {:print "$track_local(57,22,1):", $t1} $t1 == $t1;

    // $t2 := borrow_field<pool_u64::Pool>.total_coins($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:129:9+16
    assume {:print "$at(67,4888,4904)"} true;
    $t2 := $ChildMutation($t0, 1, $Dereference($t0)->$total_coins);

    // write_ref($t2, $t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:129:9+34
    $t2 := $UpdateMutation($t2, $t1);

    // write_back[Reference($t0).total_coins (u64)]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:129:9+34
    $t0 := $UpdateMutation($t0, $Update'$1_pool_u64_Pool'_total_coins($Dereference($t0), $Dereference($t2)));

    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:129:9+34
    $temp_0'$1_pool_u64_Pool' := $Dereference($t0);
    assume {:print "$track_local(57,22,0):", $temp_0'$1_pool_u64_Pool'} $temp_0'$1_pool_u64_Pool' == $temp_0'$1_pool_u64_Pool';

    // trace_local[pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:129:43+1
    $temp_0'$1_pool_u64_Pool' := $Dereference($t0);
    assume {:print "$track_local(57,22,0):", $temp_0'$1_pool_u64_Pool'} $temp_0'$1_pool_u64_Pool' == $temp_0'$1_pool_u64_Pool';

    // pack_ref_deep($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:129:43+1

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:130:5+1
    assume {:print "$at(67,4928,4929)"} true;
L1:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.move:130:5+1
    assume {:print "$at(67,4928,4929)"} true;
    $ret0 := $t0;
    return;

}

// struct staking_contract::AddStakeEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:129:5+122
datatype $1_staking_contract_AddStakeEvent {
    $1_staking_contract_AddStakeEvent($operator: int, $pool_address: int, $amount: int)
}
function {:inline} $Update'$1_staking_contract_AddStakeEvent'_operator(s: $1_staking_contract_AddStakeEvent, x: int): $1_staking_contract_AddStakeEvent {
    $1_staking_contract_AddStakeEvent(x, s->$pool_address, s->$amount)
}
function {:inline} $Update'$1_staking_contract_AddStakeEvent'_pool_address(s: $1_staking_contract_AddStakeEvent, x: int): $1_staking_contract_AddStakeEvent {
    $1_staking_contract_AddStakeEvent(s->$operator, x, s->$amount)
}
function {:inline} $Update'$1_staking_contract_AddStakeEvent'_amount(s: $1_staking_contract_AddStakeEvent, x: int): $1_staking_contract_AddStakeEvent {
    $1_staking_contract_AddStakeEvent(s->$operator, s->$pool_address, x)
}
function $IsValid'$1_staking_contract_AddStakeEvent'(s: $1_staking_contract_AddStakeEvent): bool {
    $IsValid'address'(s->$operator)
      && $IsValid'address'(s->$pool_address)
      && $IsValid'u64'(s->$amount)
}
function {:inline} $IsEqual'$1_staking_contract_AddStakeEvent'(s1: $1_staking_contract_AddStakeEvent, s2: $1_staking_contract_AddStakeEvent): bool {
    s1 == s2
}

// struct staking_contract::UnlockStakeEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:142:5+156
datatype $1_staking_contract_UnlockStakeEvent {
    $1_staking_contract_UnlockStakeEvent($operator: int, $pool_address: int, $amount: int, $commission_paid: int)
}
function {:inline} $Update'$1_staking_contract_UnlockStakeEvent'_operator(s: $1_staking_contract_UnlockStakeEvent, x: int): $1_staking_contract_UnlockStakeEvent {
    $1_staking_contract_UnlockStakeEvent(x, s->$pool_address, s->$amount, s->$commission_paid)
}
function {:inline} $Update'$1_staking_contract_UnlockStakeEvent'_pool_address(s: $1_staking_contract_UnlockStakeEvent, x: int): $1_staking_contract_UnlockStakeEvent {
    $1_staking_contract_UnlockStakeEvent(s->$operator, x, s->$amount, s->$commission_paid)
}
function {:inline} $Update'$1_staking_contract_UnlockStakeEvent'_amount(s: $1_staking_contract_UnlockStakeEvent, x: int): $1_staking_contract_UnlockStakeEvent {
    $1_staking_contract_UnlockStakeEvent(s->$operator, s->$pool_address, x, s->$commission_paid)
}
function {:inline} $Update'$1_staking_contract_UnlockStakeEvent'_commission_paid(s: $1_staking_contract_UnlockStakeEvent, x: int): $1_staking_contract_UnlockStakeEvent {
    $1_staking_contract_UnlockStakeEvent(s->$operator, s->$pool_address, s->$amount, x)
}
function $IsValid'$1_staking_contract_UnlockStakeEvent'(s: $1_staking_contract_UnlockStakeEvent): bool {
    $IsValid'address'(s->$operator)
      && $IsValid'address'(s->$pool_address)
      && $IsValid'u64'(s->$amount)
      && $IsValid'u64'(s->$commission_paid)
}
function {:inline} $IsEqual'$1_staking_contract_UnlockStakeEvent'(s1: $1_staking_contract_UnlockStakeEvent, s2: $1_staking_contract_UnlockStakeEvent): bool {
    s1 == s2
}

// struct staking_contract::AddDistributionEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:155:5+130
datatype $1_staking_contract_AddDistributionEvent {
    $1_staking_contract_AddDistributionEvent($operator: int, $pool_address: int, $amount: int)
}
function {:inline} $Update'$1_staking_contract_AddDistributionEvent'_operator(s: $1_staking_contract_AddDistributionEvent, x: int): $1_staking_contract_AddDistributionEvent {
    $1_staking_contract_AddDistributionEvent(x, s->$pool_address, s->$amount)
}
function {:inline} $Update'$1_staking_contract_AddDistributionEvent'_pool_address(s: $1_staking_contract_AddDistributionEvent, x: int): $1_staking_contract_AddDistributionEvent {
    $1_staking_contract_AddDistributionEvent(s->$operator, x, s->$amount)
}
function {:inline} $Update'$1_staking_contract_AddDistributionEvent'_amount(s: $1_staking_contract_AddDistributionEvent, x: int): $1_staking_contract_AddDistributionEvent {
    $1_staking_contract_AddDistributionEvent(s->$operator, s->$pool_address, x)
}
function $IsValid'$1_staking_contract_AddDistributionEvent'(s: $1_staking_contract_AddDistributionEvent): bool {
    $IsValid'address'(s->$operator)
      && $IsValid'address'(s->$pool_address)
      && $IsValid'u64'(s->$amount)
}
function {:inline} $IsEqual'$1_staking_contract_AddDistributionEvent'(s1: $1_staking_contract_AddDistributionEvent, s2: $1_staking_contract_AddDistributionEvent): bool {
    s1 == s2
}

// struct staking_contract::CreateStakingContractEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:109:5+199
datatype $1_staking_contract_CreateStakingContractEvent {
    $1_staking_contract_CreateStakingContractEvent($operator: int, $voter: int, $pool_address: int, $principal: int, $commission_percentage: int)
}
function {:inline} $Update'$1_staking_contract_CreateStakingContractEvent'_operator(s: $1_staking_contract_CreateStakingContractEvent, x: int): $1_staking_contract_CreateStakingContractEvent {
    $1_staking_contract_CreateStakingContractEvent(x, s->$voter, s->$pool_address, s->$principal, s->$commission_percentage)
}
function {:inline} $Update'$1_staking_contract_CreateStakingContractEvent'_voter(s: $1_staking_contract_CreateStakingContractEvent, x: int): $1_staking_contract_CreateStakingContractEvent {
    $1_staking_contract_CreateStakingContractEvent(s->$operator, x, s->$pool_address, s->$principal, s->$commission_percentage)
}
function {:inline} $Update'$1_staking_contract_CreateStakingContractEvent'_pool_address(s: $1_staking_contract_CreateStakingContractEvent, x: int): $1_staking_contract_CreateStakingContractEvent {
    $1_staking_contract_CreateStakingContractEvent(s->$operator, s->$voter, x, s->$principal, s->$commission_percentage)
}
function {:inline} $Update'$1_staking_contract_CreateStakingContractEvent'_principal(s: $1_staking_contract_CreateStakingContractEvent, x: int): $1_staking_contract_CreateStakingContractEvent {
    $1_staking_contract_CreateStakingContractEvent(s->$operator, s->$voter, s->$pool_address, x, s->$commission_percentage)
}
function {:inline} $Update'$1_staking_contract_CreateStakingContractEvent'_commission_percentage(s: $1_staking_contract_CreateStakingContractEvent, x: int): $1_staking_contract_CreateStakingContractEvent {
    $1_staking_contract_CreateStakingContractEvent(s->$operator, s->$voter, s->$pool_address, s->$principal, x)
}
function $IsValid'$1_staking_contract_CreateStakingContractEvent'(s: $1_staking_contract_CreateStakingContractEvent): bool {
    $IsValid'address'(s->$operator)
      && $IsValid'address'(s->$voter)
      && $IsValid'address'(s->$pool_address)
      && $IsValid'u64'(s->$principal)
      && $IsValid'u64'(s->$commission_percentage)
}
function {:inline} $IsEqual'$1_staking_contract_CreateStakingContractEvent'(s1: $1_staking_contract_CreateStakingContractEvent, s2: $1_staking_contract_CreateStakingContractEvent): bool {
    s1 == s2
}

// struct staking_contract::DistributeEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:161:5+153
datatype $1_staking_contract_DistributeEvent {
    $1_staking_contract_DistributeEvent($operator: int, $pool_address: int, $recipient: int, $amount: int)
}
function {:inline} $Update'$1_staking_contract_DistributeEvent'_operator(s: $1_staking_contract_DistributeEvent, x: int): $1_staking_contract_DistributeEvent {
    $1_staking_contract_DistributeEvent(x, s->$pool_address, s->$recipient, s->$amount)
}
function {:inline} $Update'$1_staking_contract_DistributeEvent'_pool_address(s: $1_staking_contract_DistributeEvent, x: int): $1_staking_contract_DistributeEvent {
    $1_staking_contract_DistributeEvent(s->$operator, x, s->$recipient, s->$amount)
}
function {:inline} $Update'$1_staking_contract_DistributeEvent'_recipient(s: $1_staking_contract_DistributeEvent, x: int): $1_staking_contract_DistributeEvent {
    $1_staking_contract_DistributeEvent(s->$operator, s->$pool_address, x, s->$amount)
}
function {:inline} $Update'$1_staking_contract_DistributeEvent'_amount(s: $1_staking_contract_DistributeEvent, x: int): $1_staking_contract_DistributeEvent {
    $1_staking_contract_DistributeEvent(s->$operator, s->$pool_address, s->$recipient, x)
}
function $IsValid'$1_staking_contract_DistributeEvent'(s: $1_staking_contract_DistributeEvent): bool {
    $IsValid'address'(s->$operator)
      && $IsValid'address'(s->$pool_address)
      && $IsValid'address'(s->$recipient)
      && $IsValid'u64'(s->$amount)
}
function {:inline} $IsEqual'$1_staking_contract_DistributeEvent'(s1: $1_staking_contract_DistributeEvent, s2: $1_staking_contract_DistributeEvent): bool {
    s1 == s2
}

// struct staking_contract::RequestCommissionEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:135:5+177
datatype $1_staking_contract_RequestCommissionEvent {
    $1_staking_contract_RequestCommissionEvent($operator: int, $pool_address: int, $accumulated_rewards: int, $commission_amount: int)
}
function {:inline} $Update'$1_staking_contract_RequestCommissionEvent'_operator(s: $1_staking_contract_RequestCommissionEvent, x: int): $1_staking_contract_RequestCommissionEvent {
    $1_staking_contract_RequestCommissionEvent(x, s->$pool_address, s->$accumulated_rewards, s->$commission_amount)
}
function {:inline} $Update'$1_staking_contract_RequestCommissionEvent'_pool_address(s: $1_staking_contract_RequestCommissionEvent, x: int): $1_staking_contract_RequestCommissionEvent {
    $1_staking_contract_RequestCommissionEvent(s->$operator, x, s->$accumulated_rewards, s->$commission_amount)
}
function {:inline} $Update'$1_staking_contract_RequestCommissionEvent'_accumulated_rewards(s: $1_staking_contract_RequestCommissionEvent, x: int): $1_staking_contract_RequestCommissionEvent {
    $1_staking_contract_RequestCommissionEvent(s->$operator, s->$pool_address, x, s->$commission_amount)
}
function {:inline} $Update'$1_staking_contract_RequestCommissionEvent'_commission_amount(s: $1_staking_contract_RequestCommissionEvent, x: int): $1_staking_contract_RequestCommissionEvent {
    $1_staking_contract_RequestCommissionEvent(s->$operator, s->$pool_address, s->$accumulated_rewards, x)
}
function $IsValid'$1_staking_contract_RequestCommissionEvent'(s: $1_staking_contract_RequestCommissionEvent): bool {
    $IsValid'address'(s->$operator)
      && $IsValid'address'(s->$pool_address)
      && $IsValid'u64'(s->$accumulated_rewards)
      && $IsValid'u64'(s->$commission_amount)
}
function {:inline} $IsEqual'$1_staking_contract_RequestCommissionEvent'(s1: $1_staking_contract_RequestCommissionEvent, s2: $1_staking_contract_RequestCommissionEvent): bool {
    s1 == s2
}

// struct staking_contract::ResetLockupEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:124:5+105
datatype $1_staking_contract_ResetLockupEvent {
    $1_staking_contract_ResetLockupEvent($operator: int, $pool_address: int)
}
function {:inline} $Update'$1_staking_contract_ResetLockupEvent'_operator(s: $1_staking_contract_ResetLockupEvent, x: int): $1_staking_contract_ResetLockupEvent {
    $1_staking_contract_ResetLockupEvent(x, s->$pool_address)
}
function {:inline} $Update'$1_staking_contract_ResetLockupEvent'_pool_address(s: $1_staking_contract_ResetLockupEvent, x: int): $1_staking_contract_ResetLockupEvent {
    $1_staking_contract_ResetLockupEvent(s->$operator, x)
}
function $IsValid'$1_staking_contract_ResetLockupEvent'(s: $1_staking_contract_ResetLockupEvent): bool {
    $IsValid'address'(s->$operator)
      && $IsValid'address'(s->$pool_address)
}
function {:inline} $IsEqual'$1_staking_contract_ResetLockupEvent'(s1: $1_staking_contract_ResetLockupEvent, s2: $1_staking_contract_ResetLockupEvent): bool {
    s1 == s2
}

// struct staking_contract::StakingContract at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:68:5+692
datatype $1_staking_contract_StakingContract {
    $1_staking_contract_StakingContract($principal: int, $pool_address: int, $owner_cap: $1_stake_OwnerCapability, $commission_percentage: int, $distribution_pool: $1_pool_u64_Pool, $signer_cap: $1_account_SignerCapability)
}
function {:inline} $Update'$1_staking_contract_StakingContract'_principal(s: $1_staking_contract_StakingContract, x: int): $1_staking_contract_StakingContract {
    $1_staking_contract_StakingContract(x, s->$pool_address, s->$owner_cap, s->$commission_percentage, s->$distribution_pool, s->$signer_cap)
}
function {:inline} $Update'$1_staking_contract_StakingContract'_pool_address(s: $1_staking_contract_StakingContract, x: int): $1_staking_contract_StakingContract {
    $1_staking_contract_StakingContract(s->$principal, x, s->$owner_cap, s->$commission_percentage, s->$distribution_pool, s->$signer_cap)
}
function {:inline} $Update'$1_staking_contract_StakingContract'_owner_cap(s: $1_staking_contract_StakingContract, x: $1_stake_OwnerCapability): $1_staking_contract_StakingContract {
    $1_staking_contract_StakingContract(s->$principal, s->$pool_address, x, s->$commission_percentage, s->$distribution_pool, s->$signer_cap)
}
function {:inline} $Update'$1_staking_contract_StakingContract'_commission_percentage(s: $1_staking_contract_StakingContract, x: int): $1_staking_contract_StakingContract {
    $1_staking_contract_StakingContract(s->$principal, s->$pool_address, s->$owner_cap, x, s->$distribution_pool, s->$signer_cap)
}
function {:inline} $Update'$1_staking_contract_StakingContract'_distribution_pool(s: $1_staking_contract_StakingContract, x: $1_pool_u64_Pool): $1_staking_contract_StakingContract {
    $1_staking_contract_StakingContract(s->$principal, s->$pool_address, s->$owner_cap, s->$commission_percentage, x, s->$signer_cap)
}
function {:inline} $Update'$1_staking_contract_StakingContract'_signer_cap(s: $1_staking_contract_StakingContract, x: $1_account_SignerCapability): $1_staking_contract_StakingContract {
    $1_staking_contract_StakingContract(s->$principal, s->$pool_address, s->$owner_cap, s->$commission_percentage, s->$distribution_pool, x)
}
function $IsValid'$1_staking_contract_StakingContract'(s: $1_staking_contract_StakingContract): bool {
    $IsValid'u64'(s->$principal)
      && $IsValid'address'(s->$pool_address)
      && $IsValid'$1_stake_OwnerCapability'(s->$owner_cap)
      && $IsValid'u64'(s->$commission_percentage)
      && $IsValid'$1_pool_u64_Pool'(s->$distribution_pool)
      && $IsValid'$1_account_SignerCapability'(s->$signer_cap)
}
function {:inline} $IsEqual'$1_staking_contract_StakingContract'(s1: $1_staking_contract_StakingContract, s2: $1_staking_contract_StakingContract): bool {
    $IsEqual'u64'(s1->$principal, s2->$principal)
    && $IsEqual'address'(s1->$pool_address, s2->$pool_address)
    && $IsEqual'$1_stake_OwnerCapability'(s1->$owner_cap, s2->$owner_cap)
    && $IsEqual'u64'(s1->$commission_percentage, s2->$commission_percentage)
    && $IsEqual'$1_pool_u64_Pool'(s1->$distribution_pool, s2->$distribution_pool)
    && $IsEqual'$1_account_SignerCapability'(s1->$signer_cap, s2->$signer_cap)}

// struct staking_contract::Store at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:82:5+690
datatype $1_staking_contract_Store {
    $1_staking_contract_Store($staking_contracts: Table int ($1_staking_contract_StakingContract), $create_staking_contract_events: $1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent', $update_voter_events: $1_event_EventHandle'$1_staking_contract_UpdateVoterEvent', $reset_lockup_events: $1_event_EventHandle'$1_staking_contract_ResetLockupEvent', $add_stake_events: $1_event_EventHandle'$1_staking_contract_AddStakeEvent', $request_commission_events: $1_event_EventHandle'$1_staking_contract_RequestCommissionEvent', $unlock_stake_events: $1_event_EventHandle'$1_staking_contract_UnlockStakeEvent', $switch_operator_events: $1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent', $add_distribution_events: $1_event_EventHandle'$1_staking_contract_AddDistributionEvent', $distribute_events: $1_event_EventHandle'$1_staking_contract_DistributeEvent')
}
function {:inline} $Update'$1_staking_contract_Store'_staking_contracts(s: $1_staking_contract_Store, x: Table int ($1_staking_contract_StakingContract)): $1_staking_contract_Store {
    $1_staking_contract_Store(x, s->$create_staking_contract_events, s->$update_voter_events, s->$reset_lockup_events, s->$add_stake_events, s->$request_commission_events, s->$unlock_stake_events, s->$switch_operator_events, s->$add_distribution_events, s->$distribute_events)
}
function {:inline} $Update'$1_staking_contract_Store'_create_staking_contract_events(s: $1_staking_contract_Store, x: $1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent'): $1_staking_contract_Store {
    $1_staking_contract_Store(s->$staking_contracts, x, s->$update_voter_events, s->$reset_lockup_events, s->$add_stake_events, s->$request_commission_events, s->$unlock_stake_events, s->$switch_operator_events, s->$add_distribution_events, s->$distribute_events)
}
function {:inline} $Update'$1_staking_contract_Store'_update_voter_events(s: $1_staking_contract_Store, x: $1_event_EventHandle'$1_staking_contract_UpdateVoterEvent'): $1_staking_contract_Store {
    $1_staking_contract_Store(s->$staking_contracts, s->$create_staking_contract_events, x, s->$reset_lockup_events, s->$add_stake_events, s->$request_commission_events, s->$unlock_stake_events, s->$switch_operator_events, s->$add_distribution_events, s->$distribute_events)
}
function {:inline} $Update'$1_staking_contract_Store'_reset_lockup_events(s: $1_staking_contract_Store, x: $1_event_EventHandle'$1_staking_contract_ResetLockupEvent'): $1_staking_contract_Store {
    $1_staking_contract_Store(s->$staking_contracts, s->$create_staking_contract_events, s->$update_voter_events, x, s->$add_stake_events, s->$request_commission_events, s->$unlock_stake_events, s->$switch_operator_events, s->$add_distribution_events, s->$distribute_events)
}
function {:inline} $Update'$1_staking_contract_Store'_add_stake_events(s: $1_staking_contract_Store, x: $1_event_EventHandle'$1_staking_contract_AddStakeEvent'): $1_staking_contract_Store {
    $1_staking_contract_Store(s->$staking_contracts, s->$create_staking_contract_events, s->$update_voter_events, s->$reset_lockup_events, x, s->$request_commission_events, s->$unlock_stake_events, s->$switch_operator_events, s->$add_distribution_events, s->$distribute_events)
}
function {:inline} $Update'$1_staking_contract_Store'_request_commission_events(s: $1_staking_contract_Store, x: $1_event_EventHandle'$1_staking_contract_RequestCommissionEvent'): $1_staking_contract_Store {
    $1_staking_contract_Store(s->$staking_contracts, s->$create_staking_contract_events, s->$update_voter_events, s->$reset_lockup_events, s->$add_stake_events, x, s->$unlock_stake_events, s->$switch_operator_events, s->$add_distribution_events, s->$distribute_events)
}
function {:inline} $Update'$1_staking_contract_Store'_unlock_stake_events(s: $1_staking_contract_Store, x: $1_event_EventHandle'$1_staking_contract_UnlockStakeEvent'): $1_staking_contract_Store {
    $1_staking_contract_Store(s->$staking_contracts, s->$create_staking_contract_events, s->$update_voter_events, s->$reset_lockup_events, s->$add_stake_events, s->$request_commission_events, x, s->$switch_operator_events, s->$add_distribution_events, s->$distribute_events)
}
function {:inline} $Update'$1_staking_contract_Store'_switch_operator_events(s: $1_staking_contract_Store, x: $1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent'): $1_staking_contract_Store {
    $1_staking_contract_Store(s->$staking_contracts, s->$create_staking_contract_events, s->$update_voter_events, s->$reset_lockup_events, s->$add_stake_events, s->$request_commission_events, s->$unlock_stake_events, x, s->$add_distribution_events, s->$distribute_events)
}
function {:inline} $Update'$1_staking_contract_Store'_add_distribution_events(s: $1_staking_contract_Store, x: $1_event_EventHandle'$1_staking_contract_AddDistributionEvent'): $1_staking_contract_Store {
    $1_staking_contract_Store(s->$staking_contracts, s->$create_staking_contract_events, s->$update_voter_events, s->$reset_lockup_events, s->$add_stake_events, s->$request_commission_events, s->$unlock_stake_events, s->$switch_operator_events, x, s->$distribute_events)
}
function {:inline} $Update'$1_staking_contract_Store'_distribute_events(s: $1_staking_contract_Store, x: $1_event_EventHandle'$1_staking_contract_DistributeEvent'): $1_staking_contract_Store {
    $1_staking_contract_Store(s->$staking_contracts, s->$create_staking_contract_events, s->$update_voter_events, s->$reset_lockup_events, s->$add_stake_events, s->$request_commission_events, s->$unlock_stake_events, s->$switch_operator_events, s->$add_distribution_events, x)
}
function $IsValid'$1_staking_contract_Store'(s: $1_staking_contract_Store): bool {
    $IsValid'$1_simple_map_SimpleMap'address_$1_staking_contract_StakingContract''(s->$staking_contracts)
      && $IsValid'$1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent''(s->$create_staking_contract_events)
      && $IsValid'$1_event_EventHandle'$1_staking_contract_UpdateVoterEvent''(s->$update_voter_events)
      && $IsValid'$1_event_EventHandle'$1_staking_contract_ResetLockupEvent''(s->$reset_lockup_events)
      && $IsValid'$1_event_EventHandle'$1_staking_contract_AddStakeEvent''(s->$add_stake_events)
      && $IsValid'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''(s->$request_commission_events)
      && $IsValid'$1_event_EventHandle'$1_staking_contract_UnlockStakeEvent''(s->$unlock_stake_events)
      && $IsValid'$1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent''(s->$switch_operator_events)
      && $IsValid'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''(s->$add_distribution_events)
      && $IsValid'$1_event_EventHandle'$1_staking_contract_DistributeEvent''(s->$distribute_events)
}
function {:inline} $IsEqual'$1_staking_contract_Store'(s1: $1_staking_contract_Store, s2: $1_staking_contract_Store): bool {
    $IsEqual'$1_simple_map_SimpleMap'address_$1_staking_contract_StakingContract''(s1->$staking_contracts, s2->$staking_contracts)
    && $IsEqual'$1_event_EventHandle'$1_staking_contract_CreateStakingContractEvent''(s1->$create_staking_contract_events, s2->$create_staking_contract_events)
    && $IsEqual'$1_event_EventHandle'$1_staking_contract_UpdateVoterEvent''(s1->$update_voter_events, s2->$update_voter_events)
    && $IsEqual'$1_event_EventHandle'$1_staking_contract_ResetLockupEvent''(s1->$reset_lockup_events, s2->$reset_lockup_events)
    && $IsEqual'$1_event_EventHandle'$1_staking_contract_AddStakeEvent''(s1->$add_stake_events, s2->$add_stake_events)
    && $IsEqual'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''(s1->$request_commission_events, s2->$request_commission_events)
    && $IsEqual'$1_event_EventHandle'$1_staking_contract_UnlockStakeEvent''(s1->$unlock_stake_events, s2->$unlock_stake_events)
    && $IsEqual'$1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent''(s1->$switch_operator_events, s2->$switch_operator_events)
    && $IsEqual'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''(s1->$add_distribution_events, s2->$add_distribution_events)
    && $IsEqual'$1_event_EventHandle'$1_staking_contract_DistributeEvent''(s1->$distribute_events, s2->$distribute_events)}
var $1_staking_contract_Store_$memory: $Memory $1_staking_contract_Store;

// struct staking_contract::SwitchOperatorEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:149:5+143
datatype $1_staking_contract_SwitchOperatorEvent {
    $1_staking_contract_SwitchOperatorEvent($old_operator: int, $new_operator: int, $pool_address: int)
}
function {:inline} $Update'$1_staking_contract_SwitchOperatorEvent'_old_operator(s: $1_staking_contract_SwitchOperatorEvent, x: int): $1_staking_contract_SwitchOperatorEvent {
    $1_staking_contract_SwitchOperatorEvent(x, s->$new_operator, s->$pool_address)
}
function {:inline} $Update'$1_staking_contract_SwitchOperatorEvent'_new_operator(s: $1_staking_contract_SwitchOperatorEvent, x: int): $1_staking_contract_SwitchOperatorEvent {
    $1_staking_contract_SwitchOperatorEvent(s->$old_operator, x, s->$pool_address)
}
function {:inline} $Update'$1_staking_contract_SwitchOperatorEvent'_pool_address(s: $1_staking_contract_SwitchOperatorEvent, x: int): $1_staking_contract_SwitchOperatorEvent {
    $1_staking_contract_SwitchOperatorEvent(s->$old_operator, s->$new_operator, x)
}
function $IsValid'$1_staking_contract_SwitchOperatorEvent'(s: $1_staking_contract_SwitchOperatorEvent): bool {
    $IsValid'address'(s->$old_operator)
      && $IsValid'address'(s->$new_operator)
      && $IsValid'address'(s->$pool_address)
}
function {:inline} $IsEqual'$1_staking_contract_SwitchOperatorEvent'(s1: $1_staking_contract_SwitchOperatorEvent, s2: $1_staking_contract_SwitchOperatorEvent): bool {
    s1 == s2
}

// struct staking_contract::UpdateVoterEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:117:5+161
datatype $1_staking_contract_UpdateVoterEvent {
    $1_staking_contract_UpdateVoterEvent($operator: int, $pool_address: int, $old_voter: int, $new_voter: int)
}
function {:inline} $Update'$1_staking_contract_UpdateVoterEvent'_operator(s: $1_staking_contract_UpdateVoterEvent, x: int): $1_staking_contract_UpdateVoterEvent {
    $1_staking_contract_UpdateVoterEvent(x, s->$pool_address, s->$old_voter, s->$new_voter)
}
function {:inline} $Update'$1_staking_contract_UpdateVoterEvent'_pool_address(s: $1_staking_contract_UpdateVoterEvent, x: int): $1_staking_contract_UpdateVoterEvent {
    $1_staking_contract_UpdateVoterEvent(s->$operator, x, s->$old_voter, s->$new_voter)
}
function {:inline} $Update'$1_staking_contract_UpdateVoterEvent'_old_voter(s: $1_staking_contract_UpdateVoterEvent, x: int): $1_staking_contract_UpdateVoterEvent {
    $1_staking_contract_UpdateVoterEvent(s->$operator, s->$pool_address, x, s->$new_voter)
}
function {:inline} $Update'$1_staking_contract_UpdateVoterEvent'_new_voter(s: $1_staking_contract_UpdateVoterEvent, x: int): $1_staking_contract_UpdateVoterEvent {
    $1_staking_contract_UpdateVoterEvent(s->$operator, s->$pool_address, s->$old_voter, x)
}
function $IsValid'$1_staking_contract_UpdateVoterEvent'(s: $1_staking_contract_UpdateVoterEvent): bool {
    $IsValid'address'(s->$operator)
      && $IsValid'address'(s->$pool_address)
      && $IsValid'address'(s->$old_voter)
      && $IsValid'address'(s->$new_voter)
}
function {:inline} $IsEqual'$1_staking_contract_UpdateVoterEvent'(s1: $1_staking_contract_UpdateVoterEvent, s2: $1_staking_contract_UpdateVoterEvent): bool {
    s1 == s2
}

// fun staking_contract::add_distribution [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:643:5+833
procedure {:inline 1} $1_staking_contract_add_distribution(_$t0: int, _$t1: $Mutation ($1_staking_contract_StakingContract), _$t2: int, _$t3: int, _$t4: $Mutation ($1_event_EventHandle'$1_staking_contract_AddDistributionEvent')) returns ($ret0: $Mutation ($1_staking_contract_StakingContract), $ret1: $Mutation ($1_event_EventHandle'$1_staking_contract_AddDistributionEvent'))
{
    // declare local variables
    var $t5: $Mutation ($1_pool_u64_Pool);
    var $t6: int;
    var $t7: int;
    var $t8: $Mutation ($1_pool_u64_Pool);
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: bool;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: $1_staking_contract_AddDistributionEvent;
    var $t0: int;
    var $t1: $Mutation ($1_staking_contract_StakingContract);
    var $t2: int;
    var $t3: int;
    var $t4: $Mutation ($1_event_EventHandle'$1_staking_contract_AddDistributionEvent');
    var $temp_0'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent'': $1_event_EventHandle'$1_staking_contract_AddDistributionEvent';
    var $temp_0'$1_pool_u64_Pool': $1_pool_u64_Pool;
    var $temp_0'$1_staking_contract_StakingContract': $1_staking_contract_StakingContract;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // bytecode translation starts here
    // trace_local[operator]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:643:5+1
    assume {:print "$at(143,30530,30531)"} true;
    assume {:print "$track_local(58,0,0):", $t0} $t0 == $t0;

    // trace_local[staking_contract]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:643:5+1
    $temp_0'$1_staking_contract_StakingContract' := $Dereference($t1);
    assume {:print "$track_local(58,0,1):", $temp_0'$1_staking_contract_StakingContract'} $temp_0'$1_staking_contract_StakingContract' == $temp_0'$1_staking_contract_StakingContract';

    // trace_local[recipient]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:643:5+1
    assume {:print "$track_local(58,0,2):", $t2} $t2 == $t2;

    // trace_local[coins_amount]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:643:5+1
    assume {:print "$track_local(58,0,3):", $t3} $t3 == $t3;

    // trace_local[add_distribution_events]($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:643:5+1
    $temp_0'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent'' := $Dereference($t4);
    assume {:print "$track_local(58,0,4):", $temp_0'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''} $temp_0'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent'' == $temp_0'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent'';

    // $t8 := borrow_field<staking_contract::StakingContract>.distribution_pool($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:650:33+39
    assume {:print "$at(143,30795,30834)"} true;
    $t8 := $ChildMutation($t1, 4, $Dereference($t1)->$distribution_pool);

    // trace_local[distribution_pool]($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:650:13+17
    $temp_0'$1_pool_u64_Pool' := $Dereference($t8);
    assume {:print "$track_local(58,0,5):", $temp_0'$1_pool_u64_Pool'} $temp_0'$1_pool_u64_Pool' == $temp_0'$1_pool_u64_Pool';

    // $t9 := get_field<staking_contract::StakingContract>.pool_address($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:651:69+29
    assume {:print "$at(143,30904,30933)"} true;
    $t9 := $Dereference($t1)->$pool_address;

    // ($t10, $t11, $t12, $t13) := stake::get_stake($t9) on_abort goto L2 with $t14 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:651:52+47
    call $t10,$t11,$t12,$t13 := $1_stake_get_stake($t9);
    if ($abort_flag) {
        assume {:print "$at(143,30887,30934)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(58,0):", $t14} $t14 == $t14;
        goto L2;
    }

    // trace_local[total_distribution_amount]($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:651:23+25
    assume {:print "$track_local(58,0,7):", $t13} $t13 == $t13;

    // destroy($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:651:20+1

    // destroy($t11) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:651:17+1

    // destroy($t10) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:651:14+1

    // $t15 := get_field<staking_contract::StakingContract>.commission_percentage($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:653:69+38
    assume {:print "$at(143,31038,31076)"} true;
    $t15 := $Dereference($t1)->$commission_percentage;

    // staking_contract::update_distribution_pool($t8, $t13, $t0, $t15) on_abort goto L2 with $t14 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:652:9+133
    assume {:print "$at(143,30944,31077)"} true;
    call $t8 := $1_staking_contract_update_distribution_pool($t8, $t13, $t0, $t15);
    if ($abort_flag) {
        assume {:print "$at(143,30944,31077)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(58,0):", $t14} $t14 == $t14;
        goto L2;
    }

    // assume Identical($t16, pool_u64::spec_amount_to_shares_with_total_coins($t8, $t3, select pool_u64::Pool.total_coins($t8))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:60:9+94
    assume {:print "$at(68,2129,2223)"} true;
    assume ($t16 == $1_pool_u64_spec_amount_to_shares_with_total_coins($Dereference($t8), $t3, $Dereference($t8)->$total_coins));

    // assume Identical($t17, simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares($t8), $t2)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:83:9+73
    assume {:print "$at(68,3186,3259)"} true;
    assume ($t17 == $1_simple_map_spec_contains_key'address_u64'($Dereference($t8)->$shares, $t2));

    // assume Identical($t18, simple_map::spec_get<address, u64>(select pool_u64::Pool.shares($t8), $t2)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:84:9+68
    assume {:print "$at(68,3268,3336)"} true;
    assume ($t18 == $1_simple_map_spec_get'address_u64'($Dereference($t8)->$shares, $t2));

    // assume Identical($t19, simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares($t8), $t2)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:94:9+73
    assume {:print "$at(68,3636,3709)"} true;
    assume ($t19 == $1_simple_map_spec_contains_key'address_u64'($Dereference($t8)->$shares, $t2));

    // assume Identical($t20, simple_map::spec_get<address, u64>(select pool_u64::Pool.shares($t8), $t2)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:95:9+68
    assume {:print "$at(68,3718,3786)"} true;
    assume ($t20 == $1_simple_map_spec_get'address_u64'($Dereference($t8)->$shares, $t2));

    // $t21 := pool_u64::buy_in($t8, $t2, $t3) on_abort goto L2 with $t14 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:655:9+60
    assume {:print "$at(143,31088,31148)"} true;
    call $t21,$t8 := $1_pool_u64_buy_in($t8, $t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(143,31088,31148)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(58,0):", $t14} $t14 == $t14;
        goto L2;
    }

    // write_back[Reference($t1).distribution_pool (pool_u64::Pool)]($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:655:9+60
    $t1 := $UpdateMutation($t1, $Update'$1_staking_contract_StakingContract'_distribution_pool($Dereference($t1), $Dereference($t8)));

    // trace_local[staking_contract]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:655:9+60
    $temp_0'$1_staking_contract_StakingContract' := $Dereference($t1);
    assume {:print "$track_local(58,0,1):", $temp_0'$1_staking_contract_StakingContract'} $temp_0'$1_staking_contract_StakingContract' == $temp_0'$1_staking_contract_StakingContract';

    // destroy($t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:655:9+60

    // $t22 := get_field<staking_contract::StakingContract>.pool_address($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:656:28+29
    assume {:print "$at(143,31177,31206)"} true;
    $t22 := $Dereference($t1)->$pool_address;

    // trace_local[pool_address]($t22) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:656:13+12
    assume {:print "$track_local(58,0,6):", $t22} $t22 == $t22;

    // $t23 := pack staking_contract::AddDistributionEvent($t0, $t22, $t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:659:13+69
    assume {:print "$at(143,31277,31346)"} true;
    $t23 := $1_staking_contract_AddDistributionEvent($t0, $t22, $t3);

    // opaque begin: event::emit_event<staking_contract::AddDistributionEvent>($t4, $t23) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:657:9+140
    assume {:print "$at(143,31216,31356)"} true;

    // opaque end: event::emit_event<staking_contract::AddDistributionEvent>($t4, $t23) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:657:9+140

    // trace_local[staking_contract]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:660:10+1
    assume {:print "$at(143,31356,31357)"} true;
    $temp_0'$1_staking_contract_StakingContract' := $Dereference($t1);
    assume {:print "$track_local(58,0,1):", $temp_0'$1_staking_contract_StakingContract'} $temp_0'$1_staking_contract_StakingContract' == $temp_0'$1_staking_contract_StakingContract';

    // pack_ref_deep($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:660:10+1

    // trace_local[add_distribution_events]($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:660:10+1
    $temp_0'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent'' := $Dereference($t4);
    assume {:print "$track_local(58,0,4):", $temp_0'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''} $temp_0'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent'' == $temp_0'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent'';

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:661:5+1
    assume {:print "$at(143,31362,31363)"} true;
L1:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:661:5+1
    assume {:print "$at(143,31362,31363)"} true;
    $ret0 := $t1;
    $ret1 := $t4;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:661:5+1
L2:

    // abort($t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:661:5+1
    assume {:print "$at(143,31362,31363)"} true;
    $abort_code := $t14;
    $abort_flag := true;
    return;

}

// fun staking_contract::assert_staking_contract_exists [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:633:5+446
procedure {:inline 1} $1_staking_contract_assert_staking_contract_exists(_$t0: int, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: Table int ($1_staking_contract_StakingContract);
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: $Mutation ($1_staking_contract_Store);
    var $t9: $Mutation (Table int ($1_staking_contract_StakingContract));
    var $t10: Table int ($1_staking_contract_StakingContract);
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t0: int;
    var $t1: int;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t3, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t0))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:302:9+64
    assume {:print "$at(144,12927,12991)"} true;
    assume ($t3 == $ResourceValue($1_staking_contract_Store_$memory, $t0)->$staking_contracts);

    // trace_local[staker]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:633:5+1
    assume {:print "$at(143,29972,29973)"} true;
    assume {:print "$track_local(58,2,0):", $t0} $t0 == $t0;

    // trace_local[operator]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:633:5+1
    assume {:print "$track_local(58,2,1):", $t1} $t1 == $t1;

    // $t4 := exists<staking_contract::Store>($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:634:17+6
    assume {:print "$at(143,30076,30082)"} true;
    $t4 := $ResourceExists($1_staking_contract_Store_$memory, $t0);

    // if ($t4) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:634:9+87
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:634:9+87
L1:

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:634:9+87
    assume {:print "$at(143,30068,30155)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:634:57+37
L0:

    // $t5 := 3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:634:57+37
    assume {:print "$at(143,30116,30153)"} true;
    $t5 := 3;
    assume $IsValid'u64'($t5);

    // $t6 := error::not_found($t5) on_abort goto L7 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:634:40+55
    call $t6 := $1_error_not_found($t5);
    if ($abort_flag) {
        assume {:print "$at(143,30099,30154)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(58,2):", $t7} $t7 == $t7;
        goto L7;
    }

    // trace_abort($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:634:9+87
    assume {:print "$at(143,30068,30155)"} true;
    assume {:print "$track_abort(58,2):", $t6} $t6 == $t6;

    // $t7 := move($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:634:9+87
    $t7 := $t6;

    // goto L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:634:9+87
    goto L7;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:635:63+6
    assume {:print "$at(143,30219,30225)"} true;
L2:

    // $t8 := borrow_global<staking_contract::Store>($t0) on_abort goto L7 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:635:38+17
    assume {:print "$at(143,30194,30211)"} true;
    if (!$ResourceExists($1_staking_contract_Store_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t8 := $Mutation($Global($t0), EmptyVec(), $ResourceValue($1_staking_contract_Store_$memory, $t0));
    }
    if ($abort_flag) {
        assume {:print "$at(143,30194,30211)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(58,2):", $t7} $t7 == $t7;
        goto L7;
    }

    // $t9 := borrow_field<staking_contract::Store>.staking_contracts($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:635:33+55
    $t9 := $ChildMutation($t8, 0, $Dereference($t8)->$staking_contracts);

    // $t10 := read_ref($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:637:37+30
    assume {:print "$at(143,30299,30329)"} true;
    $t10 := $Dereference($t9);

    // pack_ref_deep($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:637:37+30

    // $t11 := simple_map::contains_key<address, staking_contract::StakingContract>($t10, $t1) on_abort goto L7 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:637:13+54
    call $t11 := $1_simple_map_contains_key'address_$1_staking_contract_StakingContract'($t10, $t1);
    if ($abort_flag) {
        assume {:print "$at(143,30275,30329)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(58,2):", $t7} $t7 == $t7;
        goto L7;
    }

    // if ($t11) goto L4 else goto L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:636:9+157
    assume {:print "$at(143,30254,30411)"} true;
    if ($t11) { goto L4; } else { goto L3; }

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:636:9+157
L4:

    // goto L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:636:9+157
    assume {:print "$at(143,30254,30411)"} true;
    goto L5;

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:638:30+39
    assume {:print "$at(143,30360,30399)"} true;
L3:

    // $t12 := 4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:638:30+39
    assume {:print "$at(143,30360,30399)"} true;
    $t12 := 4;
    assume $IsValid'u64'($t12);

    // $t13 := error::not_found($t12) on_abort goto L7 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:638:13+57
    call $t13 := $1_error_not_found($t12);
    if ($abort_flag) {
        assume {:print "$at(143,30343,30400)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(58,2):", $t7} $t7 == $t7;
        goto L7;
    }

    // trace_abort($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:636:9+157
    assume {:print "$at(143,30254,30411)"} true;
    assume {:print "$track_abort(58,2):", $t13} $t13 == $t13;

    // $t7 := move($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:636:9+157
    $t7 := $t13;

    // goto L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:636:9+157
    goto L7;

    // label L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:639:10+1
    assume {:print "$at(143,30411,30412)"} true;
L5:

    // label L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:640:5+1
    assume {:print "$at(143,30417,30418)"} true;
L6:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:640:5+1
    assume {:print "$at(143,30417,30418)"} true;
    return;

    // label L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:640:5+1
L7:

    // abort($t7) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:640:5+1
    assume {:print "$at(143,30417,30418)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun staking_contract::commission_percentage [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:195:5+314
procedure {:inline 1} $1_staking_contract_commission_percentage(_$t0: int, _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: Table int ($1_staking_contract_StakingContract);
    var $t3: Table int ($1_staking_contract_StakingContract);
    var $t4: int;
    var $t5: $1_staking_contract_Store;
    var $t6: Table int ($1_staking_contract_StakingContract);
    var $t7: $1_staking_contract_StakingContract;
    var $t8: int;
    var $t0: int;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t2, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t0))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:302:9+64
    assume {:print "$at(144,12927,12991)"} true;
    assume ($t2 == $ResourceValue($1_staking_contract_Store_$memory, $t0)->$staking_contracts);

    // trace_local[staker]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:195:5+1
    assume {:print "$at(143,8882,8883)"} true;
    assume {:print "$track_local(58,3,0):", $t0} $t0 == $t0;

    // trace_local[operator]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:195:5+1
    assume {:print "$track_local(58,3,1):", $t1} $t1 == $t1;

    // assume Identical($t3, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t0))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:302:9+64
    assume {:print "$at(144,12927,12991)"} true;
    assume ($t3 == $ResourceValue($1_staking_contract_Store_$memory, $t0)->$staking_contracts);

    // staking_contract::assert_staking_contract_exists($t0, $t1) on_abort goto L2 with $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:196:9+48
    assume {:print "$at(143,8981,9029)"} true;
    call $1_staking_contract_assert_staking_contract_exists($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(143,8981,9029)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(58,3):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t5 := get_global<staking_contract::Store>($t0) on_abort goto L2 with $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:197:34+13
    assume {:print "$at(143,9064,9077)"} true;
    if (!$ResourceExists($1_staking_contract_Store_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t5 := $ResourceValue($1_staking_contract_Store_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(143,9064,9077)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(58,3):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t6 := get_field<staking_contract::Store>.staking_contracts($t5) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:197:33+47
    $t6 := $t5->$staking_contracts;

    // $t7 := simple_map::borrow<address, staking_contract::StakingContract>($t6, $t1) on_abort goto L2 with $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:198:9+48
    assume {:print "$at(143,9120,9168)"} true;
    call $t7 := $1_simple_map_borrow'address_$1_staking_contract_StakingContract'($t6, $t1);
    if ($abort_flag) {
        assume {:print "$at(143,9120,9168)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(58,3):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t8 := get_field<staking_contract::StakingContract>.commission_percentage($t7) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:198:9+70
    $t8 := $t7->$commission_percentage;

    // trace_return[0]($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:198:9+70
    assume {:print "$track_return(58,3,0):", $t8} $t8 == $t8;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:199:5+1
    assume {:print "$at(143,9195,9196)"} true;
L1:

    // return $t8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:199:5+1
    assume {:print "$at(143,9195,9196)"} true;
    $ret0 := $t8;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:199:5+1
L2:

    // abort($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:199:5+1
    assume {:print "$at(143,9195,9196)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun staking_contract::distribute_internal [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:589:5+1906
procedure {:inline 1} $1_staking_contract_distribute_internal(_$t0: int, _$t1: int, _$t2: $Mutation ($1_staking_contract_StakingContract), _$t3: $Mutation ($1_event_EventHandle'$1_staking_contract_DistributeEvent')) returns ($ret0: $Mutation ($1_staking_contract_StakingContract), $ret1: $Mutation ($1_event_EventHandle'$1_staking_contract_DistributeEvent'))
{
    // declare local variables
    var $t4: int;
    var $t5: int;
    var $t6: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $t7: int;
    var $t8: int;
    var $t9: $Mutation ($1_pool_u64_Pool);
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: Vec (int);
    var $t15: int;
    var $t16: int;
    var $t17: $1_stake_StakePool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: $1_stake_OwnerCapability;
    var $t26: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $t27: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t28: int;
    var $t29: int;
    var $t30: bool;
    var $t31: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $t32: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t33: $Mutation ($1_pool_u64_Pool);
    var $t34: int;
    var $t35: $1_pool_u64_Pool;
    var $t36: int;
    var $t37: int;
    var $t38: bool;
    var $t39: $1_pool_u64_Pool;
    var $t40: Vec (int);
    var $t41: int;
    var $t42: int;
    var $t43: $1_pool_u64_Pool;
    var $t44: int;
    var $t45: int;
    var $t46: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $t47: $1_staking_contract_DistributeEvent;
    var $t48: $Mutation (Vec (int));
    var $t49: $Mutation ($1_coin_Coin'$1_aptos_coin_AptosCoin');
    var $t50: int;
    var $t51: int;
    var $t52: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t53: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t54: $1_coin_CoinStore'$1_aptos_coin_AptosCoin';
    var $t55: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $t56: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t57: int;
    var $t58: int;
    var $t59: bool;
    var $t60: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $t61: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t62: $1_coin_CoinStore'$1_aptos_coin_AptosCoin';
    var $t63: int;
    var $t64: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $t65: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t0: int;
    var $t1: int;
    var $t2: $Mutation ($1_staking_contract_StakingContract);
    var $t3: $Mutation ($1_event_EventHandle'$1_staking_contract_DistributeEvent');
    var $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'': $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $temp_0'$1_event_EventHandle'$1_staking_contract_DistributeEvent'': $1_event_EventHandle'$1_staking_contract_DistributeEvent';
    var $temp_0'$1_pool_u64_Pool': $1_pool_u64_Pool;
    var $temp_0'$1_staking_contract_StakingContract': $1_staking_contract_StakingContract;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $temp_0'vec'address'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // assume Identical($t16, select staking_contract::StakingContract.pool_address($t2)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:212:9+49
    assume {:print "$at(144,9011,9060)"} true;
    assume ($t16 == $Dereference($t2)->$pool_address);

    // assume Identical($t17, global<stake::StakePool>($t16)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:213:9+63
    assume {:print "$at(144,9069,9132)"} true;
    assume ($t17 == $ResourceValue($1_stake_StakePool_$memory, $t16));

    // trace_local[staker]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:589:5+1
    assume {:print "$at(143,27984,27985)"} true;
    assume {:print "$track_local(58,9,0):", $t0} $t0 == $t0;

    // trace_local[operator]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:589:5+1
    assume {:print "$track_local(58,9,1):", $t1} $t1 == $t1;

    // trace_local[staking_contract]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:589:5+1
    $temp_0'$1_staking_contract_StakingContract' := $Dereference($t2);
    assume {:print "$track_local(58,9,2):", $temp_0'$1_staking_contract_StakingContract'} $temp_0'$1_staking_contract_StakingContract' == $temp_0'$1_staking_contract_StakingContract';

    // trace_local[distribute_events]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:589:5+1
    $temp_0'$1_event_EventHandle'$1_staking_contract_DistributeEvent'' := $Dereference($t3);
    assume {:print "$track_local(58,9,3):", $temp_0'$1_event_EventHandle'$1_staking_contract_DistributeEvent''} $temp_0'$1_event_EventHandle'$1_staking_contract_DistributeEvent'' == $temp_0'$1_event_EventHandle'$1_staking_contract_DistributeEvent'';

    // $t18 := get_field<staking_contract::StakingContract>.pool_address($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:595:28+29
    assume {:print "$at(143,28206,28235)"} true;
    $t18 := $Dereference($t2)->$pool_address;

    // trace_local[pool_address]($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:595:13+12
    assume {:print "$track_local(58,9,12):", $t18} $t18 == $t18;

    // ($t19, $t20, $t21, $t22) := stake::get_stake($t18) on_abort goto L11 with $t23 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:596:50+30
    assume {:print "$at(143,28286,28316)"} true;
    call $t19,$t20,$t21,$t22 := $1_stake_get_stake($t18);
    if ($abort_flag) {
        assume {:print "$at(143,28286,28316)"} true;
        $t23 := $abort_code;
        assume {:print "$track_abort(58,9):", $t23} $t23 == $t23;
        goto L11;
    }

    // trace_local[pending_inactive]($t22) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:596:30+16
    assume {:print "$track_local(58,9,11):", $t22} $t22 == $t22;

    // destroy($t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:596:27+1

    // trace_local[inactive]($t20) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:596:17+8
    assume {:print "$track_local(58,9,10):", $t20} $t20 == $t20;

    // destroy($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:596:14+1

    // $t24 := +($t20, $t22) on_abort goto L11 with $t23 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:597:53+1
    assume {:print "$at(143,28370,28371)"} true;
    call $t24 := $AddU64($t20, $t22);
    if ($abort_flag) {
        assume {:print "$at(143,28370,28371)"} true;
        $t23 := $abort_code;
        assume {:print "$track_abort(58,9):", $t23} $t23 == $t23;
        goto L11;
    }

    // trace_local[total_potential_withdrawable]($t24) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:597:13+28
    assume {:print "$track_local(58,9,15):", $t24} $t24 == $t24;

    // $t25 := get_field<staking_contract::StakingContract>.owner_cap($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:598:46+27
    assume {:print "$at(143,28435,28462)"} true;
    $t25 := $Dereference($t2)->$owner_cap;

    // $t6 := stake::withdraw_with_cap($t25, $t24) on_abort goto L11 with $t23 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:598:21+83
    call $t6 := $1_stake_withdraw_with_cap($t25, $t24);
    if ($abort_flag) {
        assume {:print "$at(143,28410,28493)"} true;
        $t23 := $abort_code;
        assume {:print "$track_abort(58,9):", $t23} $t23 == $t23;
        goto L11;
    }

    // trace_local[coins]($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:598:13+5
    assume {:print "$track_local(58,9,6):", $t6} $t6 == $t6;

    // $t26 := copy($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:599:47+6
    assume {:print "$at(143,28541,28547)"} true;
    $t26 := $t6;

    // assume Identical($t27, select coin::CoinInfo.supply(global<coin::CoinInfo<aptos_coin::AptosCoin>>(select type_info::TypeInfo.account_address(type_info::$type_of<aptos_coin::AptosCoin>())))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:32:9+99
    assume {:print "$at(105,1664,1763)"} true;
    assume ($t27 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply);

    // $t28 := coin::value<aptos_coin::AptosCoin>($t26) on_abort goto L11 with $t23 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:599:35+19
    assume {:print "$at(143,28529,28548)"} true;
    call $t28 := $1_coin_value'$1_aptos_coin_AptosCoin'($t26);
    if ($abort_flag) {
        assume {:print "$at(143,28529,28548)"} true;
        $t23 := $abort_code;
        assume {:print "$track_abort(58,9):", $t23} $t23 == $t23;
        goto L11;
    }

    // trace_local[distribution_amount]($t28) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:599:13+19
    assume {:print "$track_local(58,9,8):", $t28} $t28 == $t28;

    // $t29 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:600:36+1
    assume {:print "$at(143,28585,28586)"} true;
    $t29 := 0;
    assume $IsValid'u64'($t29);

    // $t30 := ==($t28, $t29) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:600:33+2
    $t30 := $IsEqual'u64'($t28, $t29);

    // if ($t30) goto L1 else goto L12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:600:9+99
    if ($t30) { goto L1; } else { goto L12; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:601:13+25
    assume {:print "$at(143,28602,28627)"} true;
L1:

    // destroy($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:601:13+25
    assume {:print "$at(143,28602,28627)"} true;

    // destroy($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:601:13+25

    // $t31 := move($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:601:32+5
    $t31 := $t6;

    // assume Identical($t32, select coin::CoinInfo.supply(global<coin::CoinInfo<aptos_coin::AptosCoin>>(select type_info::TypeInfo.account_address(type_info::$type_of<aptos_coin::AptosCoin>())))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:32:9+99
    assume {:print "$at(105,1664,1763)"} true;
    assume ($t32 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply);

    // coin::destroy_zero<aptos_coin::AptosCoin>($t31) on_abort goto L11 with $t23 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:601:13+25
    assume {:print "$at(143,28602,28627)"} true;
    call $1_coin_destroy_zero'$1_aptos_coin_AptosCoin'($t31);
    if ($abort_flag) {
        assume {:print "$at(143,28602,28627)"} true;
        $t23 := $abort_code;
        assume {:print "$track_abort(58,9):", $t23} $t23 == $t23;
        goto L11;
    }

    // trace_local[staking_contract]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:602:13+6
    assume {:print "$at(143,28641,28647)"} true;
    $temp_0'$1_staking_contract_StakingContract' := $Dereference($t2);
    assume {:print "$track_local(58,9,2):", $temp_0'$1_staking_contract_StakingContract'} $temp_0'$1_staking_contract_StakingContract' == $temp_0'$1_staking_contract_StakingContract';

    // pack_ref_deep($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:602:13+6

    // trace_local[distribute_events]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:602:13+6
    $temp_0'$1_event_EventHandle'$1_staking_contract_DistributeEvent'' := $Dereference($t3);
    assume {:print "$track_local(58,9,3):", $temp_0'$1_event_EventHandle'$1_staking_contract_DistributeEvent''} $temp_0'$1_event_EventHandle'$1_staking_contract_DistributeEvent'' == $temp_0'$1_event_EventHandle'$1_staking_contract_DistributeEvent'';

    // goto L10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:602:13+6
    goto L10;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:605:38+16
    assume {:print "$at(143,28697,28713)"} true;
L0:

    // $t33 := borrow_field<staking_contract::StakingContract>.distribution_pool($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:605:33+39
    assume {:print "$at(143,28692,28731)"} true;
    $t33 := $ChildMutation($t2, 4, $Dereference($t2)->$distribution_pool);

    // trace_local[distribution_pool]($t33) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:605:13+17
    $temp_0'$1_pool_u64_Pool' := $Dereference($t33);
    assume {:print "$track_local(58,9,9):", $temp_0'$1_pool_u64_Pool'} $temp_0'$1_pool_u64_Pool' == $temp_0'$1_pool_u64_Pool';

    // $t34 := get_field<staking_contract::StakingContract>.commission_percentage($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:607:63+38
    assume {:print "$at(143,28829,28867)"} true;
    $t34 := $Dereference($t2)->$commission_percentage;

    // staking_contract::update_distribution_pool($t33, $t28, $t1, $t34) on_abort goto L11 with $t23 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:606:9+127
    assume {:print "$at(143,28741,28868)"} true;
    call $t33 := $1_staking_contract_update_distribution_pool($t33, $t28, $t1, $t34);
    if ($abort_flag) {
        assume {:print "$at(143,28741,28868)"} true;
        $t23 := $abort_code;
        assume {:print "$track_abort(58,9):", $t23} $t23 == $t23;
        goto L11;
    }

    // label L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    assume {:print "$at(143,28975,28992)"} true;
L5:

    // $t6 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    assume {:print "$at(143,28975,28992)"} true;
    havoc $t6;

    // assume WellFormed($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    assume $IsValid'$1_coin_Coin'$1_aptos_coin_AptosCoin''($t6);

    // $t14 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    havoc $t14;

    // assume WellFormed($t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    assume $IsValid'vec'address''($t14);

    // $t35 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    havoc $t35;

    // assume And(WellFormed($t35), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares($t35), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders($t35), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders($t35))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders($t35))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders($t35), i), Index(select pool_u64::Pool.shareholders($t35), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    assume ($IsValid'$1_pool_u64_Pool'($t35) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($t35->$shares, addr), $1_vector_spec_contains'address'($t35->$shareholders, addr)))) && (var $range_0 := $Range(0, LenVec($t35->$shareholders)); (var $range_1 := $Range(0, LenVec($t35->$shareholders)); (forall $i_2: int, $i_3: int :: $InRange($range_0, $i_2) ==> $InRange($range_1, $i_3) ==> (var i := $i_2;
    (var j := $i_3;
    (($IsEqual'address'(ReadVec($t35->$shareholders, i), ReadVec($t35->$shareholders, j)) ==> $IsEqual'num'(i, j))))))))));

    // $t36 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    havoc $t36;

    // assume WellFormed($t36) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    assume $IsValid'u64'($t36);

    // $t37 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    havoc $t37;

    // assume WellFormed($t37) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    assume $IsValid'u64'($t37);

    // $t38 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    havoc $t38;

    // assume WellFormed($t38) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    assume $IsValid'bool'($t38);

    // $t39 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    havoc $t39;

    // assume And(WellFormed($t39), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares($t39), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders($t39), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders($t39))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders($t39))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders($t39), i), Index(select pool_u64::Pool.shareholders($t39), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    assume ($IsValid'$1_pool_u64_Pool'($t39) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($t39->$shares, addr), $1_vector_spec_contains'address'($t39->$shareholders, addr)))) && (var $range_0 := $Range(0, LenVec($t39->$shareholders)); (var $range_1 := $Range(0, LenVec($t39->$shareholders)); (forall $i_2: int, $i_3: int :: $InRange($range_0, $i_2) ==> $InRange($range_1, $i_3) ==> (var i := $i_2;
    (var j := $i_3;
    (($IsEqual'address'(ReadVec($t39->$shareholders, i), ReadVec($t39->$shareholders, j)) ==> $IsEqual'num'(i, j))))))))));

    // $t40 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    havoc $t40;

    // assume WellFormed($t40) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    assume $IsValid'vec'address''($t40);

    // $t41 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    havoc $t41;

    // assume WellFormed($t41) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    assume $IsValid'u64'($t41);

    // $t42 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    havoc $t42;

    // assume WellFormed($t42) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    assume $IsValid'address'($t42);

    // $t43 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    havoc $t43;

    // assume And(WellFormed($t43), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares($t43), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders($t43), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders($t43))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders($t43))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders($t43), i), Index(select pool_u64::Pool.shareholders($t43), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    assume ($IsValid'$1_pool_u64_Pool'($t43) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($t43->$shares, addr), $1_vector_spec_contains'address'($t43->$shareholders, addr)))) && (var $range_0 := $Range(0, LenVec($t43->$shareholders)); (var $range_1 := $Range(0, LenVec($t43->$shareholders)); (forall $i_2: int, $i_3: int :: $InRange($range_0, $i_2) ==> $InRange($range_1, $i_3) ==> (var i := $i_2;
    (var j := $i_3;
    (($IsEqual'address'(ReadVec($t43->$shareholders, i), ReadVec($t43->$shareholders, j)) ==> $IsEqual'num'(i, j))))))))));

    // $t44 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    havoc $t44;

    // assume WellFormed($t44) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    assume $IsValid'u64'($t44);

    // $t45 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    havoc $t45;

    // assume WellFormed($t45) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    assume $IsValid'u64'($t45);

    // $t46 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    havoc $t46;

    // assume WellFormed($t46) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    assume $IsValid'$1_coin_Coin'$1_aptos_coin_AptosCoin''($t46);

    // $t47 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    havoc $t47;

    // assume WellFormed($t47) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    assume $IsValid'$1_staking_contract_DistributeEvent'($t47);

    // $t3 := havoc[mut]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    havoc $temp_0'$1_event_EventHandle'$1_staking_contract_DistributeEvent'';
    $t3 := $UpdateMutation($t3, $temp_0'$1_event_EventHandle'$1_staking_contract_DistributeEvent'');

    // assume WellFormed($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    assume $IsValid'$1_event_EventHandle'$1_staking_contract_DistributeEvent''($Dereference($t3));

    // $t33 := havoc[mut]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    havoc $temp_0'$1_pool_u64_Pool';
    $t33 := $UpdateMutation($t33, $temp_0'$1_pool_u64_Pool');

    // assume And(WellFormed($t33), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares($t33), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders($t33), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders($t33))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders($t33))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders($t33), i), Index(select pool_u64::Pool.shareholders($t33), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    assume ($IsValid'$1_pool_u64_Pool'($Dereference($t33)) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($Dereference($t33)->$shares, addr), $1_vector_spec_contains'address'($Dereference($t33)->$shareholders, addr)))) && (var $range_0 := $Range(0, LenVec($Dereference($t33)->$shareholders)); (var $range_1 := $Range(0, LenVec($Dereference($t33)->$shareholders)); (forall $i_2: int, $i_3: int :: $InRange($range_0, $i_2) ==> $InRange($range_1, $i_3) ==> (var i := $i_2;
    (var j := $i_3;
    (($IsEqual'address'(ReadVec($Dereference($t33)->$shareholders, i), ReadVec($Dereference($t33)->$shareholders, j)) ==> $IsEqual'num'(i, j))))))))));

    // $t48 := havoc[mut_all]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    havoc $t48;

    // assume WellFormed($t48) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    assume $IsValid'vec'address''($Dereference($t48));

    // $t49 := havoc[mut_all]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    havoc $t49;

    // assume WellFormed($t49) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    assume $IsValid'$1_coin_Coin'$1_aptos_coin_AptosCoin''($Dereference($t49));

    // trace_local[distribute_events]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    assume {:print "$info(): enter loop, variable(s) distribute_events, coins, recipients havocked and reassigned"} true;
    $temp_0'$1_event_EventHandle'$1_staking_contract_DistributeEvent'' := $Dereference($t3);
    assume {:print "$track_local(58,9,3):", $temp_0'$1_event_EventHandle'$1_staking_contract_DistributeEvent''} $temp_0'$1_event_EventHandle'$1_staking_contract_DistributeEvent'' == $temp_0'$1_event_EventHandle'$1_staking_contract_DistributeEvent'';

    // trace_local[coins]($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    assume {:print "$track_local(58,9,6):", $t6} $t6 == $t6;

    // trace_local[recipients]($t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    assume {:print "$track_local(58,9,14):", $t14} $t14 == $t14;

    // assume Not(AbortFlag()) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    assume !$abort_flag;

    // $t35 := read_ref($t33) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:45+17
    $t35 := $Dereference($t33);

    // $t36 := pool_u64::shareholders_count($t35) on_abort goto L11 with $t23 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:16+47
    call $t36 := $1_pool_u64_shareholders_count($t35);
    if ($abort_flag) {
        assume {:print "$at(143,28946,28993)"} true;
        $t23 := $abort_code;
        assume {:print "$track_abort(58,9):", $t23} $t23 == $t23;
        goto L11;
    }

    // $t37 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:66+1
    $t37 := 0;
    assume $IsValid'u64'($t37);

    // $t38 := >($t36, $t37) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:64+1
    call $t38 := $Gt($t36, $t37);

    // if ($t38) goto L13 else goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:9+661
    if ($t38) { goto L13; } else { goto L2; }

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:610:9+661
L3:

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:611:53+17
    assume {:print "$at(143,29053,29070)"} true;
L4:

    // $t39 := read_ref($t33) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:611:53+17
    assume {:print "$at(143,29053,29070)"} true;
    $t39 := $Dereference($t33);

    // $t14 := pool_u64::shareholders($t39) on_abort goto L11 with $t23 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:611:30+41
    call $t14 := $1_pool_u64_shareholders($t39);
    if ($abort_flag) {
        assume {:print "$at(143,29030,29071)"} true;
        $t23 := $abort_code;
        assume {:print "$track_abort(58,9):", $t23} $t23 == $t23;
        goto L11;
    }

    // trace_local[recipients]($t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:611:17+10
    assume {:print "$track_local(58,9,14):", $t14} $t14 == $t14;

    // $t48 := borrow_local($t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:612:45+15
    assume {:print "$at(143,29117,29132)"} true;
    $t48 := $Mutation($Local(14), EmptyVec(), $t14);

    // $t40 := read_ref($t48) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:612:44+20
    $t40 := $Dereference($t48);

    // trace_local[recipients]($t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:612:44+20
    assume {:print "$track_local(58,9,14):", $t14} $t14 == $t14;

    // $t41 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:612:62+1
    $t41 := 0;
    assume $IsValid'u64'($t41);

    // $t42 := vector::borrow<address>($t40, $t41) on_abort goto L11 with $t23 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:612:30+34
    call $t42 := $1_vector_borrow'address'($t40, $t41);
    if ($abort_flag) {
        assume {:print "$at(143,29102,29136)"} true;
        $t23 := $abort_code;
        assume {:print "$track_abort(58,9):", $t23} $t23 == $t23;
        goto L11;
    }

    // trace_local[recipient]($t42) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:612:17+9
    assume {:print "$track_local(58,9,13):", $t42} $t42 == $t42;

    // $t43 := read_ref($t33) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:613:50+30
    assume {:print "$at(143,29187,29217)"} true;
    $t43 := $Dereference($t33);

    // $t44 := pool_u64::shares($t43, $t42) on_abort goto L11 with $t23 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:613:34+46
    call $t44 := $1_pool_u64_shares($t43, $t42);
    if ($abort_flag) {
        assume {:print "$at(143,29171,29217)"} true;
        $t23 := $abort_code;
        assume {:print "$track_abort(58,9):", $t23} $t23 == $t23;
        goto L11;
    }

    // trace_local[current_shares]($t44) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:613:17+14
    assume {:print "$track_local(58,9,7):", $t44} $t44 == $t44;

    // assume Identical($t50, pool_u64::spec_shares_to_amount_with_total_coins($t33, $t44, select pool_u64::Pool.total_coins($t33))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:145:9+102
    assume {:print "$at(68,5992,6094)"} true;
    assume ($t50 == $1_pool_u64_spec_shares_to_amount_with_total_coins($Dereference($t33), $t44, $Dereference($t33)->$total_coins));

    // assume Identical($t51, Sub(simple_map::spec_get<address, u64>(select pool_u64::Pool.shares($t33), $t42), $t44)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:181:9+83
    assume {:print "$at(68,7643,7726)"} true;
    assume ($t51 == ($1_simple_map_spec_get'address_u64'($Dereference($t33)->$shares, $t42) - $t44));

    // $t45 := pool_u64::redeem_shares($t33, $t42, $t44) on_abort goto L11 with $t23 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:614:40+69
    assume {:print "$at(143,29258,29327)"} true;
    call $t45,$t33 := $1_pool_u64_redeem_shares($t33, $t42, $t44);
    if ($abort_flag) {
        assume {:print "$at(143,29258,29327)"} true;
        $t23 := $abort_code;
        assume {:print "$track_abort(58,9):", $t23} $t23 == $t23;
        goto L11;
    }

    // trace_local[amount_to_distribute]($t45) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:614:17+20
    assume {:print "$track_local(58,9,5):", $t45} $t45 == $t45;

    // $t49 := borrow_local($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:615:52+10
    assume {:print "$at(143,29380,29390)"} true;
    $t49 := $Mutation($Local(6), EmptyVec(), $t6);

    // assume Identical($t52, select coin::CoinInfo.supply(global<coin::CoinInfo<aptos_coin::AptosCoin>>(select type_info::TypeInfo.account_address(type_info::$type_of<aptos_coin::AptosCoin>())))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:32:9+99
    assume {:print "$at(105,1664,1763)"} true;
    assume ($t52 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply);

    // $t46 := coin::extract<aptos_coin::AptosCoin>($t49, $t45) on_abort goto L11 with $t23 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:615:38+47
    assume {:print "$at(143,29366,29413)"} true;
    call $t46,$t49 := $1_coin_extract'$1_aptos_coin_AptosCoin'($t49, $t45);
    if ($abort_flag) {
        assume {:print "$at(143,29366,29413)"} true;
        $t23 := $abort_code;
        assume {:print "$track_abort(58,9):", $t23} $t23 == $t23;
        goto L11;
    }

    // write_back[LocalRoot($t6)@]($t49) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:615:38+47
    $t6 := $Dereference($t49);

    // trace_local[coins]($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:615:38+47
    assume {:print "$track_local(58,9,6):", $t6} $t6 == $t6;

    // assume Identical($t53, select coin::CoinInfo.supply(global<coin::CoinInfo<aptos_coin::AptosCoin>>(select type_info::TypeInfo.account_address(type_info::$type_of<aptos_coin::AptosCoin>())))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:32:9+99
    assume {:print "$at(105,1664,1763)"} true;
    assume ($t53 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply);

    // assume Identical($t54, global<coin::CoinStore<aptos_coin::AptosCoin>>($t42)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:197:9+59
    assume {:print "$at(105,8484,8543)"} true;
    assume ($t54 == $ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $t42));

    // coin::deposit<aptos_coin::AptosCoin>($t42, $t46) on_abort goto L11 with $t23 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:615:13+73
    assume {:print "$at(143,29341,29414)"} true;
    call $1_coin_deposit'$1_aptos_coin_AptosCoin'($t42, $t46);
    if ($abort_flag) {
        assume {:print "$at(143,29341,29414)"} true;
        $t23 := $abort_code;
        assume {:print "$track_abort(58,9):", $t23} $t23 == $t23;
        goto L11;
    }

    // $t47 := pack staking_contract::DistributeEvent($t1, $t18, $t42, $t45) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:619:17+83
    assume {:print "$at(143,29492,29575)"} true;
    $t47 := $1_staking_contract_DistributeEvent($t1, $t18, $t42, $t45);

    // opaque begin: event::emit_event<staking_contract::DistributeEvent>($t3, $t47) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:617:13+160
    assume {:print "$at(143,29429,29589)"} true;

    // opaque end: event::emit_event<staking_contract::DistributeEvent>($t3, $t47) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:617:13+160

    // goto L9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:620:14+1
    assume {:print "$at(143,29589,29590)"} true;
    goto L9;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:624:9+202
    assume {:print "$at(143,29682,29884)"} true;
L2:

    // destroy($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:624:9+202
    assume {:print "$at(143,29682,29884)"} true;

    // $t55 := copy($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:624:25+6
    $t55 := $t6;

    // assume Identical($t56, select coin::CoinInfo.supply(global<coin::CoinInfo<aptos_coin::AptosCoin>>(select type_info::TypeInfo.account_address(type_info::$type_of<aptos_coin::AptosCoin>())))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:32:9+99
    assume {:print "$at(105,1664,1763)"} true;
    assume ($t56 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply);

    // $t57 := coin::value<aptos_coin::AptosCoin>($t55) on_abort goto L11 with $t23 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:624:13+19
    assume {:print "$at(143,29686,29705)"} true;
    call $t57 := $1_coin_value'$1_aptos_coin_AptosCoin'($t55);
    if ($abort_flag) {
        assume {:print "$at(143,29686,29705)"} true;
        $t23 := $abort_code;
        assume {:print "$track_abort(58,9):", $t23} $t23 == $t23;
        goto L11;
    }

    // $t58 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:624:35+1
    $t58 := 0;
    assume $IsValid'u64'($t58);

    // $t59 := >($t57, $t58) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:624:33+1
    call $t59 := $Gt($t57, $t58);

    // if ($t59) goto L7 else goto L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:624:9+202
    if ($t59) { goto L7; } else { goto L6; }

    // label L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:625:27+6
    assume {:print "$at(143,29739,29745)"} true;
L7:

    // $t60 := move($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:625:35+5
    assume {:print "$at(143,29747,29752)"} true;
    $t60 := $t6;

    // assume Identical($t61, select coin::CoinInfo.supply(global<coin::CoinInfo<aptos_coin::AptosCoin>>(select type_info::TypeInfo.account_address(type_info::$type_of<aptos_coin::AptosCoin>())))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:32:9+99
    assume {:print "$at(105,1664,1763)"} true;
    assume ($t61 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply);

    // assume Identical($t62, global<coin::CoinStore<aptos_coin::AptosCoin>>($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:197:9+59
    assume {:print "$at(105,8484,8543)"} true;
    assume ($t62 == $ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $t0));

    // coin::deposit<aptos_coin::AptosCoin>($t0, $t60) on_abort goto L11 with $t23 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:625:13+28
    assume {:print "$at(143,29725,29753)"} true;
    call $1_coin_deposit'$1_aptos_coin_AptosCoin'($t0, $t60);
    if ($abort_flag) {
        assume {:print "$at(143,29725,29753)"} true;
        $t23 := $abort_code;
        assume {:print "$track_abort(58,9):", $t23} $t23 == $t23;
        goto L11;
    }

    // $t63 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:626:61+1
    assume {:print "$at(143,29815,29816)"} true;
    $t63 := 0;
    assume $IsValid'u64'($t63);

    // pool_u64::update_total_coins($t33, $t63) on_abort goto L11 with $t23 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:626:13+50
    call $t33 := $1_pool_u64_update_total_coins($t33, $t63);
    if ($abort_flag) {
        assume {:print "$at(143,29767,29817)"} true;
        $t23 := $abort_code;
        assume {:print "$track_abort(58,9):", $t23} $t23 == $t23;
        goto L11;
    }

    // write_back[Reference($t2).distribution_pool (pool_u64::Pool)]($t33) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:626:13+50
    $t2 := $UpdateMutation($t2, $Update'$1_staking_contract_StakingContract'_distribution_pool($Dereference($t2), $Dereference($t33)));

    // trace_local[staking_contract]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:626:13+50
    $temp_0'$1_staking_contract_StakingContract' := $Dereference($t2);
    assume {:print "$track_local(58,9,2):", $temp_0'$1_staking_contract_StakingContract'} $temp_0'$1_staking_contract_StakingContract' == $temp_0'$1_staking_contract_StakingContract';

    // goto L8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:624:9+202
    assume {:print "$at(143,29682,29884)"} true;
    goto L8;

    // label L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:628:13+25
    assume {:print "$at(143,29848,29873)"} true;
L6:

    // write_back[Reference($t2).distribution_pool (pool_u64::Pool)]($t33) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:628:13+25
    assume {:print "$at(143,29848,29873)"} true;
    $t2 := $UpdateMutation($t2, $Update'$1_staking_contract_StakingContract'_distribution_pool($Dereference($t2), $Dereference($t33)));

    // trace_local[staking_contract]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:628:13+25
    $temp_0'$1_staking_contract_StakingContract' := $Dereference($t2);
    assume {:print "$track_local(58,9,2):", $temp_0'$1_staking_contract_StakingContract'} $temp_0'$1_staking_contract_StakingContract' == $temp_0'$1_staking_contract_StakingContract';

    // destroy($t33) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:628:13+25

    // $t64 := move($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:628:32+5
    $t64 := $t6;

    // assume Identical($t65, select coin::CoinInfo.supply(global<coin::CoinInfo<aptos_coin::AptosCoin>>(select type_info::TypeInfo.account_address(type_info::$type_of<aptos_coin::AptosCoin>())))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:32:9+99
    assume {:print "$at(105,1664,1763)"} true;
    assume ($t65 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply);

    // coin::destroy_zero<aptos_coin::AptosCoin>($t64) on_abort goto L11 with $t23 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:628:13+25
    assume {:print "$at(143,29848,29873)"} true;
    call $1_coin_destroy_zero'$1_aptos_coin_AptosCoin'($t64);
    if ($abort_flag) {
        assume {:print "$at(143,29848,29873)"} true;
        $t23 := $abort_code;
        assume {:print "$track_abort(58,9):", $t23} $t23 == $t23;
        goto L11;
    }

    // label L8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:624:9+202
    assume {:print "$at(143,29682,29884)"} true;
L8:

    // trace_local[staking_contract]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:624:9+202
    assume {:print "$at(143,29682,29884)"} true;
    $temp_0'$1_staking_contract_StakingContract' := $Dereference($t2);
    assume {:print "$track_local(58,9,2):", $temp_0'$1_staking_contract_StakingContract'} $temp_0'$1_staking_contract_StakingContract' == $temp_0'$1_staking_contract_StakingContract';

    // pack_ref_deep($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:624:9+202

    // trace_local[distribute_events]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:624:9+202
    $temp_0'$1_event_EventHandle'$1_staking_contract_DistributeEvent'' := $Dereference($t3);
    assume {:print "$track_local(58,9,3):", $temp_0'$1_event_EventHandle'$1_staking_contract_DistributeEvent''} $temp_0'$1_event_EventHandle'$1_staking_contract_DistributeEvent'' == $temp_0'$1_event_EventHandle'$1_staking_contract_DistributeEvent'';

    // goto L10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:624:9+202
    goto L10;

    // label L9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:624:9+202
    // Loop invariant checking block for the loop started with header: L5
L9:

    // stop() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:624:9+202
    assume {:print "$at(143,29682,29884)"} true;
    assume false;
    return;

    // label L10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:630:5+1
    assume {:print "$at(143,29889,29890)"} true;
L10:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:630:5+1
    assume {:print "$at(143,29889,29890)"} true;
    $ret0 := $t2;
    $ret1 := $t3;
    return;

    // label L11 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:630:5+1
L11:

    // abort($t23) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:630:5+1
    assume {:print "$at(143,29889,29890)"} true;
    $abort_code := $t23;
    $abort_flag := true;
    return;

    // label L12 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L12:

    // destroy($t3) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L0 at <internal>:1:1+10
    goto L0;

    // label L13 at <internal>:1:1+10
L13:

    // destroy($t2) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L3 at <internal>:1:1+10
    goto L3;

}

// fun staking_contract::get_staking_contract_amounts_internal [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:664:5+869
procedure {:inline 1} $1_staking_contract_get_staking_contract_amounts_internal(_$t0: $1_staking_contract_StakingContract) returns ($ret0: int, $ret1: int, $ret2: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: $1_stake_StakePool;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t0: $1_staking_contract_StakingContract;
    var $temp_0'$1_staking_contract_StakingContract': $1_staking_contract_StakingContract;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t5, select staking_contract::StakingContract.pool_address($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:333:9+49
    assume {:print "$at(144,14067,14116)"} true;
    assume ($t5 == $t0->$pool_address);

    // assume Identical($t6, global<stake::StakePool>($t5)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:334:9+56
    assume {:print "$at(144,14125,14181)"} true;
    assume ($t6 == $ResourceValue($1_stake_StakePool_$memory, $t5));

    // assume Identical($t7, coin::$value<aptos_coin::AptosCoin>(select stake::StakePool.active($t6))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:335:9+44
    assume {:print "$at(144,14190,14234)"} true;
    assume ($t7 == $1_coin_$value'$1_aptos_coin_AptosCoin'($t6->$active));

    // assume Identical($t8, coin::$value<aptos_coin::AptosCoin>(select stake::StakePool.pending_active($t6))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:336:9+60
    assume {:print "$at(144,14243,14303)"} true;
    assume ($t8 == $1_coin_$value'$1_aptos_coin_AptosCoin'($t6->$pending_active));

    // assume Identical($t9, Add($t7, $t8)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:337:9+49
    assume {:print "$at(144,14312,14361)"} true;
    assume ($t9 == ($t7 + $t8));

    // assume Identical($t10, Sub($t9, select staking_contract::StakingContract.principal($t0))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:338:9+74
    assume {:print "$at(144,14370,14444)"} true;
    assume ($t10 == ($t9 - $t0->$principal));

    // trace_local[staking_contract]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:664:5+1
    assume {:print "$at(143,31442,31443)"} true;
    assume {:print "$track_local(58,11,0):", $t0} $t0 == $t0;

    // $t11 := get_field<staking_contract::StakingContract>.pool_address($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:669:63+29
    assume {:print "$at(143,31963,31992)"} true;
    $t11 := $t0->$pool_address;

    // ($t12, $t13, $t14, $t15) := stake::get_stake($t11) on_abort goto L2 with $t16 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:669:46+47
    call $t12,$t13,$t14,$t15 := $1_stake_get_stake($t11);
    if ($abort_flag) {
        assume {:print "$at(143,31946,31993)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(58,11):", $t16} $t16 == $t16;
        goto L2;
    }

    // destroy($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:669:41+1

    // trace_local[pending_active]($t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:669:25+14
    assume {:print "$track_local(58,11,3):", $t14} $t14 == $t14;

    // destroy($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:669:22+1

    // $t17 := +($t12, $t14) on_abort goto L2 with $t16 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:670:41+1
    assume {:print "$at(143,32035,32036)"} true;
    call $t17 := $AddU64($t12, $t14);
    if ($abort_flag) {
        assume {:print "$at(143,32035,32036)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(58,11):", $t16} $t16 == $t16;
        goto L2;
    }

    // trace_local[total_active_stake]($t17) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:670:13+18
    assume {:print "$track_local(58,11,4):", $t17} $t17 == $t17;

    // $t18 := get_field<staking_contract::StakingContract>.principal($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:671:56+26
    assume {:print "$at(143,32108,32134)"} true;
    $t18 := $t0->$principal;

    // $t19 := -($t17, $t18) on_abort goto L2 with $t16 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:671:54+1
    call $t19 := $Sub($t17, $t18);
    if ($abort_flag) {
        assume {:print "$at(143,32106,32107)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(58,11):", $t16} $t16 == $t16;
        goto L2;
    }

    // trace_local[accumulated_rewards]($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:671:13+19
    assume {:print "$track_local(58,11,1):", $t19} $t19 == $t19;

    // $t20 := get_field<staking_contract::StakingContract>.commission_percentage($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:672:55+38
    assume {:print "$at(143,32190,32228)"} true;
    $t20 := $t0->$commission_percentage;

    // $t21 := *($t19, $t20) on_abort goto L2 with $t16 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:672:53+1
    call $t21 := $MulU64($t19, $t20);
    if ($abort_flag) {
        assume {:print "$at(143,32188,32189)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(58,11):", $t16} $t16 == $t16;
        goto L2;
    }

    // $t22 := 100 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:672:96+3
    $t22 := 100;
    assume $IsValid'u64'($t22);

    // $t23 := /($t21, $t22) on_abort goto L2 with $t16 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:672:94+1
    call $t23 := $Div($t21, $t22);
    if ($abort_flag) {
        assume {:print "$at(143,32229,32230)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(58,11):", $t16} $t16 == $t16;
        goto L2;
    }

    // trace_local[commission_amount]($t23) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:672:13+17
    assume {:print "$track_local(58,11,2):", $t23} $t23 == $t23;

    // trace_return[0]($t17) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:674:9+60
    assume {:print "$at(143,32245,32305)"} true;
    assume {:print "$track_return(58,11,0):", $t17} $t17 == $t17;

    // trace_return[1]($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:674:9+60
    assume {:print "$track_return(58,11,1):", $t19} $t19 == $t19;

    // trace_return[2]($t23) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:674:9+60
    assume {:print "$track_return(58,11,2):", $t23} $t23 == $t23;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:675:5+1
    assume {:print "$at(143,32310,32311)"} true;
L1:

    // return ($t17, $t19, $t23) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:675:5+1
    assume {:print "$at(143,32310,32311)"} true;
    $ret0 := $t17;
    $ret1 := $t19;
    $ret2 := $t23;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:675:5+1
L2:

    // abort($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:675:5+1
    assume {:print "$at(143,32310,32311)"} true;
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun staking_contract::request_commission_internal [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:433:5+1338
procedure {:inline 1} $1_staking_contract_request_commission_internal(_$t0: int, _$t1: $Mutation ($1_staking_contract_StakingContract), _$t2: $Mutation ($1_event_EventHandle'$1_staking_contract_AddDistributionEvent'), _$t3: $Mutation ($1_event_EventHandle'$1_staking_contract_RequestCommissionEvent')) returns ($ret0: int, $ret1: $Mutation ($1_staking_contract_StakingContract), $ret2: $Mutation ($1_event_EventHandle'$1_staking_contract_AddDistributionEvent'), $ret3: $Mutation ($1_event_EventHandle'$1_staking_contract_RequestCommissionEvent'))
{
    // declare local variables
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: $1_stake_StakePool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: $1_staking_contract_StakingContract;
    var $t14: int;
    var $t15: $1_stake_StakePool;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: $Mutation (int);
    var $t26: int;
    var $t27: bool;
    var $t28: int;
    var $t29: int;
    var $t30: $1_stake_OwnerCapability;
    var $t31: int;
    var $t32: $1_stake_StakePool;
    var $t33: int;
    var $t34: int;
    var $t35: $1_staking_contract_RequestCommissionEvent;
    var $t0: int;
    var $t1: $Mutation ($1_staking_contract_StakingContract);
    var $t2: $Mutation ($1_event_EventHandle'$1_staking_contract_AddDistributionEvent');
    var $t3: $Mutation ($1_event_EventHandle'$1_staking_contract_RequestCommissionEvent');
    var $temp_0'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent'': $1_event_EventHandle'$1_staking_contract_AddDistributionEvent';
    var $temp_0'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent'': $1_event_EventHandle'$1_staking_contract_RequestCommissionEvent';
    var $temp_0'$1_staking_contract_StakingContract': $1_staking_contract_StakingContract;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // assume Identical($t7, select staking_contract::StakingContract.pool_address($t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:333:9+49
    assume {:print "$at(144,14067,14116)"} true;
    assume ($t7 == $Dereference($t1)->$pool_address);

    // assume Identical($t8, global<stake::StakePool>($t7)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:334:9+56
    assume {:print "$at(144,14125,14181)"} true;
    assume ($t8 == $ResourceValue($1_stake_StakePool_$memory, $t7));

    // assume Identical($t9, coin::$value<aptos_coin::AptosCoin>(select stake::StakePool.active($t8))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:335:9+44
    assume {:print "$at(144,14190,14234)"} true;
    assume ($t9 == $1_coin_$value'$1_aptos_coin_AptosCoin'($t8->$active));

    // assume Identical($t10, coin::$value<aptos_coin::AptosCoin>(select stake::StakePool.pending_active($t8))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:336:9+60
    assume {:print "$at(144,14243,14303)"} true;
    assume ($t10 == $1_coin_$value'$1_aptos_coin_AptosCoin'($t8->$pending_active));

    // assume Identical($t11, Add($t9, $t10)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:337:9+49
    assume {:print "$at(144,14312,14361)"} true;
    assume ($t11 == ($t9 + $t10));

    // assume Identical($t12, Sub($t11, select staking_contract::StakingContract.principal($t1))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:338:9+74
    assume {:print "$at(144,14370,14444)"} true;
    assume ($t12 == ($t11 - $Dereference($t1)->$principal));

    // trace_local[operator]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:433:5+1
    assume {:print "$at(143,20561,20562)"} true;
    assume {:print "$track_local(58,16,0):", $t0} $t0 == $t0;

    // trace_local[staking_contract]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:433:5+1
    $temp_0'$1_staking_contract_StakingContract' := $Dereference($t1);
    assume {:print "$track_local(58,16,1):", $temp_0'$1_staking_contract_StakingContract'} $temp_0'$1_staking_contract_StakingContract' == $temp_0'$1_staking_contract_StakingContract';

    // trace_local[add_distribution_events]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:433:5+1
    $temp_0'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent'' := $Dereference($t2);
    assume {:print "$track_local(58,16,2):", $temp_0'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''} $temp_0'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent'' == $temp_0'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent'';

    // trace_local[request_commission_events]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:433:5+1
    $temp_0'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent'' := $Dereference($t3);
    assume {:print "$track_local(58,16,3):", $temp_0'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''} $temp_0'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent'' == $temp_0'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent'';

    // $t13 := read_ref($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:441:51+16
    assume {:print "$at(143,21024,21040)"} true;
    $t13 := $Dereference($t1);

    // assume Identical($t14, select staking_contract::StakingContract.pool_address($t13)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:333:9+49
    assume {:print "$at(144,14067,14116)"} true;
    assume ($t14 == $t13->$pool_address);

    // assume Identical($t15, global<stake::StakePool>($t14)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:334:9+56
    assume {:print "$at(144,14125,14181)"} true;
    assume ($t15 == $ResourceValue($1_stake_StakePool_$memory, $t14));

    // assume Identical($t16, coin::$value<aptos_coin::AptosCoin>(select stake::StakePool.active($t15))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:335:9+44
    assume {:print "$at(144,14190,14234)"} true;
    assume ($t16 == $1_coin_$value'$1_aptos_coin_AptosCoin'($t15->$active));

    // assume Identical($t17, coin::$value<aptos_coin::AptosCoin>(select stake::StakePool.pending_active($t15))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:336:9+60
    assume {:print "$at(144,14243,14303)"} true;
    assume ($t17 == $1_coin_$value'$1_aptos_coin_AptosCoin'($t15->$pending_active));

    // assume Identical($t18, Add($t16, $t17)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:337:9+49
    assume {:print "$at(144,14312,14361)"} true;
    assume ($t18 == ($t16 + $t17));

    // assume Identical($t19, Sub($t18, select staking_contract::StakingContract.principal($t13))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:338:9+74
    assume {:print "$at(144,14370,14444)"} true;
    assume ($t19 == ($t18 - $t13->$principal));

    // ($t20, $t21, $t22) := staking_contract::get_staking_contract_amounts_internal($t13) on_abort goto L3 with $t23 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:441:13+55
    assume {:print "$at(143,20986,21041)"} true;
    call $t20,$t21,$t22 := $1_staking_contract_get_staking_contract_amounts_internal($t13);
    if ($abort_flag) {
        assume {:print "$at(143,20986,21041)"} true;
        $t23 := $abort_code;
        assume {:print "$track_abort(58,16):", $t23} $t23 == $t23;
        goto L3;
    }

    // trace_local[commission_amount]($t22) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:440:55+17
    assume {:print "$at(143,20953,20970)"} true;
    assume {:print "$track_local(58,16,5):", $t22} $t22 == $t22;

    // trace_local[accumulated_rewards]($t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:440:34+19
    assume {:print "$track_local(58,16,4):", $t21} $t21 == $t21;

    // $t24 := -($t20, $t22) on_abort goto L3 with $t23 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:442:57+1
    assume {:print "$at(143,21099,21100)"} true;
    call $t24 := $Sub($t20, $t22);
    if ($abort_flag) {
        assume {:print "$at(143,21099,21100)"} true;
        $t23 := $abort_code;
        assume {:print "$track_abort(58,16):", $t23} $t23 == $t23;
        goto L3;
    }

    // $t25 := borrow_field<staking_contract::StakingContract>.principal($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:442:9+26
    $t25 := $ChildMutation($t1, 0, $Dereference($t1)->$principal);

    // write_ref($t25, $t24) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:442:9+67
    $t25 := $UpdateMutation($t25, $t24);

    // write_back[Reference($t1).principal (u64)]($t25) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:442:9+67
    $t1 := $UpdateMutation($t1, $Update'$1_staking_contract_StakingContract'_principal($Dereference($t1), $Dereference($t25)));

    // trace_local[staking_contract]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:442:9+67
    $temp_0'$1_staking_contract_StakingContract' := $Dereference($t1);
    assume {:print "$track_local(58,16,1):", $temp_0'$1_staking_contract_StakingContract'} $temp_0'$1_staking_contract_StakingContract' == $temp_0'$1_staking_contract_StakingContract';

    // $t26 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:445:34+1
    assume {:print "$at(143,21212,21213)"} true;
    $t26 := 0;
    assume $IsValid'u64'($t26);

    // $t27 := ==($t22, $t26) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:445:31+2
    $t27 := $IsEqual'u64'($t22, $t26);

    // if ($t27) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:445:9+60
    if ($t27) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:446:13+8
    assume {:print "$at(143,21229,21237)"} true;
L1:

    // destroy($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:446:13+8
    assume {:print "$at(143,21229,21237)"} true;

    // destroy($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:446:13+8

    // destroy($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:446:13+8

    // $t28 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:446:20+1
    $t28 := 0;
    assume $IsValid'u64'($t28);

    // trace_return[0]($t28) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:446:13+8
    assume {:print "$track_return(58,16,0):", $t28} $t28 == $t28;

    // trace_local[staking_contract]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:446:13+8
    $temp_0'$1_staking_contract_StakingContract' := $Dereference($t1);
    assume {:print "$track_local(58,16,1):", $temp_0'$1_staking_contract_StakingContract'} $temp_0'$1_staking_contract_StakingContract' == $temp_0'$1_staking_contract_StakingContract';

    // pack_ref_deep($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:446:13+8

    // trace_local[add_distribution_events]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:446:13+8
    $temp_0'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent'' := $Dereference($t2);
    assume {:print "$track_local(58,16,2):", $temp_0'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''} $temp_0'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent'' == $temp_0'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent'';

    // trace_local[request_commission_events]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:446:13+8
    $temp_0'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent'' := $Dereference($t3);
    assume {:print "$track_local(58,16,3):", $temp_0'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''} $temp_0'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent'' == $temp_0'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent'';

    // $t29 := move($t28) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:446:13+8
    $t29 := $t28;

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:446:13+8
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:450:26+8
    assume {:print "$at(143,21323,21331)"} true;
L0:

    // staking_contract::add_distribution($t0, $t1, $t0, $t22, $t2) on_abort goto L3 with $t23 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:450:9+98
    assume {:print "$at(143,21306,21404)"} true;
    call $t1,$t2 := $1_staking_contract_add_distribution($t0, $t1, $t0, $t22, $t2);
    if ($abort_flag) {
        assume {:print "$at(143,21306,21404)"} true;
        $t23 := $abort_code;
        assume {:print "$track_abort(58,16):", $t23} $t23 == $t23;
        goto L3;
    }

    // $t30 := get_field<staking_contract::StakingContract>.owner_cap($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:454:51+27
    assume {:print "$at(143,21605,21632)"} true;
    $t30 := $Dereference($t1)->$owner_cap;

    // assume Identical($t31, select stake::OwnerCapability.pool_address($t30)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:56:9+42
    assume {:print "$at(142,2499,2541)"} true;
    assume ($t31 == $t30->$pool_address);

    // assume Identical($t32, global<stake::StakePool>($t31)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:57:9+53
    assume {:print "$at(142,2550,2603)"} true;
    assume ($t32 == $ResourceValue($1_stake_StakePool_$memory, $t31));

    // assume Identical($t33, math64::$min($t22, select coin::Coin.value(select stake::StakePool.active($t32)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:60:9+76
    assume {:print "$at(142,2725,2801)"} true;
    assume ($t33 == $1_math64_$min($t22, $t32->$active->$value));

    // stake::unlock_with_cap($t22, $t30) on_abort goto L3 with $t23 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:454:9+70
    assume {:print "$at(143,21563,21633)"} true;
    call $1_stake_unlock_with_cap($t22, $t30);
    if ($abort_flag) {
        assume {:print "$at(143,21563,21633)"} true;
        $t23 := $abort_code;
        assume {:print "$track_abort(58,16):", $t23} $t23 == $t23;
        goto L3;
    }

    // $t34 := get_field<staking_contract::StakingContract>.pool_address($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:456:28+29
    assume {:print "$at(143,21663,21692)"} true;
    $t34 := $Dereference($t1)->$pool_address;

    // trace_local[pool_address]($t34) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:456:13+12
    assume {:print "$track_local(58,16,6):", $t34} $t34 == $t34;

    // $t35 := pack staking_contract::RequestCommissionEvent($t0, $t34, $t21, $t22) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:459:13+89
    assume {:print "$at(143,21765,21854)"} true;
    $t35 := $1_staking_contract_RequestCommissionEvent($t0, $t34, $t21, $t22);

    // opaque begin: event::emit_event<staking_contract::RequestCommissionEvent>($t3, $t35) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:457:9+163
    assume {:print "$at(143,21702,21865)"} true;

    // opaque end: event::emit_event<staking_contract::RequestCommissionEvent>($t3, $t35) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:457:9+163

    // trace_return[0]($t22) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:462:9+17
    assume {:print "$at(143,21876,21893)"} true;
    assume {:print "$track_return(58,16,0):", $t22} $t22 == $t22;

    // trace_local[staking_contract]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:462:9+17
    $temp_0'$1_staking_contract_StakingContract' := $Dereference($t1);
    assume {:print "$track_local(58,16,1):", $temp_0'$1_staking_contract_StakingContract'} $temp_0'$1_staking_contract_StakingContract' == $temp_0'$1_staking_contract_StakingContract';

    // pack_ref_deep($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:462:9+17

    // trace_local[add_distribution_events]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:462:9+17
    $temp_0'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent'' := $Dereference($t2);
    assume {:print "$track_local(58,16,2):", $temp_0'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent''} $temp_0'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent'' == $temp_0'$1_event_EventHandle'$1_staking_contract_AddDistributionEvent'';

    // trace_local[request_commission_events]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:462:9+17
    $temp_0'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent'' := $Dereference($t3);
    assume {:print "$track_local(58,16,3):", $temp_0'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent''} $temp_0'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent'' == $temp_0'$1_event_EventHandle'$1_staking_contract_RequestCommissionEvent'';

    // $t29 := move($t22) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:462:9+17
    $t29 := $t22;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:463:5+1
    assume {:print "$at(143,21898,21899)"} true;
L2:

    // return $t29 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:463:5+1
    assume {:print "$at(143,21898,21899)"} true;
    $ret0 := $t29;
    $ret1 := $t1;
    $ret2 := $t2;
    $ret3 := $t3;
    return;

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:463:5+1
L3:

    // abort($t23) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:463:5+1
    assume {:print "$at(143,21898,21899)"} true;
    $abort_code := $t23;
    $abort_flag := true;
    return;

}

// fun staking_contract::staking_contract_exists [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:227:5+294
procedure {:inline 1} $1_staking_contract_staking_contract_exists(_$t0: int, _$t1: int) returns ($ret0: bool)
{
    // declare local variables
    var $t2: bool;
    var $t3: bool;
    var $t4: bool;
    var $t5: bool;
    var $t6: $1_staking_contract_Store;
    var $t7: int;
    var $t8: Table int ($1_staking_contract_StakingContract);
    var $t9: bool;
    var $t0: int;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[staker]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:227:5+1
    assume {:print "$at(143,10646,10647)"} true;
    assume {:print "$track_local(58,20,0):", $t0} $t0 == $t0;

    // trace_local[operator]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:227:5+1
    assume {:print "$track_local(58,20,1):", $t1} $t1 == $t1;

    // $t2 := exists<staking_contract::Store>($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:228:14+6
    assume {:print "$at(143,10753,10759)"} true;
    $t2 := $ResourceExists($1_staking_contract_Store_$memory, $t0);

    // $t3 := !($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:228:13+1
    call $t3 := $Not($t2);

    // if ($t3) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:228:9+64
    if ($t3) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:229:20+5
    assume {:print "$at(143,10797,10802)"} true;
L1:

    // $t4 := false at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:229:20+5
    assume {:print "$at(143,10797,10802)"} true;
    $t4 := false;
    assume $IsValid'bool'($t4);

    // trace_return[0]($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:229:13+12
    assume {:print "$track_return(58,20,0):", $t4} $t4 == $t4;

    // $t5 := move($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:229:13+12
    $t5 := $t4;

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:229:13+12
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:232:42+6
    assume {:print "$at(143,10856,10862)"} true;
L0:

    // $t6 := get_global<staking_contract::Store>($t0) on_abort goto L3 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:232:21+13
    assume {:print "$at(143,10835,10848)"} true;
    if (!$ResourceExists($1_staking_contract_Store_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t6 := $ResourceValue($1_staking_contract_Store_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(143,10835,10848)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(58,20):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t8 := get_field<staking_contract::Store>.staking_contracts($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:233:34+24
    assume {:print "$at(143,10898,10922)"} true;
    $t8 := $t6->$staking_contracts;

    // $t9 := simple_map::contains_key<address, staking_contract::StakingContract>($t8, $t1) on_abort goto L3 with $t7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:233:9+61
    call $t9 := $1_simple_map_contains_key'address_$1_staking_contract_StakingContract'($t8, $t1);
    if ($abort_flag) {
        assume {:print "$at(143,10873,10934)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(58,20):", $t7} $t7 == $t7;
        goto L3;
    }

    // trace_return[0]($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:233:9+61
    assume {:print "$track_return(58,20,0):", $t9} $t9 == $t9;

    // $t5 := move($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:233:9+61
    $t5 := $t9;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:234:5+1
    assume {:print "$at(143,10939,10940)"} true;
L2:

    // return $t5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:234:5+1
    assume {:print "$at(143,10939,10940)"} true;
    $ret0 := $t5;
    return;

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:234:5+1
L3:

    // abort($t7) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:234:5+1
    assume {:print "$at(143,10939,10940)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun staking_contract::switch_operator [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:537:5+1891
procedure {:inline 1} $1_staking_contract_switch_operator(_$t0: $signer, _$t1: int, _$t2: int, _$t3: int) returns ()
{
    // declare local variables
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: $Mutation ($1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent');
    var $t9: int;
    var $t10: int;
    var $t11: $1_staking_contract_StakingContract;
    var $t12: $Mutation (Table int ($1_staking_contract_StakingContract));
    var $t13: $Mutation ($1_staking_contract_Store);
    var $t14: int;
    var $t15: $1_staking_contract_Store;
    var $t16: Table int ($1_staking_contract_StakingContract);
    var $t17: Table int ($1_staking_contract_StakingContract);
    var $t18: int;
    var $t19: int;
    var $t20: Table int ($1_staking_contract_StakingContract);
    var $t21: $Mutation ($1_staking_contract_Store);
    var $t22: $Mutation (Table int ($1_staking_contract_StakingContract));
    var $t23: Table int ($1_staking_contract_StakingContract);
    var $t24: bool;
    var $t25: bool;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: $1_staking_contract_StakingContract;
    var $t30: $Mutation ($1_staking_contract_StakingContract);
    var $t31: $Mutation ($1_event_EventHandle'$1_staking_contract_DistributeEvent');
    var $t32: int;
    var $t33: $1_stake_StakePool;
    var $t34: $Mutation ($1_staking_contract_StakingContract);
    var $t35: $Mutation ($1_event_EventHandle'$1_staking_contract_AddDistributionEvent');
    var $t36: $Mutation ($1_event_EventHandle'$1_staking_contract_RequestCommissionEvent');
    var $t37: int;
    var $t38: $1_stake_StakePool;
    var $t39: int;
    var $t40: int;
    var $t41: int;
    var $t42: int;
    var $t43: int;
    var $t44: $1_staking_contract_StakingContract;
    var $t45: $1_stake_OwnerCapability;
    var $t46: int;
    var $t47: $Mutation ($1_staking_contract_StakingContract);
    var $t48: $Mutation (int);
    var $t49: $1_staking_contract_StakingContract;
    var $t50: int;
    var $t51: $1_staking_contract_StakingContract;
    var $t52: $Mutation ($1_event_EventHandle'$1_staking_contract_SwitchOperatorEvent');
    var $t53: $1_staking_contract_SwitchOperatorEvent;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $temp_0'$1_simple_map_SimpleMap'address_$1_staking_contract_StakingContract'': Table int ($1_staking_contract_StakingContract);
    var $temp_0'$1_staking_contract_StakingContract': $1_staking_contract_StakingContract;
    var $temp_0'$1_staking_contract_Store': $1_staking_contract_Store;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // assume Identical($t14, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:188:9+48
    assume {:print "$at(144,7881,7929)"} true;
    assume ($t14 == $1_signer_$address_of($t0));

    // assume Identical($t15, global<staking_contract::Store>($t14)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:190:9+42
    assume {:print "$at(144,8026,8068)"} true;
    assume ($t15 == $ResourceValue($1_staking_contract_Store_$memory, $t14));

    // assume Identical($t16, select staking_contract::Store.staking_contracts($t15)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:191:9+48
    assume {:print "$at(144,8077,8125)"} true;
    assume ($t16 == $t15->$staking_contracts);

    // assume Identical($t17, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t14))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:302:9+64
    assume {:print "$at(144,12927,12991)"} true;
    assume ($t17 == $ResourceValue($1_staking_contract_Store_$memory, $t14)->$staking_contracts);

    // trace_local[staker]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:537:5+1
    assume {:print "$at(143,25425,25426)"} true;
    assume {:print "$track_local(58,21,0):", $t0} $t0 == $t0;

    // trace_local[old_operator]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:537:5+1
    assume {:print "$track_local(58,21,1):", $t1} $t1 == $t1;

    // trace_local[new_operator]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:537:5+1
    assume {:print "$track_local(58,21,2):", $t2} $t2 == $t2;

    // trace_local[new_commission_percentage]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:537:5+1
    assume {:print "$track_local(58,21,3):", $t3} $t3 == $t3;

    // $t18 := signer::address_of($t0) on_abort goto L4 with $t19 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:543:30+26
    assume {:print "$at(143,25638,25664)"} true;
    call $t18 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(143,25638,25664)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(58,21):", $t19} $t19 == $t19;
        goto L4;
    }

    // trace_local[staker_address]($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:543:13+14
    assume {:print "$track_local(58,21,10):", $t18} $t18 == $t18;

    // assume Identical($t20, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t18))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:302:9+64
    assume {:print "$at(144,12927,12991)"} true;
    assume ($t20 == $ResourceValue($1_staking_contract_Store_$memory, $t18)->$staking_contracts);

    // staking_contract::assert_staking_contract_exists($t18, $t1) on_abort goto L4 with $t19 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:544:9+60
    assume {:print "$at(143,25674,25734)"} true;
    call $1_staking_contract_assert_staking_contract_exists($t18, $t1);
    if ($abort_flag) {
        assume {:print "$at(143,25674,25734)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(58,21):", $t19} $t19 == $t19;
        goto L4;
    }

    // $t21 := borrow_global<staking_contract::Store>($t18) on_abort goto L4 with $t19 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:547:21+17
    assume {:print "$at(143,25870,25887)"} true;
    if (!$ResourceExists($1_staking_contract_Store_$memory, $t18)) {
        call $ExecFailureAbort();
    } else {
        $t21 := $Mutation($Global($t18), EmptyVec(), $ResourceValue($1_staking_contract_Store_$memory, $t18));
    }
    if ($abort_flag) {
        assume {:print "$at(143,25870,25887)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(58,21):", $t19} $t19 == $t19;
        goto L4;
    }

    // trace_local[store]($t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:547:13+5
    $temp_0'$1_staking_contract_Store' := $Dereference($t21);
    assume {:print "$track_local(58,21,13):", $temp_0'$1_staking_contract_Store'} $temp_0'$1_staking_contract_Store' == $temp_0'$1_staking_contract_Store';

    // $t22 := borrow_field<staking_contract::Store>.staking_contracts($t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:548:33+28
    assume {:print "$at(143,25944,25972)"} true;
    $t22 := $ChildMutation($t21, 0, $Dereference($t21)->$staking_contracts);

    // trace_local[staking_contracts]($t22) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:548:13+17
    $temp_0'$1_simple_map_SimpleMap'address_$1_staking_contract_StakingContract'' := $Dereference($t22);
    assume {:print "$track_local(58,21,12):", $temp_0'$1_simple_map_SimpleMap'address_$1_staking_contract_StakingContract''} $temp_0'$1_simple_map_SimpleMap'address_$1_staking_contract_StakingContract'' == $temp_0'$1_simple_map_SimpleMap'address_$1_staking_contract_StakingContract'';

    // $t23 := read_ref($t22) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:550:38+34
    assume {:print "$at(143,26028,26062)"} true;
    $t23 := $Dereference($t22);

    // $t24 := simple_map::contains_key<address, staking_contract::StakingContract>($t23, $t2) on_abort goto L4 with $t19 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:550:14+58
    call $t24 := $1_simple_map_contains_key'address_$1_staking_contract_StakingContract'($t23, $t2);
    if ($abort_flag) {
        assume {:print "$at(143,26004,26062)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(58,21):", $t19} $t19 == $t19;
        goto L4;
    }

    // $t25 := !($t24) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:550:13+1
    call $t25 := $Not($t24);

    // if ($t25) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:549:9+156
    assume {:print "$at(143,25982,26138)"} true;
    if ($t25) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:549:9+156
L1:

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:549:9+156
    assume {:print "$at(143,25982,26138)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:549:9+156
L0:

    // destroy($t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:549:9+156
    assume {:print "$at(143,25982,26138)"} true;

    // pack_ref_deep($t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:549:9+156

    // destroy($t22) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:549:9+156

    // $t26 := 5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:551:34+29
    assume {:print "$at(143,26097,26126)"} true;
    $t26 := 5;
    assume $IsValid'u64'($t26);

    // $t27 := error::invalid_state($t26) on_abort goto L4 with $t19 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:551:13+51
    call $t27 := $1_error_invalid_state($t26);
    if ($abort_flag) {
        assume {:print "$at(143,26076,26127)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(58,21):", $t19} $t19 == $t19;
        goto L4;
    }

    // trace_abort($t27) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:549:9+156
    assume {:print "$at(143,25982,26138)"} true;
    assume {:print "$track_abort(58,21):", $t27} $t27 == $t27;

    // $t19 := move($t27) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:549:9+156
    $t19 := $t27;

    // goto L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:549:9+156
    goto L4;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:554:56+17
    assume {:print "$at(143,26196,26213)"} true;
L2:

    // ($t28, $t29) := simple_map::remove<address, staking_contract::StakingContract>($t22, $t1) on_abort goto L4 with $t19 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:554:37+52
    assume {:print "$at(143,26177,26229)"} true;
    call $t28,$t29,$t22 := $1_simple_map_remove'address_$1_staking_contract_StakingContract'($t22, $t1);
    if ($abort_flag) {
        assume {:print "$at(143,26177,26229)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(58,21):", $t19} $t19 == $t19;
        goto L4;
    }

    // $t11 := $t29 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:554:17+16
    $t11 := $t29;

    // trace_local[staking_contract]($t11) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:554:17+16
    assume {:print "$track_local(58,21,11):", $t11} $t11 == $t11;

    // destroy($t28) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:554:14+1

    // $t30 := borrow_local($t11) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:556:59+21
    assume {:print "$at(143,26350,26371)"} true;
    $t30 := $Mutation($Local(11), EmptyVec(), $t11);

    // $t31 := borrow_field<staking_contract::Store>.distribute_events($t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:556:82+28
    $t31 := $ChildMutation($t21, 9, $Dereference($t21)->$distribute_events);

    // assume Identical($t32, select staking_contract::StakingContract.pool_address($t30)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:212:9+49
    assume {:print "$at(144,9011,9060)"} true;
    assume ($t32 == $Dereference($t30)->$pool_address);

    // assume Identical($t33, global<stake::StakePool>($t32)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:213:9+63
    assume {:print "$at(144,9069,9132)"} true;
    assume ($t33 == $ResourceValue($1_stake_StakePool_$memory, $t32));

    // staking_contract::distribute_internal($t18, $t1, $t30, $t31) on_abort goto L4 with $t19 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:556:9+102
    assume {:print "$at(143,26300,26402)"} true;
    call $t30,$t31 := $1_staking_contract_distribute_internal($t18, $t1, $t30, $t31);
    if ($abort_flag) {
        assume {:print "$at(143,26300,26402)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(58,21):", $t19} $t19 == $t19;
        goto L4;
    }

    // pack_ref_deep($t30) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:556:9+102

    // write_back[LocalRoot($t11)@]($t30) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:556:9+102
    $t11 := $Dereference($t30);

    // trace_local[staking_contract]($t11) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:556:9+102
    assume {:print "$track_local(58,21,11):", $t11} $t11 == $t11;

    // write_back[Reference($t21).distribute_events (event::EventHandle<staking_contract::DistributeEvent>)]($t31) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:556:9+102
    $t21 := $UpdateMutation($t21, $Update'$1_staking_contract_Store'_distribute_events($Dereference($t21), $Dereference($t31)));

    // $t34 := borrow_local($t11) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:562:13+21
    assume {:print "$at(143,26647,26668)"} true;
    $t34 := $Mutation($Local(11), EmptyVec(), $t11);

    // $t35 := borrow_field<staking_contract::Store>.add_distribution_events($t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:563:13+34
    assume {:print "$at(143,26682,26716)"} true;
    $t35 := $ChildMutation($t21, 8, $Dereference($t21)->$add_distribution_events);

    // $t36 := borrow_field<staking_contract::Store>.request_commission_events($t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:564:13+36
    assume {:print "$at(143,26730,26766)"} true;
    $t36 := $ChildMutation($t21, 5, $Dereference($t21)->$request_commission_events);

    // assume Identical($t37, select staking_contract::StakingContract.pool_address($t34)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:333:9+49
    assume {:print "$at(144,14067,14116)"} true;
    assume ($t37 == $Dereference($t34)->$pool_address);

    // assume Identical($t38, global<stake::StakePool>($t37)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:334:9+56
    assume {:print "$at(144,14125,14181)"} true;
    assume ($t38 == $ResourceValue($1_stake_StakePool_$memory, $t37));

    // assume Identical($t39, coin::$value<aptos_coin::AptosCoin>(select stake::StakePool.active($t38))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:335:9+44
    assume {:print "$at(144,14190,14234)"} true;
    assume ($t39 == $1_coin_$value'$1_aptos_coin_AptosCoin'($t38->$active));

    // assume Identical($t40, coin::$value<aptos_coin::AptosCoin>(select stake::StakePool.pending_active($t38))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:336:9+60
    assume {:print "$at(144,14243,14303)"} true;
    assume ($t40 == $1_coin_$value'$1_aptos_coin_AptosCoin'($t38->$pending_active));

    // assume Identical($t41, Add($t39, $t40)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:337:9+49
    assume {:print "$at(144,14312,14361)"} true;
    assume ($t41 == ($t39 + $t40));

    // assume Identical($t42, Sub($t41, select staking_contract::StakingContract.principal($t34))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:338:9+74
    assume {:print "$at(144,14370,14444)"} true;
    assume ($t42 == ($t41 - $Dereference($t34)->$principal));

    // $t43 := staking_contract::request_commission_internal($t1, $t34, $t35, $t36) on_abort goto L4 with $t19 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:560:9+197
    assume {:print "$at(143,26580,26777)"} true;
    call $t43,$t34,$t35,$t36 := $1_staking_contract_request_commission_internal($t1, $t34, $t35, $t36);
    if ($abort_flag) {
        assume {:print "$at(143,26580,26777)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(58,21):", $t19} $t19 == $t19;
        goto L4;
    }

    // pack_ref_deep($t34) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:560:9+197

    // write_back[LocalRoot($t11)@]($t34) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:560:9+197
    $t11 := $Dereference($t34);

    // trace_local[staking_contract]($t11) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:560:9+197
    assume {:print "$track_local(58,21,11):", $t11} $t11 == $t11;

    // write_back[Reference($t21).add_distribution_events (event::EventHandle<staking_contract::AddDistributionEvent>)]($t35) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:560:9+197
    $t21 := $UpdateMutation($t21, $Update'$1_staking_contract_Store'_add_distribution_events($Dereference($t21), $Dereference($t35)));

    // write_back[Reference($t21).request_commission_events (event::EventHandle<staking_contract::RequestCommissionEvent>)]($t36) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:560:9+197
    $t21 := $UpdateMutation($t21, $Update'$1_staking_contract_Store'_request_commission_events($Dereference($t21), $Dereference($t36)));

    // destroy($t43) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:560:9+197

    // $t44 := copy($t11) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:568:39+16
    assume {:print "$at(143,26902,26918)"} true;
    $t44 := $t11;

    // $t45 := get_field<staking_contract::StakingContract>.owner_cap($t44) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:568:38+27
    $t45 := $t44->$owner_cap;

    // assume Identical($t46, select stake::OwnerCapability.pool_address($t45)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:104:9+42
    assume {:print "$at(142,4820,4862)"} true;
    assume ($t46 == $t45->$pool_address);

    // stake::set_operator_with_cap($t45, $t2) on_abort goto L4 with $t19 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:568:9+71
    assume {:print "$at(143,26872,26943)"} true;
    call $1_stake_set_operator_with_cap($t45, $t2);
    if ($abort_flag) {
        assume {:print "$at(143,26872,26943)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(58,21):", $t19} $t19 == $t19;
        goto L4;
    }

    // $t47 := borrow_local($t11) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:569:9+16
    assume {:print "$at(143,26953,26969)"} true;
    $t47 := $Mutation($Local(11), EmptyVec(), $t11);

    // $t48 := borrow_field<staking_contract::StakingContract>.commission_percentage($t47) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:569:9+38
    $t48 := $ChildMutation($t47, 3, $Dereference($t47)->$commission_percentage);

    // write_ref($t48, $t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:569:9+66
    $t48 := $UpdateMutation($t48, $t3);

    // write_back[Reference($t47).commission_percentage (u64)]($t48) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:569:9+66
    $t47 := $UpdateMutation($t47, $Update'$1_staking_contract_StakingContract'_commission_percentage($Dereference($t47), $Dereference($t48)));

    // pack_ref_deep($t47) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:569:9+66

    // write_back[LocalRoot($t11)@]($t47) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:569:9+66
    $t11 := $Dereference($t47);

    // trace_local[staking_contract]($t11) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:569:9+66
    assume {:print "$track_local(58,21,11):", $t11} $t11 == $t11;

    // $t49 := copy($t11) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:571:28+16
    assume {:print "$at(143,27049,27065)"} true;
    $t49 := $t11;

    // $t50 := get_field<staking_contract::StakingContract>.pool_address($t49) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:571:28+29
    $t50 := $t49->$pool_address;

    // trace_local[pool_address]($t50) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:571:13+12
    assume {:print "$track_local(58,21,9):", $t50} $t50 == $t50;

    // $t51 := move($t11) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:572:58+16
    assume {:print "$at(143,27137,27153)"} true;
    $t51 := $t11;

    // simple_map::add<address, staking_contract::StakingContract>($t22, $t2, $t51) on_abort goto L4 with $t19 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:572:9+66
    call $t22 := $1_simple_map_add'address_$1_staking_contract_StakingContract'($t22, $t2, $t51);
    if ($abort_flag) {
        assume {:print "$at(143,27088,27154)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(58,21):", $t19} $t19 == $t19;
        goto L4;
    }

    // write_back[Reference($t21).staking_contracts (simple_map::SimpleMap<address, staking_contract::StakingContract>)]($t22) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:572:9+66
    $t21 := $UpdateMutation($t21, $Update'$1_staking_contract_Store'_staking_contracts($Dereference($t21), $Dereference($t22)));

    // $t52 := borrow_field<staking_contract::Store>.switch_operator_events($t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:574:13+33
    assume {:print "$at(143,27188,27221)"} true;
    $t52 := $ChildMutation($t21, 7, $Dereference($t21)->$switch_operator_events);

    // $t53 := pack staking_contract::SwitchOperatorEvent($t1, $t2, $t50) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:575:13+64
    assume {:print "$at(143,27235,27299)"} true;
    $t53 := $1_staking_contract_SwitchOperatorEvent($t1, $t2, $t50);

    // opaque begin: event::emit_event<staking_contract::SwitchOperatorEvent>($t52, $t53) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:573:9+145
    assume {:print "$at(143,27164,27309)"} true;

    // opaque end: event::emit_event<staking_contract::SwitchOperatorEvent>($t52, $t53) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:573:9+145

    // write_back[Reference($t21).switch_operator_events (event::EventHandle<staking_contract::SwitchOperatorEvent>)]($t52) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:573:9+145
    $t21 := $UpdateMutation($t21, $Update'$1_staking_contract_Store'_switch_operator_events($Dereference($t21), $Dereference($t52)));

    // pack_ref_deep($t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:573:9+145

    // write_back[staking_contract::Store@]($t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:573:9+145
    $1_staking_contract_Store_$memory := $ResourceUpdate($1_staking_contract_Store_$memory, $GlobalLocationAddress($t21),
        $Dereference($t21));

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:577:5+1
    assume {:print "$at(143,27315,27316)"} true;
L3:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:577:5+1
    assume {:print "$at(143,27315,27316)"} true;
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:577:5+1
L4:

    // abort($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:577:5+1
    assume {:print "$at(143,27315,27316)"} true;
    $abort_code := $t19;
    $abort_flag := true;
    return;

}

// fun staking_contract::update_distribution_pool [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:698:5+1743
procedure {:inline 1} $1_staking_contract_update_distribution_pool(_$t0: $Mutation ($1_pool_u64_Pool), _$t1: int, _$t2: int, _$t3: int) returns ($ret0: $Mutation ($1_pool_u64_Pool))
{
    // declare local variables
    var $t4: Vec (int);
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: Vec (int);
    var $t19: $1_pool_u64_Pool;
    var $t20: int;
    var $t21: int;
    var $t22: bool;
    var $t23: $1_pool_u64_Pool;
    var $t24: Vec (int);
    var $t25: int;
    var $t26: int;
    var $t27: bool;
    var $t28: int;
    var $t29: bool;
    var $t30: $1_pool_u64_Pool;
    var $t31: int;
    var $t32: $1_pool_u64_Pool;
    var $t33: int;
    var $t34: $1_pool_u64_Pool;
    var $t35: int;
    var $t36: int;
    var $t37: int;
    var $t38: int;
    var $t39: int;
    var $t40: $1_pool_u64_Pool;
    var $t41: int;
    var $t42: int;
    var $t43: int;
    var $t44: int;
    var $t45: int;
    var $t0: $Mutation ($1_pool_u64_Pool);
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $temp_0'$1_pool_u64_Pool': $1_pool_u64_Pool;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $temp_0'vec'address'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // trace_local[distribution_pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:698:5+1
    assume {:print "$at(143,33369,33370)"} true;
    $temp_0'$1_pool_u64_Pool' := $Dereference($t0);
    assume {:print "$track_local(58,26,0):", $temp_0'$1_pool_u64_Pool'} $temp_0'$1_pool_u64_Pool' == $temp_0'$1_pool_u64_Pool';

    // trace_local[updated_total_coins]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:698:5+1
    assume {:print "$track_local(58,26,1):", $t1} $t1 == $t1;

    // trace_local[operator]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:698:5+1
    assume {:print "$track_local(58,26,2):", $t2} $t2 == $t2;

    // trace_local[commission_percentage]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:698:5+1
    assume {:print "$track_local(58,26,3):", $t3} $t3 == $t3;

    // $t19 := read_ref($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:705:35+17
    assume {:print "$at(143,33659,33676)"} true;
    $t19 := $Dereference($t0);

    // $t20 := pool_u64::total_coins($t19) on_abort goto L10 with $t21 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:705:13+40
    call $t20 := $1_pool_u64_total_coins($t19);
    if ($abort_flag) {
        assume {:print "$at(143,33637,33677)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(58,26):", $t21} $t21 == $t21;
        goto L10;
    }

    // $t22 := ==($t20, $t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:705:54+2
    $t22 := $IsEqual'u64'($t20, $t1);

    // if ($t22) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:705:9+99
    if ($t22) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:706:13+6
    assume {:print "$at(143,33716,33722)"} true;
L1:

    // destroy($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:706:13+6
    assume {:print "$at(143,33716,33722)"} true;

    // trace_local[distribution_pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:706:13+6
    $temp_0'$1_pool_u64_Pool' := $Dereference($t0);
    assume {:print "$track_local(58,26,0):", $temp_0'$1_pool_u64_Pool'} $temp_0'$1_pool_u64_Pool' == $temp_0'$1_pool_u64_Pool';

    // pack_ref_deep($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:706:13+6

    // goto L9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:706:13+6
    goto L9;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:711:52+17
    assume {:print "$at(143,33960,33977)"} true;
L0:

    // $t23 := read_ref($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:711:52+17
    assume {:print "$at(143,33960,33977)"} true;
    $t23 := $Dereference($t0);

    // $t24 := pool_u64::shareholders($t23) on_abort goto L10 with $t21 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:711:29+41
    call $t24 := $1_pool_u64_shareholders($t23);
    if ($abort_flag) {
        assume {:print "$at(143,33937,33978)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(58,26):", $t21} $t21 == $t21;
        goto L10;
    }

    // trace_local[v#264]($t24) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:712:9+1038
    assume {:print "$at(143,33988,35026)"} true;
    assume {:print "$track_local(58,26,18):", $t24} $t24 == $t24;

    // $t25 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:281:17+1
    assume {:print "$at(18,9989,9990)"} true;
    $t25 := 0;
    assume $IsValid'u64'($t25);

    // trace_local[i#266]($t25) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:281:13+1
    assume {:print "$track_local(58,26,11):", $t25} $t25 == $t25;

    // $t26 := vector::length<address>($t24) on_abort goto L10 with $t21 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:282:19+9
    assume {:print "$at(18,10010,10019)"} true;
    call $t26 := $1_vector_length'address'($t24);
    if ($abort_flag) {
        assume {:print "$at(18,10010,10019)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(58,26):", $t21} $t21 == $t21;
        goto L10;
    }

    // trace_local[len#267]($t26) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:282:13+3
    assume {:print "$track_local(58,26,12):", $t26} $t26 == $t26;

    // label L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume {:print "$at(18,10036,10037)"} true;
L7:

    // $t11 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume {:print "$at(18,10036,10037)"} true;
    havoc $t11;

    // assume WellFormed($t11) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'u64'($t11);

    // $t27 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t27;

    // assume WellFormed($t27) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'bool'($t27);

    // $t28 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t28;

    // assume WellFormed($t28) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'address'($t28);

    // $t29 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t29;

    // assume WellFormed($t29) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'bool'($t29);

    // $t30 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t30;

    // assume And(WellFormed($t30), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares($t30), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders($t30), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders($t30))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders($t30))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders($t30), i), Index(select pool_u64::Pool.shareholders($t30), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume ($IsValid'$1_pool_u64_Pool'($t30) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($t30->$shares, addr), $1_vector_spec_contains'address'($t30->$shareholders, addr)))) && (var $range_0 := $Range(0, LenVec($t30->$shareholders)); (var $range_1 := $Range(0, LenVec($t30->$shareholders)); (forall $i_2: int, $i_3: int :: $InRange($range_0, $i_2) ==> $InRange($range_1, $i_3) ==> (var i := $i_2;
    (var j := $i_3;
    (($IsEqual'address'(ReadVec($t30->$shareholders, i), ReadVec($t30->$shareholders, j)) ==> $IsEqual'num'(i, j))))))))));

    // $t31 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t31;

    // assume WellFormed($t31) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'u64'($t31);

    // $t32 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t32;

    // assume And(WellFormed($t32), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares($t32), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders($t32), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders($t32))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders($t32))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders($t32), i), Index(select pool_u64::Pool.shareholders($t32), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume ($IsValid'$1_pool_u64_Pool'($t32) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($t32->$shares, addr), $1_vector_spec_contains'address'($t32->$shareholders, addr)))) && (var $range_0 := $Range(0, LenVec($t32->$shareholders)); (var $range_1 := $Range(0, LenVec($t32->$shareholders)); (forall $i_2: int, $i_3: int :: $InRange($range_0, $i_2) ==> $InRange($range_1, $i_3) ==> (var i := $i_2;
    (var j := $i_3;
    (($IsEqual'address'(ReadVec($t32->$shareholders, i), ReadVec($t32->$shareholders, j)) ==> $IsEqual'num'(i, j))))))))));

    // $t33 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t33;

    // assume WellFormed($t33) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'u64'($t33);

    // $t34 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t34;

    // assume And(WellFormed($t34), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares($t34), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders($t34), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders($t34))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders($t34))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders($t34), i), Index(select pool_u64::Pool.shareholders($t34), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume ($IsValid'$1_pool_u64_Pool'($t34) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($t34->$shares, addr), $1_vector_spec_contains'address'($t34->$shareholders, addr)))) && (var $range_0 := $Range(0, LenVec($t34->$shareholders)); (var $range_1 := $Range(0, LenVec($t34->$shareholders)); (forall $i_2: int, $i_3: int :: $InRange($range_0, $i_2) ==> $InRange($range_1, $i_3) ==> (var i := $i_2;
    (var j := $i_3;
    (($IsEqual'address'(ReadVec($t34->$shareholders, i), ReadVec($t34->$shareholders, j)) ==> $IsEqual'num'(i, j))))))))));

    // $t35 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t35;

    // assume WellFormed($t35) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'u64'($t35);

    // $t36 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t36;

    // assume WellFormed($t36) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'u64'($t36);

    // $t37 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t37;

    // assume WellFormed($t37) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'u64'($t37);

    // $t38 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t38;

    // assume WellFormed($t38) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'u64'($t38);

    // $t39 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t39;

    // assume WellFormed($t39) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'u64'($t39);

    // $t40 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t40;

    // assume And(WellFormed($t40), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares($t40), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders($t40), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders($t40))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders($t40))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders($t40), i), Index(select pool_u64::Pool.shareholders($t40), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume ($IsValid'$1_pool_u64_Pool'($t40) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($t40->$shares, addr), $1_vector_spec_contains'address'($t40->$shareholders, addr)))) && (var $range_0 := $Range(0, LenVec($t40->$shareholders)); (var $range_1 := $Range(0, LenVec($t40->$shareholders)); (forall $i_2: int, $i_3: int :: $InRange($range_0, $i_2) ==> $InRange($range_1, $i_3) ==> (var i := $i_2;
    (var j := $i_3;
    (($IsEqual'address'(ReadVec($t40->$shareholders, i), ReadVec($t40->$shareholders, j)) ==> $IsEqual'num'(i, j))))))))));

    // $t41 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t41;

    // assume WellFormed($t41) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'u64'($t41);

    // $t42 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t42;

    // assume WellFormed($t42) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'u64'($t42);

    // $t43 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t43;

    // assume WellFormed($t43) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'u64'($t43);

    // $t0 := havoc[mut]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $temp_0'$1_pool_u64_Pool';
    $t0 := $UpdateMutation($t0, $temp_0'$1_pool_u64_Pool');

    // assume And(WellFormed($t0), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares($t0), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders($t0), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders($t0))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders($t0))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders($t0), i), Index(select pool_u64::Pool.shareholders($t0), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume ($IsValid'$1_pool_u64_Pool'($Dereference($t0)) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($Dereference($t0)->$shares, addr), $1_vector_spec_contains'address'($Dereference($t0)->$shareholders, addr)))) && (var $range_0 := $Range(0, LenVec($Dereference($t0)->$shareholders)); (var $range_1 := $Range(0, LenVec($Dereference($t0)->$shareholders)); (forall $i_2: int, $i_3: int :: $InRange($range_0, $i_2) ==> $InRange($range_1, $i_3) ==> (var i := $i_2;
    (var j := $i_3;
    (($IsEqual'address'(ReadVec($Dereference($t0)->$shareholders, i), ReadVec($Dereference($t0)->$shareholders, j)) ==> $IsEqual'num'(i, j))))))))));

    // trace_local[distribution_pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume {:print "$info(): enter loop, variable(s) distribution_pool, i#266 havocked and reassigned"} true;
    $temp_0'$1_pool_u64_Pool' := $Dereference($t0);
    assume {:print "$track_local(58,26,0):", $temp_0'$1_pool_u64_Pool'} $temp_0'$1_pool_u64_Pool' == $temp_0'$1_pool_u64_Pool';

    // trace_local[i#266]($t11) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume {:print "$track_local(58,26,11):", $t11} $t11 == $t11;

    // assume Not(AbortFlag()) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume !$abort_flag;

    // $t27 := <($t11, $t26) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:18+1
    call $t27 := $Lt($t11, $t26);

    // if ($t27) goto L3 else goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:9+78
    if ($t27) { goto L3; } else { goto L2; }

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:9+78
L3:

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:284:22+1
    assume {:print "$at(18,10068,10069)"} true;
L4:

    // $t28 := vector::borrow<address>($t24, $t11) on_abort goto L10 with $t21 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:284:15+12
    assume {:print "$at(18,10061,10073)"} true;
    call $t28 := $1_vector_borrow'address'($t24, $t11);
    if ($abort_flag) {
        assume {:print "$at(18,10061,10073)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(58,26):", $t21} $t21 == $t21;
        goto L10;
    }

    // trace_local[shareholder#269]($t28) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:713:17+11
    assume {:print "$at(143,34055,34066)"} true;
    assume {:print "$track_local(58,26,14):", $t28} $t28 == $t28;

    // $t29 := !=($t28, $t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:714:29+2
    assume {:print "$at(143,34120,34122)"} true;
    $t29 := !$IsEqual'address'($t28, $t2);

    // if ($t29) goto L6 else goto L11 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:714:13+910
    if ($t29) { goto L6; } else { goto L11; }

    // label L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:715:47+17
    assume {:print "$at(143,34181,34198)"} true;
L6:

    // $t30 := read_ref($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:715:46+32
    assume {:print "$at(143,34180,34212)"} true;
    $t30 := $Dereference($t0);

    // $t31 := pool_u64::shares($t30, $t28) on_abort goto L10 with $t21 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:715:30+48
    call $t31 := $1_pool_u64_shares($t30, $t28);
    if ($abort_flag) {
        assume {:print "$at(143,34164,34212)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(58,26):", $t21} $t21 == $t21;
        goto L10;
    }

    // trace_local[shares#270]($t31) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:715:21+6
    assume {:print "$track_local(58,26,15):", $t31} $t31 == $t31;

    // $t32 := read_ref($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:716:55+32
    assume {:print "$at(143,34268,34300)"} true;
    $t32 := $Dereference($t0);

    // assume Identical($t44, pool_u64::spec_shares($t32, $t28)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:53:9+44
    assume {:print "$at(68,1730,1774)"} true;
    assume ($t44 == $1_pool_u64_spec_shares($t32, $t28));

    // assume Identical($t45, select pool_u64::Pool.total_coins($t32)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/pool_u64.spec.move:54:9+35
    assume {:print "$at(68,1783,1818)"} true;
    assume ($t45 == $t32->$total_coins);

    // $t33 := pool_u64::balance($t32, $t28) on_abort goto L10 with $t21 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:716:38+49
    assume {:print "$at(143,34251,34300)"} true;
    call $t33 := $1_pool_u64_balance($t32, $t28);
    if ($abort_flag) {
        assume {:print "$at(143,34251,34300)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(58,26):", $t21} $t21 == $t21;
        goto L10;
    }

    // trace_local[previous_worth#271]($t33) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:716:21+14
    assume {:print "$track_local(58,26,13):", $t33} $t33 == $t33;

    // $t34 := read_ref($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:717:80+69
    assume {:print "$at(143,34381,34450)"} true;
    $t34 := $Dereference($t0);

    // $t35 := pool_u64::shares_to_amount_with_total_coins($t34, $t31, $t1) on_abort goto L10 with $t21 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:717:37+112
    call $t35 := $1_pool_u64_shares_to_amount_with_total_coins($t34, $t31, $t1);
    if ($abort_flag) {
        assume {:print "$at(143,34338,34450)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(58,26):", $t21} $t21 == $t21;
        goto L10;
    }

    // $t36 := -($t35, $t33) on_abort goto L10 with $t21 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:719:56+1
    assume {:print "$at(143,34507,34508)"} true;
    call $t36 := $Sub($t35, $t33);
    if ($abort_flag) {
        assume {:print "$at(143,34507,34508)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(58,26):", $t21} $t21 == $t21;
        goto L10;
    }

    // $t37 := *($t36, $t3) on_abort goto L10 with $t21 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:719:74+1
    call $t37 := $MulU64($t36, $t3);
    if ($abort_flag) {
        assume {:print "$at(143,34525,34526)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(58,26):", $t21} $t21 == $t21;
        goto L10;
    }

    // $t38 := 100 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:719:100+3
    $t38 := 100;
    assume $IsValid'u64'($t38);

    // $t39 := /($t37, $t38) on_abort goto L10 with $t21 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:719:98+1
    call $t39 := $Div($t37, $t38);
    if ($abort_flag) {
        assume {:print "$at(143,34549,34550)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(58,26):", $t21} $t21 == $t21;
        goto L10;
    }

    // trace_local[unpaid_commission#273]($t39) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:719:21+17
    assume {:print "$track_local(58,26,17):", $t39} $t39 == $t39;

    // $t40 := read_ref($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:722:85+80
    assume {:print "$at(143,34814,34894)"} true;
    $t40 := $Dereference($t0);

    // $t41 := pool_u64::amount_to_shares_with_total_coins($t40, $t39, $t1) on_abort goto L10 with $t21 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:722:42+123
    call $t41 := $1_pool_u64_amount_to_shares_with_total_coins($t40, $t39, $t1);
    if ($abort_flag) {
        assume {:print "$at(143,34771,34894)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(58,26):", $t21} $t21 == $t21;
        goto L10;
    }

    // trace_local[shares_to_transfer#274]($t41) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:722:21+18
    assume {:print "$track_local(58,26,16):", $t41} $t41 == $t41;

    // pool_u64::transfer_shares($t0, $t28, $t2, $t41) on_abort goto L10 with $t21 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:724:17+87
    assume {:print "$at(143,34912,34999)"} true;
    call $t0 := $1_pool_u64_transfer_shares($t0, $t28, $t2, $t41);
    if ($abort_flag) {
        assume {:print "$at(143,34912,34999)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(58,26):", $t21} $t21 == $t21;
        goto L10;
    }

    // label L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:17+1
    assume {:print "$at(18,10092,10093)"} true;
L5:

    // $t42 := 1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:21+1
    assume {:print "$at(18,10096,10097)"} true;
    $t42 := 1;
    assume $IsValid'u64'($t42);

    // $t43 := +($t11, $t42) on_abort goto L10 with $t21 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:19+1
    call $t43 := $AddU64($t11, $t42);
    if ($abort_flag) {
        assume {:print "$at(18,10094,10095)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(58,26):", $t21} $t21 == $t21;
        goto L10;
    }

    // trace_local[i#266]($t43) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:13+1
    assume {:print "$track_local(58,26,11):", $t43} $t43 == $t43;

    // goto L8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:13+9
    goto L8;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:728:9+68
    assume {:print "$at(143,35037,35105)"} true;
L2:

    // pool_u64::update_total_coins($t0, $t1) on_abort goto L10 with $t21 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:728:9+68
    assume {:print "$at(143,35037,35105)"} true;
    call $t0 := $1_pool_u64_update_total_coins($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(143,35037,35105)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(58,26):", $t21} $t21 == $t21;
        goto L10;
    }

    // trace_local[distribution_pool]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:728:77+1
    $temp_0'$1_pool_u64_Pool' := $Dereference($t0);
    assume {:print "$track_local(58,26,0):", $temp_0'$1_pool_u64_Pool'} $temp_0'$1_pool_u64_Pool' == $temp_0'$1_pool_u64_Pool';

    // pack_ref_deep($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:728:77+1

    // goto L9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:728:77+1
    goto L9;

    // label L8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:728:9+68
    // Loop invariant checking block for the loop started with header: L7
L8:

    // stop() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:728:9+68
    assume {:print "$at(143,35037,35105)"} true;
    assume false;
    return;

    // label L9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:729:5+1
    assume {:print "$at(143,35111,35112)"} true;
L9:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:729:5+1
    assume {:print "$at(143,35111,35112)"} true;
    $ret0 := $t0;
    return;

    // label L10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:729:5+1
L10:

    // abort($t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:729:5+1
    assume {:print "$at(143,35111,35112)"} true;
    $abort_code := $t21;
    $abort_flag := true;
    return;

    // label L11 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L11:

    // destroy($t0) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L5 at <internal>:1:1+10
    goto L5;

}

// fun staking_contract::update_voter [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:346:5+754
procedure {:inline 1} $1_staking_contract_update_voter(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: $Mutation ($1_staking_contract_StakingContract);
    var $t7: $Mutation ($1_staking_contract_Store);
    var $t8: int;
    var $t9: $1_staking_contract_Store;
    var $t10: $1_staking_contract_StakingContract;
    var $t11: int;
    var $t12: Table int ($1_staking_contract_StakingContract);
    var $t13: int;
    var $t14: int;
    var $t15: Table int ($1_staking_contract_StakingContract);
    var $t16: $Mutation ($1_staking_contract_Store);
    var $t17: $Mutation (Table int ($1_staking_contract_StakingContract));
    var $t18: $Mutation ($1_staking_contract_StakingContract);
    var $t19: int;
    var $t20: int;
    var $t21: $1_stake_OwnerCapability;
    var $t22: int;
    var $t23: $Mutation ($1_event_EventHandle'$1_staking_contract_UpdateVoterEvent');
    var $t24: $1_staking_contract_UpdateVoterEvent;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'$1_staking_contract_StakingContract': $1_staking_contract_StakingContract;
    var $temp_0'$1_staking_contract_Store': $1_staking_contract_Store;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // assume Identical($t8, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:117:9+48
    assume {:print "$at(144,4862,4910)"} true;
    assume ($t8 == $1_signer_$address_of($t0));

    // assume Identical($t9, global<staking_contract::Store>($t8)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:310:9+34
    assume {:print "$at(144,13175,13209)"} true;
    assume ($t9 == $ResourceValue($1_staking_contract_Store_$memory, $t8));

    // assume Identical($t10, simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t9), $t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:311:9+79
    assume {:print "$at(144,13218,13297)"} true;
    assume ($t10 == $1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($t9->$staking_contracts, $t1));

    // assume Identical($t11, select staking_contract::StakingContract.pool_address($t10)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:312:9+49
    assume {:print "$at(144,13306,13355)"} true;
    assume ($t11 == $t10->$pool_address);

    // assume Identical($t12, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t8))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:302:9+64
    assume {:print "$at(144,12927,12991)"} true;
    assume ($t12 == $ResourceValue($1_staking_contract_Store_$memory, $t8)->$staking_contracts);

    // trace_local[staker]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:346:5+1
    assume {:print "$at(143,16034,16035)"} true;
    assume {:print "$track_local(58,27,0):", $t0} $t0 == $t0;

    // trace_local[operator]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:346:5+1
    assume {:print "$track_local(58,27,1):", $t1} $t1 == $t1;

    // trace_local[new_voter]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:346:5+1
    assume {:print "$track_local(58,27,2):", $t2} $t2 == $t2;

    // $t13 := signer::address_of($t0) on_abort goto L2 with $t14 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:347:30+26
    assume {:print "$at(143,16166,16192)"} true;
    call $t13 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(143,16166,16192)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(58,27):", $t14} $t14 == $t14;
        goto L2;
    }

    // trace_local[staker_address]($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:347:13+14
    assume {:print "$track_local(58,27,5):", $t13} $t13 == $t13;

    // assume Identical($t15, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t13))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:302:9+64
    assume {:print "$at(144,12927,12991)"} true;
    assume ($t15 == $ResourceValue($1_staking_contract_Store_$memory, $t13)->$staking_contracts);

    // staking_contract::assert_staking_contract_exists($t13, $t1) on_abort goto L2 with $t14 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:348:9+56
    assume {:print "$at(143,16202,16258)"} true;
    call $1_staking_contract_assert_staking_contract_exists($t13, $t1);
    if ($abort_flag) {
        assume {:print "$at(143,16202,16258)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(58,27):", $t14} $t14 == $t14;
        goto L2;
    }

    // $t16 := borrow_global<staking_contract::Store>($t13) on_abort goto L2 with $t14 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:350:21+17
    assume {:print "$at(143,16281,16298)"} true;
    if (!$ResourceExists($1_staking_contract_Store_$memory, $t13)) {
        call $ExecFailureAbort();
    } else {
        $t16 := $Mutation($Global($t13), EmptyVec(), $ResourceValue($1_staking_contract_Store_$memory, $t13));
    }
    if ($abort_flag) {
        assume {:print "$at(143,16281,16298)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(58,27):", $t14} $t14 == $t14;
        goto L2;
    }

    // trace_local[store]($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:350:13+5
    $temp_0'$1_staking_contract_Store' := $Dereference($t16);
    assume {:print "$track_local(58,27,7):", $temp_0'$1_staking_contract_Store'} $temp_0'$1_staking_contract_Store' == $temp_0'$1_staking_contract_Store';

    // $t17 := borrow_field<staking_contract::Store>.staking_contracts($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:351:55+28
    assume {:print "$at(143,16377,16405)"} true;
    $t17 := $ChildMutation($t16, 0, $Dereference($t16)->$staking_contracts);

    // $t18 := simple_map::borrow_mut<address, staking_contract::StakingContract>($t17, $t1) on_abort goto L2 with $t14 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:351:32+63
    call $t18,$t17 := $1_simple_map_borrow_mut'address_$1_staking_contract_StakingContract'($t17, $t1);
    if ($abort_flag) {
        assume {:print "$at(143,16354,16417)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(58,27):", $t14} $t14 == $t14;
        goto L2;
    }

    // trace_local[staking_contract]($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:351:13+16
    $temp_0'$1_staking_contract_StakingContract' := $Dereference($t18);
    assume {:print "$track_local(58,27,6):", $temp_0'$1_staking_contract_StakingContract'} $temp_0'$1_staking_contract_StakingContract' == $temp_0'$1_staking_contract_StakingContract';

    // $t19 := get_field<staking_contract::StakingContract>.pool_address($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:352:28+29
    assume {:print "$at(143,16446,16475)"} true;
    $t19 := $Dereference($t18)->$pool_address;

    // trace_local[pool_address]($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:352:13+12
    assume {:print "$track_local(58,27,4):", $t19} $t19 == $t19;

    // $t20 := stake::get_delegated_voter($t19) on_abort goto L2 with $t14 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:353:25+40
    assume {:print "$at(143,16501,16541)"} true;
    call $t20 := $1_stake_get_delegated_voter($t19);
    if ($abort_flag) {
        assume {:print "$at(143,16501,16541)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(58,27):", $t14} $t14 == $t14;
        goto L2;
    }

    // trace_local[old_voter]($t20) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:353:13+9
    assume {:print "$track_local(58,27,3):", $t20} $t20 == $t20;

    // $t21 := get_field<staking_contract::StakingContract>.owner_cap($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:354:45+27
    assume {:print "$at(143,16587,16614)"} true;
    $t21 := $Dereference($t18)->$owner_cap;

    // assume Identical($t22, select stake::OwnerCapability.pool_address($t21)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:136:9+42
    assume {:print "$at(142,6139,6181)"} true;
    assume ($t22 == $t21->$pool_address);

    // stake::set_delegated_voter_with_cap($t21, $t2) on_abort goto L2 with $t14 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:354:9+75
    assume {:print "$at(143,16551,16626)"} true;
    call $1_stake_set_delegated_voter_with_cap($t21, $t2);
    if ($abort_flag) {
        assume {:print "$at(143,16551,16626)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(58,27):", $t14} $t14 == $t14;
        goto L2;
    }

    // $t23 := borrow_field<staking_contract::Store>.update_voter_events($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:357:13+30
    assume {:print "$at(143,16661,16691)"} true;
    $t23 := $ChildMutation($t16, 2, $Dereference($t16)->$update_voter_events);

    // $t24 := pack staking_contract::UpdateVoterEvent($t1, $t19, $t20, $t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:358:13+65
    assume {:print "$at(143,16705,16770)"} true;
    $t24 := $1_staking_contract_UpdateVoterEvent($t1, $t19, $t20, $t2);

    // opaque begin: event::emit_event<staking_contract::UpdateVoterEvent>($t23, $t24) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:356:9+144
    assume {:print "$at(143,16637,16781)"} true;

    // opaque end: event::emit_event<staking_contract::UpdateVoterEvent>($t23, $t24) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:356:9+144

    // write_back[Reference($t16).update_voter_events (event::EventHandle<staking_contract::UpdateVoterEvent>)]($t23) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:356:9+144
    $t16 := $UpdateMutation($t16, $Update'$1_staking_contract_Store'_update_voter_events($Dereference($t16), $Dereference($t23)));

    // pack_ref_deep($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:356:9+144

    // write_back[staking_contract::Store@]($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:356:9+144
    $1_staking_contract_Store_$memory := $ResourceUpdate($1_staking_contract_Store_$memory, $GlobalLocationAddress($t16),
        $Dereference($t16));

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:360:5+1
    assume {:print "$at(143,16787,16788)"} true;
L1:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:360:5+1
    assume {:print "$at(143,16787,16788)"} true;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:360:5+1
L2:

    // abort($t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.move:360:5+1
    assume {:print "$at(143,16787,16788)"} true;
    $abort_code := $t14;
    $abort_flag := true;
    return;

}

// struct vesting::DistributeEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:230:5+134
datatype $1_vesting_DistributeEvent {
    $1_vesting_DistributeEvent($admin: int, $vesting_contract_address: int, $amount: int)
}
function {:inline} $Update'$1_vesting_DistributeEvent'_admin(s: $1_vesting_DistributeEvent, x: int): $1_vesting_DistributeEvent {
    $1_vesting_DistributeEvent(x, s->$vesting_contract_address, s->$amount)
}
function {:inline} $Update'$1_vesting_DistributeEvent'_vesting_contract_address(s: $1_vesting_DistributeEvent, x: int): $1_vesting_DistributeEvent {
    $1_vesting_DistributeEvent(s->$admin, x, s->$amount)
}
function {:inline} $Update'$1_vesting_DistributeEvent'_amount(s: $1_vesting_DistributeEvent, x: int): $1_vesting_DistributeEvent {
    $1_vesting_DistributeEvent(s->$admin, s->$vesting_contract_address, x)
}
function $IsValid'$1_vesting_DistributeEvent'(s: $1_vesting_DistributeEvent): bool {
    $IsValid'address'(s->$admin)
      && $IsValid'address'(s->$vesting_contract_address)
      && $IsValid'u64'(s->$amount)
}
function {:inline} $IsEqual'$1_vesting_DistributeEvent'(s1: $1_vesting_DistributeEvent, s2: $1_vesting_DistributeEvent): bool {
    s1 == s2
}

// struct vesting::ResetLockupEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:200:5+194
datatype $1_vesting_ResetLockupEvent {
    $1_vesting_ResetLockupEvent($admin: int, $vesting_contract_address: int, $staking_pool_address: int, $new_lockup_expiration_secs: int)
}
function {:inline} $Update'$1_vesting_ResetLockupEvent'_admin(s: $1_vesting_ResetLockupEvent, x: int): $1_vesting_ResetLockupEvent {
    $1_vesting_ResetLockupEvent(x, s->$vesting_contract_address, s->$staking_pool_address, s->$new_lockup_expiration_secs)
}
function {:inline} $Update'$1_vesting_ResetLockupEvent'_vesting_contract_address(s: $1_vesting_ResetLockupEvent, x: int): $1_vesting_ResetLockupEvent {
    $1_vesting_ResetLockupEvent(s->$admin, x, s->$staking_pool_address, s->$new_lockup_expiration_secs)
}
function {:inline} $Update'$1_vesting_ResetLockupEvent'_staking_pool_address(s: $1_vesting_ResetLockupEvent, x: int): $1_vesting_ResetLockupEvent {
    $1_vesting_ResetLockupEvent(s->$admin, s->$vesting_contract_address, x, s->$new_lockup_expiration_secs)
}
function {:inline} $Update'$1_vesting_ResetLockupEvent'_new_lockup_expiration_secs(s: $1_vesting_ResetLockupEvent, x: int): $1_vesting_ResetLockupEvent {
    $1_vesting_ResetLockupEvent(s->$admin, s->$vesting_contract_address, s->$staking_pool_address, x)
}
function $IsValid'$1_vesting_ResetLockupEvent'(s: $1_vesting_ResetLockupEvent): bool {
    $IsValid'address'(s->$admin)
      && $IsValid'address'(s->$vesting_contract_address)
      && $IsValid'address'(s->$staking_pool_address)
      && $IsValid'u64'(s->$new_lockup_expiration_secs)
}
function {:inline} $IsEqual'$1_vesting_ResetLockupEvent'(s1: $1_vesting_ResetLockupEvent, s2: $1_vesting_ResetLockupEvent): bool {
    s1 == s2
}

// struct vesting::UpdateVoterEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:192:5+209
datatype $1_vesting_UpdateVoterEvent {
    $1_vesting_UpdateVoterEvent($admin: int, $vesting_contract_address: int, $staking_pool_address: int, $old_voter: int, $new_voter: int)
}
function {:inline} $Update'$1_vesting_UpdateVoterEvent'_admin(s: $1_vesting_UpdateVoterEvent, x: int): $1_vesting_UpdateVoterEvent {
    $1_vesting_UpdateVoterEvent(x, s->$vesting_contract_address, s->$staking_pool_address, s->$old_voter, s->$new_voter)
}
function {:inline} $Update'$1_vesting_UpdateVoterEvent'_vesting_contract_address(s: $1_vesting_UpdateVoterEvent, x: int): $1_vesting_UpdateVoterEvent {
    $1_vesting_UpdateVoterEvent(s->$admin, x, s->$staking_pool_address, s->$old_voter, s->$new_voter)
}
function {:inline} $Update'$1_vesting_UpdateVoterEvent'_staking_pool_address(s: $1_vesting_UpdateVoterEvent, x: int): $1_vesting_UpdateVoterEvent {
    $1_vesting_UpdateVoterEvent(s->$admin, s->$vesting_contract_address, x, s->$old_voter, s->$new_voter)
}
function {:inline} $Update'$1_vesting_UpdateVoterEvent'_old_voter(s: $1_vesting_UpdateVoterEvent, x: int): $1_vesting_UpdateVoterEvent {
    $1_vesting_UpdateVoterEvent(s->$admin, s->$vesting_contract_address, s->$staking_pool_address, x, s->$new_voter)
}
function {:inline} $Update'$1_vesting_UpdateVoterEvent'_new_voter(s: $1_vesting_UpdateVoterEvent, x: int): $1_vesting_UpdateVoterEvent {
    $1_vesting_UpdateVoterEvent(s->$admin, s->$vesting_contract_address, s->$staking_pool_address, s->$old_voter, x)
}
function $IsValid'$1_vesting_UpdateVoterEvent'(s: $1_vesting_UpdateVoterEvent): bool {
    $IsValid'address'(s->$admin)
      && $IsValid'address'(s->$vesting_contract_address)
      && $IsValid'address'(s->$staking_pool_address)
      && $IsValid'address'(s->$old_voter)
      && $IsValid'address'(s->$new_voter)
}
function {:inline} $IsEqual'$1_vesting_UpdateVoterEvent'(s1: $1_vesting_UpdateVoterEvent, s2: $1_vesting_UpdateVoterEvent): bool {
    s1 == s2
}

// struct vesting::AdminStore at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:165:5+265
datatype $1_vesting_AdminStore {
    $1_vesting_AdminStore($vesting_contracts: Vec (int), $nonce: int, $create_events: $1_event_EventHandle'$1_vesting_CreateVestingContractEvent')
}
function {:inline} $Update'$1_vesting_AdminStore'_vesting_contracts(s: $1_vesting_AdminStore, x: Vec (int)): $1_vesting_AdminStore {
    $1_vesting_AdminStore(x, s->$nonce, s->$create_events)
}
function {:inline} $Update'$1_vesting_AdminStore'_nonce(s: $1_vesting_AdminStore, x: int): $1_vesting_AdminStore {
    $1_vesting_AdminStore(s->$vesting_contracts, x, s->$create_events)
}
function {:inline} $Update'$1_vesting_AdminStore'_create_events(s: $1_vesting_AdminStore, x: $1_event_EventHandle'$1_vesting_CreateVestingContractEvent'): $1_vesting_AdminStore {
    $1_vesting_AdminStore(s->$vesting_contracts, s->$nonce, x)
}
function $IsValid'$1_vesting_AdminStore'(s: $1_vesting_AdminStore): bool {
    $IsValid'vec'address''(s->$vesting_contracts)
      && $IsValid'u64'(s->$nonce)
      && $IsValid'$1_event_EventHandle'$1_vesting_CreateVestingContractEvent''(s->$create_events)
}
function {:inline} $IsEqual'$1_vesting_AdminStore'(s1: $1_vesting_AdminStore, s2: $1_vesting_AdminStore): bool {
    $IsEqual'vec'address''(s1->$vesting_contracts, s2->$vesting_contracts)
    && $IsEqual'u64'(s1->$nonce, s2->$nonce)
    && $IsEqual'$1_event_EventHandle'$1_vesting_CreateVestingContractEvent''(s1->$create_events, s2->$create_events)}
var $1_vesting_AdminStore_$memory: $Memory $1_vesting_AdminStore;

// struct vesting::AdminWithdrawEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:241:5+137
datatype $1_vesting_AdminWithdrawEvent {
    $1_vesting_AdminWithdrawEvent($admin: int, $vesting_contract_address: int, $amount: int)
}
function {:inline} $Update'$1_vesting_AdminWithdrawEvent'_admin(s: $1_vesting_AdminWithdrawEvent, x: int): $1_vesting_AdminWithdrawEvent {
    $1_vesting_AdminWithdrawEvent(x, s->$vesting_contract_address, s->$amount)
}
function {:inline} $Update'$1_vesting_AdminWithdrawEvent'_vesting_contract_address(s: $1_vesting_AdminWithdrawEvent, x: int): $1_vesting_AdminWithdrawEvent {
    $1_vesting_AdminWithdrawEvent(s->$admin, x, s->$amount)
}
function {:inline} $Update'$1_vesting_AdminWithdrawEvent'_amount(s: $1_vesting_AdminWithdrawEvent, x: int): $1_vesting_AdminWithdrawEvent {
    $1_vesting_AdminWithdrawEvent(s->$admin, s->$vesting_contract_address, x)
}
function $IsValid'$1_vesting_AdminWithdrawEvent'(s: $1_vesting_AdminWithdrawEvent): bool {
    $IsValid'address'(s->$admin)
      && $IsValid'address'(s->$vesting_contract_address)
      && $IsValid'u64'(s->$amount)
}
function {:inline} $IsEqual'$1_vesting_AdminWithdrawEvent'(s1: $1_vesting_AdminWithdrawEvent, s2: $1_vesting_AdminWithdrawEvent): bool {
    s1 == s2
}

// struct vesting::CreateVestingContractEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:173:5+290
datatype $1_vesting_CreateVestingContractEvent {
    $1_vesting_CreateVestingContractEvent($operator: int, $voter: int, $grant_amount: int, $withdrawal_address: int, $vesting_contract_address: int, $staking_pool_address: int, $commission_percentage: int)
}
function {:inline} $Update'$1_vesting_CreateVestingContractEvent'_operator(s: $1_vesting_CreateVestingContractEvent, x: int): $1_vesting_CreateVestingContractEvent {
    $1_vesting_CreateVestingContractEvent(x, s->$voter, s->$grant_amount, s->$withdrawal_address, s->$vesting_contract_address, s->$staking_pool_address, s->$commission_percentage)
}
function {:inline} $Update'$1_vesting_CreateVestingContractEvent'_voter(s: $1_vesting_CreateVestingContractEvent, x: int): $1_vesting_CreateVestingContractEvent {
    $1_vesting_CreateVestingContractEvent(s->$operator, x, s->$grant_amount, s->$withdrawal_address, s->$vesting_contract_address, s->$staking_pool_address, s->$commission_percentage)
}
function {:inline} $Update'$1_vesting_CreateVestingContractEvent'_grant_amount(s: $1_vesting_CreateVestingContractEvent, x: int): $1_vesting_CreateVestingContractEvent {
    $1_vesting_CreateVestingContractEvent(s->$operator, s->$voter, x, s->$withdrawal_address, s->$vesting_contract_address, s->$staking_pool_address, s->$commission_percentage)
}
function {:inline} $Update'$1_vesting_CreateVestingContractEvent'_withdrawal_address(s: $1_vesting_CreateVestingContractEvent, x: int): $1_vesting_CreateVestingContractEvent {
    $1_vesting_CreateVestingContractEvent(s->$operator, s->$voter, s->$grant_amount, x, s->$vesting_contract_address, s->$staking_pool_address, s->$commission_percentage)
}
function {:inline} $Update'$1_vesting_CreateVestingContractEvent'_vesting_contract_address(s: $1_vesting_CreateVestingContractEvent, x: int): $1_vesting_CreateVestingContractEvent {
    $1_vesting_CreateVestingContractEvent(s->$operator, s->$voter, s->$grant_amount, s->$withdrawal_address, x, s->$staking_pool_address, s->$commission_percentage)
}
function {:inline} $Update'$1_vesting_CreateVestingContractEvent'_staking_pool_address(s: $1_vesting_CreateVestingContractEvent, x: int): $1_vesting_CreateVestingContractEvent {
    $1_vesting_CreateVestingContractEvent(s->$operator, s->$voter, s->$grant_amount, s->$withdrawal_address, s->$vesting_contract_address, x, s->$commission_percentage)
}
function {:inline} $Update'$1_vesting_CreateVestingContractEvent'_commission_percentage(s: $1_vesting_CreateVestingContractEvent, x: int): $1_vesting_CreateVestingContractEvent {
    $1_vesting_CreateVestingContractEvent(s->$operator, s->$voter, s->$grant_amount, s->$withdrawal_address, s->$vesting_contract_address, s->$staking_pool_address, x)
}
function $IsValid'$1_vesting_CreateVestingContractEvent'(s: $1_vesting_CreateVestingContractEvent): bool {
    $IsValid'address'(s->$operator)
      && $IsValid'address'(s->$voter)
      && $IsValid'u64'(s->$grant_amount)
      && $IsValid'address'(s->$withdrawal_address)
      && $IsValid'address'(s->$vesting_contract_address)
      && $IsValid'address'(s->$staking_pool_address)
      && $IsValid'u64'(s->$commission_percentage)
}
function {:inline} $IsEqual'$1_vesting_CreateVestingContractEvent'(s1: $1_vesting_CreateVestingContractEvent, s2: $1_vesting_CreateVestingContractEvent): bool {
    s1 == s2
}

// struct vesting::SetBeneficiaryEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:207:5+215
datatype $1_vesting_SetBeneficiaryEvent {
    $1_vesting_SetBeneficiaryEvent($admin: int, $vesting_contract_address: int, $shareholder: int, $old_beneficiary: int, $new_beneficiary: int)
}
function {:inline} $Update'$1_vesting_SetBeneficiaryEvent'_admin(s: $1_vesting_SetBeneficiaryEvent, x: int): $1_vesting_SetBeneficiaryEvent {
    $1_vesting_SetBeneficiaryEvent(x, s->$vesting_contract_address, s->$shareholder, s->$old_beneficiary, s->$new_beneficiary)
}
function {:inline} $Update'$1_vesting_SetBeneficiaryEvent'_vesting_contract_address(s: $1_vesting_SetBeneficiaryEvent, x: int): $1_vesting_SetBeneficiaryEvent {
    $1_vesting_SetBeneficiaryEvent(s->$admin, x, s->$shareholder, s->$old_beneficiary, s->$new_beneficiary)
}
function {:inline} $Update'$1_vesting_SetBeneficiaryEvent'_shareholder(s: $1_vesting_SetBeneficiaryEvent, x: int): $1_vesting_SetBeneficiaryEvent {
    $1_vesting_SetBeneficiaryEvent(s->$admin, s->$vesting_contract_address, x, s->$old_beneficiary, s->$new_beneficiary)
}
function {:inline} $Update'$1_vesting_SetBeneficiaryEvent'_old_beneficiary(s: $1_vesting_SetBeneficiaryEvent, x: int): $1_vesting_SetBeneficiaryEvent {
    $1_vesting_SetBeneficiaryEvent(s->$admin, s->$vesting_contract_address, s->$shareholder, x, s->$new_beneficiary)
}
function {:inline} $Update'$1_vesting_SetBeneficiaryEvent'_new_beneficiary(s: $1_vesting_SetBeneficiaryEvent, x: int): $1_vesting_SetBeneficiaryEvent {
    $1_vesting_SetBeneficiaryEvent(s->$admin, s->$vesting_contract_address, s->$shareholder, s->$old_beneficiary, x)
}
function $IsValid'$1_vesting_SetBeneficiaryEvent'(s: $1_vesting_SetBeneficiaryEvent): bool {
    $IsValid'address'(s->$admin)
      && $IsValid'address'(s->$vesting_contract_address)
      && $IsValid'address'(s->$shareholder)
      && $IsValid'address'(s->$old_beneficiary)
      && $IsValid'address'(s->$new_beneficiary)
}
function {:inline} $IsEqual'$1_vesting_SetBeneficiaryEvent'(s1: $1_vesting_SetBeneficiaryEvent, s2: $1_vesting_SetBeneficiaryEvent): bool {
    s1 == s2
}

// struct vesting::StakingInfo at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:123:5+384
datatype $1_vesting_StakingInfo {
    $1_vesting_StakingInfo($pool_address: int, $operator: int, $voter: int, $commission_percentage: int)
}
function {:inline} $Update'$1_vesting_StakingInfo'_pool_address(s: $1_vesting_StakingInfo, x: int): $1_vesting_StakingInfo {
    $1_vesting_StakingInfo(x, s->$operator, s->$voter, s->$commission_percentage)
}
function {:inline} $Update'$1_vesting_StakingInfo'_operator(s: $1_vesting_StakingInfo, x: int): $1_vesting_StakingInfo {
    $1_vesting_StakingInfo(s->$pool_address, x, s->$voter, s->$commission_percentage)
}
function {:inline} $Update'$1_vesting_StakingInfo'_voter(s: $1_vesting_StakingInfo, x: int): $1_vesting_StakingInfo {
    $1_vesting_StakingInfo(s->$pool_address, s->$operator, x, s->$commission_percentage)
}
function {:inline} $Update'$1_vesting_StakingInfo'_commission_percentage(s: $1_vesting_StakingInfo, x: int): $1_vesting_StakingInfo {
    $1_vesting_StakingInfo(s->$pool_address, s->$operator, s->$voter, x)
}
function $IsValid'$1_vesting_StakingInfo'(s: $1_vesting_StakingInfo): bool {
    $IsValid'address'(s->$pool_address)
      && $IsValid'address'(s->$operator)
      && $IsValid'address'(s->$voter)
      && $IsValid'u64'(s->$commission_percentage)
}
function {:inline} $IsEqual'$1_vesting_StakingInfo'(s1: $1_vesting_StakingInfo, s2: $1_vesting_StakingInfo): bool {
    s1 == s2
}

// struct vesting::TerminateEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:236:5+112
datatype $1_vesting_TerminateEvent {
    $1_vesting_TerminateEvent($admin: int, $vesting_contract_address: int)
}
function {:inline} $Update'$1_vesting_TerminateEvent'_admin(s: $1_vesting_TerminateEvent, x: int): $1_vesting_TerminateEvent {
    $1_vesting_TerminateEvent(x, s->$vesting_contract_address)
}
function {:inline} $Update'$1_vesting_TerminateEvent'_vesting_contract_address(s: $1_vesting_TerminateEvent, x: int): $1_vesting_TerminateEvent {
    $1_vesting_TerminateEvent(s->$admin, x)
}
function $IsValid'$1_vesting_TerminateEvent'(s: $1_vesting_TerminateEvent): bool {
    $IsValid'address'(s->$admin)
      && $IsValid'address'(s->$vesting_contract_address)
}
function {:inline} $IsEqual'$1_vesting_TerminateEvent'(s1: $1_vesting_TerminateEvent, s2: $1_vesting_TerminateEvent): bool {
    s1 == s2
}

// struct vesting::UnlockRewardsEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:215:5+176
datatype $1_vesting_UnlockRewardsEvent {
    $1_vesting_UnlockRewardsEvent($admin: int, $vesting_contract_address: int, $staking_pool_address: int, $amount: int)
}
function {:inline} $Update'$1_vesting_UnlockRewardsEvent'_admin(s: $1_vesting_UnlockRewardsEvent, x: int): $1_vesting_UnlockRewardsEvent {
    $1_vesting_UnlockRewardsEvent(x, s->$vesting_contract_address, s->$staking_pool_address, s->$amount)
}
function {:inline} $Update'$1_vesting_UnlockRewardsEvent'_vesting_contract_address(s: $1_vesting_UnlockRewardsEvent, x: int): $1_vesting_UnlockRewardsEvent {
    $1_vesting_UnlockRewardsEvent(s->$admin, x, s->$staking_pool_address, s->$amount)
}
function {:inline} $Update'$1_vesting_UnlockRewardsEvent'_staking_pool_address(s: $1_vesting_UnlockRewardsEvent, x: int): $1_vesting_UnlockRewardsEvent {
    $1_vesting_UnlockRewardsEvent(s->$admin, s->$vesting_contract_address, x, s->$amount)
}
function {:inline} $Update'$1_vesting_UnlockRewardsEvent'_amount(s: $1_vesting_UnlockRewardsEvent, x: int): $1_vesting_UnlockRewardsEvent {
    $1_vesting_UnlockRewardsEvent(s->$admin, s->$vesting_contract_address, s->$staking_pool_address, x)
}
function $IsValid'$1_vesting_UnlockRewardsEvent'(s: $1_vesting_UnlockRewardsEvent): bool {
    $IsValid'address'(s->$admin)
      && $IsValid'address'(s->$vesting_contract_address)
      && $IsValid'address'(s->$staking_pool_address)
      && $IsValid'u64'(s->$amount)
}
function {:inline} $IsEqual'$1_vesting_UnlockRewardsEvent'(s1: $1_vesting_UnlockRewardsEvent, s2: $1_vesting_UnlockRewardsEvent): bool {
    s1 == s2
}

// struct vesting::UpdateOperatorEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:183:5+254
datatype $1_vesting_UpdateOperatorEvent {
    $1_vesting_UpdateOperatorEvent($admin: int, $vesting_contract_address: int, $staking_pool_address: int, $old_operator: int, $new_operator: int, $commission_percentage: int)
}
function {:inline} $Update'$1_vesting_UpdateOperatorEvent'_admin(s: $1_vesting_UpdateOperatorEvent, x: int): $1_vesting_UpdateOperatorEvent {
    $1_vesting_UpdateOperatorEvent(x, s->$vesting_contract_address, s->$staking_pool_address, s->$old_operator, s->$new_operator, s->$commission_percentage)
}
function {:inline} $Update'$1_vesting_UpdateOperatorEvent'_vesting_contract_address(s: $1_vesting_UpdateOperatorEvent, x: int): $1_vesting_UpdateOperatorEvent {
    $1_vesting_UpdateOperatorEvent(s->$admin, x, s->$staking_pool_address, s->$old_operator, s->$new_operator, s->$commission_percentage)
}
function {:inline} $Update'$1_vesting_UpdateOperatorEvent'_staking_pool_address(s: $1_vesting_UpdateOperatorEvent, x: int): $1_vesting_UpdateOperatorEvent {
    $1_vesting_UpdateOperatorEvent(s->$admin, s->$vesting_contract_address, x, s->$old_operator, s->$new_operator, s->$commission_percentage)
}
function {:inline} $Update'$1_vesting_UpdateOperatorEvent'_old_operator(s: $1_vesting_UpdateOperatorEvent, x: int): $1_vesting_UpdateOperatorEvent {
    $1_vesting_UpdateOperatorEvent(s->$admin, s->$vesting_contract_address, s->$staking_pool_address, x, s->$new_operator, s->$commission_percentage)
}
function {:inline} $Update'$1_vesting_UpdateOperatorEvent'_new_operator(s: $1_vesting_UpdateOperatorEvent, x: int): $1_vesting_UpdateOperatorEvent {
    $1_vesting_UpdateOperatorEvent(s->$admin, s->$vesting_contract_address, s->$staking_pool_address, s->$old_operator, x, s->$commission_percentage)
}
function {:inline} $Update'$1_vesting_UpdateOperatorEvent'_commission_percentage(s: $1_vesting_UpdateOperatorEvent, x: int): $1_vesting_UpdateOperatorEvent {
    $1_vesting_UpdateOperatorEvent(s->$admin, s->$vesting_contract_address, s->$staking_pool_address, s->$old_operator, s->$new_operator, x)
}
function $IsValid'$1_vesting_UpdateOperatorEvent'(s: $1_vesting_UpdateOperatorEvent): bool {
    $IsValid'address'(s->$admin)
      && $IsValid'address'(s->$vesting_contract_address)
      && $IsValid'address'(s->$staking_pool_address)
      && $IsValid'address'(s->$old_operator)
      && $IsValid'address'(s->$new_operator)
      && $IsValid'u64'(s->$commission_percentage)
}
function {:inline} $IsEqual'$1_vesting_UpdateOperatorEvent'(s1: $1_vesting_UpdateOperatorEvent, s2: $1_vesting_UpdateOperatorEvent): bool {
    s1 == s2
}

// struct vesting::VestEvent at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:222:5+195
datatype $1_vesting_VestEvent {
    $1_vesting_VestEvent($admin: int, $vesting_contract_address: int, $staking_pool_address: int, $period_vested: int, $amount: int)
}
function {:inline} $Update'$1_vesting_VestEvent'_admin(s: $1_vesting_VestEvent, x: int): $1_vesting_VestEvent {
    $1_vesting_VestEvent(x, s->$vesting_contract_address, s->$staking_pool_address, s->$period_vested, s->$amount)
}
function {:inline} $Update'$1_vesting_VestEvent'_vesting_contract_address(s: $1_vesting_VestEvent, x: int): $1_vesting_VestEvent {
    $1_vesting_VestEvent(s->$admin, x, s->$staking_pool_address, s->$period_vested, s->$amount)
}
function {:inline} $Update'$1_vesting_VestEvent'_staking_pool_address(s: $1_vesting_VestEvent, x: int): $1_vesting_VestEvent {
    $1_vesting_VestEvent(s->$admin, s->$vesting_contract_address, x, s->$period_vested, s->$amount)
}
function {:inline} $Update'$1_vesting_VestEvent'_period_vested(s: $1_vesting_VestEvent, x: int): $1_vesting_VestEvent {
    $1_vesting_VestEvent(s->$admin, s->$vesting_contract_address, s->$staking_pool_address, x, s->$amount)
}
function {:inline} $Update'$1_vesting_VestEvent'_amount(s: $1_vesting_VestEvent, x: int): $1_vesting_VestEvent {
    $1_vesting_VestEvent(s->$admin, s->$vesting_contract_address, s->$staking_pool_address, s->$period_vested, x)
}
function $IsValid'$1_vesting_VestEvent'(s: $1_vesting_VestEvent): bool {
    $IsValid'address'(s->$admin)
      && $IsValid'address'(s->$vesting_contract_address)
      && $IsValid'address'(s->$staking_pool_address)
      && $IsValid'u64'(s->$period_vested)
      && $IsValid'u64'(s->$amount)
}
function {:inline} $IsEqual'$1_vesting_VestEvent'(s1: $1_vesting_VestEvent, s2: $1_vesting_VestEvent): bool {
    s1 == s2
}

// struct vesting::VestingContract at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:134:5+1189
datatype $1_vesting_VestingContract {
    $1_vesting_VestingContract($state: int, $admin: int, $grant_pool: $1_pool_u64_Pool, $beneficiaries: Table int (int), $vesting_schedule: $1_vesting_VestingSchedule, $withdrawal_address: int, $staking: $1_vesting_StakingInfo, $remaining_grant: int, $signer_cap: $1_account_SignerCapability, $update_operator_events: $1_event_EventHandle'$1_vesting_UpdateOperatorEvent', $update_voter_events: $1_event_EventHandle'$1_vesting_UpdateVoterEvent', $reset_lockup_events: $1_event_EventHandle'$1_vesting_ResetLockupEvent', $set_beneficiary_events: $1_event_EventHandle'$1_vesting_SetBeneficiaryEvent', $unlock_rewards_events: $1_event_EventHandle'$1_vesting_UnlockRewardsEvent', $vest_events: $1_event_EventHandle'$1_vesting_VestEvent', $distribute_events: $1_event_EventHandle'$1_vesting_DistributeEvent', $terminate_events: $1_event_EventHandle'$1_vesting_TerminateEvent', $admin_withdraw_events: $1_event_EventHandle'$1_vesting_AdminWithdrawEvent')
}
function {:inline} $Update'$1_vesting_VestingContract'_state(s: $1_vesting_VestingContract, x: int): $1_vesting_VestingContract {
    $1_vesting_VestingContract(x, s->$admin, s->$grant_pool, s->$beneficiaries, s->$vesting_schedule, s->$withdrawal_address, s->$staking, s->$remaining_grant, s->$signer_cap, s->$update_operator_events, s->$update_voter_events, s->$reset_lockup_events, s->$set_beneficiary_events, s->$unlock_rewards_events, s->$vest_events, s->$distribute_events, s->$terminate_events, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_admin(s: $1_vesting_VestingContract, x: int): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, x, s->$grant_pool, s->$beneficiaries, s->$vesting_schedule, s->$withdrawal_address, s->$staking, s->$remaining_grant, s->$signer_cap, s->$update_operator_events, s->$update_voter_events, s->$reset_lockup_events, s->$set_beneficiary_events, s->$unlock_rewards_events, s->$vest_events, s->$distribute_events, s->$terminate_events, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_grant_pool(s: $1_vesting_VestingContract, x: $1_pool_u64_Pool): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, s->$admin, x, s->$beneficiaries, s->$vesting_schedule, s->$withdrawal_address, s->$staking, s->$remaining_grant, s->$signer_cap, s->$update_operator_events, s->$update_voter_events, s->$reset_lockup_events, s->$set_beneficiary_events, s->$unlock_rewards_events, s->$vest_events, s->$distribute_events, s->$terminate_events, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_beneficiaries(s: $1_vesting_VestingContract, x: Table int (int)): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, s->$admin, s->$grant_pool, x, s->$vesting_schedule, s->$withdrawal_address, s->$staking, s->$remaining_grant, s->$signer_cap, s->$update_operator_events, s->$update_voter_events, s->$reset_lockup_events, s->$set_beneficiary_events, s->$unlock_rewards_events, s->$vest_events, s->$distribute_events, s->$terminate_events, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_vesting_schedule(s: $1_vesting_VestingContract, x: $1_vesting_VestingSchedule): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, s->$admin, s->$grant_pool, s->$beneficiaries, x, s->$withdrawal_address, s->$staking, s->$remaining_grant, s->$signer_cap, s->$update_operator_events, s->$update_voter_events, s->$reset_lockup_events, s->$set_beneficiary_events, s->$unlock_rewards_events, s->$vest_events, s->$distribute_events, s->$terminate_events, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_withdrawal_address(s: $1_vesting_VestingContract, x: int): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, s->$admin, s->$grant_pool, s->$beneficiaries, s->$vesting_schedule, x, s->$staking, s->$remaining_grant, s->$signer_cap, s->$update_operator_events, s->$update_voter_events, s->$reset_lockup_events, s->$set_beneficiary_events, s->$unlock_rewards_events, s->$vest_events, s->$distribute_events, s->$terminate_events, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_staking(s: $1_vesting_VestingContract, x: $1_vesting_StakingInfo): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, s->$admin, s->$grant_pool, s->$beneficiaries, s->$vesting_schedule, s->$withdrawal_address, x, s->$remaining_grant, s->$signer_cap, s->$update_operator_events, s->$update_voter_events, s->$reset_lockup_events, s->$set_beneficiary_events, s->$unlock_rewards_events, s->$vest_events, s->$distribute_events, s->$terminate_events, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_remaining_grant(s: $1_vesting_VestingContract, x: int): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, s->$admin, s->$grant_pool, s->$beneficiaries, s->$vesting_schedule, s->$withdrawal_address, s->$staking, x, s->$signer_cap, s->$update_operator_events, s->$update_voter_events, s->$reset_lockup_events, s->$set_beneficiary_events, s->$unlock_rewards_events, s->$vest_events, s->$distribute_events, s->$terminate_events, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_signer_cap(s: $1_vesting_VestingContract, x: $1_account_SignerCapability): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, s->$admin, s->$grant_pool, s->$beneficiaries, s->$vesting_schedule, s->$withdrawal_address, s->$staking, s->$remaining_grant, x, s->$update_operator_events, s->$update_voter_events, s->$reset_lockup_events, s->$set_beneficiary_events, s->$unlock_rewards_events, s->$vest_events, s->$distribute_events, s->$terminate_events, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_update_operator_events(s: $1_vesting_VestingContract, x: $1_event_EventHandle'$1_vesting_UpdateOperatorEvent'): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, s->$admin, s->$grant_pool, s->$beneficiaries, s->$vesting_schedule, s->$withdrawal_address, s->$staking, s->$remaining_grant, s->$signer_cap, x, s->$update_voter_events, s->$reset_lockup_events, s->$set_beneficiary_events, s->$unlock_rewards_events, s->$vest_events, s->$distribute_events, s->$terminate_events, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_update_voter_events(s: $1_vesting_VestingContract, x: $1_event_EventHandle'$1_vesting_UpdateVoterEvent'): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, s->$admin, s->$grant_pool, s->$beneficiaries, s->$vesting_schedule, s->$withdrawal_address, s->$staking, s->$remaining_grant, s->$signer_cap, s->$update_operator_events, x, s->$reset_lockup_events, s->$set_beneficiary_events, s->$unlock_rewards_events, s->$vest_events, s->$distribute_events, s->$terminate_events, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_reset_lockup_events(s: $1_vesting_VestingContract, x: $1_event_EventHandle'$1_vesting_ResetLockupEvent'): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, s->$admin, s->$grant_pool, s->$beneficiaries, s->$vesting_schedule, s->$withdrawal_address, s->$staking, s->$remaining_grant, s->$signer_cap, s->$update_operator_events, s->$update_voter_events, x, s->$set_beneficiary_events, s->$unlock_rewards_events, s->$vest_events, s->$distribute_events, s->$terminate_events, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_set_beneficiary_events(s: $1_vesting_VestingContract, x: $1_event_EventHandle'$1_vesting_SetBeneficiaryEvent'): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, s->$admin, s->$grant_pool, s->$beneficiaries, s->$vesting_schedule, s->$withdrawal_address, s->$staking, s->$remaining_grant, s->$signer_cap, s->$update_operator_events, s->$update_voter_events, s->$reset_lockup_events, x, s->$unlock_rewards_events, s->$vest_events, s->$distribute_events, s->$terminate_events, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_unlock_rewards_events(s: $1_vesting_VestingContract, x: $1_event_EventHandle'$1_vesting_UnlockRewardsEvent'): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, s->$admin, s->$grant_pool, s->$beneficiaries, s->$vesting_schedule, s->$withdrawal_address, s->$staking, s->$remaining_grant, s->$signer_cap, s->$update_operator_events, s->$update_voter_events, s->$reset_lockup_events, s->$set_beneficiary_events, x, s->$vest_events, s->$distribute_events, s->$terminate_events, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_vest_events(s: $1_vesting_VestingContract, x: $1_event_EventHandle'$1_vesting_VestEvent'): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, s->$admin, s->$grant_pool, s->$beneficiaries, s->$vesting_schedule, s->$withdrawal_address, s->$staking, s->$remaining_grant, s->$signer_cap, s->$update_operator_events, s->$update_voter_events, s->$reset_lockup_events, s->$set_beneficiary_events, s->$unlock_rewards_events, x, s->$distribute_events, s->$terminate_events, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_distribute_events(s: $1_vesting_VestingContract, x: $1_event_EventHandle'$1_vesting_DistributeEvent'): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, s->$admin, s->$grant_pool, s->$beneficiaries, s->$vesting_schedule, s->$withdrawal_address, s->$staking, s->$remaining_grant, s->$signer_cap, s->$update_operator_events, s->$update_voter_events, s->$reset_lockup_events, s->$set_beneficiary_events, s->$unlock_rewards_events, s->$vest_events, x, s->$terminate_events, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_terminate_events(s: $1_vesting_VestingContract, x: $1_event_EventHandle'$1_vesting_TerminateEvent'): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, s->$admin, s->$grant_pool, s->$beneficiaries, s->$vesting_schedule, s->$withdrawal_address, s->$staking, s->$remaining_grant, s->$signer_cap, s->$update_operator_events, s->$update_voter_events, s->$reset_lockup_events, s->$set_beneficiary_events, s->$unlock_rewards_events, s->$vest_events, s->$distribute_events, x, s->$admin_withdraw_events)
}
function {:inline} $Update'$1_vesting_VestingContract'_admin_withdraw_events(s: $1_vesting_VestingContract, x: $1_event_EventHandle'$1_vesting_AdminWithdrawEvent'): $1_vesting_VestingContract {
    $1_vesting_VestingContract(s->$state, s->$admin, s->$grant_pool, s->$beneficiaries, s->$vesting_schedule, s->$withdrawal_address, s->$staking, s->$remaining_grant, s->$signer_cap, s->$update_operator_events, s->$update_voter_events, s->$reset_lockup_events, s->$set_beneficiary_events, s->$unlock_rewards_events, s->$vest_events, s->$distribute_events, s->$terminate_events, x)
}
function $IsValid'$1_vesting_VestingContract'(s: $1_vesting_VestingContract): bool {
    $IsValid'u64'(s->$state)
      && $IsValid'address'(s->$admin)
      && $IsValid'$1_pool_u64_Pool'(s->$grant_pool)
      && $IsValid'$1_simple_map_SimpleMap'address_address''(s->$beneficiaries)
      && $IsValid'$1_vesting_VestingSchedule'(s->$vesting_schedule)
      && $IsValid'address'(s->$withdrawal_address)
      && $IsValid'$1_vesting_StakingInfo'(s->$staking)
      && $IsValid'u64'(s->$remaining_grant)
      && $IsValid'$1_account_SignerCapability'(s->$signer_cap)
      && $IsValid'$1_event_EventHandle'$1_vesting_UpdateOperatorEvent''(s->$update_operator_events)
      && $IsValid'$1_event_EventHandle'$1_vesting_UpdateVoterEvent''(s->$update_voter_events)
      && $IsValid'$1_event_EventHandle'$1_vesting_ResetLockupEvent''(s->$reset_lockup_events)
      && $IsValid'$1_event_EventHandle'$1_vesting_SetBeneficiaryEvent''(s->$set_beneficiary_events)
      && $IsValid'$1_event_EventHandle'$1_vesting_UnlockRewardsEvent''(s->$unlock_rewards_events)
      && $IsValid'$1_event_EventHandle'$1_vesting_VestEvent''(s->$vest_events)
      && $IsValid'$1_event_EventHandle'$1_vesting_DistributeEvent''(s->$distribute_events)
      && $IsValid'$1_event_EventHandle'$1_vesting_TerminateEvent''(s->$terminate_events)
      && $IsValid'$1_event_EventHandle'$1_vesting_AdminWithdrawEvent''(s->$admin_withdraw_events)
}
function {:inline} $IsEqual'$1_vesting_VestingContract'(s1: $1_vesting_VestingContract, s2: $1_vesting_VestingContract): bool {
    $IsEqual'u64'(s1->$state, s2->$state)
    && $IsEqual'address'(s1->$admin, s2->$admin)
    && $IsEqual'$1_pool_u64_Pool'(s1->$grant_pool, s2->$grant_pool)
    && $IsEqual'$1_simple_map_SimpleMap'address_address''(s1->$beneficiaries, s2->$beneficiaries)
    && $IsEqual'$1_vesting_VestingSchedule'(s1->$vesting_schedule, s2->$vesting_schedule)
    && $IsEqual'address'(s1->$withdrawal_address, s2->$withdrawal_address)
    && $IsEqual'$1_vesting_StakingInfo'(s1->$staking, s2->$staking)
    && $IsEqual'u64'(s1->$remaining_grant, s2->$remaining_grant)
    && $IsEqual'$1_account_SignerCapability'(s1->$signer_cap, s2->$signer_cap)
    && $IsEqual'$1_event_EventHandle'$1_vesting_UpdateOperatorEvent''(s1->$update_operator_events, s2->$update_operator_events)
    && $IsEqual'$1_event_EventHandle'$1_vesting_UpdateVoterEvent''(s1->$update_voter_events, s2->$update_voter_events)
    && $IsEqual'$1_event_EventHandle'$1_vesting_ResetLockupEvent''(s1->$reset_lockup_events, s2->$reset_lockup_events)
    && $IsEqual'$1_event_EventHandle'$1_vesting_SetBeneficiaryEvent''(s1->$set_beneficiary_events, s2->$set_beneficiary_events)
    && $IsEqual'$1_event_EventHandle'$1_vesting_UnlockRewardsEvent''(s1->$unlock_rewards_events, s2->$unlock_rewards_events)
    && $IsEqual'$1_event_EventHandle'$1_vesting_VestEvent''(s1->$vest_events, s2->$vest_events)
    && $IsEqual'$1_event_EventHandle'$1_vesting_DistributeEvent''(s1->$distribute_events, s2->$distribute_events)
    && $IsEqual'$1_event_EventHandle'$1_vesting_TerminateEvent''(s1->$terminate_events, s2->$terminate_events)
    && $IsEqual'$1_event_EventHandle'$1_vesting_AdminWithdrawEvent''(s1->$admin_withdraw_events, s2->$admin_withdraw_events)}
var $1_vesting_VestingContract_$memory: $Memory $1_vesting_VestingContract;

// struct vesting::VestingSchedule at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:106:5+1037
datatype $1_vesting_VestingSchedule {
    $1_vesting_VestingSchedule($schedule: Vec ($1_fixed_point32_FixedPoint32), $start_timestamp_secs: int, $period_duration: int, $last_vested_period: int)
}
function {:inline} $Update'$1_vesting_VestingSchedule'_schedule(s: $1_vesting_VestingSchedule, x: Vec ($1_fixed_point32_FixedPoint32)): $1_vesting_VestingSchedule {
    $1_vesting_VestingSchedule(x, s->$start_timestamp_secs, s->$period_duration, s->$last_vested_period)
}
function {:inline} $Update'$1_vesting_VestingSchedule'_start_timestamp_secs(s: $1_vesting_VestingSchedule, x: int): $1_vesting_VestingSchedule {
    $1_vesting_VestingSchedule(s->$schedule, x, s->$period_duration, s->$last_vested_period)
}
function {:inline} $Update'$1_vesting_VestingSchedule'_period_duration(s: $1_vesting_VestingSchedule, x: int): $1_vesting_VestingSchedule {
    $1_vesting_VestingSchedule(s->$schedule, s->$start_timestamp_secs, x, s->$last_vested_period)
}
function {:inline} $Update'$1_vesting_VestingSchedule'_last_vested_period(s: $1_vesting_VestingSchedule, x: int): $1_vesting_VestingSchedule {
    $1_vesting_VestingSchedule(s->$schedule, s->$start_timestamp_secs, s->$period_duration, x)
}
function $IsValid'$1_vesting_VestingSchedule'(s: $1_vesting_VestingSchedule): bool {
    $IsValid'vec'$1_fixed_point32_FixedPoint32''(s->$schedule)
      && $IsValid'u64'(s->$start_timestamp_secs)
      && $IsValid'u64'(s->$period_duration)
      && $IsValid'u64'(s->$last_vested_period)
}
function {:inline} $IsEqual'$1_vesting_VestingSchedule'(s1: $1_vesting_VestingSchedule, s2: $1_vesting_VestingSchedule): bool {
    $IsEqual'vec'$1_fixed_point32_FixedPoint32''(s1->$schedule, s2->$schedule)
    && $IsEqual'u64'(s1->$start_timestamp_secs, s2->$start_timestamp_secs)
    && $IsEqual'u64'(s1->$period_duration, s2->$period_duration)
    && $IsEqual'u64'(s1->$last_vested_period, s2->$last_vested_period)}

// fun vesting::operator [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:321:5+244
procedure {:inline 1} $1_vesting_operator(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: $1_vesting_VestingContract;
    var $t3: $1_vesting_StakingInfo;
    var $t4: int;
    var $t0: int;
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[vesting_contract_address]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:321:5+1
    assume {:print "$at(161,14901,14902)"} true;
    assume {:print "$track_local(59,14,0):", $t0} $t0 == $t0;

    // vesting::assert_vesting_contract_exists($t0) on_abort goto L2 with $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:322:9+56
    assume {:print "$at(161,15000,15056)"} true;
    call $1_vesting_assert_vesting_contract_exists($t0);
    if ($abort_flag) {
        assume {:print "$at(161,15000,15056)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(59,14):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := get_global<vesting::VestingContract>($t0) on_abort goto L2 with $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:323:9+13
    assume {:print "$at(161,15066,15079)"} true;
    if (!$ResourceExists($1_vesting_VestingContract_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t2 := $ResourceValue($1_vesting_VestingContract_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(161,15066,15079)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(59,14):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t3 := get_field<vesting::VestingContract>.staking($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:323:9+64
    $t3 := $t2->$staking;

    // $t4 := get_field<vesting::StakingInfo>.operator($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:323:9+73
    $t4 := $t3->$operator;

    // trace_return[0]($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:323:9+73
    assume {:print "$track_return(59,14,0):", $t4} $t4 == $t4;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:324:5+1
    assume {:print "$at(161,15144,15145)"} true;
L1:

    // return $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:324:5+1
    assume {:print "$at(161,15144,15145)"} true;
    $ret0 := $t4;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:324:5+1
L2:

    // abort($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:324:5+1
    assume {:print "$at(161,15144,15145)"} true;
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun vesting::update_voter [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:778:5+956
procedure {:inline 1} $1_vesting_update_voter(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: $signer;
    var $t4: $signer;
    var $t5: int;
    var $t6: $Mutation ($1_vesting_VestingContract);
    var $t7: $1_vesting_VestingContract;
    var $t8: int;
    var $t9: int;
    var $t10: $1_vesting_VestingContract;
    var $t11: $1_staking_contract_Store;
    var $t12: $1_staking_contract_StakingContract;
    var $t13: int;
    var $t14: Table int ($1_staking_contract_StakingContract);
    var $t15: $Mutation ($1_vesting_VestingContract);
    var $t16: int;
    var $t17: $1_vesting_VestingContract;
    var $t18: $1_vesting_VestingContract;
    var $t19: $signer;
    var $t20: $1_vesting_StakingInfo;
    var $t21: int;
    var $t22: $1_vesting_StakingInfo;
    var $t23: int;
    var $t24: int;
    var $t25: $1_staking_contract_Store;
    var $t26: $1_staking_contract_StakingContract;
    var $t27: int;
    var $t28: Table int ($1_staking_contract_StakingContract);
    var $t29: $Mutation ($1_vesting_StakingInfo);
    var $t30: $Mutation (int);
    var $t31: $Mutation ($1_event_EventHandle'$1_vesting_UpdateVoterEvent');
    var $t32: int;
    var $t33: $1_vesting_StakingInfo;
    var $t34: int;
    var $t35: $1_vesting_UpdateVoterEvent;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'$1_vesting_VestingContract': $1_vesting_VestingContract;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // assume Identical($t7, global<vesting::VestingContract>($t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:288:9+65
    assume {:print "$at(162,12591,12656)"} true;
    assume ($t7 == $ResourceValue($1_vesting_VestingContract_$memory, $t1));

    // assume Identical($t8, select vesting::StakingInfo.operator(select vesting::VestingContract.staking($t7))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:289:9+49
    assume {:print "$at(162,12665,12714)"} true;
    assume ($t8 == $t7->$staking->$operator);

    // assume Identical($t9, select account::SignerCapability.account(select vesting::VestingContract.signer_cap($t7))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:290:9+49
    assume {:print "$at(162,12723,12772)"} true;
    assume ($t9 == $t7->$signer_cap->$account);

    // assume Identical($t10, global<vesting::VestingContract>($t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:515:9+65
    assume {:print "$at(162,23072,23137)"} true;
    assume ($t10 == $ResourceValue($1_vesting_VestingContract_$memory, $t1));

    // assume Identical($t11, global<staking_contract::Store>($t9)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:310:9+34
    assume {:print "$at(144,13175,13209)"} true;
    assume ($t11 == $ResourceValue($1_staking_contract_Store_$memory, $t9));

    // assume Identical($t12, simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t11), $t8)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:311:9+79
    assume {:print "$at(144,13218,13297)"} true;
    assume ($t12 == $1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($t11->$staking_contracts, $t8));

    // assume Identical($t13, select staking_contract::StakingContract.pool_address($t12)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:312:9+49
    assume {:print "$at(144,13306,13355)"} true;
    assume ($t13 == $t12->$pool_address);

    // assume Identical($t14, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t9))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:302:9+64
    assume {:print "$at(144,12927,12991)"} true;
    assume ($t14 == $ResourceValue($1_staking_contract_Store_$memory, $t9)->$staking_contracts);

    // trace_local[admin]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:778:5+1
    assume {:print "$at(161,36628,36629)"} true;
    assume {:print "$track_local(59,34,0):", $t0} $t0 == $t0;

    // trace_local[contract_address]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:778:5+1
    assume {:print "$track_local(59,34,1):", $t1} $t1 == $t1;

    // trace_local[new_voter]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:778:5+1
    assume {:print "$track_local(59,34,2):", $t2} $t2 == $t2;

    // $t15 := borrow_global<vesting::VestingContract>($t1) on_abort goto L2 with $t16 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:783:32+17
    assume {:print "$at(161,36810,36827)"} true;
    if (!$ResourceExists($1_vesting_VestingContract_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t15 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_vesting_VestingContract_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(161,36810,36827)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(59,34):", $t16} $t16 == $t16;
        goto L2;
    }

    // trace_local[vesting_contract]($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:783:13+16
    $temp_0'$1_vesting_VestingContract' := $Dereference($t15);
    assume {:print "$track_local(59,34,6):", $temp_0'$1_vesting_VestingContract'} $temp_0'$1_vesting_VestingContract' == $temp_0'$1_vesting_VestingContract';

    // $t17 := read_ref($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:784:21+25
    assume {:print "$at(161,36884,36909)"} true;
    $t17 := $Dereference($t15);

    // vesting::verify_admin($t0, $t17) on_abort goto L2 with $t16 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:784:9+37
    call $1_vesting_verify_admin($t0, $t17);
    if ($abort_flag) {
        assume {:print "$at(161,36872,36909)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(59,34):", $t16} $t16 == $t16;
        goto L2;
    }

    // $t18 := read_ref($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:785:68+16
    assume {:print "$at(161,36978,36994)"} true;
    $t18 := $Dereference($t15);

    // $t19 := vesting::get_vesting_account_signer_internal($t18) on_abort goto L2 with $t16 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:785:32+53
    call $t19 := $1_vesting_get_vesting_account_signer_internal($t18);
    if ($abort_flag) {
        assume {:print "$at(161,36942,36995)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(59,34):", $t16} $t16 == $t16;
        goto L2;
    }

    // trace_local[contract_signer]($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:785:13+15
    assume {:print "$track_local(59,34,4):", $t19} $t19 == $t19;

    // $t20 := get_field<vesting::VestingContract>.staking($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:786:25+24
    assume {:print "$at(161,37021,37045)"} true;
    $t20 := $Dereference($t15)->$staking;

    // $t21 := get_field<vesting::StakingInfo>.voter($t20) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:786:25+30
    $t21 := $t20->$voter;

    // trace_local[old_voter]($t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:786:13+9
    assume {:print "$track_local(59,34,5):", $t21} $t21 == $t21;

    // $t22 := get_field<vesting::VestingContract>.staking($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:787:57+24
    assume {:print "$at(161,37109,37133)"} true;
    $t22 := $Dereference($t15)->$staking;

    // $t23 := get_field<vesting::StakingInfo>.operator($t22) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:787:57+33
    $t23 := $t22->$operator;

    // assume Identical($t24, signer::$address_of($t19)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:117:9+48
    assume {:print "$at(144,4862,4910)"} true;
    assume ($t24 == $1_signer_$address_of($t19));

    // assume Identical($t25, global<staking_contract::Store>($t24)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:310:9+34
    assume {:print "$at(144,13175,13209)"} true;
    assume ($t25 == $ResourceValue($1_staking_contract_Store_$memory, $t24));

    // assume Identical($t26, simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t25), $t23)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:311:9+79
    assume {:print "$at(144,13218,13297)"} true;
    assume ($t26 == $1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($t25->$staking_contracts, $t23));

    // assume Identical($t27, select staking_contract::StakingContract.pool_address($t26)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:312:9+49
    assume {:print "$at(144,13306,13355)"} true;
    assume ($t27 == $t26->$pool_address);

    // assume Identical($t28, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t24))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:302:9+64
    assume {:print "$at(144,12927,12991)"} true;
    assume ($t28 == $ResourceValue($1_staking_contract_Store_$memory, $t24)->$staking_contracts);

    // staking_contract::update_voter($t19, $t23, $t2) on_abort goto L2 with $t16 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:787:9+93
    assume {:print "$at(161,37061,37154)"} true;
    call $1_staking_contract_update_voter($t19, $t23, $t2);
    if ($abort_flag) {
        assume {:print "$at(161,37061,37154)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(59,34):", $t16} $t16 == $t16;
        goto L2;
    }

    // $t29 := borrow_field<vesting::VestingContract>.staking($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:788:9+24
    assume {:print "$at(161,37164,37188)"} true;
    $t29 := $ChildMutation($t15, 6, $Dereference($t15)->$staking);

    // $t30 := borrow_field<vesting::StakingInfo>.voter($t29) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:788:9+30
    $t30 := $ChildMutation($t29, 2, $Dereference($t29)->$voter);

    // write_ref($t30, $t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:788:9+42
    $t30 := $UpdateMutation($t30, $t2);

    // write_back[Reference($t29).voter (address)]($t30) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:788:9+42
    $t29 := $UpdateMutation($t29, $Update'$1_vesting_StakingInfo'_voter($Dereference($t29), $Dereference($t30)));

    // write_back[Reference($t15).staking (vesting::StakingInfo)]($t29) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:788:9+42
    $t15 := $UpdateMutation($t15, $Update'$1_vesting_VestingContract'_staking($Dereference($t15), $Dereference($t29)));

    // $t31 := borrow_field<vesting::VestingContract>.update_voter_events($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:791:13+41
    assume {:print "$at(161,37241,37282)"} true;
    $t31 := $ChildMutation($t15, 10, $Dereference($t15)->$update_voter_events);

    // $t32 := get_field<vesting::VestingContract>.admin($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:793:24+22
    assume {:print "$at(161,37338,37360)"} true;
    $t32 := $Dereference($t15)->$admin;

    // $t33 := get_field<vesting::VestingContract>.staking($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:795:39+24
    assume {:print "$at(161,37460,37484)"} true;
    $t33 := $Dereference($t15)->$staking;

    // $t34 := get_field<vesting::StakingInfo>.pool_address($t33) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:795:39+37
    $t34 := $t33->$pool_address;

    // $t35 := pack vesting::UpdateVoterEvent($t32, $t1, $t34, $t21, $t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:792:13+270
    assume {:print "$at(161,37296,37566)"} true;
    $t35 := $1_vesting_UpdateVoterEvent($t32, $t1, $t34, $t21, $t2);

    // opaque begin: event::emit_event<vesting::UpdateVoterEvent>($t31, $t35) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:790:9+360
    assume {:print "$at(161,37217,37577)"} true;

    // opaque end: event::emit_event<vesting::UpdateVoterEvent>($t31, $t35) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:790:9+360

    // write_back[Reference($t15).update_voter_events (event::EventHandle<vesting::UpdateVoterEvent>)]($t31) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:790:9+360
    $t15 := $UpdateMutation($t15, $Update'$1_vesting_VestingContract'_update_voter_events($Dereference($t15), $Dereference($t31)));

    // pack_ref_deep($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:790:9+360

    // write_back[vesting::VestingContract@]($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:790:9+360
    $1_vesting_VestingContract_$memory := $ResourceUpdate($1_vesting_VestingContract_$memory, $GlobalLocationAddress($t15),
        $Dereference($t15));

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:800:5+1
    assume {:print "$at(161,37583,37584)"} true;
L1:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:800:5+1
    assume {:print "$at(161,37583,37584)"} true;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:800:5+1
L2:

    // abort($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:800:5+1
    assume {:print "$at(161,37583,37584)"} true;
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun vesting::assert_vesting_contract_exists [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:956:5+176
procedure {:inline 1} $1_vesting_assert_vesting_contract_exists(_$t0: int) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t0: int;
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[contract_address]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:956:5+1
    assume {:print "$at(161,44703,44704)"} true;
    assume {:print "$track_local(59,3,0):", $t0} $t0 == $t0;

    // $t1 := exists<vesting::VestingContract>($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:957:17+6
    assume {:print "$at(161,44783,44789)"} true;
    $t1 := $ResourceExists($1_vesting_VestingContract_$memory, $t0);

    // if ($t1) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:957:9+97
    if ($t1) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:957:9+97
L1:

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:957:9+97
    assume {:print "$at(161,44775,44872)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:957:77+27
L0:

    // $t2 := 10 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:957:77+27
    assume {:print "$at(161,44843,44870)"} true;
    $t2 := 10;
    assume $IsValid'u64'($t2);

    // $t3 := error::not_found($t2) on_abort goto L4 with $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:957:60+45
    call $t3 := $1_error_not_found($t2);
    if ($abort_flag) {
        assume {:print "$at(161,44826,44871)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(59,3):", $t4} $t4 == $t4;
        goto L4;
    }

    // trace_abort($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:957:9+97
    assume {:print "$at(161,44775,44872)"} true;
    assume {:print "$track_abort(59,3):", $t3} $t3 == $t3;

    // $t4 := move($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:957:9+97
    $t4 := $t3;

    // goto L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:957:9+97
    goto L4;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:957:106+1
L2:

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:958:5+1
    assume {:print "$at(161,44878,44879)"} true;
L3:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:958:5+1
    assume {:print "$at(161,44878,44879)"} true;
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:958:5+1
L4:

    // abort($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:958:5+1
    assume {:print "$at(161,44878,44879)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun vesting::get_vesting_account_signer_internal [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:924:5+168
procedure {:inline 1} $1_vesting_get_vesting_account_signer_internal(_$t0: $1_vesting_VestingContract) returns ($ret0: $signer)
{
    // declare local variables
    var $t1: $1_account_SignerCapability;
    var $t2: int;
    var $t3: $signer;
    var $t4: int;
    var $t0: $1_vesting_VestingContract;
    var $temp_0'$1_vesting_VestingContract': $1_vesting_VestingContract;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[vesting_contract]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:924:5+1
    assume {:print "$at(161,43058,43059)"} true;
    assume {:print "$track_local(59,13,0):", $t0} $t0 == $t0;

    // $t1 := get_field<vesting::VestingContract>.signer_cap($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:925:48+28
    assume {:print "$at(161,43191,43219)"} true;
    $t1 := $t0->$signer_cap;

    // assume Identical($t2, select account::SignerCapability.account($t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/account.spec.move:481:9+30
    assume {:print "$at(82,23214,23244)"} true;
    assume ($t2 == $t1->$account);

    // $t3 := account::create_signer_with_capability($t1) on_abort goto L2 with $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:925:9+68
    assume {:print "$at(161,43152,43220)"} true;
    call $t3 := $1_account_create_signer_with_capability($t1);
    if ($abort_flag) {
        assume {:print "$at(161,43152,43220)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(59,13):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_return[0]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:925:9+68
    assume {:print "$track_return(59,13,0):", $t3} $t3 == $t3;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:926:5+1
    assume {:print "$at(161,43225,43226)"} true;
L1:

    // return $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:926:5+1
    assume {:print "$at(161,43225,43226)"} true;
    $ret0 := $t3;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:926:5+1
L2:

    // abort($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:926:5+1
    assume {:print "$at(161,43225,43226)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun vesting::operator_commission_percentage [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:302:5+275
procedure {:inline 1} $1_vesting_operator_commission_percentage(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: $1_vesting_VestingContract;
    var $t3: $1_vesting_StakingInfo;
    var $t4: int;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[vesting_contract_address]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:302:5+1
    assume {:print "$at(161,14085,14086)"} true;
    assume {:print "$track_local(59,15,0):", $t0} $t0 == $t0;

    // vesting::assert_vesting_contract_exists($t0) on_abort goto L2 with $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:303:9+56
    assume {:print "$at(161,14202,14258)"} true;
    call $1_vesting_assert_vesting_contract_exists($t0);
    if ($abort_flag) {
        assume {:print "$at(161,14202,14258)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(59,15):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := get_global<vesting::VestingContract>($t0) on_abort goto L2 with $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:304:9+13
    assume {:print "$at(161,14268,14281)"} true;
    if (!$ResourceExists($1_vesting_VestingContract_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t2 := $ResourceValue($1_vesting_VestingContract_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(161,14268,14281)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(59,15):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t3 := get_field<vesting::VestingContract>.staking($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:304:9+64
    $t3 := $t2->$staking;

    // $t4 := get_field<vesting::StakingInfo>.commission_percentage($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:304:9+86
    $t4 := $t3->$commission_percentage;

    // trace_return[0]($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:304:9+86
    assume {:print "$track_return(59,15,0):", $t4} $t4 == $t4;

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:305:5+1
    assume {:print "$at(161,14359,14360)"} true;
L1:

    // return $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:305:5+1
    assume {:print "$at(161,14359,14360)"} true;
    $ret0 := $t4;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:305:5+1
L2:

    // abort($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:305:5+1
    assume {:print "$at(161,14359,14360)"} true;
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun vesting::update_operator [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:727:5+1149
procedure {:inline 1} $1_vesting_update_operator(_$t0: $signer, _$t1: int, _$t2: int, _$t3: int) returns ()
{
    // declare local variables
    var $t4: $signer;
    var $t5: $signer;
    var $t6: int;
    var $t7: $Mutation ($1_vesting_VestingContract);
    var $t8: $1_vesting_VestingContract;
    var $t9: int;
    var $t10: int;
    var $t11: $1_staking_contract_Store;
    var $t12: Table int ($1_staking_contract_StakingContract);
    var $t13: $1_staking_contract_StakingContract;
    var $t14: $1_vesting_VestingContract;
    var $t15: Table int ($1_staking_contract_StakingContract);
    var $t16: int;
    var $t17: $1_stake_StakePool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: $1_stake_StakePool;
    var $t23: $1_stake_ValidatorSet;
    var $t24: bool;
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: $Mutation ($1_vesting_VestingContract);
    var $t29: int;
    var $t30: $1_vesting_VestingContract;
    var $t31: $1_vesting_VestingContract;
    var $t32: $signer;
    var $t33: $1_vesting_StakingInfo;
    var $t34: int;
    var $t35: int;
    var $t36: $1_staking_contract_Store;
    var $t37: Table int ($1_staking_contract_StakingContract);
    var $t38: Table int ($1_staking_contract_StakingContract);
    var $t39: $Mutation ($1_vesting_StakingInfo);
    var $t40: $Mutation (int);
    var $t41: $Mutation ($1_vesting_StakingInfo);
    var $t42: $Mutation (int);
    var $t43: $Mutation ($1_event_EventHandle'$1_vesting_UpdateOperatorEvent');
    var $t44: int;
    var $t45: $1_vesting_StakingInfo;
    var $t46: int;
    var $t47: $1_vesting_UpdateOperatorEvent;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $temp_0'$1_vesting_VestingContract': $1_vesting_VestingContract;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // assume Identical($t8, global<vesting::VestingContract>($t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:253:9+65
    assume {:print "$at(162,11342,11407)"} true;
    assume ($t8 == $ResourceValue($1_vesting_VestingContract_$memory, $t1));

    // assume Identical($t9, select account::SignerCapability.account(select vesting::VestingContract.signer_cap($t8))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:254:9+46
    assume {:print "$at(162,11416,11462)"} true;
    assume ($t9 == $t8->$signer_cap->$account);

    // assume Identical($t10, select vesting::StakingInfo.operator(select vesting::VestingContract.staking($t8))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:255:9+53
    assume {:print "$at(162,11471,11524)"} true;
    assume ($t10 == $t8->$staking->$operator);

    // assume Identical($t11, global<staking_contract::Store>($t9)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:257:9+49
    assume {:print "$at(162,11631,11680)"} true;
    assume ($t11 == $ResourceValue($1_staking_contract_Store_$memory, $t9));

    // assume Identical($t12, select staking_contract::Store.staking_contracts($t11)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:258:9+48
    assume {:print "$at(162,11689,11737)"} true;
    assume ($t12 == $t11->$staking_contracts);

    // assume Identical($t13, simple_map::spec_get<address, staking_contract::StakingContract>($t12, $t10)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:261:9+77
    assume {:print "$at(162,11829,11906)"} true;
    assume ($t13 == $1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($t12, $t10));

    // assume Identical($t14, global<vesting::VestingContract>($t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:515:9+65
    assume {:print "$at(162,23072,23137)"} true;
    assume ($t14 == $ResourceValue($1_vesting_VestingContract_$memory, $t1));

    // assume Identical($t15, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t9))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:302:9+64
    assume {:print "$at(144,12927,12991)"} true;
    assume ($t15 == $ResourceValue($1_staking_contract_Store_$memory, $t9)->$staking_contracts);

    // assume Identical($t16, select staking_contract::StakingContract.pool_address($t13)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:474:9+49
    assume {:print "$at(162,20898,20947)"} true;
    assume ($t16 == $t13->$pool_address);

    // assume Identical($t17, global<stake::StakePool>($t16)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:476:9+56
    assume {:print "$at(162,21015,21071)"} true;
    assume ($t17 == $ResourceValue($1_stake_StakePool_$memory, $t16));

    // assume Identical($t18, select coin::Coin.value(select stake::StakePool.inactive($t17))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:477:9+41
    assume {:print "$at(162,21080,21121)"} true;
    assume ($t18 == $t17->$inactive->$value);

    // assume Identical($t19, select coin::Coin.value(select stake::StakePool.pending_inactive($t17))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:478:9+57
    assume {:print "$at(162,21130,21187)"} true;
    assume ($t19 == $t17->$pending_inactive->$value);

    // assume Identical($t20, Add($t18, $t19)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:482:9+63
    assume {:print "$at(162,21299,21362)"} true;
    assume ($t20 == ($t18 + $t19));

    // assume Identical($t21, select stake::OwnerCapability.pool_address(select staking_contract::StakingContract.owner_cap($t13))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:483:9+61
    assume {:print "$at(162,21371,21432)"} true;
    assume ($t21 == $t13->$owner_cap->$pool_address);

    // assume Identical($t22, global<stake::StakePool>($t21)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:485:9+60
    assume {:print "$at(162,21502,21562)"} true;
    assume ($t22 == $ResourceValue($1_stake_StakePool_$memory, $t21));

    // assume Identical($t23, global<stake::ValidatorSet>(0x1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:487:9+66
    assume {:print "$at(162,21637,21703)"} true;
    assume ($t23 == $ResourceValue($1_stake_ValidatorSet_$memory, 1));

    // assume Identical($t24, And(And(Not(stake::spec_contains(select stake::ValidatorSet.pending_active($t23), $t21)), Not(stake::spec_contains(select stake::ValidatorSet.active_validators($t23), $t21))), Not(stake::spec_contains(select stake::ValidatorSet.pending_inactive($t23), $t21)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:488:9+260
    assume {:print "$at(162,21712,21972)"} true;
    assume ($t24 == ((!$1_stake_spec_contains($t23->$pending_active, $t21) && !$1_stake_spec_contains($t23->$active_validators, $t21)) && !$1_stake_spec_contains($t23->$pending_inactive, $t21)));

    // assume Identical($t25, select coin::Coin.value(select stake::StakePool.inactive($t22))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:491:9+45
    assume {:print "$at(162,21981,22026)"} true;
    assume ($t25 == $t22->$inactive->$value);

    // assume Identical($t26, select coin::Coin.value(select stake::StakePool.pending_inactive($t22))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:492:9+61
    assume {:print "$at(162,22035,22096)"} true;
    assume ($t26 == $t22->$pending_inactive->$value);

    // assume Identical($t27, Add($t25, $t26)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:493:9+53
    assume {:print "$at(162,22105,22158)"} true;
    assume ($t27 == ($t25 + $t26));

    // trace_local[admin]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:727:5+1
    assume {:print "$at(161,34297,34298)"} true;
    assume {:print "$track_local(59,32,0):", $t0} $t0 == $t0;

    // trace_local[contract_address]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:727:5+1
    assume {:print "$track_local(59,32,1):", $t1} $t1 == $t1;

    // trace_local[new_operator]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:727:5+1
    assume {:print "$track_local(59,32,2):", $t2} $t2 == $t2;

    // trace_local[commission_percentage]($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:727:5+1
    assume {:print "$track_local(59,32,3):", $t3} $t3 == $t3;

    // $t28 := borrow_global<vesting::VestingContract>($t1) on_abort goto L2 with $t29 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:733:32+17
    assume {:print "$at(161,34521,34538)"} true;
    if (!$ResourceExists($1_vesting_VestingContract_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t28 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_vesting_VestingContract_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(161,34521,34538)"} true;
        $t29 := $abort_code;
        assume {:print "$track_abort(59,32):", $t29} $t29 == $t29;
        goto L2;
    }

    // trace_local[vesting_contract]($t28) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:733:13+16
    $temp_0'$1_vesting_VestingContract' := $Dereference($t28);
    assume {:print "$track_local(59,32,7):", $temp_0'$1_vesting_VestingContract'} $temp_0'$1_vesting_VestingContract' == $temp_0'$1_vesting_VestingContract';

    // $t30 := read_ref($t28) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:734:21+25
    assume {:print "$at(161,34595,34620)"} true;
    $t30 := $Dereference($t28);

    // vesting::verify_admin($t0, $t30) on_abort goto L2 with $t29 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:734:9+37
    call $1_vesting_verify_admin($t0, $t30);
    if ($abort_flag) {
        assume {:print "$at(161,34583,34620)"} true;
        $t29 := $abort_code;
        assume {:print "$track_abort(59,32):", $t29} $t29 == $t29;
        goto L2;
    }

    // $t31 := read_ref($t28) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:735:68+16
    assume {:print "$at(161,34689,34705)"} true;
    $t31 := $Dereference($t28);

    // $t32 := vesting::get_vesting_account_signer_internal($t31) on_abort goto L2 with $t29 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:735:32+53
    call $t32 := $1_vesting_get_vesting_account_signer_internal($t31);
    if ($abort_flag) {
        assume {:print "$at(161,34653,34706)"} true;
        $t29 := $abort_code;
        assume {:print "$track_abort(59,32):", $t29} $t29 == $t29;
        goto L2;
    }

    // trace_local[contract_signer]($t32) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:735:13+15
    assume {:print "$track_local(59,32,5):", $t32} $t32 == $t32;

    // $t33 := get_field<vesting::VestingContract>.staking($t28) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:736:28+24
    assume {:print "$at(161,34735,34759)"} true;
    $t33 := $Dereference($t28)->$staking;

    // $t34 := get_field<vesting::StakingInfo>.operator($t33) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:736:28+33
    $t34 := $t33->$operator;

    // trace_local[old_operator]($t34) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:736:13+12
    assume {:print "$track_local(59,32,6):", $t34} $t34 == $t34;

    // assume Identical($t35, signer::$address_of($t32)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:188:9+48
    assume {:print "$at(144,7881,7929)"} true;
    assume ($t35 == $1_signer_$address_of($t32));

    // assume Identical($t36, global<staking_contract::Store>($t35)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:190:9+42
    assume {:print "$at(144,8026,8068)"} true;
    assume ($t36 == $ResourceValue($1_staking_contract_Store_$memory, $t35));

    // assume Identical($t37, select staking_contract::Store.staking_contracts($t36)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:191:9+48
    assume {:print "$at(144,8077,8125)"} true;
    assume ($t37 == $t36->$staking_contracts);

    // assume Identical($t38, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t35))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:302:9+64
    assume {:print "$at(144,12927,12991)"} true;
    assume ($t38 == $ResourceValue($1_staking_contract_Store_$memory, $t35)->$staking_contracts);

    // staking_contract::switch_operator($t32, $t34, $t2, $t3) on_abort goto L2 with $t29 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:737:9+101
    assume {:print "$at(161,34778,34879)"} true;
    call $1_staking_contract_switch_operator($t32, $t34, $t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(161,34778,34879)"} true;
        $t29 := $abort_code;
        assume {:print "$track_abort(59,32):", $t29} $t29 == $t29;
        goto L2;
    }

    // $t39 := borrow_field<vesting::VestingContract>.staking($t28) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:738:9+24
    assume {:print "$at(161,34889,34913)"} true;
    $t39 := $ChildMutation($t28, 6, $Dereference($t28)->$staking);

    // $t40 := borrow_field<vesting::StakingInfo>.operator($t39) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:738:9+33
    $t40 := $ChildMutation($t39, 1, $Dereference($t39)->$operator);

    // write_ref($t40, $t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:738:9+48
    $t40 := $UpdateMutation($t40, $t2);

    // write_back[Reference($t39).operator (address)]($t40) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:738:9+48
    $t39 := $UpdateMutation($t39, $Update'$1_vesting_StakingInfo'_operator($Dereference($t39), $Dereference($t40)));

    // write_back[Reference($t28).staking (vesting::StakingInfo)]($t39) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:738:9+48
    $t28 := $UpdateMutation($t28, $Update'$1_vesting_VestingContract'_staking($Dereference($t28), $Dereference($t39)));

    // $t41 := borrow_field<vesting::VestingContract>.staking($t28) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:739:9+24
    assume {:print "$at(161,34947,34971)"} true;
    $t41 := $ChildMutation($t28, 6, $Dereference($t28)->$staking);

    // $t42 := borrow_field<vesting::StakingInfo>.commission_percentage($t41) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:739:9+46
    $t42 := $ChildMutation($t41, 3, $Dereference($t41)->$commission_percentage);

    // write_ref($t42, $t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:739:9+70
    $t42 := $UpdateMutation($t42, $t3);

    // write_back[Reference($t41).commission_percentage (u64)]($t42) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:739:9+70
    $t41 := $UpdateMutation($t41, $Update'$1_vesting_StakingInfo'_commission_percentage($Dereference($t41), $Dereference($t42)));

    // write_back[Reference($t28).staking (vesting::StakingInfo)]($t41) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:739:9+70
    $t28 := $UpdateMutation($t28, $Update'$1_vesting_VestingContract'_staking($Dereference($t28), $Dereference($t41)));

    // $t43 := borrow_field<vesting::VestingContract>.update_operator_events($t28) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:742:13+44
    assume {:print "$at(161,35052,35096)"} true;
    $t43 := $ChildMutation($t28, 9, $Dereference($t28)->$update_operator_events);

    // $t44 := get_field<vesting::VestingContract>.admin($t28) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:744:24+22
    assume {:print "$at(161,35155,35177)"} true;
    $t44 := $Dereference($t28)->$admin;

    // $t45 := get_field<vesting::VestingContract>.staking($t28) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:746:39+24
    assume {:print "$at(161,35277,35301)"} true;
    $t45 := $Dereference($t28)->$staking;

    // $t46 := get_field<vesting::StakingInfo>.pool_address($t45) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:746:39+37
    $t46 := $t45->$pool_address;

    // $t47 := pack vesting::UpdateOperatorEvent($t44, $t1, $t46, $t34, $t2, $t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:743:13+318
    assume {:print "$at(161,35110,35428)"} true;
    $t47 := $1_vesting_UpdateOperatorEvent($t44, $t1, $t46, $t34, $t2, $t3);

    // opaque begin: event::emit_event<vesting::UpdateOperatorEvent>($t43, $t47) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:741:9+411
    assume {:print "$at(161,35028,35439)"} true;

    // opaque end: event::emit_event<vesting::UpdateOperatorEvent>($t43, $t47) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:741:9+411

    // write_back[Reference($t28).update_operator_events (event::EventHandle<vesting::UpdateOperatorEvent>)]($t43) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:741:9+411
    $t28 := $UpdateMutation($t28, $Update'$1_vesting_VestingContract'_update_operator_events($Dereference($t28), $Dereference($t43)));

    // pack_ref_deep($t28) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:741:9+411

    // write_back[vesting::VestingContract@]($t28) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:741:9+411
    $1_vesting_VestingContract_$memory := $ResourceUpdate($1_vesting_VestingContract_$memory, $GlobalLocationAddress($t28),
        $Dereference($t28));

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:752:5+1
    assume {:print "$at(161,35445,35446)"} true;
L1:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:752:5+1
    assume {:print "$at(161,35445,35446)"} true;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:752:5+1
L2:

    // abort($t29) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:752:5+1
    assume {:print "$at(161,35445,35446)"} true;
    $abort_code := $t29;
    $abort_flag := true;
    return;

}

// fun vesting::verify_admin [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:952:5+182
procedure {:inline 1} $1_vesting_verify_admin(_$t0: $signer, _$t1: $1_vesting_VestingContract) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t0: $signer;
    var $t1: $1_vesting_VestingContract;
    var $temp_0'$1_vesting_VestingContract': $1_vesting_VestingContract;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[admin]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:952:5+1
    assume {:print "$at(161,44515,44516)"} true;
    assume {:print "$track_local(59,35,0):", $t0} $t0 == $t0;

    // trace_local[vesting_contract]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:952:5+1
    assume {:print "$track_local(59,35,1):", $t1} $t1 == $t1;

    // $t2 := signer::address_of($t0) on_abort goto L4 with $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:953:17+25
    assume {:print "$at(161,44602,44627)"} true;
    call $t2 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(161,44602,44627)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(59,35):", $t3} $t3 == $t3;
        goto L4;
    }

    // $t4 := get_field<vesting::VestingContract>.admin($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:953:46+22
    $t4 := $t1->$admin;

    // $t5 := ==($t2, $t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:953:43+2
    $t5 := $IsEqual'address'($t2, $t4);

    // if ($t5) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:953:9+96
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:953:9+96
L1:

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:953:9+96
    assume {:print "$at(161,44594,44690)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:953:93+10
L0:

    // $t6 := 7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:953:93+10
    assume {:print "$at(161,44678,44688)"} true;
    $t6 := 7;
    assume $IsValid'u64'($t6);

    // $t7 := error::unauthenticated($t6) on_abort goto L4 with $t3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:953:70+34
    call $t7 := $1_error_unauthenticated($t6);
    if ($abort_flag) {
        assume {:print "$at(161,44655,44689)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(59,35):", $t3} $t3 == $t3;
        goto L4;
    }

    // trace_abort($t7) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:953:9+96
    assume {:print "$at(161,44594,44690)"} true;
    assume {:print "$track_abort(59,35):", $t7} $t7 == $t7;

    // $t3 := move($t7) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:953:9+96
    $t3 := $t7;

    // goto L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:953:9+96
    goto L4;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:953:105+1
L2:

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:954:5+1
    assume {:print "$at(161,44696,44697)"} true;
L3:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:954:5+1
    assume {:print "$at(161,44696,44697)"} true;
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:954:5+1
L4:

    // abort($t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:954:5+1
    assume {:print "$at(161,44696,44697)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun vesting::vesting_contracts [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:309:5+258
procedure {:inline 1} $1_vesting_vesting_contracts(_$t0: int) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t1: Vec (int);
    var $t2: bool;
    var $t3: bool;
    var $t4: int;
    var $t5: $1_vesting_AdminStore;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'vec'address'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[admin]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:309:5+1
    assume {:print "$at(161,14451,14452)"} true;
    assume {:print "$track_local(59,38,0):", $t0} $t0 == $t0;

    // $t2 := exists<vesting::AdminStore>($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:310:14+6
    assume {:print "$at(161,14548,14554)"} true;
    $t2 := $ResourceExists($1_vesting_AdminStore_$memory, $t0);

    // $t3 := !($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:310:13+1
    call $t3 := $Not($t2);

    // if ($t3) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:310:9+160
    if ($t3) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:311:13+24
    assume {:print "$at(161,14589,14613)"} true;
L1:

    // $t1 := vector::empty<address>() on_abort goto L4 with $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:311:13+24
    assume {:print "$at(161,14589,14613)"} true;
    call $t1 := $1_vector_empty'address'();
    if ($abort_flag) {
        assume {:print "$at(161,14589,14613)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(59,38):", $t4} $t4 == $t4;
        goto L4;
    }

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:310:9+160
    assume {:print "$at(161,14543,14703)"} true;
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:313:39+5
    assume {:print "$at(161,14669,14674)"} true;
L0:

    // $t5 := get_global<vesting::AdminStore>($t0) on_abort goto L4 with $t4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:313:13+13
    assume {:print "$at(161,14643,14656)"} true;
    if (!$ResourceExists($1_vesting_AdminStore_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t5 := $ResourceValue($1_vesting_AdminStore_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(161,14643,14656)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(59,38):", $t4} $t4 == $t4;
        goto L4;
    }

    // $t1 := get_field<vesting::AdminStore>.vesting_contracts($t5) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:313:13+50
    $t1 := $t5->$vesting_contracts;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:310:9+160
    assume {:print "$at(161,14543,14703)"} true;
L2:

    // trace_return[0]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:310:9+160
    assume {:print "$at(161,14543,14703)"} true;
    assume {:print "$track_return(59,38,0):", $t1} $t1 == $t1;

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:315:5+1
    assume {:print "$at(161,14708,14709)"} true;
L3:

    // return $t1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:315:5+1
    assume {:print "$at(161,14708,14709)"} true;
    $ret0 := $t1;
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:315:5+1
L4:

    // abort($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.move:315:5+1
    assume {:print "$at(161,14708,14709)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// recursive spec fun at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:37:10+395
function  $1_staking_proxy_find_vesting_contract($1_vesting_VestingContract_$memory: $Memory $1_vesting_VestingContract, vesting_contracts: Vec (int), old_operator: int, count: int): int {
    (var operator := $ResourceValue($1_vesting_VestingContract_$memory, ReadVec(vesting_contracts, count))->$staking->$operator; (if ($IsEqual'address'(operator, old_operator)) then (ReadVec(vesting_contracts, count)) else ($1_staking_proxy_find_vesting_contract($1_vesting_VestingContract_$memory, vesting_contracts, old_operator, (count + 1)))))
}

// fun staking_proxy::set_operator [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+301
procedure {:timeLimit 40} $1_staking_proxy_set_operator$verify(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: int;
    var $t4: $1_stake_OwnerCapability;
    var $t5: int;
    var $t6: int;
    var $t7: Vec (int);
    var $t8: int;
    var $t9: int;
    var $t10: $1_staking_contract_Store;
    var $t11: bool;
    var $t12: int;
    var $t13: $1_stake_OwnerCapability;
    var $t14: int;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $1_stake_StakePool_$memory#137: $Memory $1_stake_StakePool;
    var $1_stake_OwnerCapability_$memory#138: $Memory $1_stake_OwnerCapability;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume {:print "$at(2,197,198)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume $IsValid'address'($t2);

    // assume forall $rsc: coin::CoinInfo<aptos_coin::AptosCoin>: ResourceDomain<coin::CoinInfo<aptos_coin::AptosCoin>>(): And(WellFormed($rsc), And(Le(Len<optional_aggregator::OptionalAggregator>(select option::Option.vec(select coin::CoinInfo.supply($rsc))), 1), forall $elem: optional_aggregator::OptionalAggregator: select option::Option.vec(select coin::CoinInfo.supply($rsc)): And(And(And(And(And(Iff(option::$is_some<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)), option::$is_none<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem))), Iff(option::$is_some<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)), option::$is_none<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)))), Implies(option::$is_some<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)), Le(select optional_aggregator::Integer.value(option::$borrow<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem))), select optional_aggregator::Integer.limit(option::$borrow<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)))))), Implies(option::$is_some<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)), Le(aggregator::spec_aggregator_get_val(option::$borrow<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem))), aggregator::spec_get_limit(option::$borrow<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)))))), Le(Len<aggregator::Aggregator>(select option::Option.vec(select optional_aggregator::OptionalAggregator.aggregator($elem))), 1)), Le(Len<optional_aggregator::Integer>(select option::Option.vec(select optional_aggregator::OptionalAggregator.integer($elem))), 1)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    (($IsValid'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''($rsc) && ((LenVec($rsc->$supply->$vec) <= 1) && (var $range_1 := $rsc->$supply->$vec; (forall $i_2: int :: InRangeVec($range_1, $i_2) ==> (var $elem := ReadVec($range_1, $i_2);
    ((((((($1_option_$is_some'$1_aggregator_Aggregator'($elem->$aggregator) <==> $1_option_$is_none'$1_optional_aggregator_Integer'($elem->$integer)) && ($1_option_$is_some'$1_optional_aggregator_Integer'($elem->$integer) <==> $1_option_$is_none'$1_aggregator_Aggregator'($elem->$aggregator))) && ($1_option_$is_some'$1_optional_aggregator_Integer'($elem->$integer) ==> ($1_option_$borrow'$1_optional_aggregator_Integer'($elem->$integer)->$value <= $1_option_$borrow'$1_optional_aggregator_Integer'($elem->$integer)->$limit))) && ($1_option_$is_some'$1_aggregator_Aggregator'($elem->$aggregator) ==> ($1_aggregator_spec_aggregator_get_val($1_option_$borrow'$1_aggregator_Aggregator'($elem->$aggregator)) <= $1_aggregator_spec_get_limit($1_option_$borrow'$1_aggregator_Aggregator'($elem->$aggregator))))) && (LenVec($elem->$aggregator->$vec) <= 1)) && (LenVec($elem->$integer->$vec) <= 1)))))))))));

    // assume forall $rsc: coin::CoinStore<aptos_coin::AptosCoin>: ResourceDomain<coin::CoinStore<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''($rsc))));

    // assume forall $rsc: coin::Ghost$supply<aptos_coin::AptosCoin>: ResourceDomain<coin::Ghost$supply<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''($rsc))));

    // assume exists<coin::Ghost$supply<aptos_coin::AptosCoin>>(0x0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume $ResourceExists($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, 0);

    // assume forall $rsc: coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>: ResourceDomain<coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''($rsc))));

    // assume exists<coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>>(0x0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume $ResourceExists($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, 0);

    // assume forall $rsc: chain_status::GenesisEndMarker: ResourceDomain<chain_status::GenesisEndMarker>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0)}(var $rsc := $ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0);
    ($IsValid'$1_chain_status_GenesisEndMarker'($rsc))));

    // assume forall $rsc: timestamp::CurrentTimeMicroseconds: ResourceDomain<timestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_timestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: stake::OwnerCapability: ResourceDomain<stake::OwnerCapability>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_OwnerCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_OwnerCapability_$memory, $a_0);
    ($IsValid'$1_stake_OwnerCapability'($rsc))));

    // assume forall $rsc: stake::StakePool: ResourceDomain<stake::StakePool>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_StakePool_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_StakePool_$memory, $a_0);
    ($IsValid'$1_stake_StakePool'($rsc))));

    // assume forall $rsc: stake::ValidatorConfig: ResourceDomain<stake::ValidatorConfig>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorConfig_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorConfig'($rsc))));

    // assume forall $rsc: stake::ValidatorPerformance: ResourceDomain<stake::ValidatorPerformance>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorPerformance'($rsc))));

    // assume forall $rsc: stake::ValidatorSet: ResourceDomain<stake::ValidatorSet>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorSet_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorSet_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorSet'($rsc))));

    // assume forall $rsc: reconfiguration::Configuration: ResourceDomain<reconfiguration::Configuration>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_Configuration_$memory, $a_0);
    ($IsValid'$1_reconfiguration_Configuration'($rsc))));

    // assume forall $rsc: staking_contract::Store: ResourceDomain<staking_contract::Store>(): And(WellFormed($rsc), forall $key: address: select staking_contract::Store.staking_contracts($rsc): And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), i), Index(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_staking_contract_Store_$memory, $a_0)}(var $rsc := $ResourceValue($1_staking_contract_Store_$memory, $a_0);
    (($IsValid'$1_staking_contract_Store'($rsc) && (var $range_1 := $rsc->$staking_contracts; (forall $key: int :: ContainsTable($range_1, $EncodeKey'address'($key)) ==> (((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shares, addr), $1_vector_spec_contains'address'($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, addr)))) && (var $range_2 := $Range(0, LenVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders)); (var $range_3 := $Range(0, LenVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders)); (forall $i_4: int, $i_5: int :: $InRange($range_2, $i_4) ==> $InRange($range_3, $i_5) ==> (var i := $i_4;
    (var j := $i_5;
    (($IsEqual'address'(ReadVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, i), ReadVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, j)) ==> $IsEqual'num'(i, j))))))))))))))));

    // assume forall $rsc: vesting::AdminStore: ResourceDomain<vesting::AdminStore>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_AdminStore_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_AdminStore_$memory, $a_0);
    ($IsValid'$1_vesting_AdminStore'($rsc))));

    // assume forall $rsc: vesting::VestingContract: ResourceDomain<vesting::VestingContract>(): And(WellFormed($rsc), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($rsc)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_VestingContract_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_VestingContract_$memory, $a_0);
    (($IsValid'$1_vesting_VestingContract'($rsc) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($rsc->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($rsc->$grant_pool->$shareholders, addr)))) && (var $range_1 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (var $range_2 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'(ReadVec($rsc->$grant_pool->$shareholders, i), ReadVec($rsc->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j)))))))))))));

    // assume Implies(chain_status::$is_operating(), exists<timestamp::CurrentTimeMicroseconds>(0x1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+301
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.spec.move:4:9+93
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, 1));

    // assume Implies(exists<stake::ValidatorSet>(0x1), stake::validator_set_is_valid()) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+301
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:8:9+92
    assume ($ResourceExists($1_stake_ValidatorSet_$memory, 1) ==> $1_stake_validator_set_is_valid($1_stake_StakePool_$memory, $1_stake_ValidatorConfig_$memory, $1_stake_ValidatorPerformance_$memory, $1_stake_ValidatorSet_$memory));

    // assume Implies(chain_status::$is_operating(), exists<stake::ValidatorSet>(0x1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+301
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:12:9+96
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_stake_ValidatorSet_$memory, 1));

    // assume Implies(chain_status::$is_operating(), Ge(timestamp::spec_now_microseconds(), reconfiguration::$last_reconfiguration_time())) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+301
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.spec.move:8:9+137
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) >= $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory)));

    // assume Identical($t3, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:72:9+46
    assume {:print "$at(3,3192,3238)"} true;
    assume ($t3 == $1_signer_$address_of($t0));

    // assume Identical($t4, global<stake::OwnerCapability>($t3)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:73:9+73
    assume {:print "$at(3,3247,3320)"} true;
    assume ($t4 == $ResourceValue($1_stake_OwnerCapability_$memory, $t3));

    // assume Identical($t5, select stake::OwnerCapability.pool_address($t4)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:74:9+46
    assume {:print "$at(3,3329,3375)"} true;
    assume ($t5 == $t4->$pool_address);

    // @138 := save_mem(stake::OwnerCapability) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume {:print "$at(2,197,198)"} true;
    $1_stake_OwnerCapability_$memory#138 := $1_stake_OwnerCapability_$memory;

    // @137 := save_mem(stake::StakePool) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    $1_stake_StakePool_$memory#137 := $1_stake_StakePool_$memory;

    // trace_local[owner]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume {:print "$track_local(66,0,0):", $t0} $t0 == $t0;

    // trace_local[old_operator]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume {:print "$track_local(66,0,1):", $t1} $t1 == $t1;

    // trace_local[new_operator]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume {:print "$track_local(66,0,2):", $t2} $t2 == $t2;

    // assume Identical($t6, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:26:9+46
    assume {:print "$at(3,1031,1077)"} true;
    assume ($t6 == $1_signer_$address_of($t0));

    // assume Identical($t7, select vesting::AdminStore.vesting_contracts(global<vesting::AdminStore>($t6))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:27:9+85
    assume {:print "$at(3,1086,1171)"} true;
    assume ($t7 == $ResourceValue($1_vesting_AdminStore_$memory, $t6)->$vesting_contracts);

    // staking_proxy::set_vesting_contract_operator($t0, $t1, $t2) on_abort goto L2 with $t8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:10:9+64
    assume {:print "$at(2,299,363)"} true;
    call $1_staking_proxy_set_vesting_contract_operator($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,299,363)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(66,0):", $t8} $t8 == $t8;
        goto L2;
    }

    // assume Identical($t9, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:52:9+46
    assume {:print "$at(3,2402,2448)"} true;
    assume ($t9 == $1_signer_$address_of($t0));

    // assume Identical($t10, global<staking_contract::Store>($t9)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:53:9+48
    assume {:print "$at(3,2457,2505)"} true;
    assume ($t10 == $ResourceValue($1_staking_contract_Store_$memory, $t9));

    // assume Identical($t11, And(exists<staking_contract::Store>($t9), simple_map::spec_contains_key<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t10), $t1))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:54:9+131
    assume {:print "$at(3,2514,2645)"} true;
    assume ($t11 == ($ResourceExists($1_staking_contract_Store_$memory, $t9) && $1_simple_map_spec_contains_key'address_$1_staking_contract_StakingContract'($t10->$staking_contracts, $t1)));

    // staking_proxy::set_staking_contract_operator($t0, $t1, $t2) on_abort goto L2 with $t8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:11:9+64
    assume {:print "$at(2,373,437)"} true;
    call $1_staking_proxy_set_staking_contract_operator($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,373,437)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(66,0):", $t8} $t8 == $t8;
        goto L2;
    }

    // assume Identical($t12, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:72:9+46
    assume {:print "$at(3,3192,3238)"} true;
    assume ($t12 == $1_signer_$address_of($t0));

    // assume Identical($t13, global<stake::OwnerCapability>($t12)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:73:9+73
    assume {:print "$at(3,3247,3320)"} true;
    assume ($t13 == $ResourceValue($1_stake_OwnerCapability_$memory, $t12));

    // assume Identical($t14, select stake::OwnerCapability.pool_address($t13)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:74:9+46
    assume {:print "$at(3,3329,3375)"} true;
    assume ($t14 == $t13->$pool_address);

    // staking_proxy::set_stake_pool_operator($t0, $t2) on_abort goto L2 with $t8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:12:9+44
    assume {:print "$at(2,447,491)"} true;
    call $1_staking_proxy_set_stake_pool_operator($t0, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,447,491)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(66,0):", $t8} $t8 == $t8;
        goto L2;
    }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:13:5+1
    assume {:print "$at(2,497,498)"} true;
L1:

    // assert Not(And(stake::$stake_pool_exists[@137]($t3), Not(And(exists[@138]<stake::OwnerCapability>($t3), stake::$stake_pool_exists[@137]($t5))))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:75:9+144
    assume {:print "$at(3,3384,3528)"} true;
    assert {:msg "assert_failed(3,3384,3528): function does not abort under this condition"}
      !($1_stake_$stake_pool_exists($1_stake_StakePool_$memory#137, $t3) && !($ResourceExists($1_stake_OwnerCapability_$memory#138, $t3) && $1_stake_$stake_pool_exists($1_stake_StakePool_$memory#137, $t5)));

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:75:9+144
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:13:5+1
    assume {:print "$at(2,497,498)"} true;
L2:

    // abort($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:13:5+1
    assume {:print "$at(2,497,498)"} true;
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun staking_proxy::set_operator [verification[inconsistency_]] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+301
procedure {:timeLimit 40} {:msg_if_verifies "inconsistency_detected(2,197,498)"} $1_staking_proxy_set_operator$verify_inconsistency_(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: int;
    var $t4: $1_stake_OwnerCapability;
    var $t5: int;
    var $t6: int;
    var $t7: Vec (int);
    var $t8: int;
    var $t9: int;
    var $t10: $1_staking_contract_Store;
    var $t11: bool;
    var $t12: int;
    var $t13: $1_stake_OwnerCapability;
    var $t14: int;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $1_stake_StakePool_$memory#137: $Memory $1_stake_StakePool;
    var $1_stake_OwnerCapability_$memory#138: $Memory $1_stake_OwnerCapability;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume {:print "$at(2,197,198)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume $IsValid'address'($t2);

    // assume forall $rsc: coin::CoinInfo<aptos_coin::AptosCoin>: ResourceDomain<coin::CoinInfo<aptos_coin::AptosCoin>>(): And(WellFormed($rsc), And(Le(Len<optional_aggregator::OptionalAggregator>(select option::Option.vec(select coin::CoinInfo.supply($rsc))), 1), forall $elem: optional_aggregator::OptionalAggregator: select option::Option.vec(select coin::CoinInfo.supply($rsc)): And(And(And(And(And(Iff(option::$is_some<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)), option::$is_none<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem))), Iff(option::$is_some<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)), option::$is_none<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)))), Implies(option::$is_some<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)), Le(select optional_aggregator::Integer.value(option::$borrow<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem))), select optional_aggregator::Integer.limit(option::$borrow<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)))))), Implies(option::$is_some<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)), Le(aggregator::spec_aggregator_get_val(option::$borrow<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem))), aggregator::spec_get_limit(option::$borrow<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)))))), Le(Len<aggregator::Aggregator>(select option::Option.vec(select optional_aggregator::OptionalAggregator.aggregator($elem))), 1)), Le(Len<optional_aggregator::Integer>(select option::Option.vec(select optional_aggregator::OptionalAggregator.integer($elem))), 1)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    (($IsValid'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''($rsc) && ((LenVec($rsc->$supply->$vec) <= 1) && (var $range_1 := $rsc->$supply->$vec; (forall $i_2: int :: InRangeVec($range_1, $i_2) ==> (var $elem := ReadVec($range_1, $i_2);
    ((((((($1_option_$is_some'$1_aggregator_Aggregator'($elem->$aggregator) <==> $1_option_$is_none'$1_optional_aggregator_Integer'($elem->$integer)) && ($1_option_$is_some'$1_optional_aggregator_Integer'($elem->$integer) <==> $1_option_$is_none'$1_aggregator_Aggregator'($elem->$aggregator))) && ($1_option_$is_some'$1_optional_aggregator_Integer'($elem->$integer) ==> ($1_option_$borrow'$1_optional_aggregator_Integer'($elem->$integer)->$value <= $1_option_$borrow'$1_optional_aggregator_Integer'($elem->$integer)->$limit))) && ($1_option_$is_some'$1_aggregator_Aggregator'($elem->$aggregator) ==> ($1_aggregator_spec_aggregator_get_val($1_option_$borrow'$1_aggregator_Aggregator'($elem->$aggregator)) <= $1_aggregator_spec_get_limit($1_option_$borrow'$1_aggregator_Aggregator'($elem->$aggregator))))) && (LenVec($elem->$aggregator->$vec) <= 1)) && (LenVec($elem->$integer->$vec) <= 1)))))))))));

    // assume forall $rsc: coin::CoinStore<aptos_coin::AptosCoin>: ResourceDomain<coin::CoinStore<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''($rsc))));

    // assume forall $rsc: coin::Ghost$supply<aptos_coin::AptosCoin>: ResourceDomain<coin::Ghost$supply<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''($rsc))));

    // assume exists<coin::Ghost$supply<aptos_coin::AptosCoin>>(0x0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume $ResourceExists($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, 0);

    // assume forall $rsc: coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>: ResourceDomain<coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''($rsc))));

    // assume exists<coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>>(0x0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume $ResourceExists($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, 0);

    // assume forall $rsc: chain_status::GenesisEndMarker: ResourceDomain<chain_status::GenesisEndMarker>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0)}(var $rsc := $ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0);
    ($IsValid'$1_chain_status_GenesisEndMarker'($rsc))));

    // assume forall $rsc: timestamp::CurrentTimeMicroseconds: ResourceDomain<timestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_timestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: stake::OwnerCapability: ResourceDomain<stake::OwnerCapability>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_OwnerCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_OwnerCapability_$memory, $a_0);
    ($IsValid'$1_stake_OwnerCapability'($rsc))));

    // assume forall $rsc: stake::StakePool: ResourceDomain<stake::StakePool>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_StakePool_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_StakePool_$memory, $a_0);
    ($IsValid'$1_stake_StakePool'($rsc))));

    // assume forall $rsc: stake::ValidatorConfig: ResourceDomain<stake::ValidatorConfig>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorConfig_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorConfig'($rsc))));

    // assume forall $rsc: stake::ValidatorPerformance: ResourceDomain<stake::ValidatorPerformance>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorPerformance'($rsc))));

    // assume forall $rsc: stake::ValidatorSet: ResourceDomain<stake::ValidatorSet>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorSet_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorSet_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorSet'($rsc))));

    // assume forall $rsc: reconfiguration::Configuration: ResourceDomain<reconfiguration::Configuration>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_Configuration_$memory, $a_0);
    ($IsValid'$1_reconfiguration_Configuration'($rsc))));

    // assume forall $rsc: staking_contract::Store: ResourceDomain<staking_contract::Store>(): And(WellFormed($rsc), forall $key: address: select staking_contract::Store.staking_contracts($rsc): And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), i), Index(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_staking_contract_Store_$memory, $a_0)}(var $rsc := $ResourceValue($1_staking_contract_Store_$memory, $a_0);
    (($IsValid'$1_staking_contract_Store'($rsc) && (var $range_1 := $rsc->$staking_contracts; (forall $key: int :: ContainsTable($range_1, $EncodeKey'address'($key)) ==> (((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shares, addr), $1_vector_spec_contains'address'($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, addr)))) && (var $range_2 := $Range(0, LenVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders)); (var $range_3 := $Range(0, LenVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders)); (forall $i_4: int, $i_5: int :: $InRange($range_2, $i_4) ==> $InRange($range_3, $i_5) ==> (var i := $i_4;
    (var j := $i_5;
    (($IsEqual'address'(ReadVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, i), ReadVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, j)) ==> $IsEqual'num'(i, j))))))))))))))));

    // assume forall $rsc: vesting::AdminStore: ResourceDomain<vesting::AdminStore>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_AdminStore_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_AdminStore_$memory, $a_0);
    ($IsValid'$1_vesting_AdminStore'($rsc))));

    // assume forall $rsc: vesting::VestingContract: ResourceDomain<vesting::VestingContract>(): And(WellFormed($rsc), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($rsc)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_VestingContract_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_VestingContract_$memory, $a_0);
    (($IsValid'$1_vesting_VestingContract'($rsc) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($rsc->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($rsc->$grant_pool->$shareholders, addr)))) && (var $range_1 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (var $range_2 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'(ReadVec($rsc->$grant_pool->$shareholders, i), ReadVec($rsc->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j)))))))))))));

    // assume Implies(chain_status::$is_operating(), exists<timestamp::CurrentTimeMicroseconds>(0x1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+301
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.spec.move:4:9+93
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, 1));

    // assume Implies(exists<stake::ValidatorSet>(0x1), stake::validator_set_is_valid()) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+301
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:8:9+92
    assume ($ResourceExists($1_stake_ValidatorSet_$memory, 1) ==> $1_stake_validator_set_is_valid($1_stake_StakePool_$memory, $1_stake_ValidatorConfig_$memory, $1_stake_ValidatorPerformance_$memory, $1_stake_ValidatorSet_$memory));

    // assume Implies(chain_status::$is_operating(), exists<stake::ValidatorSet>(0x1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+301
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:12:9+96
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_stake_ValidatorSet_$memory, 1));

    // assume Implies(chain_status::$is_operating(), Ge(timestamp::spec_now_microseconds(), reconfiguration::$last_reconfiguration_time())) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+301
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.spec.move:8:9+137
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) >= $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory)));

    // assume Identical($t3, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:72:9+46
    assume {:print "$at(3,3192,3238)"} true;
    assume ($t3 == $1_signer_$address_of($t0));

    // assume Identical($t4, global<stake::OwnerCapability>($t3)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:73:9+73
    assume {:print "$at(3,3247,3320)"} true;
    assume ($t4 == $ResourceValue($1_stake_OwnerCapability_$memory, $t3));

    // assume Identical($t5, select stake::OwnerCapability.pool_address($t4)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:74:9+46
    assume {:print "$at(3,3329,3375)"} true;
    assume ($t5 == $t4->$pool_address);

    // @138 := save_mem(stake::OwnerCapability) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume {:print "$at(2,197,198)"} true;
    $1_stake_OwnerCapability_$memory#138 := $1_stake_OwnerCapability_$memory;

    // @137 := save_mem(stake::StakePool) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    $1_stake_StakePool_$memory#137 := $1_stake_StakePool_$memory;

    // trace_local[owner]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume {:print "$track_local(66,0,0):", $t0} $t0 == $t0;

    // trace_local[old_operator]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume {:print "$track_local(66,0,1):", $t1} $t1 == $t1;

    // trace_local[new_operator]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:9:5+1
    assume {:print "$track_local(66,0,2):", $t2} $t2 == $t2;

    // assume Identical($t6, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:26:9+46
    assume {:print "$at(3,1031,1077)"} true;
    assume ($t6 == $1_signer_$address_of($t0));

    // assume Identical($t7, select vesting::AdminStore.vesting_contracts(global<vesting::AdminStore>($t6))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:27:9+85
    assume {:print "$at(3,1086,1171)"} true;
    assume ($t7 == $ResourceValue($1_vesting_AdminStore_$memory, $t6)->$vesting_contracts);

    // staking_proxy::set_vesting_contract_operator($t0, $t1, $t2) on_abort goto L2 with $t8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:10:9+64
    assume {:print "$at(2,299,363)"} true;
    call $1_staking_proxy_set_vesting_contract_operator($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,299,363)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(66,0):", $t8} $t8 == $t8;
        goto L2;
    }

    // assume Identical($t9, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:52:9+46
    assume {:print "$at(3,2402,2448)"} true;
    assume ($t9 == $1_signer_$address_of($t0));

    // assume Identical($t10, global<staking_contract::Store>($t9)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:53:9+48
    assume {:print "$at(3,2457,2505)"} true;
    assume ($t10 == $ResourceValue($1_staking_contract_Store_$memory, $t9));

    // assume Identical($t11, And(exists<staking_contract::Store>($t9), simple_map::spec_contains_key<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t10), $t1))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:54:9+131
    assume {:print "$at(3,2514,2645)"} true;
    assume ($t11 == ($ResourceExists($1_staking_contract_Store_$memory, $t9) && $1_simple_map_spec_contains_key'address_$1_staking_contract_StakingContract'($t10->$staking_contracts, $t1)));

    // staking_proxy::set_staking_contract_operator($t0, $t1, $t2) on_abort goto L2 with $t8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:11:9+64
    assume {:print "$at(2,373,437)"} true;
    call $1_staking_proxy_set_staking_contract_operator($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,373,437)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(66,0):", $t8} $t8 == $t8;
        goto L2;
    }

    // assume Identical($t12, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:72:9+46
    assume {:print "$at(3,3192,3238)"} true;
    assume ($t12 == $1_signer_$address_of($t0));

    // assume Identical($t13, global<stake::OwnerCapability>($t12)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:73:9+73
    assume {:print "$at(3,3247,3320)"} true;
    assume ($t13 == $ResourceValue($1_stake_OwnerCapability_$memory, $t12));

    // assume Identical($t14, select stake::OwnerCapability.pool_address($t13)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:74:9+46
    assume {:print "$at(3,3329,3375)"} true;
    assume ($t14 == $t13->$pool_address);

    // staking_proxy::set_stake_pool_operator($t0, $t2) on_abort goto L2 with $t8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:12:9+44
    assume {:print "$at(2,447,491)"} true;
    call $1_staking_proxy_set_stake_pool_operator($t0, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,447,491)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(66,0):", $t8} $t8 == $t8;
        goto L2;
    }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:13:5+1
    assume {:print "$at(2,497,498)"} true;
L1:

    // assert Not(And(stake::$stake_pool_exists[@137]($t3), Not(And(exists[@138]<stake::OwnerCapability>($t3), stake::$stake_pool_exists[@137]($t5))))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:75:9+144
    assume {:print "$at(3,3384,3528)"} true;
    assert {:msg "assert_failed(3,3384,3528): function does not abort under this condition"}
      !($1_stake_$stake_pool_exists($1_stake_StakePool_$memory#137, $t3) && !($ResourceExists($1_stake_OwnerCapability_$memory#138, $t3) && $1_stake_$stake_pool_exists($1_stake_StakePool_$memory#137, $t5)));

    // assert false at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:8:5+260
    assume {:print "$at(3,198,458)"} true;
    assert {:msg "assert_failed(3,198,458): expected to fail"}
      false;

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:75:9+144
    assume {:print "$at(3,3384,3528)"} true;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:13:5+1
    assume {:print "$at(2,497,498)"} true;
L2:

    // assert false at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:8:5+260
    assume {:print "$at(3,198,458)"} true;
    assert {:msg "assert_failed(3,198,458): expected to fail"}
      false;

    // abort($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:13:5+1
    assume {:print "$at(2,497,498)"} true;
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun staking_proxy::set_stake_pool_operator [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:41:5+262
procedure {:inline 1} $1_staking_proxy_set_stake_pool_operator(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: $1_stake_OwnerCapability;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t0: $signer;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t2, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:72:9+46
    assume {:print "$at(3,3192,3238)"} true;
    assume ($t2 == $1_signer_$address_of($t0));

    // assume Identical($t3, global<stake::OwnerCapability>($t2)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:73:9+73
    assume {:print "$at(3,3247,3320)"} true;
    assume ($t3 == $ResourceValue($1_stake_OwnerCapability_$memory, $t2));

    // assume Identical($t4, select stake::OwnerCapability.pool_address($t3)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:74:9+46
    assume {:print "$at(3,3329,3375)"} true;
    assume ($t4 == $t3->$pool_address);

    // trace_local[owner]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:41:5+1
    assume {:print "$at(2,1977,1978)"} true;
    assume {:print "$track_local(66,1,0):", $t0} $t0 == $t0;

    // trace_local[new_operator]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:41:5+1
    assume {:print "$track_local(66,1,1):", $t1} $t1 == $t1;

    // $t5 := signer::address_of($t0) on_abort goto L4 with $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:42:29+25
    assume {:print "$at(2,2087,2112)"} true;
    call $t5 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,2087,2112)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(66,1):", $t6} $t6 == $t6;
        goto L4;
    }

    // $t7 := stake::stake_pool_exists($t5) on_abort goto L4 with $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:43:13+39
    assume {:print "$at(2,2126,2165)"} true;
    call $t7 := $1_stake_stake_pool_exists($t5);
    if ($abort_flag) {
        assume {:print "$at(2,2126,2165)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(66,1):", $t6} $t6 == $t6;
        goto L4;
    }

    // if ($t7) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:43:9+110
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:44:33+5
    assume {:print "$at(2,2201,2206)"} true;
L1:

    // stake::set_operator($t0, $t1) on_abort goto L4 with $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:44:13+40
    assume {:print "$at(2,2181,2221)"} true;
    call $1_stake_set_operator($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,2181,2221)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(66,1):", $t6} $t6 == $t6;
        goto L4;
    }

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:44:53+1
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:43:9+110
    assume {:print "$at(2,2122,2232)"} true;
L0:

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:45:10+1
    assume {:print "$at(2,2232,2233)"} true;
L2:

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:46:5+1
    assume {:print "$at(2,2238,2239)"} true;
L3:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:46:5+1
    assume {:print "$at(2,2238,2239)"} true;
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:46:5+1
L4:

    // abort($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:46:5+1
    assume {:print "$at(2,2238,2239)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun staking_proxy::set_stake_pool_operator [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:41:5+262
procedure {:timeLimit 40} $1_staking_proxy_set_stake_pool_operator$verify(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: $1_stake_OwnerCapability;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t0: $signer;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $1_stake_StakePool_$memory#92: $Memory $1_stake_StakePool;
    var $1_stake_OwnerCapability_$memory#93: $Memory $1_stake_OwnerCapability;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:41:5+1
    assume {:print "$at(2,1977,1978)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:41:5+1
    assume $IsValid'address'($t1);

    // assume forall $rsc: stake::OwnerCapability: ResourceDomain<stake::OwnerCapability>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:41:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_OwnerCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_OwnerCapability_$memory, $a_0);
    ($IsValid'$1_stake_OwnerCapability'($rsc))));

    // assume forall $rsc: stake::StakePool: ResourceDomain<stake::StakePool>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:41:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_StakePool_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_StakePool_$memory, $a_0);
    ($IsValid'$1_stake_StakePool'($rsc))));

    // assume forall $rsc: stake::ValidatorConfig: ResourceDomain<stake::ValidatorConfig>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:41:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorConfig_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorConfig'($rsc))));

    // assume forall $rsc: stake::ValidatorPerformance: ResourceDomain<stake::ValidatorPerformance>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:41:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorPerformance'($rsc))));

    // assume forall $rsc: stake::ValidatorSet: ResourceDomain<stake::ValidatorSet>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:41:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorSet_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorSet_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorSet'($rsc))));

    // assume Implies(exists<stake::ValidatorSet>(0x1), stake::validator_set_is_valid()) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:41:5+262
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:8:9+92
    assume ($ResourceExists($1_stake_ValidatorSet_$memory, 1) ==> $1_stake_validator_set_is_valid($1_stake_StakePool_$memory, $1_stake_ValidatorConfig_$memory, $1_stake_ValidatorPerformance_$memory, $1_stake_ValidatorSet_$memory));

    // assume Identical($t2, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:72:9+46
    assume {:print "$at(3,3192,3238)"} true;
    assume ($t2 == $1_signer_$address_of($t0));

    // assume Identical($t3, global<stake::OwnerCapability>($t2)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:73:9+73
    assume {:print "$at(3,3247,3320)"} true;
    assume ($t3 == $ResourceValue($1_stake_OwnerCapability_$memory, $t2));

    // assume Identical($t4, select stake::OwnerCapability.pool_address($t3)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:74:9+46
    assume {:print "$at(3,3329,3375)"} true;
    assume ($t4 == $t3->$pool_address);

    // @93 := save_mem(stake::OwnerCapability) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:41:5+1
    assume {:print "$at(2,1977,1978)"} true;
    $1_stake_OwnerCapability_$memory#93 := $1_stake_OwnerCapability_$memory;

    // @92 := save_mem(stake::StakePool) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:41:5+1
    $1_stake_StakePool_$memory#92 := $1_stake_StakePool_$memory;

    // trace_local[owner]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:41:5+1
    assume {:print "$track_local(66,1,0):", $t0} $t0 == $t0;

    // trace_local[new_operator]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:41:5+1
    assume {:print "$track_local(66,1,1):", $t1} $t1 == $t1;

    // $t5 := signer::address_of($t0) on_abort goto L4 with $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:42:29+25
    assume {:print "$at(2,2087,2112)"} true;
    call $t5 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,2087,2112)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(66,1):", $t6} $t6 == $t6;
        goto L4;
    }

    // $t7 := stake::stake_pool_exists($t5) on_abort goto L4 with $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:43:13+39
    assume {:print "$at(2,2126,2165)"} true;
    call $t7 := $1_stake_stake_pool_exists($t5);
    if ($abort_flag) {
        assume {:print "$at(2,2126,2165)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(66,1):", $t6} $t6 == $t6;
        goto L4;
    }

    // if ($t7) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:43:9+110
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:44:33+5
    assume {:print "$at(2,2201,2206)"} true;
L1:

    // stake::set_operator($t0, $t1) on_abort goto L4 with $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:44:13+40
    assume {:print "$at(2,2181,2221)"} true;
    call $1_stake_set_operator($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,2181,2221)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(66,1):", $t6} $t6 == $t6;
        goto L4;
    }

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:44:53+1
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:43:9+110
    assume {:print "$at(2,2122,2232)"} true;
L0:

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:45:10+1
    assume {:print "$at(2,2232,2233)"} true;
L2:

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:46:5+1
    assume {:print "$at(2,2238,2239)"} true;
L3:

    // assert Not(And(stake::$stake_pool_exists[@92]($t2), Not(And(exists[@93]<stake::OwnerCapability>($t2), stake::$stake_pool_exists[@92]($t4))))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:75:9+144
    assume {:print "$at(3,3384,3528)"} true;
    assert {:msg "assert_failed(3,3384,3528): function does not abort under this condition"}
      !($1_stake_$stake_pool_exists($1_stake_StakePool_$memory#92, $t2) && !($ResourceExists($1_stake_OwnerCapability_$memory#93, $t2) && $1_stake_$stake_pool_exists($1_stake_StakePool_$memory#92, $t4)));

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:75:9+144
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:46:5+1
    assume {:print "$at(2,2238,2239)"} true;
L4:

    // assert And(stake::$stake_pool_exists[@92]($t2), Not(And(exists[@93]<stake::OwnerCapability>($t2), stake::$stake_pool_exists[@92]($t4)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:64:5+113
    assume {:print "$at(3,2974,3087)"} true;
    assert {:msg "assert_failed(3,2974,3087): abort not covered by any of the `aborts_if` clauses"}
      ($1_stake_$stake_pool_exists($1_stake_StakePool_$memory#92, $t2) && !($ResourceExists($1_stake_OwnerCapability_$memory#93, $t2) && $1_stake_$stake_pool_exists($1_stake_StakePool_$memory#92, $t4)));

    // abort($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:64:5+113
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun staking_proxy::set_stake_pool_operator [verification[inconsistency_]] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:41:5+262
procedure {:timeLimit 40} {:msg_if_verifies "inconsistency_detected(2,1977,2239)"} $1_staking_proxy_set_stake_pool_operator$verify_inconsistency_(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: $1_stake_OwnerCapability;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t0: $signer;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $1_stake_StakePool_$memory#92: $Memory $1_stake_StakePool;
    var $1_stake_OwnerCapability_$memory#93: $Memory $1_stake_OwnerCapability;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:41:5+1
    assume {:print "$at(2,1977,1978)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:41:5+1
    assume $IsValid'address'($t1);

    // assume forall $rsc: stake::OwnerCapability: ResourceDomain<stake::OwnerCapability>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:41:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_OwnerCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_OwnerCapability_$memory, $a_0);
    ($IsValid'$1_stake_OwnerCapability'($rsc))));

    // assume forall $rsc: stake::StakePool: ResourceDomain<stake::StakePool>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:41:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_StakePool_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_StakePool_$memory, $a_0);
    ($IsValid'$1_stake_StakePool'($rsc))));

    // assume forall $rsc: stake::ValidatorConfig: ResourceDomain<stake::ValidatorConfig>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:41:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorConfig_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorConfig'($rsc))));

    // assume forall $rsc: stake::ValidatorPerformance: ResourceDomain<stake::ValidatorPerformance>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:41:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorPerformance'($rsc))));

    // assume forall $rsc: stake::ValidatorSet: ResourceDomain<stake::ValidatorSet>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:41:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorSet_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorSet_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorSet'($rsc))));

    // assume Implies(exists<stake::ValidatorSet>(0x1), stake::validator_set_is_valid()) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:41:5+262
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:8:9+92
    assume ($ResourceExists($1_stake_ValidatorSet_$memory, 1) ==> $1_stake_validator_set_is_valid($1_stake_StakePool_$memory, $1_stake_ValidatorConfig_$memory, $1_stake_ValidatorPerformance_$memory, $1_stake_ValidatorSet_$memory));

    // assume Identical($t2, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:72:9+46
    assume {:print "$at(3,3192,3238)"} true;
    assume ($t2 == $1_signer_$address_of($t0));

    // assume Identical($t3, global<stake::OwnerCapability>($t2)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:73:9+73
    assume {:print "$at(3,3247,3320)"} true;
    assume ($t3 == $ResourceValue($1_stake_OwnerCapability_$memory, $t2));

    // assume Identical($t4, select stake::OwnerCapability.pool_address($t3)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:74:9+46
    assume {:print "$at(3,3329,3375)"} true;
    assume ($t4 == $t3->$pool_address);

    // @93 := save_mem(stake::OwnerCapability) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:41:5+1
    assume {:print "$at(2,1977,1978)"} true;
    $1_stake_OwnerCapability_$memory#93 := $1_stake_OwnerCapability_$memory;

    // @92 := save_mem(stake::StakePool) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:41:5+1
    $1_stake_StakePool_$memory#92 := $1_stake_StakePool_$memory;

    // trace_local[owner]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:41:5+1
    assume {:print "$track_local(66,1,0):", $t0} $t0 == $t0;

    // trace_local[new_operator]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:41:5+1
    assume {:print "$track_local(66,1,1):", $t1} $t1 == $t1;

    // $t5 := signer::address_of($t0) on_abort goto L4 with $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:42:29+25
    assume {:print "$at(2,2087,2112)"} true;
    call $t5 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,2087,2112)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(66,1):", $t6} $t6 == $t6;
        goto L4;
    }

    // $t7 := stake::stake_pool_exists($t5) on_abort goto L4 with $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:43:13+39
    assume {:print "$at(2,2126,2165)"} true;
    call $t7 := $1_stake_stake_pool_exists($t5);
    if ($abort_flag) {
        assume {:print "$at(2,2126,2165)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(66,1):", $t6} $t6 == $t6;
        goto L4;
    }

    // if ($t7) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:43:9+110
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:44:33+5
    assume {:print "$at(2,2201,2206)"} true;
L1:

    // stake::set_operator($t0, $t1) on_abort goto L4 with $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:44:13+40
    assume {:print "$at(2,2181,2221)"} true;
    call $1_stake_set_operator($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,2181,2221)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(66,1):", $t6} $t6 == $t6;
        goto L4;
    }

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:44:53+1
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:43:9+110
    assume {:print "$at(2,2122,2232)"} true;
L0:

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:45:10+1
    assume {:print "$at(2,2232,2233)"} true;
L2:

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:46:5+1
    assume {:print "$at(2,2238,2239)"} true;
L3:

    // assert Not(And(stake::$stake_pool_exists[@92]($t2), Not(And(exists[@93]<stake::OwnerCapability>($t2), stake::$stake_pool_exists[@92]($t4))))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:75:9+144
    assume {:print "$at(3,3384,3528)"} true;
    assert {:msg "assert_failed(3,3384,3528): function does not abort under this condition"}
      !($1_stake_$stake_pool_exists($1_stake_StakePool_$memory#92, $t2) && !($ResourceExists($1_stake_OwnerCapability_$memory#93, $t2) && $1_stake_$stake_pool_exists($1_stake_StakePool_$memory#92, $t4)));

    // assert false at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:64:5+113
    assume {:print "$at(3,2974,3087)"} true;
    assert {:msg "assert_failed(3,2974,3087): expected to fail"}
      false;

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:75:9+144
    assume {:print "$at(3,3384,3528)"} true;
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:46:5+1
    assume {:print "$at(2,2238,2239)"} true;
L4:

    // assert And(stake::$stake_pool_exists[@92]($t2), Not(And(exists[@93]<stake::OwnerCapability>($t2), stake::$stake_pool_exists[@92]($t4)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:64:5+113
    assume {:print "$at(3,2974,3087)"} true;
    assert {:msg "assert_failed(3,2974,3087): abort not covered by any of the `aborts_if` clauses"}
      ($1_stake_$stake_pool_exists($1_stake_StakePool_$memory#92, $t2) && !($ResourceExists($1_stake_OwnerCapability_$memory#93, $t2) && $1_stake_$stake_pool_exists($1_stake_StakePool_$memory#92, $t4)));

    // assert false at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:64:5+113
    assert {:msg "assert_failed(3,2974,3087): expected to fail"}
      false;

    // abort($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:64:5+113
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun staking_proxy::set_stake_pool_voter [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:66:5+217
procedure {:inline 1} $1_staking_proxy_set_stake_pool_voter(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: $1_stake_OwnerCapability;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t0: $signer;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t2, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:118:9+46
    assume {:print "$at(3,4939,4985)"} true;
    assume ($t2 == $1_signer_$address_of($t0));

    // assume Identical($t3, global<stake::OwnerCapability>($t2)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:119:9+66
    assume {:print "$at(3,4994,5060)"} true;
    assume ($t3 == $ResourceValue($1_stake_OwnerCapability_$memory, $t2));

    // assume Identical($t4, select stake::OwnerCapability.pool_address($t3)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:120:9+46
    assume {:print "$at(3,5069,5115)"} true;
    assume ($t4 == $t3->$pool_address);

    // trace_local[owner]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:66:5+1
    assume {:print "$at(2,3112,3113)"} true;
    assume {:print "$track_local(66,2,0):", $t0} $t0 == $t0;

    // trace_local[new_voter]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:66:5+1
    assume {:print "$track_local(66,2,1):", $t1} $t1 == $t1;

    // $t5 := signer::address_of($t0) on_abort goto L4 with $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:67:38+25
    assume {:print "$at(2,3225,3250)"} true;
    call $t5 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,3225,3250)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(66,2):", $t6} $t6 == $t6;
        goto L4;
    }

    // $t7 := stake::stake_pool_exists($t5) on_abort goto L4 with $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:67:13+51
    call $t7 := $1_stake_stake_pool_exists($t5);
    if ($abort_flag) {
        assume {:print "$at(2,3200,3251)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(66,2):", $t6} $t6 == $t6;
        goto L4;
    }

    // if ($t7) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:67:9+126
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:68:40+5
    assume {:print "$at(2,3294,3299)"} true;
L1:

    // stake::set_delegated_voter($t0, $t1) on_abort goto L4 with $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:68:13+44
    assume {:print "$at(2,3267,3311)"} true;
    call $1_stake_set_delegated_voter($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,3267,3311)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(66,2):", $t6} $t6 == $t6;
        goto L4;
    }

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:68:57+1
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:67:9+126
    assume {:print "$at(2,3196,3322)"} true;
L0:

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:69:10+1
    assume {:print "$at(2,3322,3323)"} true;
L2:

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:70:5+1
    assume {:print "$at(2,3328,3329)"} true;
L3:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:70:5+1
    assume {:print "$at(2,3328,3329)"} true;
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:70:5+1
L4:

    // abort($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:70:5+1
    assume {:print "$at(2,3328,3329)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun staking_proxy::set_stake_pool_voter [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:66:5+217
procedure {:timeLimit 40} $1_staking_proxy_set_stake_pool_voter$verify(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: $1_stake_OwnerCapability;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t0: $signer;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $1_stake_StakePool_$memory#88: $Memory $1_stake_StakePool;
    var $1_stake_OwnerCapability_$memory#89: $Memory $1_stake_OwnerCapability;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:66:5+1
    assume {:print "$at(2,3112,3113)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:66:5+1
    assume $IsValid'address'($t1);

    // assume forall $rsc: stake::OwnerCapability: ResourceDomain<stake::OwnerCapability>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:66:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_OwnerCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_OwnerCapability_$memory, $a_0);
    ($IsValid'$1_stake_OwnerCapability'($rsc))));

    // assume forall $rsc: stake::StakePool: ResourceDomain<stake::StakePool>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:66:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_StakePool_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_StakePool_$memory, $a_0);
    ($IsValid'$1_stake_StakePool'($rsc))));

    // assume forall $rsc: stake::ValidatorConfig: ResourceDomain<stake::ValidatorConfig>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:66:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorConfig_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorConfig'($rsc))));

    // assume forall $rsc: stake::ValidatorPerformance: ResourceDomain<stake::ValidatorPerformance>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:66:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorPerformance'($rsc))));

    // assume forall $rsc: stake::ValidatorSet: ResourceDomain<stake::ValidatorSet>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:66:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorSet_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorSet_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorSet'($rsc))));

    // assume Implies(exists<stake::ValidatorSet>(0x1), stake::validator_set_is_valid()) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:66:5+217
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:8:9+92
    assume ($ResourceExists($1_stake_ValidatorSet_$memory, 1) ==> $1_stake_validator_set_is_valid($1_stake_StakePool_$memory, $1_stake_ValidatorConfig_$memory, $1_stake_ValidatorPerformance_$memory, $1_stake_ValidatorSet_$memory));

    // assume Identical($t2, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:118:9+46
    assume {:print "$at(3,4939,4985)"} true;
    assume ($t2 == $1_signer_$address_of($t0));

    // assume Identical($t3, global<stake::OwnerCapability>($t2)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:119:9+66
    assume {:print "$at(3,4994,5060)"} true;
    assume ($t3 == $ResourceValue($1_stake_OwnerCapability_$memory, $t2));

    // assume Identical($t4, select stake::OwnerCapability.pool_address($t3)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:120:9+46
    assume {:print "$at(3,5069,5115)"} true;
    assume ($t4 == $t3->$pool_address);

    // @89 := save_mem(stake::OwnerCapability) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:66:5+1
    assume {:print "$at(2,3112,3113)"} true;
    $1_stake_OwnerCapability_$memory#89 := $1_stake_OwnerCapability_$memory;

    // @88 := save_mem(stake::StakePool) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:66:5+1
    $1_stake_StakePool_$memory#88 := $1_stake_StakePool_$memory;

    // trace_local[owner]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:66:5+1
    assume {:print "$track_local(66,2,0):", $t0} $t0 == $t0;

    // trace_local[new_voter]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:66:5+1
    assume {:print "$track_local(66,2,1):", $t1} $t1 == $t1;

    // $t5 := signer::address_of($t0) on_abort goto L4 with $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:67:38+25
    assume {:print "$at(2,3225,3250)"} true;
    call $t5 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,3225,3250)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(66,2):", $t6} $t6 == $t6;
        goto L4;
    }

    // $t7 := stake::stake_pool_exists($t5) on_abort goto L4 with $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:67:13+51
    call $t7 := $1_stake_stake_pool_exists($t5);
    if ($abort_flag) {
        assume {:print "$at(2,3200,3251)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(66,2):", $t6} $t6 == $t6;
        goto L4;
    }

    // if ($t7) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:67:9+126
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:68:40+5
    assume {:print "$at(2,3294,3299)"} true;
L1:

    // stake::set_delegated_voter($t0, $t1) on_abort goto L4 with $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:68:13+44
    assume {:print "$at(2,3267,3311)"} true;
    call $1_stake_set_delegated_voter($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,3267,3311)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(66,2):", $t6} $t6 == $t6;
        goto L4;
    }

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:68:57+1
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:67:9+126
    assume {:print "$at(2,3196,3322)"} true;
L0:

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:69:10+1
    assume {:print "$at(2,3322,3323)"} true;
L2:

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:70:5+1
    assume {:print "$at(2,3328,3329)"} true;
L3:

    // assert Not(And(stake::$stake_pool_exists[@88]($t2), Not(And(exists[@89]<stake::OwnerCapability>($t2), stake::$stake_pool_exists[@88]($t4))))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:121:9+144
    assume {:print "$at(3,5124,5268)"} true;
    assert {:msg "assert_failed(3,5124,5268): function does not abort under this condition"}
      !($1_stake_$stake_pool_exists($1_stake_StakePool_$memory#88, $t2) && !($ResourceExists($1_stake_OwnerCapability_$memory#89, $t2) && $1_stake_$stake_pool_exists($1_stake_StakePool_$memory#88, $t4)));

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:121:9+144
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:70:5+1
    assume {:print "$at(2,3328,3329)"} true;
L4:

    // assert And(stake::$stake_pool_exists[@88]($t2), Not(And(exists[@89]<stake::OwnerCapability>($t2), stake::$stake_pool_exists[@88]($t4)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:110:5+112
    assume {:print "$at(3,4720,4832)"} true;
    assert {:msg "assert_failed(3,4720,4832): abort not covered by any of the `aborts_if` clauses"}
      ($1_stake_$stake_pool_exists($1_stake_StakePool_$memory#88, $t2) && !($ResourceExists($1_stake_OwnerCapability_$memory#89, $t2) && $1_stake_$stake_pool_exists($1_stake_StakePool_$memory#88, $t4)));

    // abort($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:110:5+112
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun staking_proxy::set_stake_pool_voter [verification[inconsistency_]] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:66:5+217
procedure {:timeLimit 40} {:msg_if_verifies "inconsistency_detected(2,3112,3329)"} $1_staking_proxy_set_stake_pool_voter$verify_inconsistency_(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: $1_stake_OwnerCapability;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t0: $signer;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $1_stake_StakePool_$memory#88: $Memory $1_stake_StakePool;
    var $1_stake_OwnerCapability_$memory#89: $Memory $1_stake_OwnerCapability;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:66:5+1
    assume {:print "$at(2,3112,3113)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:66:5+1
    assume $IsValid'address'($t1);

    // assume forall $rsc: stake::OwnerCapability: ResourceDomain<stake::OwnerCapability>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:66:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_OwnerCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_OwnerCapability_$memory, $a_0);
    ($IsValid'$1_stake_OwnerCapability'($rsc))));

    // assume forall $rsc: stake::StakePool: ResourceDomain<stake::StakePool>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:66:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_StakePool_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_StakePool_$memory, $a_0);
    ($IsValid'$1_stake_StakePool'($rsc))));

    // assume forall $rsc: stake::ValidatorConfig: ResourceDomain<stake::ValidatorConfig>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:66:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorConfig_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorConfig'($rsc))));

    // assume forall $rsc: stake::ValidatorPerformance: ResourceDomain<stake::ValidatorPerformance>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:66:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorPerformance'($rsc))));

    // assume forall $rsc: stake::ValidatorSet: ResourceDomain<stake::ValidatorSet>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:66:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorSet_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorSet_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorSet'($rsc))));

    // assume Implies(exists<stake::ValidatorSet>(0x1), stake::validator_set_is_valid()) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:66:5+217
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:8:9+92
    assume ($ResourceExists($1_stake_ValidatorSet_$memory, 1) ==> $1_stake_validator_set_is_valid($1_stake_StakePool_$memory, $1_stake_ValidatorConfig_$memory, $1_stake_ValidatorPerformance_$memory, $1_stake_ValidatorSet_$memory));

    // assume Identical($t2, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:118:9+46
    assume {:print "$at(3,4939,4985)"} true;
    assume ($t2 == $1_signer_$address_of($t0));

    // assume Identical($t3, global<stake::OwnerCapability>($t2)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:119:9+66
    assume {:print "$at(3,4994,5060)"} true;
    assume ($t3 == $ResourceValue($1_stake_OwnerCapability_$memory, $t2));

    // assume Identical($t4, select stake::OwnerCapability.pool_address($t3)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:120:9+46
    assume {:print "$at(3,5069,5115)"} true;
    assume ($t4 == $t3->$pool_address);

    // @89 := save_mem(stake::OwnerCapability) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:66:5+1
    assume {:print "$at(2,3112,3113)"} true;
    $1_stake_OwnerCapability_$memory#89 := $1_stake_OwnerCapability_$memory;

    // @88 := save_mem(stake::StakePool) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:66:5+1
    $1_stake_StakePool_$memory#88 := $1_stake_StakePool_$memory;

    // trace_local[owner]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:66:5+1
    assume {:print "$track_local(66,2,0):", $t0} $t0 == $t0;

    // trace_local[new_voter]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:66:5+1
    assume {:print "$track_local(66,2,1):", $t1} $t1 == $t1;

    // $t5 := signer::address_of($t0) on_abort goto L4 with $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:67:38+25
    assume {:print "$at(2,3225,3250)"} true;
    call $t5 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,3225,3250)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(66,2):", $t6} $t6 == $t6;
        goto L4;
    }

    // $t7 := stake::stake_pool_exists($t5) on_abort goto L4 with $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:67:13+51
    call $t7 := $1_stake_stake_pool_exists($t5);
    if ($abort_flag) {
        assume {:print "$at(2,3200,3251)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(66,2):", $t6} $t6 == $t6;
        goto L4;
    }

    // if ($t7) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:67:9+126
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:68:40+5
    assume {:print "$at(2,3294,3299)"} true;
L1:

    // stake::set_delegated_voter($t0, $t1) on_abort goto L4 with $t6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:68:13+44
    assume {:print "$at(2,3267,3311)"} true;
    call $1_stake_set_delegated_voter($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,3267,3311)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(66,2):", $t6} $t6 == $t6;
        goto L4;
    }

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:68:57+1
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:67:9+126
    assume {:print "$at(2,3196,3322)"} true;
L0:

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:69:10+1
    assume {:print "$at(2,3322,3323)"} true;
L2:

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:70:5+1
    assume {:print "$at(2,3328,3329)"} true;
L3:

    // assert Not(And(stake::$stake_pool_exists[@88]($t2), Not(And(exists[@89]<stake::OwnerCapability>($t2), stake::$stake_pool_exists[@88]($t4))))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:121:9+144
    assume {:print "$at(3,5124,5268)"} true;
    assert {:msg "assert_failed(3,5124,5268): function does not abort under this condition"}
      !($1_stake_$stake_pool_exists($1_stake_StakePool_$memory#88, $t2) && !($ResourceExists($1_stake_OwnerCapability_$memory#89, $t2) && $1_stake_$stake_pool_exists($1_stake_StakePool_$memory#88, $t4)));

    // assert false at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:110:5+112
    assume {:print "$at(3,4720,4832)"} true;
    assert {:msg "assert_failed(3,4720,4832): expected to fail"}
      false;

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:121:9+144
    assume {:print "$at(3,5124,5268)"} true;
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:70:5+1
    assume {:print "$at(2,3328,3329)"} true;
L4:

    // assert And(stake::$stake_pool_exists[@88]($t2), Not(And(exists[@89]<stake::OwnerCapability>($t2), stake::$stake_pool_exists[@88]($t4)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:110:5+112
    assume {:print "$at(3,4720,4832)"} true;
    assert {:msg "assert_failed(3,4720,4832): abort not covered by any of the `aborts_if` clauses"}
      ($1_stake_$stake_pool_exists($1_stake_StakePool_$memory#88, $t2) && !($ResourceExists($1_stake_OwnerCapability_$memory#89, $t2) && $1_stake_$stake_pool_exists($1_stake_StakePool_$memory#88, $t4)));

    // assert false at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:110:5+112
    assert {:msg "assert_failed(3,4720,4832): expected to fail"}
      false;

    // abort($t6) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:110:5+112
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun staking_proxy::set_staking_contract_operator [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+499
procedure {:inline 1} $1_staking_proxy_set_staking_contract_operator(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: $1_staking_contract_Store;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: Table int ($1_staking_contract_StakingContract);
    var $t12: int;
    var $t13: int;
    var $t14: $1_staking_contract_Store;
    var $t15: Table int ($1_staking_contract_StakingContract);
    var $t16: Table int ($1_staking_contract_StakingContract);
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // assume Identical($t5, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:52:9+46
    assume {:print "$at(3,2402,2448)"} true;
    assume ($t5 == $1_signer_$address_of($t0));

    // assume Identical($t6, global<staking_contract::Store>($t5)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:53:9+48
    assume {:print "$at(3,2457,2505)"} true;
    assume ($t6 == $ResourceValue($1_staking_contract_Store_$memory, $t5));

    // assume Identical($t7, And(exists<staking_contract::Store>($t5), simple_map::spec_contains_key<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t6), $t1))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:54:9+131
    assume {:print "$at(3,2514,2645)"} true;
    assume ($t7 == ($ResourceExists($1_staking_contract_Store_$memory, $t5) && $1_simple_map_spec_contains_key'address_$1_staking_contract_StakingContract'($t6->$staking_contracts, $t1)));

    // trace_local[owner]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume {:print "$at(2,1472,1473)"} true;
    assume {:print "$track_local(66,3,0):", $t0} $t0 == $t0;

    // trace_local[old_operator]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume {:print "$track_local(66,3,1):", $t1} $t1 == $t1;

    // trace_local[new_operator]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume {:print "$track_local(66,3,2):", $t2} $t2 == $t2;

    // $t8 := signer::address_of($t0) on_abort goto L4 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:34:29+25
    assume {:print "$at(2,1611,1636)"} true;
    call $t8 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,1611,1636)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(66,3):", $t9} $t9 == $t9;
        goto L4;
    }

    // trace_local[owner_address]($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:34:13+13
    assume {:print "$track_local(66,3,4):", $t8} $t8 == $t8;

    // $t10 := staking_contract::staking_contract_exists($t8, $t1) on_abort goto L4 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:35:13+70
    assume {:print "$at(2,1650,1720)"} true;
    call $t10 := $1_staking_contract_staking_contract_exists($t8, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,1650,1720)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(66,3):", $t9} $t9 == $t9;
        goto L4;
    }

    // if ($t10) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:35:9+318
    if ($t10) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:36:89+13
    assume {:print "$at(2,1812,1825)"} true;
L1:

    // assume Identical($t11, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t8))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:302:9+64
    assume {:print "$at(144,12927,12991)"} true;
    assume ($t11 == $ResourceValue($1_staking_contract_Store_$memory, $t8)->$staking_contracts);

    // $t12 := staking_contract::commission_percentage($t8, $t1) on_abort goto L4 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:36:49+68
    assume {:print "$at(2,1772,1840)"} true;
    call $t12 := $1_staking_contract_commission_percentage($t8, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,1772,1840)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(66,3):", $t9} $t9 == $t9;
        goto L4;
    }

    // trace_local[current_commission_percentage]($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:36:17+29
    assume {:print "$track_local(66,3,3):", $t12} $t12 == $t12;

    // assume Identical($t13, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:188:9+48
    assume {:print "$at(144,7881,7929)"} true;
    assume ($t13 == $1_signer_$address_of($t0));

    // assume Identical($t14, global<staking_contract::Store>($t13)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:190:9+42
    assume {:print "$at(144,8026,8068)"} true;
    assume ($t14 == $ResourceValue($1_staking_contract_Store_$memory, $t13));

    // assume Identical($t15, select staking_contract::Store.staking_contracts($t14)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:191:9+48
    assume {:print "$at(144,8077,8125)"} true;
    assume ($t15 == $t14->$staking_contracts);

    // assume Identical($t16, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t13))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:302:9+64
    assume {:print "$at(144,12927,12991)"} true;
    assume ($t16 == $ResourceValue($1_staking_contract_Store_$memory, $t13)->$staking_contracts);

    // staking_contract::switch_operator($t0, $t1, $t2, $t12) on_abort goto L4 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:37:13+99
    assume {:print "$at(2,1854,1953)"} true;
    call $1_staking_contract_switch_operator($t0, $t1, $t2, $t12);
    if ($abort_flag) {
        assume {:print "$at(2,1854,1953)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(66,3):", $t9} $t9 == $t9;
        goto L4;
    }

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:37:112+1
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:35:9+318
    assume {:print "$at(2,1646,1964)"} true;
L0:

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:38:10+1
    assume {:print "$at(2,1964,1965)"} true;
L2:

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:39:5+1
    assume {:print "$at(2,1970,1971)"} true;
L3:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:39:5+1
    assume {:print "$at(2,1970,1971)"} true;
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:39:5+1
L4:

    // abort($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:39:5+1
    assume {:print "$at(2,1970,1971)"} true;
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun staking_proxy::set_staking_contract_operator [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+499
procedure {:timeLimit 40} $1_staking_proxy_set_staking_contract_operator$verify(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: $1_staking_contract_Store;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: Table int ($1_staking_contract_StakingContract);
    var $t12: int;
    var $t13: int;
    var $t14: $1_staking_contract_Store;
    var $t15: Table int ($1_staking_contract_StakingContract);
    var $t16: Table int ($1_staking_contract_StakingContract);
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume {:print "$at(2,1472,1473)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume $IsValid'address'($t2);

    // assume forall $rsc: coin::CoinInfo<aptos_coin::AptosCoin>: ResourceDomain<coin::CoinInfo<aptos_coin::AptosCoin>>(): And(WellFormed($rsc), And(Le(Len<optional_aggregator::OptionalAggregator>(select option::Option.vec(select coin::CoinInfo.supply($rsc))), 1), forall $elem: optional_aggregator::OptionalAggregator: select option::Option.vec(select coin::CoinInfo.supply($rsc)): And(And(And(And(And(Iff(option::$is_some<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)), option::$is_none<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem))), Iff(option::$is_some<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)), option::$is_none<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)))), Implies(option::$is_some<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)), Le(select optional_aggregator::Integer.value(option::$borrow<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem))), select optional_aggregator::Integer.limit(option::$borrow<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)))))), Implies(option::$is_some<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)), Le(aggregator::spec_aggregator_get_val(option::$borrow<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem))), aggregator::spec_get_limit(option::$borrow<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)))))), Le(Len<aggregator::Aggregator>(select option::Option.vec(select optional_aggregator::OptionalAggregator.aggregator($elem))), 1)), Le(Len<optional_aggregator::Integer>(select option::Option.vec(select optional_aggregator::OptionalAggregator.integer($elem))), 1)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    (($IsValid'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''($rsc) && ((LenVec($rsc->$supply->$vec) <= 1) && (var $range_1 := $rsc->$supply->$vec; (forall $i_2: int :: InRangeVec($range_1, $i_2) ==> (var $elem := ReadVec($range_1, $i_2);
    ((((((($1_option_$is_some'$1_aggregator_Aggregator'($elem->$aggregator) <==> $1_option_$is_none'$1_optional_aggregator_Integer'($elem->$integer)) && ($1_option_$is_some'$1_optional_aggregator_Integer'($elem->$integer) <==> $1_option_$is_none'$1_aggregator_Aggregator'($elem->$aggregator))) && ($1_option_$is_some'$1_optional_aggregator_Integer'($elem->$integer) ==> ($1_option_$borrow'$1_optional_aggregator_Integer'($elem->$integer)->$value <= $1_option_$borrow'$1_optional_aggregator_Integer'($elem->$integer)->$limit))) && ($1_option_$is_some'$1_aggregator_Aggregator'($elem->$aggregator) ==> ($1_aggregator_spec_aggregator_get_val($1_option_$borrow'$1_aggregator_Aggregator'($elem->$aggregator)) <= $1_aggregator_spec_get_limit($1_option_$borrow'$1_aggregator_Aggregator'($elem->$aggregator))))) && (LenVec($elem->$aggregator->$vec) <= 1)) && (LenVec($elem->$integer->$vec) <= 1)))))))))));

    // assume forall $rsc: coin::CoinStore<aptos_coin::AptosCoin>: ResourceDomain<coin::CoinStore<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''($rsc))));

    // assume forall $rsc: coin::Ghost$supply<aptos_coin::AptosCoin>: ResourceDomain<coin::Ghost$supply<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''($rsc))));

    // assume exists<coin::Ghost$supply<aptos_coin::AptosCoin>>(0x0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume $ResourceExists($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, 0);

    // assume forall $rsc: coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>: ResourceDomain<coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''($rsc))));

    // assume exists<coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>>(0x0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume $ResourceExists($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, 0);

    // assume forall $rsc: chain_status::GenesisEndMarker: ResourceDomain<chain_status::GenesisEndMarker>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0)}(var $rsc := $ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0);
    ($IsValid'$1_chain_status_GenesisEndMarker'($rsc))));

    // assume forall $rsc: timestamp::CurrentTimeMicroseconds: ResourceDomain<timestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_timestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: stake::StakePool: ResourceDomain<stake::StakePool>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_StakePool_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_StakePool_$memory, $a_0);
    ($IsValid'$1_stake_StakePool'($rsc))));

    // assume forall $rsc: stake::ValidatorConfig: ResourceDomain<stake::ValidatorConfig>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorConfig_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorConfig'($rsc))));

    // assume forall $rsc: stake::ValidatorPerformance: ResourceDomain<stake::ValidatorPerformance>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorPerformance'($rsc))));

    // assume forall $rsc: stake::ValidatorSet: ResourceDomain<stake::ValidatorSet>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorSet_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorSet_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorSet'($rsc))));

    // assume forall $rsc: reconfiguration::Configuration: ResourceDomain<reconfiguration::Configuration>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_Configuration_$memory, $a_0);
    ($IsValid'$1_reconfiguration_Configuration'($rsc))));

    // assume forall $rsc: staking_contract::Store: ResourceDomain<staking_contract::Store>(): And(WellFormed($rsc), forall $key: address: select staking_contract::Store.staking_contracts($rsc): And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), i), Index(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_staking_contract_Store_$memory, $a_0)}(var $rsc := $ResourceValue($1_staking_contract_Store_$memory, $a_0);
    (($IsValid'$1_staking_contract_Store'($rsc) && (var $range_1 := $rsc->$staking_contracts; (forall $key: int :: ContainsTable($range_1, $EncodeKey'address'($key)) ==> (((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shares, addr), $1_vector_spec_contains'address'($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, addr)))) && (var $range_2 := $Range(0, LenVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders)); (var $range_3 := $Range(0, LenVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders)); (forall $i_4: int, $i_5: int :: $InRange($range_2, $i_4) ==> $InRange($range_3, $i_5) ==> (var i := $i_4;
    (var j := $i_5;
    (($IsEqual'address'(ReadVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, i), ReadVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, j)) ==> $IsEqual'num'(i, j))))))))))))))));

    // assume Implies(chain_status::$is_operating(), exists<timestamp::CurrentTimeMicroseconds>(0x1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+499
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.spec.move:4:9+93
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, 1));

    // assume Implies(exists<stake::ValidatorSet>(0x1), stake::validator_set_is_valid()) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+499
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:8:9+92
    assume ($ResourceExists($1_stake_ValidatorSet_$memory, 1) ==> $1_stake_validator_set_is_valid($1_stake_StakePool_$memory, $1_stake_ValidatorConfig_$memory, $1_stake_ValidatorPerformance_$memory, $1_stake_ValidatorSet_$memory));

    // assume Implies(chain_status::$is_operating(), exists<stake::ValidatorSet>(0x1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+499
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:12:9+96
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_stake_ValidatorSet_$memory, 1));

    // assume Implies(chain_status::$is_operating(), Ge(timestamp::spec_now_microseconds(), reconfiguration::$last_reconfiguration_time())) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+499
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.spec.move:8:9+137
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) >= $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory)));

    // assume Identical($t5, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:52:9+46
    assume {:print "$at(3,2402,2448)"} true;
    assume ($t5 == $1_signer_$address_of($t0));

    // assume Identical($t6, global<staking_contract::Store>($t5)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:53:9+48
    assume {:print "$at(3,2457,2505)"} true;
    assume ($t6 == $ResourceValue($1_staking_contract_Store_$memory, $t5));

    // assume Identical($t7, And(exists<staking_contract::Store>($t5), simple_map::spec_contains_key<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t6), $t1))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:54:9+131
    assume {:print "$at(3,2514,2645)"} true;
    assume ($t7 == ($ResourceExists($1_staking_contract_Store_$memory, $t5) && $1_simple_map_spec_contains_key'address_$1_staking_contract_StakingContract'($t6->$staking_contracts, $t1)));

    // trace_local[owner]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume {:print "$at(2,1472,1473)"} true;
    assume {:print "$track_local(66,3,0):", $t0} $t0 == $t0;

    // trace_local[old_operator]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume {:print "$track_local(66,3,1):", $t1} $t1 == $t1;

    // trace_local[new_operator]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume {:print "$track_local(66,3,2):", $t2} $t2 == $t2;

    // $t8 := signer::address_of($t0) on_abort goto L4 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:34:29+25
    assume {:print "$at(2,1611,1636)"} true;
    call $t8 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,1611,1636)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(66,3):", $t9} $t9 == $t9;
        goto L4;
    }

    // trace_local[owner_address]($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:34:13+13
    assume {:print "$track_local(66,3,4):", $t8} $t8 == $t8;

    // $t10 := staking_contract::staking_contract_exists($t8, $t1) on_abort goto L4 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:35:13+70
    assume {:print "$at(2,1650,1720)"} true;
    call $t10 := $1_staking_contract_staking_contract_exists($t8, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,1650,1720)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(66,3):", $t9} $t9 == $t9;
        goto L4;
    }

    // if ($t10) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:35:9+318
    if ($t10) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:36:89+13
    assume {:print "$at(2,1812,1825)"} true;
L1:

    // assume Identical($t11, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t8))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:302:9+64
    assume {:print "$at(144,12927,12991)"} true;
    assume ($t11 == $ResourceValue($1_staking_contract_Store_$memory, $t8)->$staking_contracts);

    // $t12 := staking_contract::commission_percentage($t8, $t1) on_abort goto L4 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:36:49+68
    assume {:print "$at(2,1772,1840)"} true;
    call $t12 := $1_staking_contract_commission_percentage($t8, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,1772,1840)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(66,3):", $t9} $t9 == $t9;
        goto L4;
    }

    // trace_local[current_commission_percentage]($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:36:17+29
    assume {:print "$track_local(66,3,3):", $t12} $t12 == $t12;

    // assume Identical($t13, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:188:9+48
    assume {:print "$at(144,7881,7929)"} true;
    assume ($t13 == $1_signer_$address_of($t0));

    // assume Identical($t14, global<staking_contract::Store>($t13)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:190:9+42
    assume {:print "$at(144,8026,8068)"} true;
    assume ($t14 == $ResourceValue($1_staking_contract_Store_$memory, $t13));

    // assume Identical($t15, select staking_contract::Store.staking_contracts($t14)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:191:9+48
    assume {:print "$at(144,8077,8125)"} true;
    assume ($t15 == $t14->$staking_contracts);

    // assume Identical($t16, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t13))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:302:9+64
    assume {:print "$at(144,12927,12991)"} true;
    assume ($t16 == $ResourceValue($1_staking_contract_Store_$memory, $t13)->$staking_contracts);

    // staking_contract::switch_operator($t0, $t1, $t2, $t12) on_abort goto L4 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:37:13+99
    assume {:print "$at(2,1854,1953)"} true;
    call $1_staking_contract_switch_operator($t0, $t1, $t2, $t12);
    if ($abort_flag) {
        assume {:print "$at(2,1854,1953)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(66,3):", $t9} $t9 == $t9;
        goto L4;
    }

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:37:112+1
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:35:9+318
    assume {:print "$at(2,1646,1964)"} true;
L0:

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:38:10+1
    assume {:print "$at(2,1964,1965)"} true;
L2:

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:39:5+1
    assume {:print "$at(2,1970,1971)"} true;
L3:

    // assert Not(false) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:39:5+1
    assume {:print "$at(2,1970,1971)"} true;
    assert {:msg "assert_failed(2,1970,1971): function does not abort under this condition"}
      !false;

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:39:5+1
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:39:5+1
L4:

    // abort($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:39:5+1
    assume {:print "$at(2,1970,1971)"} true;
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun staking_proxy::set_staking_contract_operator [verification[inconsistency_]] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+499
procedure {:timeLimit 40} {:msg_if_verifies "inconsistency_detected(2,1472,1971)"} $1_staking_proxy_set_staking_contract_operator$verify_inconsistency_(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: $1_staking_contract_Store;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: Table int ($1_staking_contract_StakingContract);
    var $t12: int;
    var $t13: int;
    var $t14: $1_staking_contract_Store;
    var $t15: Table int ($1_staking_contract_StakingContract);
    var $t16: Table int ($1_staking_contract_StakingContract);
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume {:print "$at(2,1472,1473)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume $IsValid'address'($t2);

    // assume forall $rsc: coin::CoinInfo<aptos_coin::AptosCoin>: ResourceDomain<coin::CoinInfo<aptos_coin::AptosCoin>>(): And(WellFormed($rsc), And(Le(Len<optional_aggregator::OptionalAggregator>(select option::Option.vec(select coin::CoinInfo.supply($rsc))), 1), forall $elem: optional_aggregator::OptionalAggregator: select option::Option.vec(select coin::CoinInfo.supply($rsc)): And(And(And(And(And(Iff(option::$is_some<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)), option::$is_none<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem))), Iff(option::$is_some<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)), option::$is_none<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)))), Implies(option::$is_some<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)), Le(select optional_aggregator::Integer.value(option::$borrow<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem))), select optional_aggregator::Integer.limit(option::$borrow<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)))))), Implies(option::$is_some<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)), Le(aggregator::spec_aggregator_get_val(option::$borrow<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem))), aggregator::spec_get_limit(option::$borrow<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)))))), Le(Len<aggregator::Aggregator>(select option::Option.vec(select optional_aggregator::OptionalAggregator.aggregator($elem))), 1)), Le(Len<optional_aggregator::Integer>(select option::Option.vec(select optional_aggregator::OptionalAggregator.integer($elem))), 1)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    (($IsValid'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''($rsc) && ((LenVec($rsc->$supply->$vec) <= 1) && (var $range_1 := $rsc->$supply->$vec; (forall $i_2: int :: InRangeVec($range_1, $i_2) ==> (var $elem := ReadVec($range_1, $i_2);
    ((((((($1_option_$is_some'$1_aggregator_Aggregator'($elem->$aggregator) <==> $1_option_$is_none'$1_optional_aggregator_Integer'($elem->$integer)) && ($1_option_$is_some'$1_optional_aggregator_Integer'($elem->$integer) <==> $1_option_$is_none'$1_aggregator_Aggregator'($elem->$aggregator))) && ($1_option_$is_some'$1_optional_aggregator_Integer'($elem->$integer) ==> ($1_option_$borrow'$1_optional_aggregator_Integer'($elem->$integer)->$value <= $1_option_$borrow'$1_optional_aggregator_Integer'($elem->$integer)->$limit))) && ($1_option_$is_some'$1_aggregator_Aggregator'($elem->$aggregator) ==> ($1_aggregator_spec_aggregator_get_val($1_option_$borrow'$1_aggregator_Aggregator'($elem->$aggregator)) <= $1_aggregator_spec_get_limit($1_option_$borrow'$1_aggregator_Aggregator'($elem->$aggregator))))) && (LenVec($elem->$aggregator->$vec) <= 1)) && (LenVec($elem->$integer->$vec) <= 1)))))))))));

    // assume forall $rsc: coin::CoinStore<aptos_coin::AptosCoin>: ResourceDomain<coin::CoinStore<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''($rsc))));

    // assume forall $rsc: coin::Ghost$supply<aptos_coin::AptosCoin>: ResourceDomain<coin::Ghost$supply<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''($rsc))));

    // assume exists<coin::Ghost$supply<aptos_coin::AptosCoin>>(0x0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume $ResourceExists($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, 0);

    // assume forall $rsc: coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>: ResourceDomain<coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''($rsc))));

    // assume exists<coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>>(0x0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume $ResourceExists($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, 0);

    // assume forall $rsc: chain_status::GenesisEndMarker: ResourceDomain<chain_status::GenesisEndMarker>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0)}(var $rsc := $ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0);
    ($IsValid'$1_chain_status_GenesisEndMarker'($rsc))));

    // assume forall $rsc: timestamp::CurrentTimeMicroseconds: ResourceDomain<timestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_timestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: stake::StakePool: ResourceDomain<stake::StakePool>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_StakePool_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_StakePool_$memory, $a_0);
    ($IsValid'$1_stake_StakePool'($rsc))));

    // assume forall $rsc: stake::ValidatorConfig: ResourceDomain<stake::ValidatorConfig>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorConfig_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorConfig'($rsc))));

    // assume forall $rsc: stake::ValidatorPerformance: ResourceDomain<stake::ValidatorPerformance>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorPerformance'($rsc))));

    // assume forall $rsc: stake::ValidatorSet: ResourceDomain<stake::ValidatorSet>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorSet_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorSet_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorSet'($rsc))));

    // assume forall $rsc: reconfiguration::Configuration: ResourceDomain<reconfiguration::Configuration>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_Configuration_$memory, $a_0);
    ($IsValid'$1_reconfiguration_Configuration'($rsc))));

    // assume forall $rsc: staking_contract::Store: ResourceDomain<staking_contract::Store>(): And(WellFormed($rsc), forall $key: address: select staking_contract::Store.staking_contracts($rsc): And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), i), Index(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_staking_contract_Store_$memory, $a_0)}(var $rsc := $ResourceValue($1_staking_contract_Store_$memory, $a_0);
    (($IsValid'$1_staking_contract_Store'($rsc) && (var $range_1 := $rsc->$staking_contracts; (forall $key: int :: ContainsTable($range_1, $EncodeKey'address'($key)) ==> (((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shares, addr), $1_vector_spec_contains'address'($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, addr)))) && (var $range_2 := $Range(0, LenVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders)); (var $range_3 := $Range(0, LenVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders)); (forall $i_4: int, $i_5: int :: $InRange($range_2, $i_4) ==> $InRange($range_3, $i_5) ==> (var i := $i_4;
    (var j := $i_5;
    (($IsEqual'address'(ReadVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, i), ReadVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, j)) ==> $IsEqual'num'(i, j))))))))))))))));

    // assume Implies(chain_status::$is_operating(), exists<timestamp::CurrentTimeMicroseconds>(0x1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+499
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.spec.move:4:9+93
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, 1));

    // assume Implies(exists<stake::ValidatorSet>(0x1), stake::validator_set_is_valid()) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+499
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:8:9+92
    assume ($ResourceExists($1_stake_ValidatorSet_$memory, 1) ==> $1_stake_validator_set_is_valid($1_stake_StakePool_$memory, $1_stake_ValidatorConfig_$memory, $1_stake_ValidatorPerformance_$memory, $1_stake_ValidatorSet_$memory));

    // assume Implies(chain_status::$is_operating(), exists<stake::ValidatorSet>(0x1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+499
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:12:9+96
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_stake_ValidatorSet_$memory, 1));

    // assume Implies(chain_status::$is_operating(), Ge(timestamp::spec_now_microseconds(), reconfiguration::$last_reconfiguration_time())) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+499
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.spec.move:8:9+137
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) >= $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory)));

    // assume Identical($t5, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:52:9+46
    assume {:print "$at(3,2402,2448)"} true;
    assume ($t5 == $1_signer_$address_of($t0));

    // assume Identical($t6, global<staking_contract::Store>($t5)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:53:9+48
    assume {:print "$at(3,2457,2505)"} true;
    assume ($t6 == $ResourceValue($1_staking_contract_Store_$memory, $t5));

    // assume Identical($t7, And(exists<staking_contract::Store>($t5), simple_map::spec_contains_key<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t6), $t1))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:54:9+131
    assume {:print "$at(3,2514,2645)"} true;
    assume ($t7 == ($ResourceExists($1_staking_contract_Store_$memory, $t5) && $1_simple_map_spec_contains_key'address_$1_staking_contract_StakingContract'($t6->$staking_contracts, $t1)));

    // trace_local[owner]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume {:print "$at(2,1472,1473)"} true;
    assume {:print "$track_local(66,3,0):", $t0} $t0 == $t0;

    // trace_local[old_operator]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume {:print "$track_local(66,3,1):", $t1} $t1 == $t1;

    // trace_local[new_operator]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:33:5+1
    assume {:print "$track_local(66,3,2):", $t2} $t2 == $t2;

    // $t8 := signer::address_of($t0) on_abort goto L4 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:34:29+25
    assume {:print "$at(2,1611,1636)"} true;
    call $t8 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,1611,1636)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(66,3):", $t9} $t9 == $t9;
        goto L4;
    }

    // trace_local[owner_address]($t8) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:34:13+13
    assume {:print "$track_local(66,3,4):", $t8} $t8 == $t8;

    // $t10 := staking_contract::staking_contract_exists($t8, $t1) on_abort goto L4 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:35:13+70
    assume {:print "$at(2,1650,1720)"} true;
    call $t10 := $1_staking_contract_staking_contract_exists($t8, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,1650,1720)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(66,3):", $t9} $t9 == $t9;
        goto L4;
    }

    // if ($t10) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:35:9+318
    if ($t10) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:36:89+13
    assume {:print "$at(2,1812,1825)"} true;
L1:

    // assume Identical($t11, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t8))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:302:9+64
    assume {:print "$at(144,12927,12991)"} true;
    assume ($t11 == $ResourceValue($1_staking_contract_Store_$memory, $t8)->$staking_contracts);

    // $t12 := staking_contract::commission_percentage($t8, $t1) on_abort goto L4 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:36:49+68
    assume {:print "$at(2,1772,1840)"} true;
    call $t12 := $1_staking_contract_commission_percentage($t8, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,1772,1840)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(66,3):", $t9} $t9 == $t9;
        goto L4;
    }

    // trace_local[current_commission_percentage]($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:36:17+29
    assume {:print "$track_local(66,3,3):", $t12} $t12 == $t12;

    // assume Identical($t13, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:188:9+48
    assume {:print "$at(144,7881,7929)"} true;
    assume ($t13 == $1_signer_$address_of($t0));

    // assume Identical($t14, global<staking_contract::Store>($t13)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:190:9+42
    assume {:print "$at(144,8026,8068)"} true;
    assume ($t14 == $ResourceValue($1_staking_contract_Store_$memory, $t13));

    // assume Identical($t15, select staking_contract::Store.staking_contracts($t14)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:191:9+48
    assume {:print "$at(144,8077,8125)"} true;
    assume ($t15 == $t14->$staking_contracts);

    // assume Identical($t16, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t13))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:302:9+64
    assume {:print "$at(144,12927,12991)"} true;
    assume ($t16 == $ResourceValue($1_staking_contract_Store_$memory, $t13)->$staking_contracts);

    // staking_contract::switch_operator($t0, $t1, $t2, $t12) on_abort goto L4 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:37:13+99
    assume {:print "$at(2,1854,1953)"} true;
    call $1_staking_contract_switch_operator($t0, $t1, $t2, $t12);
    if ($abort_flag) {
        assume {:print "$at(2,1854,1953)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(66,3):", $t9} $t9 == $t9;
        goto L4;
    }

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:37:112+1
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:35:9+318
    assume {:print "$at(2,1646,1964)"} true;
L0:

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:38:10+1
    assume {:print "$at(2,1964,1965)"} true;
L2:

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:39:5+1
    assume {:print "$at(2,1970,1971)"} true;
L3:

    // assert Not(false) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:39:5+1
    assume {:print "$at(2,1970,1971)"} true;
    assert {:msg "assert_failed(2,1970,1971): function does not abort under this condition"}
      !false;

    // assert false at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:46:5+571
    assume {:print "$at(3,2080,2651)"} true;
    assert {:msg "assert_failed(3,2080,2651): expected to fail"}
      false;

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:39:5+1
    assume {:print "$at(2,1970,1971)"} true;
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:39:5+1
L4:

    // assert false at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:46:5+571
    assume {:print "$at(3,2080,2651)"} true;
    assert {:msg "assert_failed(3,2080,2651): expected to fail"}
      false;

    // abort($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:39:5+1
    assume {:print "$at(2,1970,1971)"} true;
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun staking_proxy::set_staking_contract_voter [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:59:5+326
procedure {:inline 1} $1_staking_proxy_set_staking_contract_voter(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: $1_staking_contract_Store;
    var $t6: bool;
    var $t7: int;
    var $t8: $1_staking_contract_StakingContract;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: $1_staking_contract_Store;
    var $t15: $1_staking_contract_StakingContract;
    var $t16: int;
    var $t17: Table int ($1_staking_contract_StakingContract);
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // assume Identical($t3, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:93:9+46
    assume {:print "$at(3,3996,4042)"} true;
    assume ($t3 == $1_signer_$address_of($t0));

    // assume Identical($t4, $t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:94:9+27
    assume {:print "$at(3,4051,4078)"} true;
    assume ($t4 == $t3);

    // assume Identical($t5, global<staking_contract::Store>($t4)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:95:9+34
    assume {:print "$at(3,4087,4121)"} true;
    assume ($t5 == $ResourceValue($1_staking_contract_Store_$memory, $t4));

    // assume Identical($t6, And(exists<staking_contract::Store>($t4), simple_map::spec_contains_key<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t5), $t1))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:98:9+120
    assume {:print "$at(3,4169,4289)"} true;
    assume ($t6 == ($ResourceExists($1_staking_contract_Store_$memory, $t4) && $1_simple_map_spec_contains_key'address_$1_staking_contract_StakingContract'($t5->$staking_contracts, $t1)));

    // assume Identical($t7, $t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:101:9+35
    assume {:print "$at(3,4326,4361)"} true;
    assume ($t7 == $t3);

    // assume Identical($t8, simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t5), $t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:102:9+79
    assume {:print "$at(3,4370,4449)"} true;
    assume ($t8 == $1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($t5->$staking_contracts, $t1));

    // assume Identical($t9, select staking_contract::StakingContract.pool_address($t8)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:103:9+49
    assume {:print "$at(3,4458,4507)"} true;
    assume ($t9 == $t8->$pool_address);

    // trace_local[owner]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:59:5+1
    assume {:print "$at(2,2780,2781)"} true;
    assume {:print "$track_local(66,4,0):", $t0} $t0 == $t0;

    // trace_local[operator]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:59:5+1
    assume {:print "$track_local(66,4,1):", $t1} $t1 == $t1;

    // trace_local[new_voter]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:59:5+1
    assume {:print "$track_local(66,4,2):", $t2} $t2 == $t2;

    // $t10 := signer::address_of($t0) on_abort goto L4 with $t11 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:60:29+25
    assume {:print "$at(2,2909,2934)"} true;
    call $t10 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,2909,2934)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(66,4):", $t11} $t11 == $t11;
        goto L4;
    }

    // $t12 := staking_contract::staking_contract_exists($t10, $t1) on_abort goto L4 with $t11 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:61:13+66
    assume {:print "$at(2,2948,3014)"} true;
    call $t12 := $1_staking_contract_staking_contract_exists($t10, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,2948,3014)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(66,4):", $t11} $t11 == $t11;
        goto L4;
    }

    // if ($t12) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:61:9+155
    if ($t12) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:62:44+5
    assume {:print "$at(2,3061,3066)"} true;
L1:

    // assume Identical($t13, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:117:9+48
    assume {:print "$at(144,4862,4910)"} true;
    assume ($t13 == $1_signer_$address_of($t0));

    // assume Identical($t14, global<staking_contract::Store>($t13)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:310:9+34
    assume {:print "$at(144,13175,13209)"} true;
    assume ($t14 == $ResourceValue($1_staking_contract_Store_$memory, $t13));

    // assume Identical($t15, simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t14), $t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:311:9+79
    assume {:print "$at(144,13218,13297)"} true;
    assume ($t15 == $1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($t14->$staking_contracts, $t1));

    // assume Identical($t16, select staking_contract::StakingContract.pool_address($t15)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:312:9+49
    assume {:print "$at(144,13306,13355)"} true;
    assume ($t16 == $t15->$pool_address);

    // assume Identical($t17, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t13))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:302:9+64
    assume {:print "$at(144,12927,12991)"} true;
    assume ($t17 == $ResourceValue($1_staking_contract_Store_$memory, $t13)->$staking_contracts);

    // staking_contract::update_voter($t0, $t1, $t2) on_abort goto L4 with $t11 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:62:13+58
    assume {:print "$at(2,3030,3088)"} true;
    call $1_staking_contract_update_voter($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,3030,3088)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(66,4):", $t11} $t11 == $t11;
        goto L4;
    }

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:62:71+1
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:61:9+155
    assume {:print "$at(2,2944,3099)"} true;
L0:

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:63:10+1
    assume {:print "$at(2,3099,3100)"} true;
L2:

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:64:5+1
    assume {:print "$at(2,3105,3106)"} true;
L3:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:64:5+1
    assume {:print "$at(2,3105,3106)"} true;
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:64:5+1
L4:

    // abort($t11) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:64:5+1
    assume {:print "$at(2,3105,3106)"} true;
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun staking_proxy::set_staking_contract_voter [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:59:5+326
procedure {:timeLimit 40} $1_staking_proxy_set_staking_contract_voter$verify(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: $1_staking_contract_Store;
    var $t6: bool;
    var $t7: int;
    var $t8: $1_staking_contract_StakingContract;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: $1_staking_contract_Store;
    var $t15: $1_staking_contract_StakingContract;
    var $t16: int;
    var $t17: Table int ($1_staking_contract_StakingContract);
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $1_stake_StakePool_$memory#102: $Memory $1_stake_StakePool;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:59:5+1
    assume {:print "$at(2,2780,2781)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:59:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:59:5+1
    assume $IsValid'address'($t2);

    // assume forall $rsc: stake::StakePool: ResourceDomain<stake::StakePool>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:59:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_StakePool_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_StakePool_$memory, $a_0);
    ($IsValid'$1_stake_StakePool'($rsc))));

    // assume forall $rsc: stake::ValidatorConfig: ResourceDomain<stake::ValidatorConfig>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:59:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorConfig_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorConfig'($rsc))));

    // assume forall $rsc: stake::ValidatorPerformance: ResourceDomain<stake::ValidatorPerformance>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:59:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorPerformance'($rsc))));

    // assume forall $rsc: stake::ValidatorSet: ResourceDomain<stake::ValidatorSet>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:59:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorSet_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorSet_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorSet'($rsc))));

    // assume forall $rsc: staking_contract::Store: ResourceDomain<staking_contract::Store>(): And(WellFormed($rsc), forall $key: address: select staking_contract::Store.staking_contracts($rsc): And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), i), Index(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:59:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_staking_contract_Store_$memory, $a_0)}(var $rsc := $ResourceValue($1_staking_contract_Store_$memory, $a_0);
    (($IsValid'$1_staking_contract_Store'($rsc) && (var $range_1 := $rsc->$staking_contracts; (forall $key: int :: ContainsTable($range_1, $EncodeKey'address'($key)) ==> (((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shares, addr), $1_vector_spec_contains'address'($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, addr)))) && (var $range_2 := $Range(0, LenVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders)); (var $range_3 := $Range(0, LenVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders)); (forall $i_4: int, $i_5: int :: $InRange($range_2, $i_4) ==> $InRange($range_3, $i_5) ==> (var i := $i_4;
    (var j := $i_5;
    (($IsEqual'address'(ReadVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, i), ReadVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, j)) ==> $IsEqual'num'(i, j))))))))))))))));

    // assume Implies(exists<stake::ValidatorSet>(0x1), stake::validator_set_is_valid()) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:59:5+326
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:8:9+92
    assume ($ResourceExists($1_stake_ValidatorSet_$memory, 1) ==> $1_stake_validator_set_is_valid($1_stake_StakePool_$memory, $1_stake_ValidatorConfig_$memory, $1_stake_ValidatorPerformance_$memory, $1_stake_ValidatorSet_$memory));

    // assume Identical($t3, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:93:9+46
    assume {:print "$at(3,3996,4042)"} true;
    assume ($t3 == $1_signer_$address_of($t0));

    // assume Identical($t4, $t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:94:9+27
    assume {:print "$at(3,4051,4078)"} true;
    assume ($t4 == $t3);

    // assume Identical($t5, global<staking_contract::Store>($t4)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:95:9+34
    assume {:print "$at(3,4087,4121)"} true;
    assume ($t5 == $ResourceValue($1_staking_contract_Store_$memory, $t4));

    // assume Identical($t6, And(exists<staking_contract::Store>($t4), simple_map::spec_contains_key<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t5), $t1))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:98:9+120
    assume {:print "$at(3,4169,4289)"} true;
    assume ($t6 == ($ResourceExists($1_staking_contract_Store_$memory, $t4) && $1_simple_map_spec_contains_key'address_$1_staking_contract_StakingContract'($t5->$staking_contracts, $t1)));

    // assume Identical($t7, $t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:101:9+35
    assume {:print "$at(3,4326,4361)"} true;
    assume ($t7 == $t3);

    // assume Identical($t8, simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t5), $t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:102:9+79
    assume {:print "$at(3,4370,4449)"} true;
    assume ($t8 == $1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($t5->$staking_contracts, $t1));

    // assume Identical($t9, select staking_contract::StakingContract.pool_address($t8)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:103:9+49
    assume {:print "$at(3,4458,4507)"} true;
    assume ($t9 == $t8->$pool_address);

    // @102 := save_mem(stake::StakePool) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:59:5+1
    assume {:print "$at(2,2780,2781)"} true;
    $1_stake_StakePool_$memory#102 := $1_stake_StakePool_$memory;

    // trace_local[owner]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:59:5+1
    assume {:print "$track_local(66,4,0):", $t0} $t0 == $t0;

    // trace_local[operator]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:59:5+1
    assume {:print "$track_local(66,4,1):", $t1} $t1 == $t1;

    // trace_local[new_voter]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:59:5+1
    assume {:print "$track_local(66,4,2):", $t2} $t2 == $t2;

    // $t10 := signer::address_of($t0) on_abort goto L4 with $t11 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:60:29+25
    assume {:print "$at(2,2909,2934)"} true;
    call $t10 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,2909,2934)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(66,4):", $t11} $t11 == $t11;
        goto L4;
    }

    // $t12 := staking_contract::staking_contract_exists($t10, $t1) on_abort goto L4 with $t11 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:61:13+66
    assume {:print "$at(2,2948,3014)"} true;
    call $t12 := $1_staking_contract_staking_contract_exists($t10, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,2948,3014)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(66,4):", $t11} $t11 == $t11;
        goto L4;
    }

    // if ($t12) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:61:9+155
    if ($t12) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:62:44+5
    assume {:print "$at(2,3061,3066)"} true;
L1:

    // assume Identical($t13, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:117:9+48
    assume {:print "$at(144,4862,4910)"} true;
    assume ($t13 == $1_signer_$address_of($t0));

    // assume Identical($t14, global<staking_contract::Store>($t13)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:310:9+34
    assume {:print "$at(144,13175,13209)"} true;
    assume ($t14 == $ResourceValue($1_staking_contract_Store_$memory, $t13));

    // assume Identical($t15, simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t14), $t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:311:9+79
    assume {:print "$at(144,13218,13297)"} true;
    assume ($t15 == $1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($t14->$staking_contracts, $t1));

    // assume Identical($t16, select staking_contract::StakingContract.pool_address($t15)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:312:9+49
    assume {:print "$at(144,13306,13355)"} true;
    assume ($t16 == $t15->$pool_address);

    // assume Identical($t17, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t13))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:302:9+64
    assume {:print "$at(144,12927,12991)"} true;
    assume ($t17 == $ResourceValue($1_staking_contract_Store_$memory, $t13)->$staking_contracts);

    // staking_contract::update_voter($t0, $t1, $t2) on_abort goto L4 with $t11 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:62:13+58
    assume {:print "$at(2,3030,3088)"} true;
    call $1_staking_contract_update_voter($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,3030,3088)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(66,4):", $t11} $t11 == $t11;
        goto L4;
    }

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:62:71+1
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:61:9+155
    assume {:print "$at(2,2944,3099)"} true;
L0:

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:63:10+1
    assume {:print "$at(2,3099,3100)"} true;
L2:

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:64:5+1
    assume {:print "$at(2,3105,3106)"} true;
L3:

    // assert Not(And($t6, Not(exists[@102]<stake::StakePool>($t9)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:105:9+77
    assume {:print "$at(3,4517,4594)"} true;
    assert {:msg "assert_failed(3,4517,4594): function does not abort under this condition"}
      !($t6 && !$ResourceExists($1_stake_StakePool_$memory#102, $t9));

    // assert Not(And($t6, Not(exists[@102]<stake::StakePool>(select stake::OwnerCapability.pool_address(select staking_contract::StakingContract.owner_cap($t8)))))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:106:9+104
    assume {:print "$at(3,4603,4707)"} true;
    assert {:msg "assert_failed(3,4603,4707): function does not abort under this condition"}
      !($t6 && !$ResourceExists($1_stake_StakePool_$memory#102, $t8->$owner_cap->$pool_address));

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:106:9+104
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:64:5+1
    assume {:print "$at(2,3105,3106)"} true;
L4:

    // assert Or(And($t6, Not(exists[@102]<stake::StakePool>($t9))), And($t6, Not(exists[@102]<stake::StakePool>(select stake::OwnerCapability.pool_address(select staking_contract::StakingContract.owner_cap($t8)))))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:78:5+135
    assume {:print "$at(3,3540,3675)"} true;
    assert {:msg "assert_failed(3,3540,3675): abort not covered by any of the `aborts_if` clauses"}
      (($t6 && !$ResourceExists($1_stake_StakePool_$memory#102, $t9)) || ($t6 && !$ResourceExists($1_stake_StakePool_$memory#102, $t8->$owner_cap->$pool_address)));

    // abort($t11) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:78:5+135
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun staking_proxy::set_staking_contract_voter [verification[inconsistency_]] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:59:5+326
procedure {:timeLimit 40} {:msg_if_verifies "inconsistency_detected(2,2780,3106)"} $1_staking_proxy_set_staking_contract_voter$verify_inconsistency_(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: $1_staking_contract_Store;
    var $t6: bool;
    var $t7: int;
    var $t8: $1_staking_contract_StakingContract;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: $1_staking_contract_Store;
    var $t15: $1_staking_contract_StakingContract;
    var $t16: int;
    var $t17: Table int ($1_staking_contract_StakingContract);
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $1_stake_StakePool_$memory#102: $Memory $1_stake_StakePool;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:59:5+1
    assume {:print "$at(2,2780,2781)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:59:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:59:5+1
    assume $IsValid'address'($t2);

    // assume forall $rsc: stake::StakePool: ResourceDomain<stake::StakePool>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:59:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_StakePool_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_StakePool_$memory, $a_0);
    ($IsValid'$1_stake_StakePool'($rsc))));

    // assume forall $rsc: stake::ValidatorConfig: ResourceDomain<stake::ValidatorConfig>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:59:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorConfig_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorConfig'($rsc))));

    // assume forall $rsc: stake::ValidatorPerformance: ResourceDomain<stake::ValidatorPerformance>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:59:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorPerformance'($rsc))));

    // assume forall $rsc: stake::ValidatorSet: ResourceDomain<stake::ValidatorSet>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:59:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorSet_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorSet_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorSet'($rsc))));

    // assume forall $rsc: staking_contract::Store: ResourceDomain<staking_contract::Store>(): And(WellFormed($rsc), forall $key: address: select staking_contract::Store.staking_contracts($rsc): And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), i), Index(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:59:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_staking_contract_Store_$memory, $a_0)}(var $rsc := $ResourceValue($1_staking_contract_Store_$memory, $a_0);
    (($IsValid'$1_staking_contract_Store'($rsc) && (var $range_1 := $rsc->$staking_contracts; (forall $key: int :: ContainsTable($range_1, $EncodeKey'address'($key)) ==> (((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shares, addr), $1_vector_spec_contains'address'($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, addr)))) && (var $range_2 := $Range(0, LenVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders)); (var $range_3 := $Range(0, LenVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders)); (forall $i_4: int, $i_5: int :: $InRange($range_2, $i_4) ==> $InRange($range_3, $i_5) ==> (var i := $i_4;
    (var j := $i_5;
    (($IsEqual'address'(ReadVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, i), ReadVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, j)) ==> $IsEqual'num'(i, j))))))))))))))));

    // assume Implies(exists<stake::ValidatorSet>(0x1), stake::validator_set_is_valid()) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:59:5+326
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:8:9+92
    assume ($ResourceExists($1_stake_ValidatorSet_$memory, 1) ==> $1_stake_validator_set_is_valid($1_stake_StakePool_$memory, $1_stake_ValidatorConfig_$memory, $1_stake_ValidatorPerformance_$memory, $1_stake_ValidatorSet_$memory));

    // assume Identical($t3, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:93:9+46
    assume {:print "$at(3,3996,4042)"} true;
    assume ($t3 == $1_signer_$address_of($t0));

    // assume Identical($t4, $t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:94:9+27
    assume {:print "$at(3,4051,4078)"} true;
    assume ($t4 == $t3);

    // assume Identical($t5, global<staking_contract::Store>($t4)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:95:9+34
    assume {:print "$at(3,4087,4121)"} true;
    assume ($t5 == $ResourceValue($1_staking_contract_Store_$memory, $t4));

    // assume Identical($t6, And(exists<staking_contract::Store>($t4), simple_map::spec_contains_key<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t5), $t1))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:98:9+120
    assume {:print "$at(3,4169,4289)"} true;
    assume ($t6 == ($ResourceExists($1_staking_contract_Store_$memory, $t4) && $1_simple_map_spec_contains_key'address_$1_staking_contract_StakingContract'($t5->$staking_contracts, $t1)));

    // assume Identical($t7, $t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:101:9+35
    assume {:print "$at(3,4326,4361)"} true;
    assume ($t7 == $t3);

    // assume Identical($t8, simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t5), $t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:102:9+79
    assume {:print "$at(3,4370,4449)"} true;
    assume ($t8 == $1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($t5->$staking_contracts, $t1));

    // assume Identical($t9, select staking_contract::StakingContract.pool_address($t8)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:103:9+49
    assume {:print "$at(3,4458,4507)"} true;
    assume ($t9 == $t8->$pool_address);

    // @102 := save_mem(stake::StakePool) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:59:5+1
    assume {:print "$at(2,2780,2781)"} true;
    $1_stake_StakePool_$memory#102 := $1_stake_StakePool_$memory;

    // trace_local[owner]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:59:5+1
    assume {:print "$track_local(66,4,0):", $t0} $t0 == $t0;

    // trace_local[operator]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:59:5+1
    assume {:print "$track_local(66,4,1):", $t1} $t1 == $t1;

    // trace_local[new_voter]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:59:5+1
    assume {:print "$track_local(66,4,2):", $t2} $t2 == $t2;

    // $t10 := signer::address_of($t0) on_abort goto L4 with $t11 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:60:29+25
    assume {:print "$at(2,2909,2934)"} true;
    call $t10 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,2909,2934)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(66,4):", $t11} $t11 == $t11;
        goto L4;
    }

    // $t12 := staking_contract::staking_contract_exists($t10, $t1) on_abort goto L4 with $t11 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:61:13+66
    assume {:print "$at(2,2948,3014)"} true;
    call $t12 := $1_staking_contract_staking_contract_exists($t10, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,2948,3014)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(66,4):", $t11} $t11 == $t11;
        goto L4;
    }

    // if ($t12) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:61:9+155
    if ($t12) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:62:44+5
    assume {:print "$at(2,3061,3066)"} true;
L1:

    // assume Identical($t13, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:117:9+48
    assume {:print "$at(144,4862,4910)"} true;
    assume ($t13 == $1_signer_$address_of($t0));

    // assume Identical($t14, global<staking_contract::Store>($t13)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:310:9+34
    assume {:print "$at(144,13175,13209)"} true;
    assume ($t14 == $ResourceValue($1_staking_contract_Store_$memory, $t13));

    // assume Identical($t15, simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t14), $t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:311:9+79
    assume {:print "$at(144,13218,13297)"} true;
    assume ($t15 == $1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($t14->$staking_contracts, $t1));

    // assume Identical($t16, select staking_contract::StakingContract.pool_address($t15)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:312:9+49
    assume {:print "$at(144,13306,13355)"} true;
    assume ($t16 == $t15->$pool_address);

    // assume Identical($t17, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t13))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:302:9+64
    assume {:print "$at(144,12927,12991)"} true;
    assume ($t17 == $ResourceValue($1_staking_contract_Store_$memory, $t13)->$staking_contracts);

    // staking_contract::update_voter($t0, $t1, $t2) on_abort goto L4 with $t11 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:62:13+58
    assume {:print "$at(2,3030,3088)"} true;
    call $1_staking_contract_update_voter($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,3030,3088)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(66,4):", $t11} $t11 == $t11;
        goto L4;
    }

    // goto L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:62:71+1
    goto L2;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:61:9+155
    assume {:print "$at(2,2944,3099)"} true;
L0:

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:63:10+1
    assume {:print "$at(2,3099,3100)"} true;
L2:

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:64:5+1
    assume {:print "$at(2,3105,3106)"} true;
L3:

    // assert Not(And($t6, Not(exists[@102]<stake::StakePool>($t9)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:105:9+77
    assume {:print "$at(3,4517,4594)"} true;
    assert {:msg "assert_failed(3,4517,4594): function does not abort under this condition"}
      !($t6 && !$ResourceExists($1_stake_StakePool_$memory#102, $t9));

    // assert Not(And($t6, Not(exists[@102]<stake::StakePool>(select stake::OwnerCapability.pool_address(select staking_contract::StakingContract.owner_cap($t8)))))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:106:9+104
    assume {:print "$at(3,4603,4707)"} true;
    assert {:msg "assert_failed(3,4603,4707): function does not abort under this condition"}
      !($t6 && !$ResourceExists($1_stake_StakePool_$memory#102, $t8->$owner_cap->$pool_address));

    // assert false at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:78:5+135
    assume {:print "$at(3,3540,3675)"} true;
    assert {:msg "assert_failed(3,3540,3675): expected to fail"}
      false;

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:106:9+104
    assume {:print "$at(3,4603,4707)"} true;
    return;

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:64:5+1
    assume {:print "$at(2,3105,3106)"} true;
L4:

    // assert Or(And($t6, Not(exists[@102]<stake::StakePool>($t9))), And($t6, Not(exists[@102]<stake::StakePool>(select stake::OwnerCapability.pool_address(select staking_contract::StakingContract.owner_cap($t8)))))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:78:5+135
    assume {:print "$at(3,3540,3675)"} true;
    assert {:msg "assert_failed(3,3540,3675): abort not covered by any of the `aborts_if` clauses"}
      (($t6 && !$ResourceExists($1_stake_StakePool_$memory#102, $t9)) || ($t6 && !$ResourceExists($1_stake_StakePool_$memory#102, $t8->$owner_cap->$pool_address)));

    // assert false at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:78:5+135
    assert {:msg "assert_failed(3,3540,3675): expected to fail"}
      false;

    // abort($t11) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:78:5+135
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun staking_proxy::set_vesting_contract_operator [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+691
procedure {:inline 1} $1_staking_proxy_set_vesting_contract_operator(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: Vec (int);
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: Vec (int);
    var $t8: int;
    var $t9: int;
    var $t10: Vec (int);
    var $t11: int;
    var $t12: int;
    var $t13: Vec (int);
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: bool;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: $1_vesting_VestingContract;
    var $t24: int;
    var $t25: int;
    var $t26: $1_staking_contract_Store;
    var $t27: Table int ($1_staking_contract_StakingContract);
    var $t28: $1_staking_contract_StakingContract;
    var $t29: $1_vesting_VestingContract;
    var $t30: Table int ($1_staking_contract_StakingContract);
    var $t31: int;
    var $t32: $1_stake_StakePool;
    var $t33: int;
    var $t34: int;
    var $t35: int;
    var $t36: int;
    var $t37: $1_stake_StakePool;
    var $t38: $1_stake_ValidatorSet;
    var $t39: bool;
    var $t40: int;
    var $t41: int;
    var $t42: int;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $temp_0'vec'address'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // assume Identical($t9, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:26:9+46
    assume {:print "$at(3,1031,1077)"} true;
    assume ($t9 == $1_signer_$address_of($t0));

    // assume Identical($t10, select vesting::AdminStore.vesting_contracts(global<vesting::AdminStore>($t9))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:27:9+85
    assume {:print "$at(3,1086,1171)"} true;
    assume ($t10 == $ResourceValue($1_vesting_AdminStore_$memory, $t9)->$vesting_contracts);

    // trace_local[owner]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume {:print "$at(2,775,776)"} true;
    assume {:print "$track_local(66,5,0):", $t0} $t0 == $t0;

    // trace_local[old_operator]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume {:print "$track_local(66,5,1):", $t1} $t1 == $t1;

    // trace_local[new_operator]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume {:print "$track_local(66,5,2):", $t2} $t2 == $t2;

    // $t11 := signer::address_of($t0) on_abort goto L8 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:22:29+25
    assume {:print "$at(2,914,939)"} true;
    call $t11 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,914,939)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(66,5):", $t12} $t12 == $t12;
        goto L8;
    }

    // $t13 := vesting::vesting_contracts($t11) on_abort goto L8 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:23:34+41
    assume {:print "$at(2,974,1015)"} true;
    call $t13 := $1_vesting_vesting_contracts($t11);
    if ($abort_flag) {
        assume {:print "$at(2,974,1015)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(66,5):", $t12} $t12 == $t12;
        goto L8;
    }

    // trace_local[v#275]($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:24:9+434
    assume {:print "$at(2,1025,1459)"} true;
    assume {:print "$track_local(66,5,7):", $t13} $t13 == $t13;

    // $t14 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:281:17+1
    assume {:print "$at(18,9989,9990)"} true;
    $t14 := 0;
    assume $IsValid'u64'($t14);

    // trace_local[i#277]($t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:281:13+1
    assume {:print "$track_local(66,5,5):", $t14} $t14 == $t14;

    // $t15 := vector::length<address>($t13) on_abort goto L8 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:282:19+9
    assume {:print "$at(18,10010,10019)"} true;
    call $t15 := $1_vector_length'address'($t13);
    if ($abort_flag) {
        assume {:print "$at(18,10010,10019)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(66,5):", $t12} $t12 == $t12;
        goto L8;
    }

    // trace_local[len#278]($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:282:13+3
    assume {:print "$track_local(66,5,6):", $t15} $t15 == $t15;

    // label L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume {:print "$at(18,10036,10037)"} true;
L5:

    // $t5 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume {:print "$at(18,10036,10037)"} true;
    havoc $t5;

    // assume WellFormed($t5) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'u64'($t5);

    // $t16 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t16;

    // assume WellFormed($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'bool'($t16);

    // $t17 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t17;

    // assume WellFormed($t17) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'address'($t17);

    // $t18 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t18;

    // assume WellFormed($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'address'($t18);

    // $t19 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t19;

    // assume WellFormed($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'bool'($t19);

    // $t20 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t20;

    // assume WellFormed($t20) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'u64'($t20);

    // $t21 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t21;

    // assume WellFormed($t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'u64'($t21);

    // $t22 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t22;

    // assume WellFormed($t22) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'u64'($t22);

    // trace_local[i#277]($t5) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume {:print "$info(): enter loop, variable(s) i#277 havocked and reassigned"} true;
    assume {:print "$track_local(66,5,5):", $t5} $t5 == $t5;

    // assume Not(AbortFlag()) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume !$abort_flag;

    // $t16 := <($t5, $t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:18+1
    call $t16 := $Lt($t5, $t15);

    // if ($t16) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:9+78
    if ($t16) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:9+78
L1:

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:284:22+1
    assume {:print "$at(18,10068,10069)"} true;
L2:

    // $t17 := vector::borrow<address>($t13, $t5) on_abort goto L8 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:284:15+12
    assume {:print "$at(18,10061,10073)"} true;
    call $t17 := $1_vector_borrow'address'($t13, $t5);
    if ($abort_flag) {
        assume {:print "$at(18,10061,10073)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(66,5):", $t12} $t12 == $t12;
        goto L8;
    }

    // trace_local[vesting_contract#280]($t17) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:25:17+16
    assume {:print "$at(2,1102,1118)"} true;
    assume {:print "$track_local(66,5,8):", $t17} $t17 == $t17;

    // $t18 := vesting::operator($t17) on_abort goto L8 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:26:17+35
    assume {:print "$at(2,1156,1191)"} true;
    call $t18 := $1_vesting_operator($t17);
    if ($abort_flag) {
        assume {:print "$at(2,1156,1191)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(66,5):", $t12} $t12 == $t12;
        goto L8;
    }

    // $t19 := ==($t18, $t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:26:53+2
    $t19 := $IsEqual'address'($t18, $t1);

    // if ($t19) goto L4 else goto L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:26:13+295
    if ($t19) { goto L4; } else { goto L3; }

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:27:93+16
    assume {:print "$at(2,1303,1319)"} true;
L4:

    // $t20 := vesting::operator_commission_percentage($t17) on_abort goto L8 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:27:53+57
    assume {:print "$at(2,1263,1320)"} true;
    call $t20 := $1_vesting_operator_commission_percentage($t17);
    if ($abort_flag) {
        assume {:print "$at(2,1263,1320)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(66,5):", $t12} $t12 == $t12;
        goto L8;
    }

    // trace_local[current_commission_percentage#281]($t20) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:27:21+29
    assume {:print "$track_local(66,5,4):", $t20} $t20 == $t20;

    // assume Identical($t23, global<vesting::VestingContract>($t17)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:253:9+65
    assume {:print "$at(162,11342,11407)"} true;
    assume ($t23 == $ResourceValue($1_vesting_VestingContract_$memory, $t17));

    // assume Identical($t24, select account::SignerCapability.account(select vesting::VestingContract.signer_cap($t23))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:254:9+46
    assume {:print "$at(162,11416,11462)"} true;
    assume ($t24 == $t23->$signer_cap->$account);

    // assume Identical($t25, select vesting::StakingInfo.operator(select vesting::VestingContract.staking($t23))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:255:9+53
    assume {:print "$at(162,11471,11524)"} true;
    assume ($t25 == $t23->$staking->$operator);

    // assume Identical($t26, global<staking_contract::Store>($t24)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:257:9+49
    assume {:print "$at(162,11631,11680)"} true;
    assume ($t26 == $ResourceValue($1_staking_contract_Store_$memory, $t24));

    // assume Identical($t27, select staking_contract::Store.staking_contracts($t26)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:258:9+48
    assume {:print "$at(162,11689,11737)"} true;
    assume ($t27 == $t26->$staking_contracts);

    // assume Identical($t28, simple_map::spec_get<address, staking_contract::StakingContract>($t27, $t25)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:261:9+77
    assume {:print "$at(162,11829,11906)"} true;
    assume ($t28 == $1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($t27, $t25));

    // assume Identical($t29, global<vesting::VestingContract>($t17)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:515:9+65
    assume {:print "$at(162,23072,23137)"} true;
    assume ($t29 == $ResourceValue($1_vesting_VestingContract_$memory, $t17));

    // assume Identical($t30, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t24))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:302:9+64
    assume {:print "$at(144,12927,12991)"} true;
    assume ($t30 == $ResourceValue($1_staking_contract_Store_$memory, $t24)->$staking_contracts);

    // assume Identical($t31, select staking_contract::StakingContract.pool_address($t28)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:474:9+49
    assume {:print "$at(162,20898,20947)"} true;
    assume ($t31 == $t28->$pool_address);

    // assume Identical($t32, global<stake::StakePool>($t31)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:476:9+56
    assume {:print "$at(162,21015,21071)"} true;
    assume ($t32 == $ResourceValue($1_stake_StakePool_$memory, $t31));

    // assume Identical($t33, select coin::Coin.value(select stake::StakePool.inactive($t32))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:477:9+41
    assume {:print "$at(162,21080,21121)"} true;
    assume ($t33 == $t32->$inactive->$value);

    // assume Identical($t34, select coin::Coin.value(select stake::StakePool.pending_inactive($t32))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:478:9+57
    assume {:print "$at(162,21130,21187)"} true;
    assume ($t34 == $t32->$pending_inactive->$value);

    // assume Identical($t35, Add($t33, $t34)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:482:9+63
    assume {:print "$at(162,21299,21362)"} true;
    assume ($t35 == ($t33 + $t34));

    // assume Identical($t36, select stake::OwnerCapability.pool_address(select staking_contract::StakingContract.owner_cap($t28))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:483:9+61
    assume {:print "$at(162,21371,21432)"} true;
    assume ($t36 == $t28->$owner_cap->$pool_address);

    // assume Identical($t37, global<stake::StakePool>($t36)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:485:9+60
    assume {:print "$at(162,21502,21562)"} true;
    assume ($t37 == $ResourceValue($1_stake_StakePool_$memory, $t36));

    // assume Identical($t38, global<stake::ValidatorSet>(0x1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:487:9+66
    assume {:print "$at(162,21637,21703)"} true;
    assume ($t38 == $ResourceValue($1_stake_ValidatorSet_$memory, 1));

    // assume Identical($t39, And(And(Not(stake::spec_contains(select stake::ValidatorSet.pending_active($t38), $t36)), Not(stake::spec_contains(select stake::ValidatorSet.active_validators($t38), $t36))), Not(stake::spec_contains(select stake::ValidatorSet.pending_inactive($t38), $t36)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:488:9+260
    assume {:print "$at(162,21712,21972)"} true;
    assume ($t39 == ((!$1_stake_spec_contains($t38->$pending_active, $t36) && !$1_stake_spec_contains($t38->$active_validators, $t36)) && !$1_stake_spec_contains($t38->$pending_inactive, $t36)));

    // assume Identical($t40, select coin::Coin.value(select stake::StakePool.inactive($t37))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:491:9+45
    assume {:print "$at(162,21981,22026)"} true;
    assume ($t40 == $t37->$inactive->$value);

    // assume Identical($t41, select coin::Coin.value(select stake::StakePool.pending_inactive($t37))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:492:9+61
    assume {:print "$at(162,22035,22096)"} true;
    assume ($t41 == $t37->$pending_inactive->$value);

    // assume Identical($t42, Add($t40, $t41)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:493:9+53
    assume {:print "$at(162,22105,22158)"} true;
    assume ($t42 == ($t40 + $t41));

    // vesting::update_operator($t0, $t17, $t2, $t20) on_abort goto L8 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:28:17+94
    assume {:print "$at(2,1338,1432)"} true;
    call $1_vesting_update_operator($t0, $t17, $t2, $t20);
    if ($abort_flag) {
        assume {:print "$at(2,1338,1432)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(66,5):", $t12} $t12 == $t12;
        goto L8;
    }

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:17+1
    assume {:print "$at(18,10092,10093)"} true;
L3:

    // $t21 := 1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:21+1
    assume {:print "$at(18,10096,10097)"} true;
    $t21 := 1;
    assume $IsValid'u64'($t21);

    // $t22 := +($t5, $t21) on_abort goto L8 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:19+1
    call $t22 := $AddU64($t5, $t21);
    if ($abort_flag) {
        assume {:print "$at(18,10094,10095)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(66,5):", $t12} $t12 == $t12;
        goto L8;
    }

    // trace_local[i#277]($t22) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:13+1
    assume {:print "$track_local(66,5,5):", $t22} $t22 == $t22;

    // goto L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:13+9
    goto L6;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:30:11+1
    assume {:print "$at(2,1459,1460)"} true;
L0:

    // goto L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:30:11+1
    assume {:print "$at(2,1459,1460)"} true;
    goto L7;

    // label L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:30:11+1
    // Loop invariant checking block for the loop started with header: L5
L6:

    // stop() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:30:11+1
    assume {:print "$at(2,1459,1460)"} true;
    assume false;
    return;

    // label L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:31:5+1
    assume {:print "$at(2,1465,1466)"} true;
L7:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:31:5+1
    assume {:print "$at(2,1465,1466)"} true;
    return;

    // label L8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:31:5+1
L8:

    // abort($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:31:5+1
    assume {:print "$at(2,1465,1466)"} true;
    $abort_code := $t12;
    $abort_flag := true;
    return;

}

// fun staking_proxy::set_vesting_contract_operator [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+691
procedure {:timeLimit 40} $1_staking_proxy_set_vesting_contract_operator$verify(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: Vec (int);
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: Vec (int);
    var $t8: int;
    var $t9: int;
    var $t10: Vec (int);
    var $t11: int;
    var $t12: int;
    var $t13: Vec (int);
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: bool;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: $1_vesting_VestingContract;
    var $t24: int;
    var $t25: int;
    var $t26: $1_staking_contract_Store;
    var $t27: Table int ($1_staking_contract_StakingContract);
    var $t28: $1_staking_contract_StakingContract;
    var $t29: $1_vesting_VestingContract;
    var $t30: Table int ($1_staking_contract_StakingContract);
    var $t31: int;
    var $t32: $1_stake_StakePool;
    var $t33: int;
    var $t34: int;
    var $t35: int;
    var $t36: int;
    var $t37: $1_stake_StakePool;
    var $t38: $1_stake_ValidatorSet;
    var $t39: bool;
    var $t40: int;
    var $t41: int;
    var $t42: int;
    var $t43: Vec (int);
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $temp_0'vec'address'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume {:print "$at(2,775,776)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume $IsValid'address'($t2);

    // assume forall $rsc: coin::CoinInfo<aptos_coin::AptosCoin>: ResourceDomain<coin::CoinInfo<aptos_coin::AptosCoin>>(): And(WellFormed($rsc), And(Le(Len<optional_aggregator::OptionalAggregator>(select option::Option.vec(select coin::CoinInfo.supply($rsc))), 1), forall $elem: optional_aggregator::OptionalAggregator: select option::Option.vec(select coin::CoinInfo.supply($rsc)): And(And(And(And(And(Iff(option::$is_some<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)), option::$is_none<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem))), Iff(option::$is_some<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)), option::$is_none<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)))), Implies(option::$is_some<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)), Le(select optional_aggregator::Integer.value(option::$borrow<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem))), select optional_aggregator::Integer.limit(option::$borrow<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)))))), Implies(option::$is_some<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)), Le(aggregator::spec_aggregator_get_val(option::$borrow<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem))), aggregator::spec_get_limit(option::$borrow<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)))))), Le(Len<aggregator::Aggregator>(select option::Option.vec(select optional_aggregator::OptionalAggregator.aggregator($elem))), 1)), Le(Len<optional_aggregator::Integer>(select option::Option.vec(select optional_aggregator::OptionalAggregator.integer($elem))), 1)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    (($IsValid'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''($rsc) && ((LenVec($rsc->$supply->$vec) <= 1) && (var $range_1 := $rsc->$supply->$vec; (forall $i_2: int :: InRangeVec($range_1, $i_2) ==> (var $elem := ReadVec($range_1, $i_2);
    ((((((($1_option_$is_some'$1_aggregator_Aggregator'($elem->$aggregator) <==> $1_option_$is_none'$1_optional_aggregator_Integer'($elem->$integer)) && ($1_option_$is_some'$1_optional_aggregator_Integer'($elem->$integer) <==> $1_option_$is_none'$1_aggregator_Aggregator'($elem->$aggregator))) && ($1_option_$is_some'$1_optional_aggregator_Integer'($elem->$integer) ==> ($1_option_$borrow'$1_optional_aggregator_Integer'($elem->$integer)->$value <= $1_option_$borrow'$1_optional_aggregator_Integer'($elem->$integer)->$limit))) && ($1_option_$is_some'$1_aggregator_Aggregator'($elem->$aggregator) ==> ($1_aggregator_spec_aggregator_get_val($1_option_$borrow'$1_aggregator_Aggregator'($elem->$aggregator)) <= $1_aggregator_spec_get_limit($1_option_$borrow'$1_aggregator_Aggregator'($elem->$aggregator))))) && (LenVec($elem->$aggregator->$vec) <= 1)) && (LenVec($elem->$integer->$vec) <= 1)))))))))));

    // assume forall $rsc: coin::CoinStore<aptos_coin::AptosCoin>: ResourceDomain<coin::CoinStore<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''($rsc))));

    // assume forall $rsc: coin::Ghost$supply<aptos_coin::AptosCoin>: ResourceDomain<coin::Ghost$supply<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''($rsc))));

    // assume exists<coin::Ghost$supply<aptos_coin::AptosCoin>>(0x0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume $ResourceExists($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, 0);

    // assume forall $rsc: coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>: ResourceDomain<coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''($rsc))));

    // assume exists<coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>>(0x0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume $ResourceExists($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, 0);

    // assume forall $rsc: chain_status::GenesisEndMarker: ResourceDomain<chain_status::GenesisEndMarker>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0)}(var $rsc := $ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0);
    ($IsValid'$1_chain_status_GenesisEndMarker'($rsc))));

    // assume forall $rsc: timestamp::CurrentTimeMicroseconds: ResourceDomain<timestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_timestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: stake::StakePool: ResourceDomain<stake::StakePool>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_StakePool_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_StakePool_$memory, $a_0);
    ($IsValid'$1_stake_StakePool'($rsc))));

    // assume forall $rsc: stake::ValidatorConfig: ResourceDomain<stake::ValidatorConfig>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorConfig_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorConfig'($rsc))));

    // assume forall $rsc: stake::ValidatorPerformance: ResourceDomain<stake::ValidatorPerformance>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorPerformance'($rsc))));

    // assume forall $rsc: stake::ValidatorSet: ResourceDomain<stake::ValidatorSet>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorSet_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorSet_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorSet'($rsc))));

    // assume forall $rsc: reconfiguration::Configuration: ResourceDomain<reconfiguration::Configuration>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_Configuration_$memory, $a_0);
    ($IsValid'$1_reconfiguration_Configuration'($rsc))));

    // assume forall $rsc: staking_contract::Store: ResourceDomain<staking_contract::Store>(): And(WellFormed($rsc), forall $key: address: select staking_contract::Store.staking_contracts($rsc): And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), i), Index(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_staking_contract_Store_$memory, $a_0)}(var $rsc := $ResourceValue($1_staking_contract_Store_$memory, $a_0);
    (($IsValid'$1_staking_contract_Store'($rsc) && (var $range_1 := $rsc->$staking_contracts; (forall $key: int :: ContainsTable($range_1, $EncodeKey'address'($key)) ==> (((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shares, addr), $1_vector_spec_contains'address'($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, addr)))) && (var $range_2 := $Range(0, LenVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders)); (var $range_3 := $Range(0, LenVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders)); (forall $i_4: int, $i_5: int :: $InRange($range_2, $i_4) ==> $InRange($range_3, $i_5) ==> (var i := $i_4;
    (var j := $i_5;
    (($IsEqual'address'(ReadVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, i), ReadVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, j)) ==> $IsEqual'num'(i, j))))))))))))))));

    // assume forall $rsc: vesting::AdminStore: ResourceDomain<vesting::AdminStore>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_AdminStore_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_AdminStore_$memory, $a_0);
    ($IsValid'$1_vesting_AdminStore'($rsc))));

    // assume forall $rsc: vesting::VestingContract: ResourceDomain<vesting::VestingContract>(): And(WellFormed($rsc), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($rsc)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_VestingContract_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_VestingContract_$memory, $a_0);
    (($IsValid'$1_vesting_VestingContract'($rsc) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($rsc->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($rsc->$grant_pool->$shareholders, addr)))) && (var $range_1 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (var $range_2 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'(ReadVec($rsc->$grant_pool->$shareholders, i), ReadVec($rsc->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j)))))))))))));

    // assume Implies(chain_status::$is_operating(), exists<timestamp::CurrentTimeMicroseconds>(0x1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+691
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.spec.move:4:9+93
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, 1));

    // assume Implies(exists<stake::ValidatorSet>(0x1), stake::validator_set_is_valid()) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+691
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:8:9+92
    assume ($ResourceExists($1_stake_ValidatorSet_$memory, 1) ==> $1_stake_validator_set_is_valid($1_stake_StakePool_$memory, $1_stake_ValidatorConfig_$memory, $1_stake_ValidatorPerformance_$memory, $1_stake_ValidatorSet_$memory));

    // assume Implies(chain_status::$is_operating(), exists<stake::ValidatorSet>(0x1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+691
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:12:9+96
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_stake_ValidatorSet_$memory, 1));

    // assume Implies(chain_status::$is_operating(), Ge(timestamp::spec_now_microseconds(), reconfiguration::$last_reconfiguration_time())) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+691
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.spec.move:8:9+137
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) >= $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory)));

    // assume Identical($t9, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:26:9+46
    assume {:print "$at(3,1031,1077)"} true;
    assume ($t9 == $1_signer_$address_of($t0));

    // assume Identical($t10, select vesting::AdminStore.vesting_contracts(global<vesting::AdminStore>($t9))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:27:9+85
    assume {:print "$at(3,1086,1171)"} true;
    assume ($t10 == $ResourceValue($1_vesting_AdminStore_$memory, $t9)->$vesting_contracts);

    // trace_local[owner]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume {:print "$at(2,775,776)"} true;
    assume {:print "$track_local(66,5,0):", $t0} $t0 == $t0;

    // trace_local[old_operator]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume {:print "$track_local(66,5,1):", $t1} $t1 == $t1;

    // trace_local[new_operator]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume {:print "$track_local(66,5,2):", $t2} $t2 == $t2;

    // $t11 := signer::address_of($t0) on_abort goto L8 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:22:29+25
    assume {:print "$at(2,914,939)"} true;
    call $t11 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,914,939)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(66,5):", $t12} $t12 == $t12;
        goto L8;
    }

    // $t13 := vesting::vesting_contracts($t11) on_abort goto L8 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:23:34+41
    assume {:print "$at(2,974,1015)"} true;
    call $t13 := $1_vesting_vesting_contracts($t11);
    if ($abort_flag) {
        assume {:print "$at(2,974,1015)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(66,5):", $t12} $t12 == $t12;
        goto L8;
    }

    // trace_local[v#275]($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:24:9+434
    assume {:print "$at(2,1025,1459)"} true;
    assume {:print "$track_local(66,5,7):", $t13} $t13 == $t13;

    // $t14 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:281:17+1
    assume {:print "$at(18,9989,9990)"} true;
    $t14 := 0;
    assume $IsValid'u64'($t14);

    // trace_local[i#277]($t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:281:13+1
    assume {:print "$track_local(66,5,5):", $t14} $t14 == $t14;

    // $t15 := vector::length<address>($t13) on_abort goto L8 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:282:19+9
    assume {:print "$at(18,10010,10019)"} true;
    call $t15 := $1_vector_length'address'($t13);
    if ($abort_flag) {
        assume {:print "$at(18,10010,10019)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(66,5):", $t12} $t12 == $t12;
        goto L8;
    }

    // trace_local[len#278]($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:282:13+3
    assume {:print "$track_local(66,5,6):", $t15} $t15 == $t15;

    // label L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume {:print "$at(18,10036,10037)"} true;
L5:

    // $t5 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume {:print "$at(18,10036,10037)"} true;
    havoc $t5;

    // assume WellFormed($t5) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'u64'($t5);

    // $t16 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t16;

    // assume WellFormed($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'bool'($t16);

    // $t17 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t17;

    // assume WellFormed($t17) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'address'($t17);

    // $t18 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t18;

    // assume WellFormed($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'address'($t18);

    // $t19 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t19;

    // assume WellFormed($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'bool'($t19);

    // $t20 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t20;

    // assume WellFormed($t20) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'u64'($t20);

    // $t21 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t21;

    // assume WellFormed($t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'u64'($t21);

    // $t22 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t22;

    // assume WellFormed($t22) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'u64'($t22);

    // trace_local[i#277]($t5) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume {:print "$info(): enter loop, variable(s) i#277 havocked and reassigned"} true;
    assume {:print "$track_local(66,5,5):", $t5} $t5 == $t5;

    // assume Not(AbortFlag()) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume !$abort_flag;

    // $t16 := <($t5, $t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:18+1
    call $t16 := $Lt($t5, $t15);

    // if ($t16) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:9+78
    if ($t16) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:9+78
L1:

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:284:22+1
    assume {:print "$at(18,10068,10069)"} true;
L2:

    // $t17 := vector::borrow<address>($t13, $t5) on_abort goto L8 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:284:15+12
    assume {:print "$at(18,10061,10073)"} true;
    call $t17 := $1_vector_borrow'address'($t13, $t5);
    if ($abort_flag) {
        assume {:print "$at(18,10061,10073)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(66,5):", $t12} $t12 == $t12;
        goto L8;
    }

    // trace_local[vesting_contract#280]($t17) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:25:17+16
    assume {:print "$at(2,1102,1118)"} true;
    assume {:print "$track_local(66,5,8):", $t17} $t17 == $t17;

    // $t18 := vesting::operator($t17) on_abort goto L8 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:26:17+35
    assume {:print "$at(2,1156,1191)"} true;
    call $t18 := $1_vesting_operator($t17);
    if ($abort_flag) {
        assume {:print "$at(2,1156,1191)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(66,5):", $t12} $t12 == $t12;
        goto L8;
    }

    // $t19 := ==($t18, $t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:26:53+2
    $t19 := $IsEqual'address'($t18, $t1);

    // if ($t19) goto L4 else goto L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:26:13+295
    if ($t19) { goto L4; } else { goto L3; }

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:27:93+16
    assume {:print "$at(2,1303,1319)"} true;
L4:

    // $t20 := vesting::operator_commission_percentage($t17) on_abort goto L8 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:27:53+57
    assume {:print "$at(2,1263,1320)"} true;
    call $t20 := $1_vesting_operator_commission_percentage($t17);
    if ($abort_flag) {
        assume {:print "$at(2,1263,1320)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(66,5):", $t12} $t12 == $t12;
        goto L8;
    }

    // trace_local[current_commission_percentage#281]($t20) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:27:21+29
    assume {:print "$track_local(66,5,4):", $t20} $t20 == $t20;

    // assume Identical($t23, global<vesting::VestingContract>($t17)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:253:9+65
    assume {:print "$at(162,11342,11407)"} true;
    assume ($t23 == $ResourceValue($1_vesting_VestingContract_$memory, $t17));

    // assume Identical($t24, select account::SignerCapability.account(select vesting::VestingContract.signer_cap($t23))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:254:9+46
    assume {:print "$at(162,11416,11462)"} true;
    assume ($t24 == $t23->$signer_cap->$account);

    // assume Identical($t25, select vesting::StakingInfo.operator(select vesting::VestingContract.staking($t23))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:255:9+53
    assume {:print "$at(162,11471,11524)"} true;
    assume ($t25 == $t23->$staking->$operator);

    // assume Identical($t26, global<staking_contract::Store>($t24)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:257:9+49
    assume {:print "$at(162,11631,11680)"} true;
    assume ($t26 == $ResourceValue($1_staking_contract_Store_$memory, $t24));

    // assume Identical($t27, select staking_contract::Store.staking_contracts($t26)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:258:9+48
    assume {:print "$at(162,11689,11737)"} true;
    assume ($t27 == $t26->$staking_contracts);

    // assume Identical($t28, simple_map::spec_get<address, staking_contract::StakingContract>($t27, $t25)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:261:9+77
    assume {:print "$at(162,11829,11906)"} true;
    assume ($t28 == $1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($t27, $t25));

    // assume Identical($t29, global<vesting::VestingContract>($t17)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:515:9+65
    assume {:print "$at(162,23072,23137)"} true;
    assume ($t29 == $ResourceValue($1_vesting_VestingContract_$memory, $t17));

    // assume Identical($t30, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t24))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:302:9+64
    assume {:print "$at(144,12927,12991)"} true;
    assume ($t30 == $ResourceValue($1_staking_contract_Store_$memory, $t24)->$staking_contracts);

    // assume Identical($t31, select staking_contract::StakingContract.pool_address($t28)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:474:9+49
    assume {:print "$at(162,20898,20947)"} true;
    assume ($t31 == $t28->$pool_address);

    // assume Identical($t32, global<stake::StakePool>($t31)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:476:9+56
    assume {:print "$at(162,21015,21071)"} true;
    assume ($t32 == $ResourceValue($1_stake_StakePool_$memory, $t31));

    // assume Identical($t33, select coin::Coin.value(select stake::StakePool.inactive($t32))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:477:9+41
    assume {:print "$at(162,21080,21121)"} true;
    assume ($t33 == $t32->$inactive->$value);

    // assume Identical($t34, select coin::Coin.value(select stake::StakePool.pending_inactive($t32))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:478:9+57
    assume {:print "$at(162,21130,21187)"} true;
    assume ($t34 == $t32->$pending_inactive->$value);

    // assume Identical($t35, Add($t33, $t34)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:482:9+63
    assume {:print "$at(162,21299,21362)"} true;
    assume ($t35 == ($t33 + $t34));

    // assume Identical($t36, select stake::OwnerCapability.pool_address(select staking_contract::StakingContract.owner_cap($t28))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:483:9+61
    assume {:print "$at(162,21371,21432)"} true;
    assume ($t36 == $t28->$owner_cap->$pool_address);

    // assume Identical($t37, global<stake::StakePool>($t36)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:485:9+60
    assume {:print "$at(162,21502,21562)"} true;
    assume ($t37 == $ResourceValue($1_stake_StakePool_$memory, $t36));

    // assume Identical($t38, global<stake::ValidatorSet>(0x1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:487:9+66
    assume {:print "$at(162,21637,21703)"} true;
    assume ($t38 == $ResourceValue($1_stake_ValidatorSet_$memory, 1));

    // assume Identical($t39, And(And(Not(stake::spec_contains(select stake::ValidatorSet.pending_active($t38), $t36)), Not(stake::spec_contains(select stake::ValidatorSet.active_validators($t38), $t36))), Not(stake::spec_contains(select stake::ValidatorSet.pending_inactive($t38), $t36)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:488:9+260
    assume {:print "$at(162,21712,21972)"} true;
    assume ($t39 == ((!$1_stake_spec_contains($t38->$pending_active, $t36) && !$1_stake_spec_contains($t38->$active_validators, $t36)) && !$1_stake_spec_contains($t38->$pending_inactive, $t36)));

    // assume Identical($t40, select coin::Coin.value(select stake::StakePool.inactive($t37))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:491:9+45
    assume {:print "$at(162,21981,22026)"} true;
    assume ($t40 == $t37->$inactive->$value);

    // assume Identical($t41, select coin::Coin.value(select stake::StakePool.pending_inactive($t37))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:492:9+61
    assume {:print "$at(162,22035,22096)"} true;
    assume ($t41 == $t37->$pending_inactive->$value);

    // assume Identical($t42, Add($t40, $t41)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:493:9+53
    assume {:print "$at(162,22105,22158)"} true;
    assume ($t42 == ($t40 + $t41));

    // vesting::update_operator($t0, $t17, $t2, $t20) on_abort goto L8 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:28:17+94
    assume {:print "$at(2,1338,1432)"} true;
    call $1_vesting_update_operator($t0, $t17, $t2, $t20);
    if ($abort_flag) {
        assume {:print "$at(2,1338,1432)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(66,5):", $t12} $t12 == $t12;
        goto L8;
    }

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:17+1
    assume {:print "$at(18,10092,10093)"} true;
L3:

    // $t21 := 1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:21+1
    assume {:print "$at(18,10096,10097)"} true;
    $t21 := 1;
    assume $IsValid'u64'($t21);

    // $t22 := +($t5, $t21) on_abort goto L8 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:19+1
    call $t22 := $AddU64($t5, $t21);
    if ($abort_flag) {
        assume {:print "$at(18,10094,10095)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(66,5):", $t12} $t12 == $t12;
        goto L8;
    }

    // trace_local[i#277]($t22) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:13+1
    assume {:print "$track_local(66,5,5):", $t22} $t22 == $t22;

    // goto L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:13+9
    goto L6;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:30:11+1
    assume {:print "$at(2,1459,1460)"} true;
L0:

    // goto L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:30:11+1
    assume {:print "$at(2,1459,1460)"} true;
    goto L7;

    // label L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:30:11+1
    // Loop invariant checking block for the loop started with header: L5
L6:

    // stop() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:30:11+1
    assume {:print "$at(2,1459,1460)"} true;
    assume false;
    return;

    // label L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:31:5+1
    assume {:print "$at(2,1465,1466)"} true;
L7:

    // assume Identical($t43, select vesting::AdminStore.vesting_contracts(global<vesting::AdminStore>($t9))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:28:9+95
    assume {:print "$at(3,1180,1275)"} true;
    assume ($t43 == $ResourceValue($1_vesting_AdminStore_$memory, $t9)->$vesting_contracts);

    // assert Not(false) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:31:5+1
    assume {:print "$at(2,1465,1466)"} true;
    assert {:msg "assert_failed(2,1465,1466): function does not abort under this condition"}
      !false;

    // assert exists i: num: Range(0, Len<address>($t10)): Implies(Eq<address>(select vesting::StakingInfo.operator(select vesting::VestingContract.staking(global<vesting::VestingContract>(Index($t10, i)))), $t1), {
    //   let operator_addr: address = staking_proxy::find_vesting_contract($t43, $t1, 0);
    //   Eq<address>(select vesting::StakingInfo.operator(select vesting::VestingContract.staking(global<vesting::VestingContract>(operator_addr))), $t2)
    // }) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:29:9+378
    assume {:print "$at(3,1284,1662)"} true;
    assert {:msg "assert_failed(3,1284,1662): post-condition does not hold"}
      (var $range_0 := $Range(0, LenVec($t10)); (exists $i_1: int :: $InRange($range_0, $i_1) && (var i := $i_1;
    (($IsEqual'address'($ResourceValue($1_vesting_VestingContract_$memory, ReadVec($t10, i))->$staking->$operator, $t1) ==> (var operator_addr := $1_staking_proxy_find_vesting_contract($1_vesting_VestingContract_$memory, $t43, $t1, 0); $IsEqual'address'($ResourceValue($1_vesting_VestingContract_$memory, operator_addr)->$staking->$operator, $t2)))))));

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:29:9+378
    return;

    // label L8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:31:5+1
    assume {:print "$at(2,1465,1466)"} true;
L8:

    // abort($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:31:5+1
    assume {:print "$at(2,1465,1466)"} true;
    $abort_code := $t12;
    $abort_flag := true;
    return;

}

// fun staking_proxy::set_vesting_contract_operator [verification[inconsistency_]] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+691
procedure {:timeLimit 40} {:msg_if_verifies "inconsistency_detected(2,775,1466)"} $1_staking_proxy_set_vesting_contract_operator$verify_inconsistency_(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: Vec (int);
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: Vec (int);
    var $t8: int;
    var $t9: int;
    var $t10: Vec (int);
    var $t11: int;
    var $t12: int;
    var $t13: Vec (int);
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: bool;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: $1_vesting_VestingContract;
    var $t24: int;
    var $t25: int;
    var $t26: $1_staking_contract_Store;
    var $t27: Table int ($1_staking_contract_StakingContract);
    var $t28: $1_staking_contract_StakingContract;
    var $t29: $1_vesting_VestingContract;
    var $t30: Table int ($1_staking_contract_StakingContract);
    var $t31: int;
    var $t32: $1_stake_StakePool;
    var $t33: int;
    var $t34: int;
    var $t35: int;
    var $t36: int;
    var $t37: $1_stake_StakePool;
    var $t38: $1_stake_ValidatorSet;
    var $t39: bool;
    var $t40: int;
    var $t41: int;
    var $t42: int;
    var $t43: Vec (int);
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $temp_0'vec'address'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume {:print "$at(2,775,776)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume $IsValid'address'($t2);

    // assume forall $rsc: coin::CoinInfo<aptos_coin::AptosCoin>: ResourceDomain<coin::CoinInfo<aptos_coin::AptosCoin>>(): And(WellFormed($rsc), And(Le(Len<optional_aggregator::OptionalAggregator>(select option::Option.vec(select coin::CoinInfo.supply($rsc))), 1), forall $elem: optional_aggregator::OptionalAggregator: select option::Option.vec(select coin::CoinInfo.supply($rsc)): And(And(And(And(And(Iff(option::$is_some<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)), option::$is_none<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem))), Iff(option::$is_some<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)), option::$is_none<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)))), Implies(option::$is_some<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)), Le(select optional_aggregator::Integer.value(option::$borrow<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem))), select optional_aggregator::Integer.limit(option::$borrow<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)))))), Implies(option::$is_some<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)), Le(aggregator::spec_aggregator_get_val(option::$borrow<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem))), aggregator::spec_get_limit(option::$borrow<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)))))), Le(Len<aggregator::Aggregator>(select option::Option.vec(select optional_aggregator::OptionalAggregator.aggregator($elem))), 1)), Le(Len<optional_aggregator::Integer>(select option::Option.vec(select optional_aggregator::OptionalAggregator.integer($elem))), 1)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    (($IsValid'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''($rsc) && ((LenVec($rsc->$supply->$vec) <= 1) && (var $range_1 := $rsc->$supply->$vec; (forall $i_2: int :: InRangeVec($range_1, $i_2) ==> (var $elem := ReadVec($range_1, $i_2);
    ((((((($1_option_$is_some'$1_aggregator_Aggregator'($elem->$aggregator) <==> $1_option_$is_none'$1_optional_aggregator_Integer'($elem->$integer)) && ($1_option_$is_some'$1_optional_aggregator_Integer'($elem->$integer) <==> $1_option_$is_none'$1_aggregator_Aggregator'($elem->$aggregator))) && ($1_option_$is_some'$1_optional_aggregator_Integer'($elem->$integer) ==> ($1_option_$borrow'$1_optional_aggregator_Integer'($elem->$integer)->$value <= $1_option_$borrow'$1_optional_aggregator_Integer'($elem->$integer)->$limit))) && ($1_option_$is_some'$1_aggregator_Aggregator'($elem->$aggregator) ==> ($1_aggregator_spec_aggregator_get_val($1_option_$borrow'$1_aggregator_Aggregator'($elem->$aggregator)) <= $1_aggregator_spec_get_limit($1_option_$borrow'$1_aggregator_Aggregator'($elem->$aggregator))))) && (LenVec($elem->$aggregator->$vec) <= 1)) && (LenVec($elem->$integer->$vec) <= 1)))))))))));

    // assume forall $rsc: coin::CoinStore<aptos_coin::AptosCoin>: ResourceDomain<coin::CoinStore<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''($rsc))));

    // assume forall $rsc: coin::Ghost$supply<aptos_coin::AptosCoin>: ResourceDomain<coin::Ghost$supply<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''($rsc))));

    // assume exists<coin::Ghost$supply<aptos_coin::AptosCoin>>(0x0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume $ResourceExists($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, 0);

    // assume forall $rsc: coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>: ResourceDomain<coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''($rsc))));

    // assume exists<coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>>(0x0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume $ResourceExists($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, 0);

    // assume forall $rsc: chain_status::GenesisEndMarker: ResourceDomain<chain_status::GenesisEndMarker>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0)}(var $rsc := $ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0);
    ($IsValid'$1_chain_status_GenesisEndMarker'($rsc))));

    // assume forall $rsc: timestamp::CurrentTimeMicroseconds: ResourceDomain<timestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_timestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: stake::StakePool: ResourceDomain<stake::StakePool>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_StakePool_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_StakePool_$memory, $a_0);
    ($IsValid'$1_stake_StakePool'($rsc))));

    // assume forall $rsc: stake::ValidatorConfig: ResourceDomain<stake::ValidatorConfig>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorConfig_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorConfig'($rsc))));

    // assume forall $rsc: stake::ValidatorPerformance: ResourceDomain<stake::ValidatorPerformance>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorPerformance'($rsc))));

    // assume forall $rsc: stake::ValidatorSet: ResourceDomain<stake::ValidatorSet>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorSet_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorSet_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorSet'($rsc))));

    // assume forall $rsc: reconfiguration::Configuration: ResourceDomain<reconfiguration::Configuration>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_Configuration_$memory, $a_0);
    ($IsValid'$1_reconfiguration_Configuration'($rsc))));

    // assume forall $rsc: staking_contract::Store: ResourceDomain<staking_contract::Store>(): And(WellFormed($rsc), forall $key: address: select staking_contract::Store.staking_contracts($rsc): And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), i), Index(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_staking_contract_Store_$memory, $a_0)}(var $rsc := $ResourceValue($1_staking_contract_Store_$memory, $a_0);
    (($IsValid'$1_staking_contract_Store'($rsc) && (var $range_1 := $rsc->$staking_contracts; (forall $key: int :: ContainsTable($range_1, $EncodeKey'address'($key)) ==> (((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shares, addr), $1_vector_spec_contains'address'($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, addr)))) && (var $range_2 := $Range(0, LenVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders)); (var $range_3 := $Range(0, LenVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders)); (forall $i_4: int, $i_5: int :: $InRange($range_2, $i_4) ==> $InRange($range_3, $i_5) ==> (var i := $i_4;
    (var j := $i_5;
    (($IsEqual'address'(ReadVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, i), ReadVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, j)) ==> $IsEqual'num'(i, j))))))))))))))));

    // assume forall $rsc: vesting::AdminStore: ResourceDomain<vesting::AdminStore>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_AdminStore_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_AdminStore_$memory, $a_0);
    ($IsValid'$1_vesting_AdminStore'($rsc))));

    // assume forall $rsc: vesting::VestingContract: ResourceDomain<vesting::VestingContract>(): And(WellFormed($rsc), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($rsc)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_VestingContract_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_VestingContract_$memory, $a_0);
    (($IsValid'$1_vesting_VestingContract'($rsc) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($rsc->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($rsc->$grant_pool->$shareholders, addr)))) && (var $range_1 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (var $range_2 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'(ReadVec($rsc->$grant_pool->$shareholders, i), ReadVec($rsc->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j)))))))))))));

    // assume Implies(chain_status::$is_operating(), exists<timestamp::CurrentTimeMicroseconds>(0x1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+691
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.spec.move:4:9+93
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, 1));

    // assume Implies(exists<stake::ValidatorSet>(0x1), stake::validator_set_is_valid()) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+691
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:8:9+92
    assume ($ResourceExists($1_stake_ValidatorSet_$memory, 1) ==> $1_stake_validator_set_is_valid($1_stake_StakePool_$memory, $1_stake_ValidatorConfig_$memory, $1_stake_ValidatorPerformance_$memory, $1_stake_ValidatorSet_$memory));

    // assume Implies(chain_status::$is_operating(), exists<stake::ValidatorSet>(0x1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+691
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:12:9+96
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_stake_ValidatorSet_$memory, 1));

    // assume Implies(chain_status::$is_operating(), Ge(timestamp::spec_now_microseconds(), reconfiguration::$last_reconfiguration_time())) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+691
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.spec.move:8:9+137
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) >= $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory)));

    // assume Identical($t9, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:26:9+46
    assume {:print "$at(3,1031,1077)"} true;
    assume ($t9 == $1_signer_$address_of($t0));

    // assume Identical($t10, select vesting::AdminStore.vesting_contracts(global<vesting::AdminStore>($t9))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:27:9+85
    assume {:print "$at(3,1086,1171)"} true;
    assume ($t10 == $ResourceValue($1_vesting_AdminStore_$memory, $t9)->$vesting_contracts);

    // trace_local[owner]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume {:print "$at(2,775,776)"} true;
    assume {:print "$track_local(66,5,0):", $t0} $t0 == $t0;

    // trace_local[old_operator]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume {:print "$track_local(66,5,1):", $t1} $t1 == $t1;

    // trace_local[new_operator]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:21:5+1
    assume {:print "$track_local(66,5,2):", $t2} $t2 == $t2;

    // $t11 := signer::address_of($t0) on_abort goto L8 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:22:29+25
    assume {:print "$at(2,914,939)"} true;
    call $t11 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,914,939)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(66,5):", $t12} $t12 == $t12;
        goto L8;
    }

    // $t13 := vesting::vesting_contracts($t11) on_abort goto L8 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:23:34+41
    assume {:print "$at(2,974,1015)"} true;
    call $t13 := $1_vesting_vesting_contracts($t11);
    if ($abort_flag) {
        assume {:print "$at(2,974,1015)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(66,5):", $t12} $t12 == $t12;
        goto L8;
    }

    // trace_local[v#275]($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:24:9+434
    assume {:print "$at(2,1025,1459)"} true;
    assume {:print "$track_local(66,5,7):", $t13} $t13 == $t13;

    // $t14 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:281:17+1
    assume {:print "$at(18,9989,9990)"} true;
    $t14 := 0;
    assume $IsValid'u64'($t14);

    // trace_local[i#277]($t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:281:13+1
    assume {:print "$track_local(66,5,5):", $t14} $t14 == $t14;

    // $t15 := vector::length<address>($t13) on_abort goto L8 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:282:19+9
    assume {:print "$at(18,10010,10019)"} true;
    call $t15 := $1_vector_length'address'($t13);
    if ($abort_flag) {
        assume {:print "$at(18,10010,10019)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(66,5):", $t12} $t12 == $t12;
        goto L8;
    }

    // trace_local[len#278]($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:282:13+3
    assume {:print "$track_local(66,5,6):", $t15} $t15 == $t15;

    // label L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume {:print "$at(18,10036,10037)"} true;
L5:

    // $t5 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume {:print "$at(18,10036,10037)"} true;
    havoc $t5;

    // assume WellFormed($t5) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'u64'($t5);

    // $t16 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t16;

    // assume WellFormed($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'bool'($t16);

    // $t17 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t17;

    // assume WellFormed($t17) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'address'($t17);

    // $t18 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t18;

    // assume WellFormed($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'address'($t18);

    // $t19 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t19;

    // assume WellFormed($t19) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'bool'($t19);

    // $t20 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t20;

    // assume WellFormed($t20) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'u64'($t20);

    // $t21 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t21;

    // assume WellFormed($t21) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'u64'($t21);

    // $t22 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t22;

    // assume WellFormed($t22) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'u64'($t22);

    // trace_local[i#277]($t5) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume {:print "$info(): enter loop, variable(s) i#277 havocked and reassigned"} true;
    assume {:print "$track_local(66,5,5):", $t5} $t5 == $t5;

    // assume Not(AbortFlag()) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume !$abort_flag;

    // $t16 := <($t5, $t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:18+1
    call $t16 := $Lt($t5, $t15);

    // if ($t16) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:9+78
    if ($t16) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:9+78
L1:

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:284:22+1
    assume {:print "$at(18,10068,10069)"} true;
L2:

    // $t17 := vector::borrow<address>($t13, $t5) on_abort goto L8 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:284:15+12
    assume {:print "$at(18,10061,10073)"} true;
    call $t17 := $1_vector_borrow'address'($t13, $t5);
    if ($abort_flag) {
        assume {:print "$at(18,10061,10073)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(66,5):", $t12} $t12 == $t12;
        goto L8;
    }

    // trace_local[vesting_contract#280]($t17) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:25:17+16
    assume {:print "$at(2,1102,1118)"} true;
    assume {:print "$track_local(66,5,8):", $t17} $t17 == $t17;

    // $t18 := vesting::operator($t17) on_abort goto L8 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:26:17+35
    assume {:print "$at(2,1156,1191)"} true;
    call $t18 := $1_vesting_operator($t17);
    if ($abort_flag) {
        assume {:print "$at(2,1156,1191)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(66,5):", $t12} $t12 == $t12;
        goto L8;
    }

    // $t19 := ==($t18, $t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:26:53+2
    $t19 := $IsEqual'address'($t18, $t1);

    // if ($t19) goto L4 else goto L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:26:13+295
    if ($t19) { goto L4; } else { goto L3; }

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:27:93+16
    assume {:print "$at(2,1303,1319)"} true;
L4:

    // $t20 := vesting::operator_commission_percentage($t17) on_abort goto L8 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:27:53+57
    assume {:print "$at(2,1263,1320)"} true;
    call $t20 := $1_vesting_operator_commission_percentage($t17);
    if ($abort_flag) {
        assume {:print "$at(2,1263,1320)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(66,5):", $t12} $t12 == $t12;
        goto L8;
    }

    // trace_local[current_commission_percentage#281]($t20) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:27:21+29
    assume {:print "$track_local(66,5,4):", $t20} $t20 == $t20;

    // assume Identical($t23, global<vesting::VestingContract>($t17)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:253:9+65
    assume {:print "$at(162,11342,11407)"} true;
    assume ($t23 == $ResourceValue($1_vesting_VestingContract_$memory, $t17));

    // assume Identical($t24, select account::SignerCapability.account(select vesting::VestingContract.signer_cap($t23))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:254:9+46
    assume {:print "$at(162,11416,11462)"} true;
    assume ($t24 == $t23->$signer_cap->$account);

    // assume Identical($t25, select vesting::StakingInfo.operator(select vesting::VestingContract.staking($t23))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:255:9+53
    assume {:print "$at(162,11471,11524)"} true;
    assume ($t25 == $t23->$staking->$operator);

    // assume Identical($t26, global<staking_contract::Store>($t24)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:257:9+49
    assume {:print "$at(162,11631,11680)"} true;
    assume ($t26 == $ResourceValue($1_staking_contract_Store_$memory, $t24));

    // assume Identical($t27, select staking_contract::Store.staking_contracts($t26)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:258:9+48
    assume {:print "$at(162,11689,11737)"} true;
    assume ($t27 == $t26->$staking_contracts);

    // assume Identical($t28, simple_map::spec_get<address, staking_contract::StakingContract>($t27, $t25)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:261:9+77
    assume {:print "$at(162,11829,11906)"} true;
    assume ($t28 == $1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($t27, $t25));

    // assume Identical($t29, global<vesting::VestingContract>($t17)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:515:9+65
    assume {:print "$at(162,23072,23137)"} true;
    assume ($t29 == $ResourceValue($1_vesting_VestingContract_$memory, $t17));

    // assume Identical($t30, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t24))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:302:9+64
    assume {:print "$at(144,12927,12991)"} true;
    assume ($t30 == $ResourceValue($1_staking_contract_Store_$memory, $t24)->$staking_contracts);

    // assume Identical($t31, select staking_contract::StakingContract.pool_address($t28)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:474:9+49
    assume {:print "$at(162,20898,20947)"} true;
    assume ($t31 == $t28->$pool_address);

    // assume Identical($t32, global<stake::StakePool>($t31)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:476:9+56
    assume {:print "$at(162,21015,21071)"} true;
    assume ($t32 == $ResourceValue($1_stake_StakePool_$memory, $t31));

    // assume Identical($t33, select coin::Coin.value(select stake::StakePool.inactive($t32))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:477:9+41
    assume {:print "$at(162,21080,21121)"} true;
    assume ($t33 == $t32->$inactive->$value);

    // assume Identical($t34, select coin::Coin.value(select stake::StakePool.pending_inactive($t32))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:478:9+57
    assume {:print "$at(162,21130,21187)"} true;
    assume ($t34 == $t32->$pending_inactive->$value);

    // assume Identical($t35, Add($t33, $t34)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:482:9+63
    assume {:print "$at(162,21299,21362)"} true;
    assume ($t35 == ($t33 + $t34));

    // assume Identical($t36, select stake::OwnerCapability.pool_address(select staking_contract::StakingContract.owner_cap($t28))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:483:9+61
    assume {:print "$at(162,21371,21432)"} true;
    assume ($t36 == $t28->$owner_cap->$pool_address);

    // assume Identical($t37, global<stake::StakePool>($t36)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:485:9+60
    assume {:print "$at(162,21502,21562)"} true;
    assume ($t37 == $ResourceValue($1_stake_StakePool_$memory, $t36));

    // assume Identical($t38, global<stake::ValidatorSet>(0x1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:487:9+66
    assume {:print "$at(162,21637,21703)"} true;
    assume ($t38 == $ResourceValue($1_stake_ValidatorSet_$memory, 1));

    // assume Identical($t39, And(And(Not(stake::spec_contains(select stake::ValidatorSet.pending_active($t38), $t36)), Not(stake::spec_contains(select stake::ValidatorSet.active_validators($t38), $t36))), Not(stake::spec_contains(select stake::ValidatorSet.pending_inactive($t38), $t36)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:488:9+260
    assume {:print "$at(162,21712,21972)"} true;
    assume ($t39 == ((!$1_stake_spec_contains($t38->$pending_active, $t36) && !$1_stake_spec_contains($t38->$active_validators, $t36)) && !$1_stake_spec_contains($t38->$pending_inactive, $t36)));

    // assume Identical($t40, select coin::Coin.value(select stake::StakePool.inactive($t37))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:491:9+45
    assume {:print "$at(162,21981,22026)"} true;
    assume ($t40 == $t37->$inactive->$value);

    // assume Identical($t41, select coin::Coin.value(select stake::StakePool.pending_inactive($t37))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:492:9+61
    assume {:print "$at(162,22035,22096)"} true;
    assume ($t41 == $t37->$pending_inactive->$value);

    // assume Identical($t42, Add($t40, $t41)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:493:9+53
    assume {:print "$at(162,22105,22158)"} true;
    assume ($t42 == ($t40 + $t41));

    // vesting::update_operator($t0, $t17, $t2, $t20) on_abort goto L8 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:28:17+94
    assume {:print "$at(2,1338,1432)"} true;
    call $1_vesting_update_operator($t0, $t17, $t2, $t20);
    if ($abort_flag) {
        assume {:print "$at(2,1338,1432)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(66,5):", $t12} $t12 == $t12;
        goto L8;
    }

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:17+1
    assume {:print "$at(18,10092,10093)"} true;
L3:

    // $t21 := 1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:21+1
    assume {:print "$at(18,10096,10097)"} true;
    $t21 := 1;
    assume $IsValid'u64'($t21);

    // $t22 := +($t5, $t21) on_abort goto L8 with $t12 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:19+1
    call $t22 := $AddU64($t5, $t21);
    if ($abort_flag) {
        assume {:print "$at(18,10094,10095)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(66,5):", $t12} $t12 == $t12;
        goto L8;
    }

    // trace_local[i#277]($t22) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:13+1
    assume {:print "$track_local(66,5,5):", $t22} $t22 == $t22;

    // goto L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:13+9
    goto L6;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:30:11+1
    assume {:print "$at(2,1459,1460)"} true;
L0:

    // goto L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:30:11+1
    assume {:print "$at(2,1459,1460)"} true;
    goto L7;

    // label L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:30:11+1
    // Loop invariant checking block for the loop started with header: L5
L6:

    // stop() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:30:11+1
    assume {:print "$at(2,1459,1460)"} true;
    assume false;
    return;

    // label L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:31:5+1
    assume {:print "$at(2,1465,1466)"} true;
L7:

    // assume Identical($t43, select vesting::AdminStore.vesting_contracts(global<vesting::AdminStore>($t9))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:28:9+95
    assume {:print "$at(3,1180,1275)"} true;
    assume ($t43 == $ResourceValue($1_vesting_AdminStore_$memory, $t9)->$vesting_contracts);

    // assert Not(false) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:31:5+1
    assume {:print "$at(2,1465,1466)"} true;
    assert {:msg "assert_failed(2,1465,1466): function does not abort under this condition"}
      !false;

    // assert exists i: num: Range(0, Len<address>($t10)): Implies(Eq<address>(select vesting::StakingInfo.operator(select vesting::VestingContract.staking(global<vesting::VestingContract>(Index($t10, i)))), $t1), {
    //   let operator_addr: address = staking_proxy::find_vesting_contract($t43, $t1, 0);
    //   Eq<address>(select vesting::StakingInfo.operator(select vesting::VestingContract.staking(global<vesting::VestingContract>(operator_addr))), $t2)
    // }) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:29:9+378
    assume {:print "$at(3,1284,1662)"} true;
    assert {:msg "assert_failed(3,1284,1662): post-condition does not hold"}
      (var $range_0 := $Range(0, LenVec($t10)); (exists $i_1: int :: $InRange($range_0, $i_1) && (var i := $i_1;
    (($IsEqual'address'($ResourceValue($1_vesting_VestingContract_$memory, ReadVec($t10, i))->$staking->$operator, $t1) ==> (var operator_addr := $1_staking_proxy_find_vesting_contract($1_vesting_VestingContract_$memory, $t43, $t1, 0); $IsEqual'address'($ResourceValue($1_vesting_VestingContract_$memory, operator_addr)->$staking->$operator, $t2)))))));

    // assert false at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:22:5+842
    assume {:print "$at(3,826,1668)"} true;
    assert {:msg "assert_failed(3,826,1668): expected to fail"}
      false;

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:29:9+378
    assume {:print "$at(3,1284,1662)"} true;
    return;

    // label L8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:31:5+1
    assume {:print "$at(2,1465,1466)"} true;
L8:

    // assert false at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:22:5+842
    assume {:print "$at(3,826,1668)"} true;
    assert {:msg "assert_failed(3,826,1668): expected to fail"}
      false;

    // abort($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:31:5+1
    assume {:print "$at(2,1465,1466)"} true;
    $abort_code := $t12;
    $abort_flag := true;
    return;

}

// fun staking_proxy::set_vesting_contract_voter [baseline] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+529
procedure {:inline 1} $1_staking_proxy_set_vesting_contract_voter(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: Vec (int);
    var $t4: int;
    var $t5: int;
    var $t6: Vec (int);
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: Vec (int);
    var $t11: int;
    var $t12: int;
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: $1_vesting_VestingContract;
    var $t20: int;
    var $t21: int;
    var $t22: $1_vesting_VestingContract;
    var $t23: $1_staking_contract_Store;
    var $t24: $1_staking_contract_StakingContract;
    var $t25: int;
    var $t26: Table int ($1_staking_contract_StakingContract);
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $temp_0'vec'address'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[owner]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+1
    assume {:print "$at(2,2245,2246)"} true;
    assume {:print "$track_local(66,6,0):", $t0} $t0 == $t0;

    // trace_local[operator]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+1
    assume {:print "$track_local(66,6,1):", $t1} $t1 == $t1;

    // trace_local[new_voter]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+1
    assume {:print "$track_local(66,6,2):", $t2} $t2 == $t2;

    // $t8 := signer::address_of($t0) on_abort goto L8 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:49:29+25
    assume {:print "$at(2,2374,2399)"} true;
    call $t8 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,2374,2399)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(66,6):", $t9} $t9 == $t9;
        goto L8;
    }

    // $t10 := vesting::vesting_contracts($t8) on_abort goto L8 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:50:34+41
    assume {:print "$at(2,2434,2475)"} true;
    call $t10 := $1_vesting_vesting_contracts($t8);
    if ($abort_flag) {
        assume {:print "$at(2,2434,2475)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(66,6):", $t9} $t9 == $t9;
        goto L8;
    }

    // trace_local[v#282]($t10) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:51:9+282
    assume {:print "$at(2,2485,2767)"} true;
    assume {:print "$track_local(66,6,6):", $t10} $t10 == $t10;

    // $t11 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:281:17+1
    assume {:print "$at(18,9989,9990)"} true;
    $t11 := 0;
    assume $IsValid'u64'($t11);

    // trace_local[i#284]($t11) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:281:13+1
    assume {:print "$track_local(66,6,4):", $t11} $t11 == $t11;

    // $t12 := vector::length<address>($t10) on_abort goto L8 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:282:19+9
    assume {:print "$at(18,10010,10019)"} true;
    call $t12 := $1_vector_length'address'($t10);
    if ($abort_flag) {
        assume {:print "$at(18,10010,10019)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(66,6):", $t9} $t9 == $t9;
        goto L8;
    }

    // trace_local[len#285]($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:282:13+3
    assume {:print "$track_local(66,6,5):", $t12} $t12 == $t12;

    // label L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume {:print "$at(18,10036,10037)"} true;
L5:

    // $t4 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume {:print "$at(18,10036,10037)"} true;
    havoc $t4;

    // assume WellFormed($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'u64'($t4);

    // $t13 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t13;

    // assume WellFormed($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'bool'($t13);

    // $t14 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t14;

    // assume WellFormed($t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'address'($t14);

    // $t15 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t15;

    // assume WellFormed($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'address'($t15);

    // $t16 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t16;

    // assume WellFormed($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'bool'($t16);

    // $t17 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t17;

    // assume WellFormed($t17) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'u64'($t17);

    // $t18 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t18;

    // assume WellFormed($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'u64'($t18);

    // trace_local[i#284]($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume {:print "$info(): enter loop, variable(s) i#284 havocked and reassigned"} true;
    assume {:print "$track_local(66,6,4):", $t4} $t4 == $t4;

    // assume Not(AbortFlag()) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume !$abort_flag;

    // $t13 := <($t4, $t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:18+1
    call $t13 := $Lt($t4, $t12);

    // if ($t13) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:9+78
    if ($t13) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:9+78
L1:

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:284:22+1
    assume {:print "$at(18,10068,10069)"} true;
L2:

    // $t14 := vector::borrow<address>($t10, $t4) on_abort goto L8 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:284:15+12
    assume {:print "$at(18,10061,10073)"} true;
    call $t14 := $1_vector_borrow'address'($t10, $t4);
    if ($abort_flag) {
        assume {:print "$at(18,10061,10073)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(66,6):", $t9} $t9 == $t9;
        goto L8;
    }

    // trace_local[vesting_contract#287]($t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:52:17+16
    assume {:print "$at(2,2562,2578)"} true;
    assume {:print "$track_local(66,6,7):", $t14} $t14 == $t14;

    // $t15 := vesting::operator($t14) on_abort goto L8 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:53:17+35
    assume {:print "$at(2,2616,2651)"} true;
    call $t15 := $1_vesting_operator($t14);
    if ($abort_flag) {
        assume {:print "$at(2,2616,2651)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(66,6):", $t9} $t9 == $t9;
        goto L8;
    }

    // $t16 := ==($t15, $t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:53:53+2
    $t16 := $IsEqual'address'($t15, $t1);

    // if ($t16) goto L4 else goto L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:53:13+143
    if ($t16) { goto L4; } else { goto L3; }

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:54:39+5
    assume {:print "$at(2,2705,2710)"} true;
L4:

    // assume Identical($t19, global<vesting::VestingContract>($t14)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:288:9+65
    assume {:print "$at(162,12591,12656)"} true;
    assume ($t19 == $ResourceValue($1_vesting_VestingContract_$memory, $t14));

    // assume Identical($t20, select vesting::StakingInfo.operator(select vesting::VestingContract.staking($t19))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:289:9+49
    assume {:print "$at(162,12665,12714)"} true;
    assume ($t20 == $t19->$staking->$operator);

    // assume Identical($t21, select account::SignerCapability.account(select vesting::VestingContract.signer_cap($t19))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:290:9+49
    assume {:print "$at(162,12723,12772)"} true;
    assume ($t21 == $t19->$signer_cap->$account);

    // assume Identical($t22, global<vesting::VestingContract>($t14)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:515:9+65
    assume {:print "$at(162,23072,23137)"} true;
    assume ($t22 == $ResourceValue($1_vesting_VestingContract_$memory, $t14));

    // assume Identical($t23, global<staking_contract::Store>($t21)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:310:9+34
    assume {:print "$at(144,13175,13209)"} true;
    assume ($t23 == $ResourceValue($1_staking_contract_Store_$memory, $t21));

    // assume Identical($t24, simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t23), $t20)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:311:9+79
    assume {:print "$at(144,13218,13297)"} true;
    assume ($t24 == $1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($t23->$staking_contracts, $t20));

    // assume Identical($t25, select staking_contract::StakingContract.pool_address($t24)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:312:9+49
    assume {:print "$at(144,13306,13355)"} true;
    assume ($t25 == $t24->$pool_address);

    // assume Identical($t26, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t21))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:302:9+64
    assume {:print "$at(144,12927,12991)"} true;
    assume ($t26 == $ResourceValue($1_staking_contract_Store_$memory, $t21)->$staking_contracts);

    // vesting::update_voter($t0, $t14, $t2) on_abort goto L8 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:54:17+57
    assume {:print "$at(2,2683,2740)"} true;
    call $1_vesting_update_voter($t0, $t14, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,2683,2740)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(66,6):", $t9} $t9 == $t9;
        goto L8;
    }

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:17+1
    assume {:print "$at(18,10092,10093)"} true;
L3:

    // $t17 := 1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:21+1
    assume {:print "$at(18,10096,10097)"} true;
    $t17 := 1;
    assume $IsValid'u64'($t17);

    // $t18 := +($t4, $t17) on_abort goto L8 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:19+1
    call $t18 := $AddU64($t4, $t17);
    if ($abort_flag) {
        assume {:print "$at(18,10094,10095)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(66,6):", $t9} $t9 == $t9;
        goto L8;
    }

    // trace_local[i#284]($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:13+1
    assume {:print "$track_local(66,6,4):", $t18} $t18 == $t18;

    // goto L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:13+9
    goto L6;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:56:11+1
    assume {:print "$at(2,2767,2768)"} true;
L0:

    // goto L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:56:11+1
    assume {:print "$at(2,2767,2768)"} true;
    goto L7;

    // label L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:56:11+1
    // Loop invariant checking block for the loop started with header: L5
L6:

    // stop() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:56:11+1
    assume {:print "$at(2,2767,2768)"} true;
    assume false;
    return;

    // label L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:57:5+1
    assume {:print "$at(2,2773,2774)"} true;
L7:

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:57:5+1
    assume {:print "$at(2,2773,2774)"} true;
    return;

    // label L8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:57:5+1
L8:

    // abort($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:57:5+1
    assume {:print "$at(2,2773,2774)"} true;
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun staking_proxy::set_vesting_contract_voter [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+529
procedure {:timeLimit 40} $1_staking_proxy_set_vesting_contract_voter$verify(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: Vec (int);
    var $t4: int;
    var $t5: int;
    var $t6: Vec (int);
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: Vec (int);
    var $t11: int;
    var $t12: int;
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: $1_vesting_VestingContract;
    var $t20: int;
    var $t21: int;
    var $t22: $1_vesting_VestingContract;
    var $t23: $1_staking_contract_Store;
    var $t24: $1_staking_contract_StakingContract;
    var $t25: int;
    var $t26: Table int ($1_staking_contract_StakingContract);
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $temp_0'vec'address'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+1
    assume {:print "$at(2,2245,2246)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+1
    assume $IsValid'address'($t2);

    // assume forall $rsc: stake::StakePool: ResourceDomain<stake::StakePool>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_StakePool_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_StakePool_$memory, $a_0);
    ($IsValid'$1_stake_StakePool'($rsc))));

    // assume forall $rsc: stake::ValidatorConfig: ResourceDomain<stake::ValidatorConfig>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorConfig_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorConfig'($rsc))));

    // assume forall $rsc: stake::ValidatorPerformance: ResourceDomain<stake::ValidatorPerformance>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorPerformance'($rsc))));

    // assume forall $rsc: stake::ValidatorSet: ResourceDomain<stake::ValidatorSet>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorSet_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorSet_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorSet'($rsc))));

    // assume forall $rsc: staking_contract::Store: ResourceDomain<staking_contract::Store>(): And(WellFormed($rsc), forall $key: address: select staking_contract::Store.staking_contracts($rsc): And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), i), Index(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_staking_contract_Store_$memory, $a_0)}(var $rsc := $ResourceValue($1_staking_contract_Store_$memory, $a_0);
    (($IsValid'$1_staking_contract_Store'($rsc) && (var $range_1 := $rsc->$staking_contracts; (forall $key: int :: ContainsTable($range_1, $EncodeKey'address'($key)) ==> (((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shares, addr), $1_vector_spec_contains'address'($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, addr)))) && (var $range_2 := $Range(0, LenVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders)); (var $range_3 := $Range(0, LenVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders)); (forall $i_4: int, $i_5: int :: $InRange($range_2, $i_4) ==> $InRange($range_3, $i_5) ==> (var i := $i_4;
    (var j := $i_5;
    (($IsEqual'address'(ReadVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, i), ReadVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, j)) ==> $IsEqual'num'(i, j))))))))))))))));

    // assume forall $rsc: vesting::AdminStore: ResourceDomain<vesting::AdminStore>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_AdminStore_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_AdminStore_$memory, $a_0);
    ($IsValid'$1_vesting_AdminStore'($rsc))));

    // assume forall $rsc: vesting::VestingContract: ResourceDomain<vesting::VestingContract>(): And(WellFormed($rsc), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($rsc)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_VestingContract_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_VestingContract_$memory, $a_0);
    (($IsValid'$1_vesting_VestingContract'($rsc) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($rsc->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($rsc->$grant_pool->$shareholders, addr)))) && (var $range_1 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (var $range_2 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'(ReadVec($rsc->$grant_pool->$shareholders, i), ReadVec($rsc->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j)))))))))))));

    // assume Implies(exists<stake::ValidatorSet>(0x1), stake::validator_set_is_valid()) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+529
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:8:9+92
    assume ($ResourceExists($1_stake_ValidatorSet_$memory, 1) ==> $1_stake_validator_set_is_valid($1_stake_StakePool_$memory, $1_stake_ValidatorConfig_$memory, $1_stake_ValidatorPerformance_$memory, $1_stake_ValidatorSet_$memory));

    // trace_local[owner]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+1
    assume {:print "$track_local(66,6,0):", $t0} $t0 == $t0;

    // trace_local[operator]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+1
    assume {:print "$track_local(66,6,1):", $t1} $t1 == $t1;

    // trace_local[new_voter]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+1
    assume {:print "$track_local(66,6,2):", $t2} $t2 == $t2;

    // $t8 := signer::address_of($t0) on_abort goto L8 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:49:29+25
    assume {:print "$at(2,2374,2399)"} true;
    call $t8 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,2374,2399)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(66,6):", $t9} $t9 == $t9;
        goto L8;
    }

    // $t10 := vesting::vesting_contracts($t8) on_abort goto L8 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:50:34+41
    assume {:print "$at(2,2434,2475)"} true;
    call $t10 := $1_vesting_vesting_contracts($t8);
    if ($abort_flag) {
        assume {:print "$at(2,2434,2475)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(66,6):", $t9} $t9 == $t9;
        goto L8;
    }

    // trace_local[v#282]($t10) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:51:9+282
    assume {:print "$at(2,2485,2767)"} true;
    assume {:print "$track_local(66,6,6):", $t10} $t10 == $t10;

    // $t11 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:281:17+1
    assume {:print "$at(18,9989,9990)"} true;
    $t11 := 0;
    assume $IsValid'u64'($t11);

    // trace_local[i#284]($t11) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:281:13+1
    assume {:print "$track_local(66,6,4):", $t11} $t11 == $t11;

    // $t12 := vector::length<address>($t10) on_abort goto L8 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:282:19+9
    assume {:print "$at(18,10010,10019)"} true;
    call $t12 := $1_vector_length'address'($t10);
    if ($abort_flag) {
        assume {:print "$at(18,10010,10019)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(66,6):", $t9} $t9 == $t9;
        goto L8;
    }

    // trace_local[len#285]($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:282:13+3
    assume {:print "$track_local(66,6,5):", $t12} $t12 == $t12;

    // label L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume {:print "$at(18,10036,10037)"} true;
L5:

    // $t4 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume {:print "$at(18,10036,10037)"} true;
    havoc $t4;

    // assume WellFormed($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'u64'($t4);

    // $t13 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t13;

    // assume WellFormed($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'bool'($t13);

    // $t14 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t14;

    // assume WellFormed($t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'address'($t14);

    // $t15 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t15;

    // assume WellFormed($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'address'($t15);

    // $t16 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t16;

    // assume WellFormed($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'bool'($t16);

    // $t17 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t17;

    // assume WellFormed($t17) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'u64'($t17);

    // $t18 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t18;

    // assume WellFormed($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'u64'($t18);

    // trace_local[i#284]($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume {:print "$info(): enter loop, variable(s) i#284 havocked and reassigned"} true;
    assume {:print "$track_local(66,6,4):", $t4} $t4 == $t4;

    // assume Not(AbortFlag()) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume !$abort_flag;

    // $t13 := <($t4, $t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:18+1
    call $t13 := $Lt($t4, $t12);

    // if ($t13) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:9+78
    if ($t13) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:9+78
L1:

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:284:22+1
    assume {:print "$at(18,10068,10069)"} true;
L2:

    // $t14 := vector::borrow<address>($t10, $t4) on_abort goto L8 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:284:15+12
    assume {:print "$at(18,10061,10073)"} true;
    call $t14 := $1_vector_borrow'address'($t10, $t4);
    if ($abort_flag) {
        assume {:print "$at(18,10061,10073)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(66,6):", $t9} $t9 == $t9;
        goto L8;
    }

    // trace_local[vesting_contract#287]($t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:52:17+16
    assume {:print "$at(2,2562,2578)"} true;
    assume {:print "$track_local(66,6,7):", $t14} $t14 == $t14;

    // $t15 := vesting::operator($t14) on_abort goto L8 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:53:17+35
    assume {:print "$at(2,2616,2651)"} true;
    call $t15 := $1_vesting_operator($t14);
    if ($abort_flag) {
        assume {:print "$at(2,2616,2651)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(66,6):", $t9} $t9 == $t9;
        goto L8;
    }

    // $t16 := ==($t15, $t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:53:53+2
    $t16 := $IsEqual'address'($t15, $t1);

    // if ($t16) goto L4 else goto L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:53:13+143
    if ($t16) { goto L4; } else { goto L3; }

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:54:39+5
    assume {:print "$at(2,2705,2710)"} true;
L4:

    // assume Identical($t19, global<vesting::VestingContract>($t14)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:288:9+65
    assume {:print "$at(162,12591,12656)"} true;
    assume ($t19 == $ResourceValue($1_vesting_VestingContract_$memory, $t14));

    // assume Identical($t20, select vesting::StakingInfo.operator(select vesting::VestingContract.staking($t19))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:289:9+49
    assume {:print "$at(162,12665,12714)"} true;
    assume ($t20 == $t19->$staking->$operator);

    // assume Identical($t21, select account::SignerCapability.account(select vesting::VestingContract.signer_cap($t19))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:290:9+49
    assume {:print "$at(162,12723,12772)"} true;
    assume ($t21 == $t19->$signer_cap->$account);

    // assume Identical($t22, global<vesting::VestingContract>($t14)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:515:9+65
    assume {:print "$at(162,23072,23137)"} true;
    assume ($t22 == $ResourceValue($1_vesting_VestingContract_$memory, $t14));

    // assume Identical($t23, global<staking_contract::Store>($t21)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:310:9+34
    assume {:print "$at(144,13175,13209)"} true;
    assume ($t23 == $ResourceValue($1_staking_contract_Store_$memory, $t21));

    // assume Identical($t24, simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t23), $t20)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:311:9+79
    assume {:print "$at(144,13218,13297)"} true;
    assume ($t24 == $1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($t23->$staking_contracts, $t20));

    // assume Identical($t25, select staking_contract::StakingContract.pool_address($t24)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:312:9+49
    assume {:print "$at(144,13306,13355)"} true;
    assume ($t25 == $t24->$pool_address);

    // assume Identical($t26, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t21))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:302:9+64
    assume {:print "$at(144,12927,12991)"} true;
    assume ($t26 == $ResourceValue($1_staking_contract_Store_$memory, $t21)->$staking_contracts);

    // vesting::update_voter($t0, $t14, $t2) on_abort goto L8 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:54:17+57
    assume {:print "$at(2,2683,2740)"} true;
    call $1_vesting_update_voter($t0, $t14, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,2683,2740)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(66,6):", $t9} $t9 == $t9;
        goto L8;
    }

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:17+1
    assume {:print "$at(18,10092,10093)"} true;
L3:

    // $t17 := 1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:21+1
    assume {:print "$at(18,10096,10097)"} true;
    $t17 := 1;
    assume $IsValid'u64'($t17);

    // $t18 := +($t4, $t17) on_abort goto L8 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:19+1
    call $t18 := $AddU64($t4, $t17);
    if ($abort_flag) {
        assume {:print "$at(18,10094,10095)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(66,6):", $t9} $t9 == $t9;
        goto L8;
    }

    // trace_local[i#284]($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:13+1
    assume {:print "$track_local(66,6,4):", $t18} $t18 == $t18;

    // goto L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:13+9
    goto L6;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:56:11+1
    assume {:print "$at(2,2767,2768)"} true;
L0:

    // goto L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:56:11+1
    assume {:print "$at(2,2767,2768)"} true;
    goto L7;

    // label L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:56:11+1
    // Loop invariant checking block for the loop started with header: L5
L6:

    // stop() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:56:11+1
    assume {:print "$at(2,2767,2768)"} true;
    assume false;
    return;

    // label L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:57:5+1
    assume {:print "$at(2,2773,2774)"} true;
L7:

    // assert Not(false) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:57:5+1
    assume {:print "$at(2,2773,2774)"} true;
    assert {:msg "assert_failed(2,2773,2774): function does not abort under this condition"}
      !false;

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:57:5+1
    return;

    // label L8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:57:5+1
L8:

    // abort($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:57:5+1
    assume {:print "$at(2,2773,2774)"} true;
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun staking_proxy::set_vesting_contract_voter [verification[inconsistency_]] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+529
procedure {:timeLimit 40} {:msg_if_verifies "inconsistency_detected(2,2245,2774)"} $1_staking_proxy_set_vesting_contract_voter$verify_inconsistency_(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: Vec (int);
    var $t4: int;
    var $t5: int;
    var $t6: Vec (int);
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: Vec (int);
    var $t11: int;
    var $t12: int;
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: $1_vesting_VestingContract;
    var $t20: int;
    var $t21: int;
    var $t22: $1_vesting_VestingContract;
    var $t23: $1_staking_contract_Store;
    var $t24: $1_staking_contract_StakingContract;
    var $t25: int;
    var $t26: Table int ($1_staking_contract_StakingContract);
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $temp_0'vec'address'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+1
    assume {:print "$at(2,2245,2246)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+1
    assume $IsValid'address'($t2);

    // assume forall $rsc: stake::StakePool: ResourceDomain<stake::StakePool>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_StakePool_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_StakePool_$memory, $a_0);
    ($IsValid'$1_stake_StakePool'($rsc))));

    // assume forall $rsc: stake::ValidatorConfig: ResourceDomain<stake::ValidatorConfig>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorConfig_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorConfig'($rsc))));

    // assume forall $rsc: stake::ValidatorPerformance: ResourceDomain<stake::ValidatorPerformance>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorPerformance'($rsc))));

    // assume forall $rsc: stake::ValidatorSet: ResourceDomain<stake::ValidatorSet>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorSet_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorSet_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorSet'($rsc))));

    // assume forall $rsc: staking_contract::Store: ResourceDomain<staking_contract::Store>(): And(WellFormed($rsc), forall $key: address: select staking_contract::Store.staking_contracts($rsc): And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), i), Index(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_staking_contract_Store_$memory, $a_0)}(var $rsc := $ResourceValue($1_staking_contract_Store_$memory, $a_0);
    (($IsValid'$1_staking_contract_Store'($rsc) && (var $range_1 := $rsc->$staking_contracts; (forall $key: int :: ContainsTable($range_1, $EncodeKey'address'($key)) ==> (((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shares, addr), $1_vector_spec_contains'address'($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, addr)))) && (var $range_2 := $Range(0, LenVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders)); (var $range_3 := $Range(0, LenVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders)); (forall $i_4: int, $i_5: int :: $InRange($range_2, $i_4) ==> $InRange($range_3, $i_5) ==> (var i := $i_4;
    (var j := $i_5;
    (($IsEqual'address'(ReadVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, i), ReadVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, j)) ==> $IsEqual'num'(i, j))))))))))))))));

    // assume forall $rsc: vesting::AdminStore: ResourceDomain<vesting::AdminStore>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_AdminStore_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_AdminStore_$memory, $a_0);
    ($IsValid'$1_vesting_AdminStore'($rsc))));

    // assume forall $rsc: vesting::VestingContract: ResourceDomain<vesting::VestingContract>(): And(WellFormed($rsc), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($rsc)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_VestingContract_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_VestingContract_$memory, $a_0);
    (($IsValid'$1_vesting_VestingContract'($rsc) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($rsc->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($rsc->$grant_pool->$shareholders, addr)))) && (var $range_1 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (var $range_2 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'(ReadVec($rsc->$grant_pool->$shareholders, i), ReadVec($rsc->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j)))))))))))));

    // assume Implies(exists<stake::ValidatorSet>(0x1), stake::validator_set_is_valid()) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+529
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:8:9+92
    assume ($ResourceExists($1_stake_ValidatorSet_$memory, 1) ==> $1_stake_validator_set_is_valid($1_stake_StakePool_$memory, $1_stake_ValidatorConfig_$memory, $1_stake_ValidatorPerformance_$memory, $1_stake_ValidatorSet_$memory));

    // trace_local[owner]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+1
    assume {:print "$track_local(66,6,0):", $t0} $t0 == $t0;

    // trace_local[operator]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+1
    assume {:print "$track_local(66,6,1):", $t1} $t1 == $t1;

    // trace_local[new_voter]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:48:5+1
    assume {:print "$track_local(66,6,2):", $t2} $t2 == $t2;

    // $t8 := signer::address_of($t0) on_abort goto L8 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:49:29+25
    assume {:print "$at(2,2374,2399)"} true;
    call $t8 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,2374,2399)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(66,6):", $t9} $t9 == $t9;
        goto L8;
    }

    // $t10 := vesting::vesting_contracts($t8) on_abort goto L8 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:50:34+41
    assume {:print "$at(2,2434,2475)"} true;
    call $t10 := $1_vesting_vesting_contracts($t8);
    if ($abort_flag) {
        assume {:print "$at(2,2434,2475)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(66,6):", $t9} $t9 == $t9;
        goto L8;
    }

    // trace_local[v#282]($t10) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:51:9+282
    assume {:print "$at(2,2485,2767)"} true;
    assume {:print "$track_local(66,6,6):", $t10} $t10 == $t10;

    // $t11 := 0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:281:17+1
    assume {:print "$at(18,9989,9990)"} true;
    $t11 := 0;
    assume $IsValid'u64'($t11);

    // trace_local[i#284]($t11) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:281:13+1
    assume {:print "$track_local(66,6,4):", $t11} $t11 == $t11;

    // $t12 := vector::length<address>($t10) on_abort goto L8 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:282:19+9
    assume {:print "$at(18,10010,10019)"} true;
    call $t12 := $1_vector_length'address'($t10);
    if ($abort_flag) {
        assume {:print "$at(18,10010,10019)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(66,6):", $t9} $t9 == $t9;
        goto L8;
    }

    // trace_local[len#285]($t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:282:13+3
    assume {:print "$track_local(66,6,5):", $t12} $t12 == $t12;

    // label L5 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume {:print "$at(18,10036,10037)"} true;
L5:

    // $t4 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume {:print "$at(18,10036,10037)"} true;
    havoc $t4;

    // assume WellFormed($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'u64'($t4);

    // $t13 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t13;

    // assume WellFormed($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'bool'($t13);

    // $t14 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t14;

    // assume WellFormed($t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'address'($t14);

    // $t15 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t15;

    // assume WellFormed($t15) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'address'($t15);

    // $t16 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t16;

    // assume WellFormed($t16) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'bool'($t16);

    // $t17 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t17;

    // assume WellFormed($t17) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'u64'($t17);

    // $t18 := havoc[val]() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    havoc $t18;

    // assume WellFormed($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume $IsValid'u64'($t18);

    // trace_local[i#284]($t4) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume {:print "$info(): enter loop, variable(s) i#284 havocked and reassigned"} true;
    assume {:print "$track_local(66,6,4):", $t4} $t4 == $t4;

    // assume Not(AbortFlag()) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:16+1
    assume !$abort_flag;

    // $t13 := <($t4, $t12) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:18+1
    call $t13 := $Lt($t4, $t12);

    // if ($t13) goto L1 else goto L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:9+78
    if ($t13) { goto L1; } else { goto L0; }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:283:9+78
L1:

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:284:22+1
    assume {:print "$at(18,10068,10069)"} true;
L2:

    // $t14 := vector::borrow<address>($t10, $t4) on_abort goto L8 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:284:15+12
    assume {:print "$at(18,10061,10073)"} true;
    call $t14 := $1_vector_borrow'address'($t10, $t4);
    if ($abort_flag) {
        assume {:print "$at(18,10061,10073)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(66,6):", $t9} $t9 == $t9;
        goto L8;
    }

    // trace_local[vesting_contract#287]($t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:52:17+16
    assume {:print "$at(2,2562,2578)"} true;
    assume {:print "$track_local(66,6,7):", $t14} $t14 == $t14;

    // $t15 := vesting::operator($t14) on_abort goto L8 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:53:17+35
    assume {:print "$at(2,2616,2651)"} true;
    call $t15 := $1_vesting_operator($t14);
    if ($abort_flag) {
        assume {:print "$at(2,2616,2651)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(66,6):", $t9} $t9 == $t9;
        goto L8;
    }

    // $t16 := ==($t15, $t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:53:53+2
    $t16 := $IsEqual'address'($t15, $t1);

    // if ($t16) goto L4 else goto L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:53:13+143
    if ($t16) { goto L4; } else { goto L3; }

    // label L4 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:54:39+5
    assume {:print "$at(2,2705,2710)"} true;
L4:

    // assume Identical($t19, global<vesting::VestingContract>($t14)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:288:9+65
    assume {:print "$at(162,12591,12656)"} true;
    assume ($t19 == $ResourceValue($1_vesting_VestingContract_$memory, $t14));

    // assume Identical($t20, select vesting::StakingInfo.operator(select vesting::VestingContract.staking($t19))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:289:9+49
    assume {:print "$at(162,12665,12714)"} true;
    assume ($t20 == $t19->$staking->$operator);

    // assume Identical($t21, select account::SignerCapability.account(select vesting::VestingContract.signer_cap($t19))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:290:9+49
    assume {:print "$at(162,12723,12772)"} true;
    assume ($t21 == $t19->$signer_cap->$account);

    // assume Identical($t22, global<vesting::VestingContract>($t14)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/vesting.spec.move:515:9+65
    assume {:print "$at(162,23072,23137)"} true;
    assume ($t22 == $ResourceValue($1_vesting_VestingContract_$memory, $t14));

    // assume Identical($t23, global<staking_contract::Store>($t21)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:310:9+34
    assume {:print "$at(144,13175,13209)"} true;
    assume ($t23 == $ResourceValue($1_staking_contract_Store_$memory, $t21));

    // assume Identical($t24, simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t23), $t20)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:311:9+79
    assume {:print "$at(144,13218,13297)"} true;
    assume ($t24 == $1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($t23->$staking_contracts, $t20));

    // assume Identical($t25, select staking_contract::StakingContract.pool_address($t24)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:312:9+49
    assume {:print "$at(144,13306,13355)"} true;
    assume ($t25 == $t24->$pool_address);

    // assume Identical($t26, select staking_contract::Store.staking_contracts(global<staking_contract::Store>($t21))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_contract.spec.move:302:9+64
    assume {:print "$at(144,12927,12991)"} true;
    assume ($t26 == $ResourceValue($1_staking_contract_Store_$memory, $t21)->$staking_contracts);

    // vesting::update_voter($t0, $t14, $t2) on_abort goto L8 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:54:17+57
    assume {:print "$at(2,2683,2740)"} true;
    call $1_vesting_update_voter($t0, $t14, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,2683,2740)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(66,6):", $t9} $t9 == $t9;
        goto L8;
    }

    // label L3 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:17+1
    assume {:print "$at(18,10092,10093)"} true;
L3:

    // $t17 := 1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:21+1
    assume {:print "$at(18,10096,10097)"} true;
    $t17 := 1;
    assume $IsValid'u64'($t17);

    // $t18 := +($t4, $t17) on_abort goto L8 with $t9 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:19+1
    call $t18 := $AddU64($t4, $t17);
    if ($abort_flag) {
        assume {:print "$at(18,10094,10095)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(66,6):", $t9} $t9 == $t9;
        goto L8;
    }

    // trace_local[i#284]($t18) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:13+1
    assume {:print "$track_local(66,6,4):", $t18} $t18 == $t18;

    // goto L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:285:13+9
    goto L6;

    // label L0 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:56:11+1
    assume {:print "$at(2,2767,2768)"} true;
L0:

    // goto L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:56:11+1
    assume {:print "$at(2,2767,2768)"} true;
    goto L7;

    // label L6 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:56:11+1
    // Loop invariant checking block for the loop started with header: L5
L6:

    // stop() at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:56:11+1
    assume {:print "$at(2,2767,2768)"} true;
    assume false;
    return;

    // label L7 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:57:5+1
    assume {:print "$at(2,2773,2774)"} true;
L7:

    // assert Not(false) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:57:5+1
    assume {:print "$at(2,2773,2774)"} true;
    assert {:msg "assert_failed(2,2773,2774): function does not abort under this condition"}
      !false;

    // assert false at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:57:5+191
    assert {:msg "assert_failed(3,2657,2848): expected to fail"}
      false;

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:57:5+1
    return;

    // label L8 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:57:5+1
L8:

    // assert false at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:57:5+191
    assume {:print "$at(3,2657,2848)"} true;
    assert {:msg "assert_failed(3,2657,2848): expected to fail"}
      false;

    // abort($t9) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:57:5+1
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun staking_proxy::set_voter [verification] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+265
procedure {:timeLimit 40} $1_staking_proxy_set_voter$verify(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: $1_staking_contract_Store;
    var $t6: bool;
    var $t7: int;
    var $t8: $1_staking_contract_StakingContract;
    var $t9: int;
    var $t10: int;
    var $t11: $1_stake_OwnerCapability;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: $1_staking_contract_Store;
    var $t17: bool;
    var $t18: int;
    var $t19: $1_staking_contract_StakingContract;
    var $t20: int;
    var $t21: int;
    var $t22: $1_stake_OwnerCapability;
    var $t23: int;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $1_stake_StakePool_$memory#104: $Memory $1_stake_StakePool;
    var $1_stake_OwnerCapability_$memory#105: $Memory $1_stake_OwnerCapability;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+1
    assume {:print "$at(2,504,505)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+1
    assume $IsValid'address'($t2);

    // assume forall $rsc: stake::OwnerCapability: ResourceDomain<stake::OwnerCapability>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_OwnerCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_OwnerCapability_$memory, $a_0);
    ($IsValid'$1_stake_OwnerCapability'($rsc))));

    // assume forall $rsc: stake::StakePool: ResourceDomain<stake::StakePool>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_StakePool_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_StakePool_$memory, $a_0);
    ($IsValid'$1_stake_StakePool'($rsc))));

    // assume forall $rsc: stake::ValidatorConfig: ResourceDomain<stake::ValidatorConfig>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorConfig_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorConfig'($rsc))));

    // assume forall $rsc: stake::ValidatorPerformance: ResourceDomain<stake::ValidatorPerformance>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorPerformance'($rsc))));

    // assume forall $rsc: stake::ValidatorSet: ResourceDomain<stake::ValidatorSet>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorSet_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorSet_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorSet'($rsc))));

    // assume forall $rsc: staking_contract::Store: ResourceDomain<staking_contract::Store>(): And(WellFormed($rsc), forall $key: address: select staking_contract::Store.staking_contracts($rsc): And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), i), Index(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_staking_contract_Store_$memory, $a_0)}(var $rsc := $ResourceValue($1_staking_contract_Store_$memory, $a_0);
    (($IsValid'$1_staking_contract_Store'($rsc) && (var $range_1 := $rsc->$staking_contracts; (forall $key: int :: ContainsTable($range_1, $EncodeKey'address'($key)) ==> (((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shares, addr), $1_vector_spec_contains'address'($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, addr)))) && (var $range_2 := $Range(0, LenVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders)); (var $range_3 := $Range(0, LenVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders)); (forall $i_4: int, $i_5: int :: $InRange($range_2, $i_4) ==> $InRange($range_3, $i_5) ==> (var i := $i_4;
    (var j := $i_5;
    (($IsEqual'address'(ReadVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, i), ReadVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, j)) ==> $IsEqual'num'(i, j))))))))))))))));

    // assume forall $rsc: vesting::AdminStore: ResourceDomain<vesting::AdminStore>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_AdminStore_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_AdminStore_$memory, $a_0);
    ($IsValid'$1_vesting_AdminStore'($rsc))));

    // assume forall $rsc: vesting::VestingContract: ResourceDomain<vesting::VestingContract>(): And(WellFormed($rsc), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($rsc)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_VestingContract_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_VestingContract_$memory, $a_0);
    (($IsValid'$1_vesting_VestingContract'($rsc) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($rsc->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($rsc->$grant_pool->$shareholders, addr)))) && (var $range_1 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (var $range_2 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'(ReadVec($rsc->$grant_pool->$shareholders, i), ReadVec($rsc->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j)))))))))))));

    // assume Implies(exists<stake::ValidatorSet>(0x1), stake::validator_set_is_valid()) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+265
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:8:9+92
    assume ($ResourceExists($1_stake_ValidatorSet_$memory, 1) ==> $1_stake_validator_set_is_valid($1_stake_StakePool_$memory, $1_stake_ValidatorConfig_$memory, $1_stake_ValidatorPerformance_$memory, $1_stake_ValidatorSet_$memory));

    // assume Identical($t3, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:93:9+46
    assume {:print "$at(3,3996,4042)"} true;
    assume ($t3 == $1_signer_$address_of($t0));

    // assume Identical($t4, $t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:94:9+27
    assume {:print "$at(3,4051,4078)"} true;
    assume ($t4 == $t3);

    // assume Identical($t5, global<staking_contract::Store>($t4)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:95:9+34
    assume {:print "$at(3,4087,4121)"} true;
    assume ($t5 == $ResourceValue($1_staking_contract_Store_$memory, $t4));

    // assume Identical($t6, And(exists<staking_contract::Store>($t4), simple_map::spec_contains_key<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t5), $t1))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:98:9+120
    assume {:print "$at(3,4169,4289)"} true;
    assume ($t6 == ($ResourceExists($1_staking_contract_Store_$memory, $t4) && $1_simple_map_spec_contains_key'address_$1_staking_contract_StakingContract'($t5->$staking_contracts, $t1)));

    // assume Identical($t7, $t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:101:9+35
    assume {:print "$at(3,4326,4361)"} true;
    assume ($t7 == $t3);

    // assume Identical($t8, simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t5), $t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:102:9+79
    assume {:print "$at(3,4370,4449)"} true;
    assume ($t8 == $1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($t5->$staking_contracts, $t1));

    // assume Identical($t9, select staking_contract::StakingContract.pool_address($t8)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:103:9+49
    assume {:print "$at(3,4458,4507)"} true;
    assume ($t9 == $t8->$pool_address);

    // assume Identical($t10, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:118:9+46
    assume {:print "$at(3,4939,4985)"} true;
    assume ($t10 == $1_signer_$address_of($t0));

    // assume Identical($t11, global<stake::OwnerCapability>($t10)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:119:9+66
    assume {:print "$at(3,4994,5060)"} true;
    assume ($t11 == $ResourceValue($1_stake_OwnerCapability_$memory, $t10));

    // assume Identical($t12, select stake::OwnerCapability.pool_address($t11)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:120:9+46
    assume {:print "$at(3,5069,5115)"} true;
    assume ($t12 == $t11->$pool_address);

    // @105 := save_mem(stake::OwnerCapability) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+1
    assume {:print "$at(2,504,505)"} true;
    $1_stake_OwnerCapability_$memory#105 := $1_stake_OwnerCapability_$memory;

    // @104 := save_mem(stake::StakePool) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+1
    $1_stake_StakePool_$memory#104 := $1_stake_StakePool_$memory;

    // trace_local[owner]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+1
    assume {:print "$track_local(66,7,0):", $t0} $t0 == $t0;

    // trace_local[operator]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+1
    assume {:print "$track_local(66,7,1):", $t1} $t1 == $t1;

    // trace_local[new_voter]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+1
    assume {:print "$track_local(66,7,2):", $t2} $t2 == $t2;

    // staking_proxy::set_vesting_contract_voter($t0, $t1, $t2) on_abort goto L2 with $t13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:16:9+54
    assume {:print "$at(2,596,650)"} true;
    call $1_staking_proxy_set_vesting_contract_voter($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,596,650)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(66,7):", $t13} $t13 == $t13;
        goto L2;
    }

    // assume Identical($t14, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:93:9+46
    assume {:print "$at(3,3996,4042)"} true;
    assume ($t14 == $1_signer_$address_of($t0));

    // assume Identical($t15, $t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:94:9+27
    assume {:print "$at(3,4051,4078)"} true;
    assume ($t15 == $t14);

    // assume Identical($t16, global<staking_contract::Store>($t15)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:95:9+34
    assume {:print "$at(3,4087,4121)"} true;
    assume ($t16 == $ResourceValue($1_staking_contract_Store_$memory, $t15));

    // assume Identical($t17, And(exists<staking_contract::Store>($t15), simple_map::spec_contains_key<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t16), $t1))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:98:9+120
    assume {:print "$at(3,4169,4289)"} true;
    assume ($t17 == ($ResourceExists($1_staking_contract_Store_$memory, $t15) && $1_simple_map_spec_contains_key'address_$1_staking_contract_StakingContract'($t16->$staking_contracts, $t1)));

    // assume Identical($t18, $t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:101:9+35
    assume {:print "$at(3,4326,4361)"} true;
    assume ($t18 == $t14);

    // assume Identical($t19, simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t16), $t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:102:9+79
    assume {:print "$at(3,4370,4449)"} true;
    assume ($t19 == $1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($t16->$staking_contracts, $t1));

    // assume Identical($t20, select staking_contract::StakingContract.pool_address($t19)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:103:9+49
    assume {:print "$at(3,4458,4507)"} true;
    assume ($t20 == $t19->$pool_address);

    // staking_proxy::set_staking_contract_voter($t0, $t1, $t2) on_abort goto L2 with $t13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:17:9+54
    assume {:print "$at(2,660,714)"} true;
    call $1_staking_proxy_set_staking_contract_voter($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,660,714)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(66,7):", $t13} $t13 == $t13;
        goto L2;
    }

    // assume Identical($t21, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:118:9+46
    assume {:print "$at(3,4939,4985)"} true;
    assume ($t21 == $1_signer_$address_of($t0));

    // assume Identical($t22, global<stake::OwnerCapability>($t21)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:119:9+66
    assume {:print "$at(3,4994,5060)"} true;
    assume ($t22 == $ResourceValue($1_stake_OwnerCapability_$memory, $t21));

    // assume Identical($t23, select stake::OwnerCapability.pool_address($t22)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:120:9+46
    assume {:print "$at(3,5069,5115)"} true;
    assume ($t23 == $t22->$pool_address);

    // staking_proxy::set_stake_pool_voter($t0, $t2) on_abort goto L2 with $t13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:18:9+38
    assume {:print "$at(2,724,762)"} true;
    call $1_staking_proxy_set_stake_pool_voter($t0, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,724,762)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(66,7):", $t13} $t13 == $t13;
        goto L2;
    }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:19:5+1
    assume {:print "$at(2,768,769)"} true;
L1:

    // assert Not(And($t6, Not(exists[@104]<stake::StakePool>($t9)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:105:9+77
    assume {:print "$at(3,4517,4594)"} true;
    assert {:msg "assert_failed(3,4517,4594): function does not abort under this condition"}
      !($t6 && !$ResourceExists($1_stake_StakePool_$memory#104, $t9));

    // assert Not(And($t6, Not(exists[@104]<stake::StakePool>(select stake::OwnerCapability.pool_address(select staking_contract::StakingContract.owner_cap($t8)))))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:106:9+104
    assume {:print "$at(3,4603,4707)"} true;
    assert {:msg "assert_failed(3,4603,4707): function does not abort under this condition"}
      !($t6 && !$ResourceExists($1_stake_StakePool_$memory#104, $t8->$owner_cap->$pool_address));

    // assert Not(And(stake::$stake_pool_exists[@104]($t10), Not(And(exists[@105]<stake::OwnerCapability>($t10), stake::$stake_pool_exists[@104]($t12))))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:121:9+144
    assume {:print "$at(3,5124,5268)"} true;
    assert {:msg "assert_failed(3,5124,5268): function does not abort under this condition"}
      !($1_stake_$stake_pool_exists($1_stake_StakePool_$memory#104, $t10) && !($ResourceExists($1_stake_OwnerCapability_$memory#105, $t10) && $1_stake_$stake_pool_exists($1_stake_StakePool_$memory#104, $t12)));

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:121:9+144
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:19:5+1
    assume {:print "$at(2,768,769)"} true;
L2:

    // abort($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:19:5+1
    assume {:print "$at(2,768,769)"} true;
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// fun staking_proxy::set_voter [verification[inconsistency_]] at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+265
procedure {:timeLimit 40} {:msg_if_verifies "inconsistency_detected(2,504,769)"} $1_staking_proxy_set_voter$verify_inconsistency_(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: $1_staking_contract_Store;
    var $t6: bool;
    var $t7: int;
    var $t8: $1_staking_contract_StakingContract;
    var $t9: int;
    var $t10: int;
    var $t11: $1_stake_OwnerCapability;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: $1_staking_contract_Store;
    var $t17: bool;
    var $t18: int;
    var $t19: $1_staking_contract_StakingContract;
    var $t20: int;
    var $t21: int;
    var $t22: $1_stake_OwnerCapability;
    var $t23: int;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $1_stake_StakePool_$memory#104: $Memory $1_stake_StakePool;
    var $1_stake_OwnerCapability_$memory#105: $Memory $1_stake_OwnerCapability;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+1
    assume {:print "$at(2,504,505)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+1
    assume $IsValid'address'($t2);

    // assume forall $rsc: stake::OwnerCapability: ResourceDomain<stake::OwnerCapability>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_OwnerCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_OwnerCapability_$memory, $a_0);
    ($IsValid'$1_stake_OwnerCapability'($rsc))));

    // assume forall $rsc: stake::StakePool: ResourceDomain<stake::StakePool>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_StakePool_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_StakePool_$memory, $a_0);
    ($IsValid'$1_stake_StakePool'($rsc))));

    // assume forall $rsc: stake::ValidatorConfig: ResourceDomain<stake::ValidatorConfig>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorConfig_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorConfig'($rsc))));

    // assume forall $rsc: stake::ValidatorPerformance: ResourceDomain<stake::ValidatorPerformance>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorPerformance_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorPerformance'($rsc))));

    // assume forall $rsc: stake::ValidatorSet: ResourceDomain<stake::ValidatorSet>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_stake_ValidatorSet_$memory, $a_0)}(var $rsc := $ResourceValue($1_stake_ValidatorSet_$memory, $a_0);
    ($IsValid'$1_stake_ValidatorSet'($rsc))));

    // assume forall $rsc: staking_contract::Store: ResourceDomain<staking_contract::Store>(): And(WellFormed($rsc), forall $key: address: select staking_contract::Store.staking_contracts($rsc): And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), i), Index(select pool_u64::Pool.shareholders(select staking_contract::StakingContract.distribution_pool(simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($rsc), $key))), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_staking_contract_Store_$memory, $a_0)}(var $rsc := $ResourceValue($1_staking_contract_Store_$memory, $a_0);
    (($IsValid'$1_staking_contract_Store'($rsc) && (var $range_1 := $rsc->$staking_contracts; (forall $key: int :: ContainsTable($range_1, $EncodeKey'address'($key)) ==> (((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shares, addr), $1_vector_spec_contains'address'($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, addr)))) && (var $range_2 := $Range(0, LenVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders)); (var $range_3 := $Range(0, LenVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders)); (forall $i_4: int, $i_5: int :: $InRange($range_2, $i_4) ==> $InRange($range_3, $i_5) ==> (var i := $i_4;
    (var j := $i_5;
    (($IsEqual'address'(ReadVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, i), ReadVec($1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($rsc->$staking_contracts, $key)->$distribution_pool->$shareholders, j)) ==> $IsEqual'num'(i, j))))))))))))))));

    // assume forall $rsc: vesting::AdminStore: ResourceDomain<vesting::AdminStore>(): WellFormed($rsc) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_AdminStore_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_AdminStore_$memory, $a_0);
    ($IsValid'$1_vesting_AdminStore'($rsc))));

    // assume forall $rsc: vesting::VestingContract: ResourceDomain<vesting::VestingContract>(): And(WellFormed($rsc), And(forall addr: address: TypeDomain<address>(): Eq<bool>(simple_map::spec_contains_key<address, u64>(select pool_u64::Pool.shares(select vesting::VestingContract.grant_pool($rsc)), addr), vector::spec_contains<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), addr)), forall i: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))), j: num: Range(0, Len<address>(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)))): Implies(Eq<address>(Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), i), Index(select pool_u64::Pool.shareholders(select vesting::VestingContract.grant_pool($rsc)), j)), Eq<num>(i, j)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_vesting_VestingContract_$memory, $a_0)}(var $rsc := $ResourceValue($1_vesting_VestingContract_$memory, $a_0);
    (($IsValid'$1_vesting_VestingContract'($rsc) && ((forall addr: int :: $IsValid'address'(addr) ==> ($IsEqual'bool'($1_simple_map_spec_contains_key'address_u64'($rsc->$grant_pool->$shares, addr), $1_vector_spec_contains'address'($rsc->$grant_pool->$shareholders, addr)))) && (var $range_1 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (var $range_2 := $Range(0, LenVec($rsc->$grant_pool->$shareholders)); (forall $i_3: int, $i_4: int :: $InRange($range_1, $i_3) ==> $InRange($range_2, $i_4) ==> (var i := $i_3;
    (var j := $i_4;
    (($IsEqual'address'(ReadVec($rsc->$grant_pool->$shareholders, i), ReadVec($rsc->$grant_pool->$shareholders, j)) ==> $IsEqual'num'(i, j)))))))))))));

    // assume Implies(exists<stake::ValidatorSet>(0x1), stake::validator_set_is_valid()) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+265
    // global invariant at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/stake.spec.move:8:9+92
    assume ($ResourceExists($1_stake_ValidatorSet_$memory, 1) ==> $1_stake_validator_set_is_valid($1_stake_StakePool_$memory, $1_stake_ValidatorConfig_$memory, $1_stake_ValidatorPerformance_$memory, $1_stake_ValidatorSet_$memory));

    // assume Identical($t3, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:93:9+46
    assume {:print "$at(3,3996,4042)"} true;
    assume ($t3 == $1_signer_$address_of($t0));

    // assume Identical($t4, $t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:94:9+27
    assume {:print "$at(3,4051,4078)"} true;
    assume ($t4 == $t3);

    // assume Identical($t5, global<staking_contract::Store>($t4)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:95:9+34
    assume {:print "$at(3,4087,4121)"} true;
    assume ($t5 == $ResourceValue($1_staking_contract_Store_$memory, $t4));

    // assume Identical($t6, And(exists<staking_contract::Store>($t4), simple_map::spec_contains_key<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t5), $t1))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:98:9+120
    assume {:print "$at(3,4169,4289)"} true;
    assume ($t6 == ($ResourceExists($1_staking_contract_Store_$memory, $t4) && $1_simple_map_spec_contains_key'address_$1_staking_contract_StakingContract'($t5->$staking_contracts, $t1)));

    // assume Identical($t7, $t3) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:101:9+35
    assume {:print "$at(3,4326,4361)"} true;
    assume ($t7 == $t3);

    // assume Identical($t8, simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t5), $t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:102:9+79
    assume {:print "$at(3,4370,4449)"} true;
    assume ($t8 == $1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($t5->$staking_contracts, $t1));

    // assume Identical($t9, select staking_contract::StakingContract.pool_address($t8)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:103:9+49
    assume {:print "$at(3,4458,4507)"} true;
    assume ($t9 == $t8->$pool_address);

    // assume Identical($t10, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:118:9+46
    assume {:print "$at(3,4939,4985)"} true;
    assume ($t10 == $1_signer_$address_of($t0));

    // assume Identical($t11, global<stake::OwnerCapability>($t10)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:119:9+66
    assume {:print "$at(3,4994,5060)"} true;
    assume ($t11 == $ResourceValue($1_stake_OwnerCapability_$memory, $t10));

    // assume Identical($t12, select stake::OwnerCapability.pool_address($t11)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:120:9+46
    assume {:print "$at(3,5069,5115)"} true;
    assume ($t12 == $t11->$pool_address);

    // @105 := save_mem(stake::OwnerCapability) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+1
    assume {:print "$at(2,504,505)"} true;
    $1_stake_OwnerCapability_$memory#105 := $1_stake_OwnerCapability_$memory;

    // @104 := save_mem(stake::StakePool) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+1
    $1_stake_StakePool_$memory#104 := $1_stake_StakePool_$memory;

    // trace_local[owner]($t0) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+1
    assume {:print "$track_local(66,7,0):", $t0} $t0 == $t0;

    // trace_local[operator]($t1) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+1
    assume {:print "$track_local(66,7,1):", $t1} $t1 == $t1;

    // trace_local[new_voter]($t2) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:15:5+1
    assume {:print "$track_local(66,7,2):", $t2} $t2 == $t2;

    // staking_proxy::set_vesting_contract_voter($t0, $t1, $t2) on_abort goto L2 with $t13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:16:9+54
    assume {:print "$at(2,596,650)"} true;
    call $1_staking_proxy_set_vesting_contract_voter($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,596,650)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(66,7):", $t13} $t13 == $t13;
        goto L2;
    }

    // assume Identical($t14, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:93:9+46
    assume {:print "$at(3,3996,4042)"} true;
    assume ($t14 == $1_signer_$address_of($t0));

    // assume Identical($t15, $t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:94:9+27
    assume {:print "$at(3,4051,4078)"} true;
    assume ($t15 == $t14);

    // assume Identical($t16, global<staking_contract::Store>($t15)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:95:9+34
    assume {:print "$at(3,4087,4121)"} true;
    assume ($t16 == $ResourceValue($1_staking_contract_Store_$memory, $t15));

    // assume Identical($t17, And(exists<staking_contract::Store>($t15), simple_map::spec_contains_key<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t16), $t1))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:98:9+120
    assume {:print "$at(3,4169,4289)"} true;
    assume ($t17 == ($ResourceExists($1_staking_contract_Store_$memory, $t15) && $1_simple_map_spec_contains_key'address_$1_staking_contract_StakingContract'($t16->$staking_contracts, $t1)));

    // assume Identical($t18, $t14) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:101:9+35
    assume {:print "$at(3,4326,4361)"} true;
    assume ($t18 == $t14);

    // assume Identical($t19, simple_map::spec_get<address, staking_contract::StakingContract>(select staking_contract::Store.staking_contracts($t16), $t1)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:102:9+79
    assume {:print "$at(3,4370,4449)"} true;
    assume ($t19 == $1_simple_map_spec_get'address_$1_staking_contract_StakingContract'($t16->$staking_contracts, $t1));

    // assume Identical($t20, select staking_contract::StakingContract.pool_address($t19)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:103:9+49
    assume {:print "$at(3,4458,4507)"} true;
    assume ($t20 == $t19->$pool_address);

    // staking_proxy::set_staking_contract_voter($t0, $t1, $t2) on_abort goto L2 with $t13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:17:9+54
    assume {:print "$at(2,660,714)"} true;
    call $1_staking_proxy_set_staking_contract_voter($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,660,714)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(66,7):", $t13} $t13 == $t13;
        goto L2;
    }

    // assume Identical($t21, signer::$address_of($t0)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:118:9+46
    assume {:print "$at(3,4939,4985)"} true;
    assume ($t21 == $1_signer_$address_of($t0));

    // assume Identical($t22, global<stake::OwnerCapability>($t21)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:119:9+66
    assume {:print "$at(3,4994,5060)"} true;
    assume ($t22 == $ResourceValue($1_stake_OwnerCapability_$memory, $t21));

    // assume Identical($t23, select stake::OwnerCapability.pool_address($t22)) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:120:9+46
    assume {:print "$at(3,5069,5115)"} true;
    assume ($t23 == $t22->$pool_address);

    // staking_proxy::set_stake_pool_voter($t0, $t2) on_abort goto L2 with $t13 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:18:9+38
    assume {:print "$at(2,724,762)"} true;
    call $1_staking_proxy_set_stake_pool_voter($t0, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,724,762)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(66,7):", $t13} $t13 == $t13;
        goto L2;
    }

    // label L1 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:19:5+1
    assume {:print "$at(2,768,769)"} true;
L1:

    // assert Not(And($t6, Not(exists[@104]<stake::StakePool>($t9)))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:105:9+77
    assume {:print "$at(3,4517,4594)"} true;
    assert {:msg "assert_failed(3,4517,4594): function does not abort under this condition"}
      !($t6 && !$ResourceExists($1_stake_StakePool_$memory#104, $t9));

    // assert Not(And($t6, Not(exists[@104]<stake::StakePool>(select stake::OwnerCapability.pool_address(select staking_contract::StakingContract.owner_cap($t8)))))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:106:9+104
    assume {:print "$at(3,4603,4707)"} true;
    assert {:msg "assert_failed(3,4603,4707): function does not abort under this condition"}
      !($t6 && !$ResourceExists($1_stake_StakePool_$memory#104, $t8->$owner_cap->$pool_address));

    // assert Not(And(stake::$stake_pool_exists[@104]($t10), Not(And(exists[@105]<stake::OwnerCapability>($t10), stake::$stake_pool_exists[@104]($t12))))) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:121:9+144
    assume {:print "$at(3,5124,5268)"} true;
    assert {:msg "assert_failed(3,5124,5268): function does not abort under this condition"}
      !($1_stake_$stake_pool_exists($1_stake_StakePool_$memory#104, $t10) && !($ResourceExists($1_stake_OwnerCapability_$memory#105, $t10) && $1_stake_$stake_pool_exists($1_stake_StakePool_$memory#104, $t12)));

    // assert false at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:15:5+257
    assume {:print "$at(3,563,820)"} true;
    assert {:msg "assert_failed(3,563,820): expected to fail"}
      false;

    // return () at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:121:9+144
    assume {:print "$at(3,5124,5268)"} true;
    return;

    // label L2 at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:19:5+1
    assume {:print "$at(2,768,769)"} true;
L2:

    // assert false at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.spec.move:15:5+257
    assume {:print "$at(3,563,820)"} true;
    assert {:msg "assert_failed(3,563,820): expected to fail"}
      false;

    // abort($t13) at /Users/yun/Downloads/Gitrepo/movebit/aptos-core/aptos-move/framework/aptos-framework/sources/staking_proxy.move:19:5+1
    assume {:print "$at(2,768,769)"} true;
    $abort_code := $t13;
    $abort_flag := true;
    return;

}
