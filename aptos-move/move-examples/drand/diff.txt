diff --git a/aptos-move/move-examples/drand/sources/lottery.move b/aptos-move/move-examples/drand/sources/lottery.move
index 024d54bfa1..4530782e26 100644
--- a/aptos-move/move-examples/drand/sources/lottery.move
+++ b/aptos-move/move-examples/drand/sources/lottery.move
@@ -11,15 +11,6 @@
 /// incorrectly treated as a valid future drand round, even though that round has passed. It is therefore important that
 /// contracts account for any drift between the Aptos clock and the drand clock. In this example, this can be done by
 /// increasing the MINIMUM_LOTTERY_DURATION_SECS to account for this drift.
-///
-/// ### Deploying this contract
-///
-/// This contract can be deployed with the following CLI command:
-/// aptos move create-resource-account-and-publish-package --seed [arbitrary positive integer] --address-name drand --profile [name of profile in aptos config file] --named-addresses developer_addr=[address of profile used]
-///
-/// This will deploy the contract to a resource account with address sha3_512(developer_addr, seed). Note that the 
-/// deploying address will NOT be able to update the contract after deployment. If this is desired, the contract 
-/// can be modified to deploy to the developer address instead, which can use a multisig among several parties for more security in performing updates.
 
 module drand::lottery {
     use std::signer;
@@ -27,14 +18,11 @@ module drand::lottery {
     use std::vector;
     use std::option::{Self, Option};
     use aptos_framework::coin;
-    use aptos_framework::resource_account;
     use std::error;
     use aptos_framework::timestamp;
     use aptos_framework::aptos_coin::AptosCoin;
     use drand::drand;
     //use aptos_std::debug;
-    #[test_only]
-    use aptos_framework::account::create_account_for_test;
 
     /// Error code code when someone tries to start a very "short" lottery where users might not have enough time
     /// to buy tickets.
@@ -77,13 +65,11 @@ module drand::lottery {
     // Declare the testing module as a friend, so it can call `init_module` below for testing.
     friend drand::lottery_test;
 
-    /// Retrieves a so-called "resource" account which will maintain the list of lottery tickets bought by users. This must have been initialized before the contract is deployed, by the account associated with @developer_addr.
-    fun init_module(resource_account: &signer) {
-        // Retrieve the resource account. This will allow this module to later obtain a `signer` for this account and
+    /// Initializes a so-called "resource" account which will maintain the list of lottery tickets bought by users.
+    fun init_module(deployer: &signer) {
+        // Create the resource account. This will allow this module to later obtain a `signer` for this account and
         // update the list of purchased lottery tickets.
-        let signer_cap = resource_account::retrieve_resource_account_cap(
-            resource_account, @developer_addr
-        );
+        let (_resource, signer_cap) = account::create_resource_account(deployer, vector::empty());
 
         // Acquire a signer for the resource account that stores the coin bounty
         let rsrc_acc_signer = account::create_signer_with_capability(&signer_cap);
@@ -91,8 +77,8 @@ module drand::lottery {
         // Initialize an AptosCoin coin store there, which is where the lottery bounty will be kept
         coin::register<AptosCoin>(&rsrc_acc_signer);
 
-        // Initialiaze the lottery as 'not started'
-        move_to(resource_account,
+        // Initialiaze the loterry as 'not started'
+        move_to(deployer,
             Lottery {
                 tickets: vector::empty<address>(),
                 draw_at: option::none(),
@@ -156,7 +142,7 @@ module drand::lottery {
             // It's time to draw, but nobody signed up => nobody won.
             // Close the lottery (even if the randomness might be incorrect).
             option::extract(&mut lottery.draw_at);
-            return
+            return 
         };
 
         // Determine the next drand round after `draw_at`
