module 0xcafe.BasicGeneric {
    /////////////////////////////////////////////////
    // INSTRUCTIONS:
    // * `MUT_BORROW_FIELD_GENERIC_BASE`
    // * `CALL_GENERIC_BASE`
    // * `CALL_GENERIC_PER_ARG`

    struct S { b: bool }

    f1<T>(a: T) {
    label b0:
        _ = copy(a);
        return;
    }
    public entry calibrate_call_generic() {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if_false (copy(i) < 1000) loop_end;

        _ = Self.f1<bool>(true);
        _ = Self.f1<u64>(0);
        _ = Self.f1<bool>(true);
        _ = Self.f1<u64>(0);
        _ = Self.f1<bool>(true);
        _ = Self.f1<Self.S>(S { b: true });                

        i = move(i) + 1;
        jump loop_start;
    label loop_end:
        return;
    }

    f2<T>() {
    label b0:
        return;
    }
    public entry calibrate_call_generic_no_args() {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if_false (copy(i) < 1000) loop_end;

        _ = Self.f2();
        _ = Self.f2();
        _ = Self.f2();                
        _ = Self.f2();

        i = move(i) + 1;
        jump loop_start;
    label loop_end:
        return;        
    }

           
}