module 0xcafe.BasicCore {
    /////////////////////////////////////////////////
    // INSTRUCTIONS:
    // * `LDU64`
    // * `POP`
    // * `SUB`
    // * `RET`
    // * `LdU8`
    // * `LdU16`
    // * `LdU32`
    // * `LdU128`
    // * `LdU256`

    // this is empty function, not used to calibrate
    public entry calibrate_ret() {
    label b0:
        return;
    }


    /////////////////////////////////////////////////
    // LDU64 and POP calibrating and tuning
    
    public entry calibrate_ldu64_pop() {
    label b0:
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();

        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();

        return;
    }

    public entry calibrate_ldu64_pop_tune_even() {
    label b0:
        (1,2,3,4);
        (1,2,3,4);
        (1,2,3,4);
        (1,2,3,4);
        _,_,_,_ = ();
        _,_,_,_ = ();
        _,_,_,_ = ();
        _,_,_,_ = ();

        return;
    }

    public entry calibrate_ldu64_pop_tune_odd() {
    label b0:
        (1,2,3,4,5,6,7);
        _,_,_,_,_,_,_ = ();
        return;
    }


    /////////////////////////////////////////////////
    // SUB calibrating and tuning

    public entry calibrate_sub() {
    label b0:
        _ = (1000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);
        return;
    }

    public entry calibrate_sub_many() {
    label b0:
        _ = (5 - 1);
        _ = (5 - 1);
        _ = (5 - 1);
        _ = (5 - 1);
        _ = (5 - 1);
        return;
    }

    // intentionally underflow to calibrate ldu64
    public entry calibrate_ldu64_no_pop() {
    label b0:
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        _ = (0 - 1);
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();   
        return;                             
    }

    /////////////////////////////////////////////////
    // Additional Tuning

    public entry calibrate_tuning_core() {
    label b0:
        (1);
        (1);
        (1);
        _ = (5 - 1);
        _ = (5 - 1);
        _ = (5 - 1);
        _ = ();
        _ = ();
        _ = ();

        (1,2);
        (1,2);
        (1,2);
        _ = (5 - 1 - 1);
        _ = (5 - 1 - 1);
        _ = (5 - 1 - 1);
        _ = (5 - 1 - 1);
        _ = (5 - 1 - 1);
        _,_ = ();
        _,_ = ();
        _,_ = ();
        return;
    }

    public entry calibrate_tuning_many_subs() {
    label b0:
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);        
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);        
        return;                        
    }

    public entry calibrate_tuning_many_of_all_instr() {
    label b0:
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);        
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);        
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);                
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = (); 
        return;        
    }

    public entry calibrate_tuning_many_of_all_instr_copied() {
    label b0:
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10); 
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);                
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);        
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);
        _ = (10000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);                
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();        
        return;                    
    }


    /////////////////////////////////////////////////
    // LdTrue and LdFalse calibrating and tuning    

    public entry calibrate_ldtrue_many() {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if_false (copy(i) < 1000) loop_end;
        i = move(i) + 1;

        (true);
        (true);
        (true);
        (true);
        (true);
        (true);
        (true);
        (true);
        _ = ();
        _ = ();
        _ = ();
        _ = ();
        _ = ();
        _ = ();
        _ = ();
        _ = ();              

        jump loop_start;
    label loop_end:
        return;          
    }

    public entry calibrate_ldfalse_many() {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if_false (copy(i) < 1000) loop_end;
        i = move(i) + 1;

        (false);
        (false);
        (false);
        (false);
        (false);
        (false);
        (false);
        (false);
        _ = ();
        _ = ();
        _ = ();
        _ = ();
        _ = ();
        _ = ();
        _ = ();
        _ = ();                 

        jump loop_start;
    label loop_end:
        return;          
    }  

    public entry calibrate_ldfalse_ldtrue_many() {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if_false (copy(i) < 1000) loop_end;
        i = move(i) + 1;

        (false);
        (false);
        (false);
        (false);
        (false);
        (false);
        (false);
        (true);
        (true);
        (true);
        (true);
        (true);
        (true);        
        _ = ();
        _ = ();
        _ = ();
        _ = ();
        _ = ();
        _ = ();
        _ = ();
        _ = ();
        _ = ();
        _ = ();
        _ = ();
        _ = ();
        _ = ();                              

        jump loop_start;
    label loop_end:
        return;          
    }             


    /////////////////////////////////////////////////
    // LdU8, LdU16, LdU32, LdU128, Ldu256 calibrating and tuning  

    public entry calibrate_ldu8() {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if_false (copy(i) < 1000) loop_end;
        i = move(i) + 1;

        (1u8, 2u8, 3u8, 4u8, 5u8, 6u8, 7u8, 9u8, 10u8);
        (1u8, 2u8, 3u8, 4u8, 5u8, 6u8, 7u8, 9u8, 10u8);
        (1u8, 2u8, 3u8, 4u8, 5u8, 6u8, 7u8, 9u8, 10u8);
        (1u8, 2u8, 3u8, 4u8, 5u8, 6u8, 7u8, 9u8, 10u8);
        (1u8, 2u8, 3u8, 4u8, 5u8, 6u8, 7u8, 9u8, 10u8);
        (1u8, 2u8, 3u8, 4u8, 5u8, 6u8, 7u8, 9u8, 10u8);
        (1u8, 2u8, 3u8, 4u8, 5u8, 6u8, 7u8, 9u8, 10u8);
        (1u8, 2u8, 3u8, 4u8, 5u8, 6u8, 7u8, 9u8, 10u8);
        (1u8, 2u8, 3u8, 4u8, 5u8, 6u8, 7u8, 9u8, 10u8);
        (1u8, 2u8, 3u8, 4u8, 5u8, 6u8, 7u8, 9u8, 10u8);
        (1u8, 2u8, 3u8, 4u8, 5u8, 6u8, 7u8, 9u8, 10u8);
        (1u8, 2u8, 3u8, 4u8, 5u8, 6u8, 7u8, 9u8, 10u8);
        (1u8, 2u8, 3u8, 4u8, 5u8, 6u8, 7u8, 9u8, 10u8);
        (1u8, 2u8, 3u8, 4u8, 5u8, 6u8, 7u8, 9u8, 10u8);
        (1u8, 2u8, 3u8, 4u8, 5u8, 6u8, 7u8, 9u8, 10u8);
        (1u8, 2u8, 3u8, 4u8, 5u8, 6u8, 7u8, 9u8, 10u8);
        (1u8, 2u8, 3u8, 4u8, 5u8, 6u8, 7u8, 9u8, 10u8);
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();                

        jump loop_start;
    label loop_end:
        return;          
    }

    public entry calibrate_ldu16() {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if_false (copy(i) < 1000) loop_end;
        i = move(i) + 1;

        (1u16, 2u16, 3u16, 4u16, 5u16, 6u16, 7u16, 9u16, 10u16);
        (1u16, 2u16, 3u16, 4u16, 5u16, 6u16, 7u16, 9u16, 10u16);
        (1u16, 2u16, 3u16, 4u16, 5u16, 6u16, 7u16, 9u16, 10u16);
        (1u16, 2u16, 3u16, 4u16, 5u16, 6u16, 7u16, 9u16, 10u16);
        (1u16, 2u16, 3u16, 4u16, 5u16, 6u16, 7u16, 9u16, 10u16);
        (1u16, 2u16, 3u16, 4u16, 5u16, 6u16, 7u16, 9u16, 10u16);
        (1u16, 2u16, 3u16, 4u16, 5u16, 6u16, 7u16, 9u16, 10u16);
        (1u16, 2u16, 3u16, 4u16, 5u16, 6u16, 7u16, 9u16, 10u16);
        (1u16, 2u16, 3u16, 4u16, 5u16, 6u16, 7u16, 9u16, 10u16);
        (1u16, 2u16, 3u16, 4u16, 5u16, 6u16, 7u16, 9u16, 10u16);
        (1u16, 2u16, 3u16, 4u16, 5u16, 6u16, 7u16, 9u16, 10u16);
        (1u16, 2u16, 3u16, 4u16, 5u16, 6u16, 7u16, 9u16, 10u16);
        (1u16, 2u16, 3u16, 4u16, 5u16, 6u16, 7u16, 9u16, 10u16);
        (1u16, 2u16, 3u16, 4u16, 5u16, 6u16, 7u16, 9u16, 10u16);
        (1u16, 2u16, 3u16, 4u16, 5u16, 6u16, 7u16, 9u16, 10u16);
        (1u16, 2u16, 3u16, 4u16, 5u16, 6u16, 7u16, 9u16, 10u16);
        (1u16, 2u16, 3u16, 4u16, 5u16, 6u16, 7u16, 9u16, 10u16);
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();                

        jump loop_start;
    label loop_end:
        return;          
    } 

    public entry calibrate_ldu32() {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if_false (copy(i) < 1000) loop_end;
        i = move(i) + 1;

        (1u32, 2u32, 3u32, 4u32, 5u32, 6u32, 7u32, 9u32, 10u32);
        (1u32, 2u32, 3u32, 4u32, 5u32, 6u32, 7u32, 9u32, 10u32);
        (1u32, 2u32, 3u32, 4u32, 5u32, 6u32, 7u32, 9u32, 10u32);
        (1u32, 2u32, 3u32, 4u32, 5u32, 6u32, 7u32, 9u32, 10u32);
        (1u32, 2u32, 3u32, 4u32, 5u32, 6u32, 7u32, 9u32, 10u32);
        (1u32, 2u32, 3u32, 4u32, 5u32, 6u32, 7u32, 9u32, 10u32);
        (1u32, 2u32, 3u32, 4u32, 5u32, 6u32, 7u32, 9u32, 10u32);
        (1u32, 2u32, 3u32, 4u32, 5u32, 6u32, 7u32, 9u32, 10u32);
        (1u32, 2u32, 3u32, 4u32, 5u32, 6u32, 7u32, 9u32, 10u32);
        (1u32, 2u32, 3u32, 4u32, 5u32, 6u32, 7u32, 9u32, 10u32);
        (1u32, 2u32, 3u32, 4u32, 5u32, 6u32, 7u32, 9u32, 10u32);
        (1u32, 2u32, 3u32, 4u32, 5u32, 6u32, 7u32, 9u32, 10u32);
        (1u32, 2u32, 3u32, 4u32, 5u32, 6u32, 7u32, 9u32, 10u32);
        (1u32, 2u32, 3u32, 4u32, 5u32, 6u32, 7u32, 9u32, 10u32);
        (1u32, 2u32, 3u32, 4u32, 5u32, 6u32, 7u32, 9u32, 10u32);
        (1u32, 2u32, 3u32, 4u32, 5u32, 6u32, 7u32, 9u32, 10u32);
        (1u32, 2u32, 3u32, 4u32, 5u32, 6u32, 7u32, 9u32, 10u32);
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();                

        jump loop_start;
    label loop_end:
        return;          
    }         

    public entry calibrate_ldu128() {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if_false (copy(i) < 1000) loop_end;
        i = move(i) + 1;

        (1u128, 2u128, 3u128, 4u128, 5u128, 6u128, 7u128, 9u128, 10u128);
        (1u128, 2u128, 3u128, 4u128, 5u128, 6u128, 7u128, 9u128, 10u128);
        (1u128, 2u128, 3u128, 4u128, 5u128, 6u128, 7u128, 9u128, 10u128);
        (1u128, 2u128, 3u128, 4u128, 5u128, 6u128, 7u128, 9u128, 10u128);
        (1u128, 2u128, 3u128, 4u128, 5u128, 6u128, 7u128, 9u128, 10u128);
        (1u128, 2u128, 3u128, 4u128, 5u128, 6u128, 7u128, 9u128, 10u128);
        (1u128, 2u128, 3u128, 4u128, 5u128, 6u128, 7u128, 9u128, 10u128);
        (1u128, 2u128, 3u128, 4u128, 5u128, 6u128, 7u128, 9u128, 10u128);
        (1u128, 2u128, 3u128, 4u128, 5u128, 6u128, 7u128, 9u128, 10u128);
        (1u128, 2u128, 3u128, 4u128, 5u128, 6u128, 7u128, 9u128, 10u128);
        (1u128, 2u128, 3u128, 4u128, 5u128, 6u128, 7u128, 9u128, 10u128);
        (1u128, 2u128, 3u128, 4u128, 5u128, 6u128, 7u128, 9u128, 10u128);
        (1u128, 2u128, 3u128, 4u128, 5u128, 6u128, 7u128, 9u128, 10u128);
        (1u128, 2u128, 3u128, 4u128, 5u128, 6u128, 7u128, 9u128, 10u128);
        (1u128, 2u128, 3u128, 4u128, 5u128, 6u128, 7u128, 9u128, 10u128);
        (1u128, 2u128, 3u128, 4u128, 5u128, 6u128, 7u128, 9u128, 10u128);
        (1u128, 2u128, 3u128, 4u128, 5u128, 6u128, 7u128, 9u128, 10u128);
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();                

        jump loop_start;
    label loop_end:
        return;          
    } 

    public entry calibrate_ldu256() {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if_false (copy(i) < 1000) loop_end;
        i = move(i) + 1;

        (1u256, 2u256, 3u256, 4u256, 5u256, 6u256, 7u256, 9u256, 10u256);
        (1u256, 2u256, 3u256, 4u256, 5u256, 6u256, 7u256, 9u256, 10u256);
        (1u256, 2u256, 3u256, 4u256, 5u256, 6u256, 7u256, 9u256, 10u256);
        (1u256, 2u256, 3u256, 4u256, 5u256, 6u256, 7u256, 9u256, 10u256);
        (1u256, 2u256, 3u256, 4u256, 5u256, 6u256, 7u256, 9u256, 10u256);
        (1u256, 2u256, 3u256, 4u256, 5u256, 6u256, 7u256, 9u256, 10u256);
        (1u256, 2u256, 3u256, 4u256, 5u256, 6u256, 7u256, 9u256, 10u256);
        (1u256, 2u256, 3u256, 4u256, 5u256, 6u256, 7u256, 9u256, 10u256);
        (1u256, 2u256, 3u256, 4u256, 5u256, 6u256, 7u256, 9u256, 10u256);
        (1u256, 2u256, 3u256, 4u256, 5u256, 6u256, 7u256, 9u256, 10u256);
        (1u256, 2u256, 3u256, 4u256, 5u256, 6u256, 7u256, 9u256, 10u256);
        (1u256, 2u256, 3u256, 4u256, 5u256, 6u256, 7u256, 9u256, 10u256);
        (1u256, 2u256, 3u256, 4u256, 5u256, 6u256, 7u256, 9u256, 10u256);
        (1u256, 2u256, 3u256, 4u256, 5u256, 6u256, 7u256, 9u256, 10u256);
        (1u256, 2u256, 3u256, 4u256, 5u256, 6u256, 7u256, 9u256, 10u256);
        (1u256, 2u256, 3u256, 4u256, 5u256, 6u256, 7u256, 9u256, 10u256);
        (1u256, 2u256, 3u256, 4u256, 5u256, 6u256, 7u256, 9u256, 10u256);
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_ = ();                

        jump loop_start;
    label loop_end:
        return;          
    }       
    
}