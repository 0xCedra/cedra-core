module 0xcafe.BasicCond {
    /////////////////////////////////////////////////
    // INSTRUCTIONS:
    // * `Lt`
    // * `Branch`
    // * `BrFalse`
    // * `BrTrue`
    // * `Gt`
    // * `Le`
    // * `Ge`

    struct T has key { b: bool }

    /////////////////////////////////////////////////
    // Lt calibrating and tuning        

    public entry calibrate_lt() {
    label b0:
        _ = (5 < 1);
        return;
    }

    public entry calibrate_lt_many() {
    label b0:
        _ = (1 < 5);
        _ = (10 < 20);
        _ = (1 < 5);
        _ = (10 < 20);
        _ = (1 < 5);
        _ = (10 < 20);
        _ = (1 < 5);
        _ = (10 < 20);
        _ = (1 < 5);
        _ = (10 < 20);                        
        _ = (1 < 5);
        _ = (10 < 20);                       
        return;                       
    }

    public entry calibrate_lt_with_stloc_add() {
        let a: u64;
    label b0:
        a = 5;
        _ = (copy(a) + 1 < 6);
        _ = (copy(a) + 1 < 1);
        a = 5;
        _ = (copy(a) + 1 < 6);
        _ = (copy(a) + 1 < 1);
        a = 5;
        _ = (copy(a) + 1 < 6);
        _ = (copy(a) + 1 < 1);
        a = 5;
        _ = (copy(a) + 1 < 6);
        _ = (copy(a) + 1 < 1);
        a = 5;
        _ = (copy(a) + 1 < 6);
        _ = (copy(a) + 1 < 1);
        return;                                                                
    }

    public entry calibrate_lt_with_stloc_copy_add_sub_many() {
        let a: u64;
        let b: u64;
        let c: u64;
        let d: u64;
        let e: u64;
        let f: u64;
        let g: u64;
        let h: u64;
    label b0:
        a = 1000;
        b = 2;
        c = 3;
        d = 4;
        e = 5;
        f = 6;
        g = 7;
        h = 8;
        _ = (copy(a) < 1);
        _ = (copy(b) < 1);
        _ = (copy(c) < 1);
        _ = (copy(d) < 1);
        _ = (copy(e) < 100);
        _ = (copy(f) < 100);
        _ = (copy(g) < 100);
        _ = (copy(h) < 100);
        return;
    }

    public entry calibrate_lt_with_stloc_copy_move() {
        let a: u64;
    label b0:
        a = 10000;
        a = move(a) + 1;
        _ = (copy(a) < 10);
        a = 10000;
        a = move(a) + 1;
        _ = (copy(a) < 10);
        a = 10000;
        a = move(a) + 1;
        _ = (copy(a) < 10);
        a = 10000;
        a = move(a) + 1;
        _ = (copy(a) < 10);
        a = 10000;
        a = move(a) + 1;
        _ = (copy(a) < 10);
        a = 10000;
        a = move(a) + 1;
        _ = (copy(a) < 10);
        a = 10000;
        a = move(a) + 1;
        _ = (copy(a) < 10);
        a = 10000;
        a = move(a) + 1;
        _ = (copy(a) < 10);
        a = 10000;
        a = move(a) + 1;
        _ = (copy(a) < 10);
        a = 10000;
        a = move(a) + 1;
        _ = (copy(a) < 10);
        a = 10000;
        a = move(a) + 1;
        _ = (copy(a) < 10);
        a = 10000;
        a = move(a) + 1;
        _ = (copy(a) < 10);                
        return;                        
    }


    /////////////////////////////////////////////////
    // Branch and BrFalse calibrating and tuning      
    public entry calibrate_while_loop() {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if (copy(i) >= 1000) loop_end;
        i = move(i) + 1;

        _ = 5;
        _ = 5;
        _ = 5;
        _ = 5;
        _ = 5;
        _ = 5;
        _ = 5;
        _ = 5;
        _ = 5;

        jump loop_start;
    label loop_end:
        return;          
    }

    public entry calibrate_while_loop_1() {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if (copy(i) >= 1000) loop_end;
        i = move(i) + 1;

        (6,7,8);
        _,_,_ = ();
        (6,7,8);
        _,_,_ = ();
        (6,7,8);
        _,_,_ = ();
        (6,7,8);
        _,_,_ = ();                
        (6,7,8);
        _,_,_ = ();
        (6,7,8);
        _,_,_ = ();
        (6,7,8);
        _,_,_ = ();   

        jump loop_start;
    label loop_end:
        return;          
    }    

    public entry calibrate_while_loop_2() {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if (copy(i) >= 1000) loop_end;
        i = move(i) + 1;

        (6,7,8);
        _ = (2 + 1);
        _,_,_ = ();
        (6,7,8);
        _ = (2 + 1);
        _,_,_ = ();
        (6,7,8);
        _ = (2 + 1);
        _,_,_ = ();
        (6,7,8);
        _ = (2 + 1);
        _,_,_ = ();
        (6,7,8);
        _ = (2 + 1);
        _,_,_ = ();                       

        jump loop_start;
    label loop_end:
        return;          
    }     


    public entry calibrate_while_loop_add() {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if (copy(i) >= 1000) loop_end;
        i = move(i) + 1;

        _ = (1000 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1);
        _ = (1000 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1);
        _ = (1000 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1);
        _ = (1000 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1);
        _ = (1000 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1);
        _ = (1000 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1);

        jump loop_start;
    label loop_end:
        return;        
    }

    public entry calibrate_loop_copyloc_var_with_vec() {
        let i: u64;
        let a: u64;
        let b: vector<u8>;
    label entry:
        i = 0;
    label loop_start:
        jump_if (copy(i) >= 1000) loop_end;
        i = move(i) + 1;

        a = (2 + 1);
        a = (2 + 1);
        a = (2 + 1);
        a = (2 + 1);
        a = (2 + 1);
        a = (2 + 1);
        a = (2 + 1);
        a = (2 + 1);
        _ = copy(a);        
        b = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        b = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        b = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        b = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";        
        _ = copy(b); 

        jump loop_start;
    label loop_end:
        return;        
    }  

    public entry calibrate_loop_copyloc_one_vec() {
        let i: u64;
        let b: vector<u8>;
    label entry:
        i = 0;
    label loop_start:
        jump_if (copy(i) >= 1000) loop_end;
        i = move(i) + 1;

        b = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        _ = copy(b);

        jump loop_start;
    label loop_end:
        return;        
    }          

    public entry calibrate_loop_copyloc_one_vec_small_len() {
        let i: u64;
        let b: vector<u8>;
    label entry:
        i = 0;
    label loop_start:
        jump_if (copy(i) >= 1000) loop_end;
        i = move(i) + 1;

        b = h"000102030405060712346536356345012392385678567856785678567856785678";
        _ = copy(b);

        jump loop_start;
    label loop_end:
        return;        
    } 

    public entry calibrate_loop_copyloc_one_vec_empty_len() {
        let i: u64;
        let b: vector<u8>;
    label entry:
        i = 0;
    label loop_start:
        jump_if (copy(i) >= 1000) loop_end;
        i = move(i) + 1;

        b = h"";
        _ = copy(b);

        jump loop_start;
    label loop_end:
        return;                                            
    }

    public entry calibrate_loop_copyloc_one_vec_one_len() {
        let i: u64;
        let b: vector<u8>;
    label entry:
        i = 0;
    label loop_start:
        jump_if (copy(i) >= 1000) loop_end;
        i = move(i) + 1;

        b = h"1234";
        _ = copy(b);

        jump loop_start;
    label loop_end:
        return;                                             
    }

    public entry calibrate_loop_copyloc_two_vec() {
        let a: vector<u8>;
        let i: u64;
        let b: vector<u8>;
    label entry:
        i = 0;
    label loop_start:
        jump_if (copy(i) >= 1000) loop_end;
        i = move(i) + 1;

        a = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        b = h"000102030405060712346536356345012392385678567856785678567856785678";
        _ = copy(a);
        _ = copy(b);

        jump loop_start;
    label loop_end:
        return;         
    }  

    public entry calibrate_loop_copyloc_two_vec_many() {
        let a: vector<u8>;
        let i: u64;
        let b: vector<u8>;
    label entry:
        i = 0;
    label loop_start:
        jump_if (copy(i) >= 1000) loop_end;
        i = move(i) + 1;

        a = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        b = h"000102030405060712346536356345012392385678567856785678567856785678";
        _ = copy(a);
        _ = copy(b);

        a = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        b = h"000102030405060712346536356345012392385678567856785678567856785678";
        _ = copy(a);
        _ = copy(b);

        a = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        b = h"000102030405060712346536356345012392385678567856785678567856785678";
        _ = copy(a);
        _ = copy(b);

        a = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        b = h"000102030405060712346536356345012392385678567856785678567856785678";
        _ = copy(a);
        _ = copy(b); 

        jump loop_start;
    label loop_end:
        return;         
    } 

    public entry calibrate_loop_copyloc_two_vec_long_len() {
        let a: vector<u8>;
        let i: u64;
        let b: vector<u8>;
    label entry:
        i = 0;
    label loop_start:
        jump_if (copy(i) >= 1000) loop_end;
        i = move(i) + 1;

        a = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        b = h
        _ = copy(a);
        _ = copy(b);

        jump loop_start;
    label loop_end:
        return;         
    }

    public entry calibrate_loop_copyloc_two_vec_empty_long_len() {
        let a: vector<u8>;
        let i: u64;
        let b: vector<u8>;
    label entry:
        i = 0;
    label loop_start:
        jump_if (copy(i) >= 1000) loop_end;
        i = move(i) + 1;

        a = h"";
        b = h
        _ = copy(a);
        _ = copy(b);

        a = h"";
        b = h
        _ = copy(a);
        _ = copy(b);
        
        a = h"";
        b = h
        _ = copy(a);
        _ = copy(b);

        a = h"";
        b = h
        _ = copy(a);
        _ = copy(b);

        a = h"";
        b = h
        _ = copy(a);
        _ = copy(b);

        a = h"";
        b = h
        _ = copy(a);
        _ = copy(b); 

        jump loop_start;
    label loop_end:
        return;         
    }

    public entry calibrate_loop_copyloc_two_vec_empty() {
        let a: vector<u8>;
        let i: u64;
        let b: vector<u8>;
    label entry:
        i = 0;
    label loop_start:
        jump_if (copy(i) >= 1000) loop_end;
        i = move(i) + 1;

        a = h"";
        b = h"";
        _ = copy(a);
        _ = copy(b);
        a = h"";
        b = h"";
        _ = copy(a);
        _ = copy(b);
        a = h"";
        b = h"";
        _ = copy(a);
        _ = copy(b);
        a = h"";
        b = h"";
        _ = copy(a);
        _ = copy(b); 
        a = h"";
        b = h"";
        _ = copy(a);
        _ = copy(b);
        a = h"";
        b = h"";
        _ = copy(a);
        _ = copy(b);
        a = h"";
        b = h"";
        _ = copy(a);
        _ = copy(b);

        jump loop_start;
    label loop_end:
        return;         
    }

    public entry calibrate_loop_copyloc_many_empty_vecs() {
        let a: vector<u8>;
        let b: vector<u8>;
        let c: vector<u8>;
        let d: vector<u8>;
        let e: vector<u8>;
        let f: vector<u8>;                        
        let g: vector<u8>;
        let h: vector<u8>;    
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if (copy(i) >= 1000) loop_end;
        i = move(i) + 1;

        a = h"";
        b = h"";
        c = h"";
        d = h"";
        e = h"";
        f = h"";
        g = h"";
        h = h"";
        _ = copy(a);
        _ = copy(b);
        _ = copy(c);
        _ = copy(d);
        _ = copy(e);
        _ = copy(f);
        _ = copy(g);
        _ = copy(h);

        jump loop_start;
    label loop_end:
        return;         
    }

    public entry calibrate_loop_copyloc_many_long_vecs() {
        let a: vector<u8>;
        let b: vector<u8>;
        let c: vector<u8>;
        let d: vector<u8>;
        let e: vector<u8>;
        let f: vector<u8>;                        
        let g: vector<u8>;
        let h: vector<u8>;        
        let i: vector<u8>;
        let k: u64;
    label entry:
        k = 0;
    label loop_start:
        jump_if (copy(k) >= 1000) loop_end;
        k = move(k) + 1;

        a = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        b = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        c = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        d = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        e = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        f = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        g = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        h = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        i = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        _ = copy(a);
        _ = copy(b);
        _ = copy(c);
        _ = copy(d);
        _ = copy(e);
        _ = copy(f);
        _ = copy(g);
        _ = copy(h);
        _ = copy(i);

        jump loop_start;
    label loop_end:
        return;         
    }

    public entry calibrate_loop_copyloc_many_mix_len_vecs() {
        let a: vector<u8>;
        let b: vector<u8>;
        let c: vector<u8>;
        let d: vector<u8>;
        let e: vector<u8>;
        let f: vector<u8>;                        
        let g: vector<u8>;
        let h: vector<u8>;        
        let i: vector<u8>;
        let k: u64;
    label entry:
        k = 0;
    label loop_start:
        jump_if (copy(k) >= 1000) loop_end;
        k = move(k) + 1;

        a = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        b = h"";
        c = h"000102030405060712346536356345012392385678567856785678567856785678";
        d = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        e = h"1234";
        f = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        g = h"";
        h = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        i = h"000102030405060712346536356345012392385678567856785678567856785678";
        _ = copy(a);
        _ = copy(b);
        _ = copy(c);
        _ = copy(d);
        _ = copy(e);
        _ = copy(f);
        _ = copy(g);
        _ = copy(h);
        _ = copy(i);

        a = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        b = h"";
        c = h"000102030405060712346536356345012392385678567856785678567856785678";
        d = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        e = h"1234";
        f = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        g = h"";
        h = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        i = h"000102030405060712346536356345012392385678567856785678567856785678";
        _ = copy(a);
        _ = copy(b);
        _ = copy(c);
        _ = copy(d);
        _ = copy(e);
        _ = copy(f);
        _ = copy(g);
        _ = copy(h);
        _ = copy(i);

        a = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        b = h"";
        c = h"000102030405060712346536356345012392385678567856785678567856785678";
        d = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        e = h"1234";
        f = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        g = h"";
        h = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        i = h"000102030405060712346536356345012392385678567856785678567856785678";
        _ = copy(a);
        _ = copy(b);
        _ = copy(c);
        _ = copy(d);
        _ = copy(e);
        _ = copy(f);
        _ = copy(g);
        _ = copy(h);
        _ = copy(i); 

        jump loop_start;
    label loop_end:
        return; 
    }  


    /////////////////////////////////////////////////
    // Gt, Le, Ge calibrating and tuning + BrTrue   
        
    public entry calibrate_gt_many() {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if (copy(i) >= 1000) loop_end;
        i = move(i) + 1;

        _ = (1 > 5);
        _ = (10 > 20);
        _ = (1 > 5);
        _ = (10 > 20);
        _ = (1 > 5);
        _ = (10 > 20);
        _ = (1 > 5);
        _ = (10 > 20);
        _ = (1 > 5);
        _ = (10 > 20);                        
        _ = (1 > 5);
        _ = (10 > 20);
        _ = (1 > 5);
        _ = (10 > 20);
        _ = (1 > 5);
        _ = (10 > 20);

        jump loop_start;
    label loop_end:
        return;          
    }  

    public entry calibrate_ge_many() {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if (copy(i) >= 1000) loop_end;
        i = move(i) + 1;

        _ = (1 >= 5);
        _ = (10 >= 20);
        _ = (1 >= 5);
        _ = (10 >= 20);
        _ = (1 >= 5);
        _ = (10 >= 20);
        _ = (1 >= 5);
        _ = (10 >= 20);
        _ = (1 >= 5);
        _ = (10 >= 20);                        
        _ = (1 >= 5);
        _ = (10 >= 20);
        _ = (1 >= 5);
        _ = (10 >= 20);
        _ = (1 >= 5);
        _ = (10 >= 20);
        _ = (1 >= 5);
        _ = (10 >= 20);

        jump loop_start;
    label loop_end:
        return;          
    }

    public entry calibrate_le_many() {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if (copy(i) >= 1000) loop_end;
        i = move(i) + 1;

        _ = (1 <= 5);
        _ = (10 <= 20);
        _ = (1 <= 5);
        _ = (10 <= 20);
        _ = (1 <= 5);
        _ = (10 <= 20);
        _ = (1 <= 5);
        _ = (10 <= 20);
        _ = (1 <= 5);
        _ = (10 <= 20);                        
        _ = (1 <= 5);
        _ = (10 <= 20);
        _ = (1 <= 5);
        _ = (10 <= 20);
        _ = (1 <= 5);
        _ = (10 <= 20);

        jump loop_start;
    label loop_end:
        return;          
    }

    public entry calibrate_gt_lt_ge_le_mix() {
        let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if (copy(i) >= 1000) loop_end;
        i = move(i) + 1;

        _ = (1 <= 5);
        _ = (10 <= 20);
        _ = (1 <= 5);
        _ = (10 <= 20);
        _ = (1 <= 5);
        _ = (10 <= 20);
        _ = (1 <= 5);
        _ = (10 <= 20);
        _ = (1 <= 5);
        _ = (10 <= 20);                        
        _ = (1 <= 5);
        _ = (10 <= 20);
        _ = (1 <= 5);
        _ = (10 <= 20);

        _ = (1 >= 5);
        _ = (10 >= 20);
        _ = (1 >= 5);
        _ = (10 >= 20);
        _ = (1 >= 5);
        _ = (10 >= 20);
        _ = (1 >= 5);
        _ = (10 >= 20);

        _ = (1 > 5);
        _ = (10 > 20);
        _ = (1 > 5);
        _ = (10 > 20);
        _ = (1 > 5);
        _ = (10 > 20);
        _ = (1 > 5);
        _ = (10 > 20);
        _ = (1 > 5);
        _ = (10 > 20);                        
        _ = (1 > 5);
        _ = (10 > 20);
        _ = (1 > 5);   

        _ = (1 < 5);
        _ = (10 < 20);
        _ = (1 < 5);
        _ = (10 < 20);
        _ = (1 < 5);
        _ = (10 < 20);
        _ = (1 < 5);
        _ = (10 < 20);
        _ = (1 < 5);
        _ = (10 < 20);                        
        _ = (1 < 5);
        _ = (10 < 20);
        _ = (1 < 5);                 

        jump loop_start;
    label loop_end:
        return;         
    }                        
}