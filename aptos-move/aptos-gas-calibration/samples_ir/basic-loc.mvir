module 0xcafe.BasicLoc {
    /////////////////////////////////////////////////
    // INSTRUCTIONS:
    // * `StLoc`    
    // * `MoveLoc`
    // * `CopyLoc`


    /////////////////////////////////////////////////
    // StLoc calibrating and tuning

    public entry calibrate_stloc() {
        let a: u64;
    label b0:
        a = 5;
        a = 5;
        a = 5;
        a = 5;
        a = 5;
        a = 5;
        a = 5;
        return;
    }

    public entry calibrate_stloc_many_vars() {
        let a: u64;
        let b: u64;
        let c: u64;
        let d: u64;
        let e: u64;
        let f: u64;
        let g: u64;
        let h: u64;
    label b0:
        a = 1;
        b = 2;
        c = 3;
        d = 4;
        e = 5;
        f = 6;
        g = 7;
        h = 8;
        a = 1;
        b = 2;
        c = 3;
        d = 4;
        e = 5;
        f = 6;
        g = 7;
        h = 8;               
        return;                        
    }


    /////////////////////////////////////////////////
    // MoveLoc calibrating and tuning    

    public entry calibrate_moveloc() {
        let a: u64;
        let b: u64;
    label b0:
        a = 5;
        b = move(a);
        a = 5;
        b = move(a);
        a = 5;
        b = move(a);
        a = 5;
        b = move(a);
        a = 5;
        b = move(a);
        a = 5;
        b = move(a);                               
        return;
    }

    public entry calibrate_moveloc_many_vars() {
        let a: u64;
        let b: u64;
        let c: u64;
        let d: u64;
        let e: u64;
    label b0:
        a = 5;
        b = move(a);
        c = move(b);
        d = move(c);
        e = move(d);
        a = 5;
        b = move(a);
        c = move(b);
        d = move(c);
        e = move(d);
        a = 5;
        b = move(a);
        c = move(b);
        d = move(c);
        e = move(d);
        a = 5;
        b = move(a);
        c = move(b);
        d = move(c);
        e = move(d);
        a = 5;
        b = move(a);
        c = move(b);
        d = move(c);
        e = move(d);
        return;
    }

    public entry calibrate_moveloc_with_add() {
        let a: u64;
        let b: u64;
        let c: u64;
        let d: u64;
        let e: u64;
    label b0:
        a = 1;
        b = move(a) + 1;
        c = move(b) + 1 + 1;
        d = move(c) + 1 + 1 + 1;
        e = move(d) + 1 + 1 + 1 + 1;
        return;                
    }

    public entry calibrate_moveloc_with_sub() {
        let a: u64;
        let b: u64;
        let c: u64;
    label b0:
        a = 1000;
        b = move(a) - 1;
        c = move(b) - 1 - 1;
        a = 1000;
        b = move(a) - 1;
        c = move(b) - 1 - 1;
        a = 1000;
        b = move(a) - 1;
        c = move(b) - 1 - 1;
        a = 1000;
        b = move(a) - 1;
        c = move(b) - 1 - 1;
        return;                        
    }


    /////////////////////////////////////////////////
    // CopyLoc calibrating and tuning     

    public entry calibrate_copyloc() {
        let a: u64;
    label b0:
        a = 5;
        _ = copy(a);
        a = 5;
        _ = copy(a);
        a = 5;
        _ = copy(a);
        a = 5;
        _ = copy(a);
        a = 5;
        _ = copy(a);
        a = 5;
        _ = copy(a); 
        return;                                                       
    }

    public entry calibrate_copyloc_with_different_cost_size() {
        let b: vector<u8>;
    label b0:
        b = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        b = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        b = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        b = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        b = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        b = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        _ = copy(b);
        return;
    }

    public entry calibrate_copyloc_vector_different_size() {
        let b: vector<u8>;
    label b0:
        b = h"000102030405060712346536356345012392385678567856785678567856785678";
        b = h"000102030405060712346536356345012392385678567856785678567856785678";
        b = h"000102030405060712346536356345012392385678567856785678567856785678";
        b = h"000102030405060712346536356345012392385678567856785678567856785678";
        b = h"000102030405060712346536356345012392385678567856785678567856785678";
        _ = copy(b);
        return;
    }

    public entry calibrate_copyloc_simple() {
        let a: u64;
    label b0:
        a = 5;
        _ = copy(a);
        return;        
    }

    public entry calibrate_copyloc_many_vars() {
        let a: u64;
        let b: u64;
        let c: u64;
        let d: u64;
        let e: u64;
        let f: u64;
        let g: u64;
    label b0:
        a = 5;
        b = copy(a);
        c = copy(b);
        d = copy(c);
        e = copy(d);
        f = copy(e);
        g = copy(f);
        return;        
    }

    public entry calibrate_copyloc_var_with_vec() {
        let a: u64;
        let b: vector<u8>;
    label b0:
        a = (2 + 1);
        a = (2 + 1);
        a = (2 + 1);
        a = (2 + 1);
        a = (2 + 1);
        _ = copy(a);        
        b = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        b = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        b = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        b = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";        
        _ = copy(b); 
        return;                                     
    }

    public entry calibrate_copyloc_one_vec() {
        let b: vector<u8>;
    label b0:
        b = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        _ = copy(b);
        return;                                     
    } 

    public entry calibrate_copyloc_one_vec_small_len() {
        let b: vector<u8>;
    label b0:
        b = h"000102030405060712346536356345012392385678567856785678567856785678";
        _ = copy(b);
        return;                                     
    } 

    public entry calibrate_copyloc_one_vec_empty_len() {
        let b: vector<u8>;
    label b0:
        b = h"";
        _ = copy(b);
        return;                                     
    }

    public entry calibrate_copyloc_one_vec_one_len() {
        let b: vector<u8>;
    label b0:
        b = h"1234";
        _ = copy(b);
        return;                                     
    }

    public entry calibrate_copyloc_two_vec() {
        let a: vector<u8>;
        let b: vector<u8>;
    label b0:
        a = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        b = h"000102030405060712346536356345012392385678567856785678567856785678";
        _ = copy(a);
        _ = copy(b);
        return;
    }  

    public entry calibrate_copyloc_two_vec_many() {
        let a: vector<u8>;
        let b: vector<u8>;
    label b0:
        a = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        b = h"000102030405060712346536356345012392385678567856785678567856785678";
        _ = copy(a);
        _ = copy(b);

        a = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        b = h"000102030405060712346536356345012392385678567856785678567856785678";
        _ = copy(a);
        _ = copy(b);

        a = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        b = h"000102030405060712346536356345012392385678567856785678567856785678";
        _ = copy(a);
        _ = copy(b);

        a = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        b = h"000102030405060712346536356345012392385678567856785678567856785678";
        _ = copy(a);
        _ = copy(b);                
        return;
    } 

    public entry calibrate_copyloc_two_vec_long_len() {
        let a: vector<u8>;
        let b: vector<u8>;
    label b0:
        a = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        b = h
        _ = copy(a);
        _ = copy(b);
        return;
    }

    public entry calibrate_copyloc_two_vec_empty_long_len() {
        let a: vector<u8>;
        let b: vector<u8>;
    label b0:
        a = h"";
        b = h
        _ = copy(a);
        _ = copy(b);

        a = h"";
        b = h
        _ = copy(a);
        _ = copy(b);
        
        a = h"";
        b = h
        _ = copy(a);
        _ = copy(b);

        a = h"";
        b = h
        _ = copy(a);
        _ = copy(b);

        a = h"";
        b = h
        _ = copy(a);
        _ = copy(b);
                                                                               
        return;
    }

    public entry calibrate_copyloc_two_vec_empty() {
        let a: vector<u8>;
        let b: vector<u8>;
    label b0:
        a = h"";
        b = h"";
        _ = copy(a);
        _ = copy(b);
        a = h"";
        b = h"";
        _ = copy(a);
        _ = copy(b);
        a = h"";
        b = h"";
        _ = copy(a);
        _ = copy(b);
        a = h"";
        b = h"";
        _ = copy(a);
        _ = copy(b); 
        a = h"";
        b = h"";
        _ = copy(a);
        _ = copy(b);
        a = h"";
        b = h"";
        _ = copy(a);
        _ = copy(b);
        a = h"";
        b = h"";
        _ = copy(a);
        _ = copy(b);
        a = h"";
        b = h"";
        _ = copy(a);
        _ = copy(b); 

        return;
    }

    public entry calibrate_copyloc_many_empty_vecs() {
        let a: vector<u8>;
        let b: vector<u8>;
        let c: vector<u8>;
        let d: vector<u8>;
        let e: vector<u8>;
        let f: vector<u8>;                        
        let g: vector<u8>;
        let h: vector<u8>;        
        let i: vector<u8>;
    label b0:
        a = h"";
        b = h"";
        c = h"";
        d = h"";
        e = h"";
        f = h"";
        g = h"";
        h = h"";
        i = h"";
        _ = copy(a);
        _ = copy(b);
        _ = copy(c);
        _ = copy(d);
        _ = copy(e);
        _ = copy(f);
        _ = copy(g);
        _ = copy(h);
        _ = copy(i);
        return;
    }

    public entry calibrate_copyloc_many_long_vecs() {
        let a: vector<u8>;
        let b: vector<u8>;
        let c: vector<u8>;
        let d: vector<u8>;
        let e: vector<u8>;
        let f: vector<u8>;                        
        let g: vector<u8>;
        let h: vector<u8>;        
        let i: vector<u8>;
    label b0:
        a = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        b = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        c = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        d = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        e = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        f = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        g = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        h = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        i = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        _ = copy(a);
        _ = copy(b);
        _ = copy(c);
        _ = copy(d);
        _ = copy(e);
        _ = copy(f);
        _ = copy(g);
        _ = copy(h);
        _ = copy(i);
        return;
    }

    public entry calibrate_copyloc_many_mix_len_vecs() {
        let a: vector<u8>;
        let b: vector<u8>;
        let c: vector<u8>;
        let d: vector<u8>;
        let e: vector<u8>;
        let f: vector<u8>;                        
        let g: vector<u8>;
        let h: vector<u8>;        
        let i: vector<u8>;
    label b0:
        a = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        b = h"";
        c = h"000102030405060712346536356345012392385678567856785678567856785678";
        d = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        e = h"1234";
        f = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        g = h"";
        h = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        i = h"000102030405060712346536356345012392385678567856785678567856785678";
        _ = copy(a);
        _ = copy(b);
        _ = copy(c);
        _ = copy(d);
        _ = copy(e);
        _ = copy(f);
        _ = copy(g);
        _ = copy(h);
        _ = copy(i);

        a = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        b = h"";
        c = h"000102030405060712346536356345012392385678567856785678567856785678";
        d = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        e = h"1234";
        f = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        g = h"";
        h = h"000102030405060712346536356345012392385678567856785678567856785678000102030405060712346536356345012392385678567856785678567856785678";
        i = h"000102030405060712346536356345012392385678567856785678567856785678";
        _ = copy(a);
        _ = copy(b);
        _ = copy(c);
        _ = copy(d);
        _ = copy(e);
        _ = copy(f);
        _ = copy(g);
        _ = copy(h);
        _ = copy(i);
                        
        return;
    }    
}