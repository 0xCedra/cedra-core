// ---- Model Dump
module 0x42::pack_unpack {
    struct T {
        h: u64,
    }
    struct S {
        f: u64,
        g: pack_unpack::T,
    }
    private fun pack(x: u64,y: u64): pack_unpack::S {
        {
          let .f: u64 = x;
          {
            let .g: pack_unpack::T = {
              let .h: u64 = y;
              pack pack_unpack::T(.h)
            };
            pack pack_unpack::S(.f, .g)
          }
        }
    }
    private fun unpack(s: pack_unpack::S): (u64, u64) {
        {
          let pack_unpack::S{ f: f: u64, g: pack_unpack::T{ h: h: u64 } } = s;
          Tuple(f, h)
        }
    }
    spec fun $pack(x: u64,y: u64): pack_unpack::S {
        {
          let .f: u64 = x;
          {
            let .g: pack_unpack::T = {
              let .h: u64 = y;
              pack pack_unpack::T(.h)
            };
            pack pack_unpack::S(.f, .g)
          }
        }
    }
    spec fun $unpack(s: pack_unpack::S): (u64, u64) {
        {
          let pack_unpack::S{ f: f: u64, g: pack_unpack::T{ h: h: u64 } } = s;
          Tuple(f, h)
        }
    }
} // end 0x42::pack_unpack

============ initial bytecode ================

[variant baseline]
fun pack_unpack::pack($t0: u64, $t1: u64): pack_unpack::S {
     var $t2: pack_unpack::S
     var $t3: u64
     var $t4: pack_unpack::T
     var $t5: pack_unpack::T
     var $t6: u64
  0: $t3 := move($t0)
  1: $t6 := move($t1)
  2: $t5 := pack pack_unpack::T($t6)
  3: $t4 := move($t5)
  4: $t2 := pack pack_unpack::S($t3, $t4)
  5: return $t2
}


[variant baseline]
fun pack_unpack::unpack($t0: pack_unpack::S): (u64, u64) {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: pack_unpack::T
  0: ($t3, $t5) := unpack pack_unpack::S($t0)
  1: $t4 := unpack pack_unpack::T($t5)
  2: $t1 := move($t3)
  3: $t2 := move($t4)
  4: return ($t1, $t2)
}
