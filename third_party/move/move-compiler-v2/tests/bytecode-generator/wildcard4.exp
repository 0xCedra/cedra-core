// -- Model dump before bytecode pipeline
module 0xc0ffee::m {
    private fun test() {
        {
          let x: u64 = 3;
          {
            let r: &mut u64 = Borrow(Mutable)(x);
            {
              let y: &mut u64 = Borrow(Mutable)(x);
              {
                let _: &u64 = Freeze(true)<u64>(y);
                r = 4;
                Tuple()
              }
            }
          }
        }
    }
} // end 0xc0ffee::m

============ initial bytecode ================

[variant baseline]
fun m::test() {
     var $t0: u64
     var $t1: u64
     var $t2: &mut u64
     var $t3: &mut u64
     var $t4: &mut u64
     var $t5: &mut u64
     var $t6: &u64
     var $t7: &u64
     var $t8: u64
  0: $t1 := 3
  1: $t0 := infer($t1)
  2: $t3 := borrow_local($t0)
  3: $t2 := infer($t3)
  4: $t5 := borrow_local($t0)
  5: $t4 := infer($t5)
  6: $t6 := freeze_ref($t4)
  7: $t7 := infer($t6)
  8: $t8 := 4
  9: write_ref($t2, $t8)
 10: return ()
}


Diagnostics:
error: cannot freeze value which is still mutably borrowed
  ┌─ tests/bytecode-generator/wildcard4.move:6:17
  │
4 │         let r = &mut x;
  │                 ------ previously mutably borrowed here
5 │         let y = &mut x;
6 │         let _ = freeze(y);
  │                 ^^^^^^^^^ frozen here
7 │         *r = 4;
  │         ------ conflicting reference `r` used here
