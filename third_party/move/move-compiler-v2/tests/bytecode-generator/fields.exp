// ---- Model Dump
module 0x42::fields {
    struct T {
        h: u64,
    }
    struct G {
        f: #0,
    }
    struct S {
        f: u64,
        g: fields::T,
    }
    private fun read_generic_val(x: fields::G<u64>): u64 {
        select fields::G.f(x)
    }
    private fun read_ref(x: &fields::S): u64 {
        select fields::T.h(select fields::S.g(x))
    }
    private fun read_val(x: fields::S): u64 {
        select fields::T.h(select fields::S.g(x))
    }
    private fun write_generic_val(x: &mut fields::G<u64>,v: u64) {
        select fields::G.f(x) = v
    }
    private fun write_local_direct(): fields::S {
        {
          let x: fields::S = {
            let .f: u64 = 0;
            {
              let .g: fields::T = {
                let .h: u64 = 0;
                pack fields::T(.h)
              };
              pack fields::S(.f, .g)
            }
          };
          select fields::T.h(select fields::S.g(x)) = 42;
          x
        }
    }
    private fun write_local_via_ref(): fields::S {
        {
          let x: fields::S = {
            let .f: u64 = 0;
            {
              let .g: fields::T = {
                let .h: u64 = 0;
                pack fields::T(.h)
              };
              pack fields::S(.f, .g)
            }
          };
          {
            let r: &mut fields::S = Borrow(Mutable)(x);
            select fields::T.h(select fields::S.g(r)) = 42;
            x
          }
        }
    }
    private fun write_param(x: &mut fields::S) {
        select fields::T.h(select fields::S.g(x)) = 42;
        Tuple()
    }
    private fun write_val(x: fields::S): fields::S {
        select fields::T.h(select fields::S.g(x)) = 42;
        x
    }
    spec fun $read_generic_val(x: fields::G<u64>): u64 {
        select fields::G.f(x)
    }
    spec fun $read_ref(x: fields::S): u64 {
        select fields::T.h(select fields::S.g(x))
    }
    spec fun $read_val(x: fields::S): u64 {
        select fields::T.h(select fields::S.g(x))
    }
    spec fun $write_generic_val(x: fields::G<u64>,v: u64) {
        select fields::G.f(x) = v
    }
    spec fun $write_local_direct(): fields::S;
    spec fun $write_local_via_ref(): fields::S;
    spec fun $write_param(x: &mut fields::S);
    spec fun $write_val(x: fields::S): fields::S;
} // end 0x42::fields

============ initial bytecode ================

[variant baseline]
fun fields::read_generic_val($t0: fields::G<u64>): u64 {
     var $t1: u64
     var $t2: &fields::G<u64>
     var $t3: &u64
  0: $t2 := borrow_local($t0)
  1: $t3 := borrow_field<fields::G<u64>>.f($t2)
  2: $t1 := read_ref($t3)
  3: return $t1
}


[variant baseline]
fun fields::read_ref($t0: &fields::S): u64 {
     var $t1: u64
     var $t2: &fields::T
     var $t3: &u64
  0: $t2 := borrow_field<fields::S>.g($t0)
  1: $t3 := borrow_field<fields::T>.h($t2)
  2: $t1 := read_ref($t3)
  3: return $t1
}


[variant baseline]
fun fields::read_val($t0: fields::S): u64 {
     var $t1: u64
     var $t2: &fields::T
     var $t3: &fields::S
     var $t4: &u64
  0: $t3 := borrow_local($t0)
  1: $t2 := borrow_field<fields::S>.g($t3)
  2: $t4 := borrow_field<fields::T>.h($t2)
  3: $t1 := read_ref($t4)
  4: return $t1
}


[variant baseline]
fun fields::write_generic_val($t0: &mut fields::G<u64>, $t1: u64) {
     var $t2: &mut u64
  0: $t2 := borrow_field<fields::G<u64>>.f($t0)
  1: write_ref($t2, $t1)
  2: return ()
}


[variant baseline]
fun fields::write_local_direct(): fields::S {
     var $t0: fields::S
     var $t1: fields::S
     var $t2: fields::S
     var $t3: u64
     var $t4: u64
     var $t5: fields::T
     var $t6: fields::T
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: &mut u64
     var $t11: &mut fields::T
     var $t12: &mut fields::S
  0: $t4 := 0
  1: $t3 := move($t4)
  2: $t8 := 0
  3: $t7 := move($t8)
  4: $t6 := pack fields::T($t7)
  5: $t5 := move($t6)
  6: $t2 := pack fields::S($t3, $t5)
  7: $t1 := move($t2)
  8: $t9 := 42
  9: $t12 := borrow_local($t1)
 10: $t11 := borrow_field<fields::S>.g($t12)
 11: $t10 := borrow_field<fields::T>.h($t11)
 12: write_ref($t10, $t9)
 13: $t0 := move($t1)
 14: return $t0
}


[variant baseline]
fun fields::write_local_via_ref(): fields::S {
     var $t0: fields::S
     var $t1: fields::S
     var $t2: fields::S
     var $t3: u64
     var $t4: u64
     var $t5: fields::T
     var $t6: fields::T
     var $t7: u64
     var $t8: u64
     var $t9: &mut fields::S
     var $t10: &mut fields::S
     var $t11: u64
     var $t12: &mut u64
     var $t13: &mut fields::T
  0: $t4 := 0
  1: $t3 := move($t4)
  2: $t8 := 0
  3: $t7 := move($t8)
  4: $t6 := pack fields::T($t7)
  5: $t5 := move($t6)
  6: $t2 := pack fields::S($t3, $t5)
  7: $t1 := move($t2)
  8: $t10 := borrow_local($t1)
  9: $t9 := move($t10)
 10: $t11 := 42
 11: $t13 := borrow_field<fields::S>.g($t9)
 12: $t12 := borrow_field<fields::T>.h($t13)
 13: write_ref($t12, $t11)
 14: $t0 := move($t1)
 15: return $t0
}


[variant baseline]
fun fields::write_param($t0: &mut fields::S) {
     var $t1: u64
     var $t2: &mut u64
     var $t3: &mut fields::T
  0: $t1 := 42
  1: $t3 := borrow_field<fields::S>.g($t0)
  2: $t2 := borrow_field<fields::T>.h($t3)
  3: write_ref($t2, $t1)
  4: return ()
}


[variant baseline]
fun fields::write_val($t0: fields::S): fields::S {
     var $t1: fields::S
     var $t2: u64
     var $t3: &mut u64
     var $t4: &mut fields::T
     var $t5: &mut fields::S
  0: $t2 := 42
  1: $t5 := borrow_local($t0)
  2: $t4 := borrow_field<fields::S>.g($t5)
  3: $t3 := borrow_field<fields::T>.h($t4)
  4: write_ref($t3, $t2)
  5: $t1 := move($t0)
  6: return $t1
}
