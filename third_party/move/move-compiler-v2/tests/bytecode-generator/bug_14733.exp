// -- Model dump before bytecode pipeline
module 0x815::m {
    enum Entity {
        Person {
            id: u64,
        }
        Institution {
            id: u64,
            admin: u64,
        }
    }
    private fun id2(self: &Entity): u64 {
        match (self) {
          m::Entity::Person{ id } if Gt<u64>(Deref(id), 0) => {
            Deref(id)
          }
          m::Entity::Institution{ id, admin: _ } => {
            Deref(id)
          }
          _: &Entity => {
            0
          }
        }

    }
} // end 0x815::m

// -- Sourcified model before bytecode pipeline
module 0x815::m {
    enum Entity {
        Person {
            id: u64,
        }
        Institution {
            id: u64,
            admin: u64,
        }
    }
    fun id2(self: &Entity): u64 {
        match (self) {
            Entity::Person{id: id} if *id > 0 => *id,
            Entity::Institution{id: id,admin: _} => *id,
            _ => 0,
        }
    }
}

============ initial bytecode ================

[variant baseline]
fun m::id2($t0: &0x815::m::Entity): u64 {
     var $t1: u64
     var $t2: bool
     var $t3: &u64
     var $t4: u64
     var $t5: u64
     var $t6: &u64
     var $t7: &0x815::m::Entity
     var $t8: u64
  0: $t2 := test_variant 0x815::m::Entity::Person($t0)
  1: if ($t2) goto 2 else goto 11
  2: label L2
  3: $t3 := borrow_variant_field<0x815::m::Entity::Person>.id($t0)
  4: $t4 := read_ref($t3)
  5: $t5 := 0
  6: $t2 := >($t4, $t5)
  7: if ($t2) goto 8 else goto 11
  8: label L3
  9: $t1 := read_ref($t3)
 10: goto 25
 11: label L1
 12: $t2 := test_variant 0x815::m::Entity::Institution($t0)
 13: if ($t2) goto 14 else goto 18
 14: label L5
 15: $t6 := borrow_variant_field<0x815::m::Entity::Institution>.id($t0)
 16: $t1 := read_ref($t6)
 17: goto 25
 18: label L4
 19: $t7 := infer($t0)
 20: $t1 := 0
 21: goto 25
 22: label L6
 23: $t8 := 14566554180833181697
 24: abort($t8)
 25: label L0
 26: return $t1
}


============ bytecode verification succeeded ========
