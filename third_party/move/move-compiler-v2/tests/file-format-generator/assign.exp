============ initial bytecode ================

[variant baseline]
fun assign::assign_field($t0: &mut assign::S, $t1: u64) {
     var $t2: &mut u64
  0: $t2 := borrow_field<assign::S>.f($t0)
  1: write_ref($t2, $t1)
  2: return ()
}


[variant baseline]
fun assign::assign_int($t0: &mut u64) {
     var $t1: u64
  0: $t1 := 42
  1: write_ref($t0, $t1)
  2: return ()
}


[variant baseline]
fun assign::assign_pattern($t0: assign::S, $t1: u64, $t2: u64): u64 {
     var $t3: u64
     var $t4: assign::T
  0: ($t1, $t4) := unpack assign::S($t0)
  1: $t2 := unpack assign::T($t4)
  2: $t3 := +($t1, $t2)
  3: return $t3
}


[variant baseline]
fun assign::assign_struct($t0: &mut assign::S) {
     var $t1: assign::S
     var $t2: u64
     var $t3: u64
     var $t4: assign::T
     var $t5: assign::T
     var $t6: u64
     var $t7: u64
  0: $t3 := 42
  1: $t2 := move($t3)
  2: $t7 := 42
  3: $t6 := move($t7)
  4: $t5 := pack assign::T($t6)
  5: $t4 := move($t5)
  6: $t1 := pack assign::S($t2, $t4)
  7: write_ref($t0, $t1)
  8: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun assign::assign_field($t0: &mut assign::S, $t1: u64) {
     var $t2: &mut u64
     # live vars: $t0, $t1
  0: $t2 := borrow_field<assign::S>.f($t0)
     # live vars: $t1, $t2
  1: write_ref($t2, $t1)
     # live vars:
  2: return ()
}


[variant baseline]
fun assign::assign_int($t0: &mut u64) {
     var $t1: u64
     # live vars: $t0
  0: $t1 := 42
     # live vars: $t0, $t1
  1: write_ref($t0, $t1)
     # live vars:
  2: return ()
}


[variant baseline]
fun assign::assign_pattern($t0: assign::S, $t1: u64, $t2: u64): u64 {
     var $t3: u64
     var $t4: assign::T
     # live vars: $t0
  0: ($t1, $t4) := unpack assign::S($t0)
     # live vars: $t1, $t4
  1: $t2 := unpack assign::T($t4)
     # live vars: $t1, $t2
  2: $t3 := +($t1, $t2)
     # live vars: $t3
  3: return $t3
}


[variant baseline]
fun assign::assign_struct($t0: &mut assign::S) {
     var $t1: assign::S
     var $t2: u64
     var $t3: u64
     var $t4: assign::T
     var $t5: assign::T
     var $t6: u64
     var $t7: u64
     # live vars: $t0
  0: $t3 := 42
     # live vars: $t0, $t3
  1: $t2 := move($t3)
     # live vars: $t0, $t2
  2: $t7 := 42
     # live vars: $t0, $t2, $t7
  3: $t6 := move($t7)
     # live vars: $t0, $t2, $t6
  4: $t5 := pack assign::T($t6)
     # live vars: $t0, $t2, $t5
  5: $t4 := move($t5)
     # live vars: $t0, $t2, $t4
  6: $t1 := pack assign::S($t2, $t4)
     # live vars: $t0, $t1
  7: write_ref($t0, $t1)
     # live vars:
  8: return ()
}


============ disassembled file-format ==================
// Move bytecode v7
module 42.assign {
struct T {
	h: u64
}
struct S {
	f: u64,
	g: T
}

assign_field(Arg0: &mut S, Arg1: u64) {
B0:
	0: MoveLoc[0](Arg0: &mut S)
	1: MutBorrowField[0](S.f: u64)
	2: StLoc[2](loc0: &mut u64)
	3: MoveLoc[1](Arg1: u64)
	4: MoveLoc[2](loc0: &mut u64)
	5: WriteRef
	6: Ret
}
assign_int(Arg0: &mut u64) {
B0:
	0: LdU64(42)
	1: MoveLoc[0](Arg0: &mut u64)
	2: WriteRef
	3: Ret
}
assign_pattern(Arg0: S, Arg1: u64, Arg2: u64): u64 {
B0:
	0: MoveLoc[0](Arg0: S)
	1: Unpack[1](S)
	2: Unpack[0](T)
	3: Add
	4: Ret
}
assign_struct(Arg0: &mut S) {
L0:	loc1: u64
L1:	loc2: T
B0:
	0: LdU64(42)
	1: StLoc[1](loc0: u64)
	2: LdU64(42)
	3: StLoc[2](loc1: u64)
	4: MoveLoc[2](loc1: u64)
	5: Pack[0](T)
	6: StLoc[3](loc2: T)
	7: MoveLoc[1](loc0: u64)
	8: MoveLoc[3](loc2: T)
	9: Pack[1](S)
	10: MoveLoc[0](Arg0: &mut S)
	11: WriteRef
	12: Ret
}
}
