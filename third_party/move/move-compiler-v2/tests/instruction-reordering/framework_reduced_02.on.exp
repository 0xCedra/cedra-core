============ after InstructionReorderingProcessor: ================

[variant baseline]
fun m::blah($t0: &u64) {
  0: drop($t0)
  1: return ()
}


[variant baseline]
public fun m::test($t0: &u64) {
     var $t1: &u64
     var $t2: &u64 [unused]
     var $t3: &u64 [unused]
     var $t4: &u64 [unused]
  0: $t1 := copy($t0)
  1: m::blah($t1)
  2: $t1 := copy($t0)
  3: m::blah($t1)
  4: $t1 := copy($t0)
  5: m::blah($t1)
  6: $t1 := copy($t0)
  7: m::blah($t1)
  8: m::blah($t0)
  9: return ()
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


blah(Arg0: &u64) /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](Arg0: &u64)
	1: Pop
	2: Ret
}
public test(Arg0: &u64) /* def_idx: 1 */ {
L1:	loc0: &u64
B0:
	0: CopyLoc[0](Arg0: &u64)
	1: StLoc[1](loc0: &u64)
	2: MoveLoc[1](loc0: &u64)
	3: Call blah(&u64)
	4: CopyLoc[0](Arg0: &u64)
	5: StLoc[1](loc0: &u64)
	6: MoveLoc[1](loc0: &u64)
	7: Call blah(&u64)
	8: CopyLoc[0](Arg0: &u64)
	9: StLoc[1](loc0: &u64)
	10: MoveLoc[1](loc0: &u64)
	11: Call blah(&u64)
	12: CopyLoc[0](Arg0: &u64)
	13: StLoc[1](loc0: &u64)
	14: MoveLoc[1](loc0: &u64)
	15: Call blah(&u64)
	16: MoveLoc[0](Arg0: &u64)
	17: Call blah(&u64)
	18: Ret
}
}
============ bytecode verification succeeded ========
