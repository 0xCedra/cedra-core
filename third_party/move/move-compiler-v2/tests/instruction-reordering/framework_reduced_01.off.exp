============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::consume($t0: u64, $t1: u64, $t2: u64, $t3: u64, $t4: u64) {
     # live vars: $t0, $t1, $t2, $t3, $t4
  0: return ()
}


[variant baseline]
fun m::take_ref($t0: &u64): u64 {
     var $t1: u64
     # live vars: $t0
  0: $t1 := read_ref($t0)
     # live vars: $t1
  1: return $t1
}


[variant baseline]
public fun m::test($t0: u64, $t1: u64, $t2: u64, $t3: u64) {
     var $t4: u64
     var $t5: &u64
     # live vars: $t0, $t1, $t2, $t3
  0: $t5 := borrow_local($t0)
     # live vars: $t0, $t1, $t2, $t3, $t5
  1: $t4 := m::take_ref($t5)
     # live vars: $t0, $t1, $t2, $t3, $t4
  2: m::consume($t0, $t4, $t1, $t2, $t3)
     # live vars:
  3: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::consume($t0: u64, $t1: u64, $t2: u64, $t3: u64, $t4: u64) {
     # live vars: $t0, $t1, $t2, $t3, $t4
  0: return ()
}


[variant baseline]
fun m::take_ref($t0: &u64): u64 {
     var $t1: u64
     # live vars: $t0
  0: $t1 := read_ref($t0)
     # live vars: $t1
  1: return $t1
}


[variant baseline]
public fun m::test($t0: u64, $t1: u64, $t2: u64, $t3: u64) {
     var $t4: u64
     var $t5: &u64
     # live vars: $t0, $t1, $t2, $t3
  0: $t5 := borrow_local($t0)
     # live vars: $t0, $t1, $t2, $t3, $t5
  1: $t4 := m::take_ref($t5)
     # live vars: $t0, $t1, $t2, $t3, $t4
  2: m::consume($t0, $t4, $t1, $t2, $t3)
     # live vars:
  3: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::consume($t0: u64, $t1: u64, $t2: u64, $t3: u64, $t4: u64) {
     # live vars: $t0, $t1, $t2, $t3, $t4
  0: return ()
}


[variant baseline]
fun m::take_ref($t0: &u64): u64 {
     var $t1: u64
     # live vars: $t0
  0: $t1 := read_ref($t0)
     # live vars: $t1
  1: return $t1
}


[variant baseline]
public fun m::test($t0: u64, $t1: u64, $t2: u64, $t3: u64) {
     var $t4: u64
     var $t5: &u64
     # live vars: $t0, $t1, $t2, $t3
  0: $t5 := borrow_local($t0)
     # live vars: $t0, $t1, $t2, $t3, $t5
  1: $t4 := m::take_ref($t5)
     # live vars: $t0, $t1, $t2, $t3, $t4
  2: m::consume($t0, $t4, $t1, $t2, $t3)
     # live vars:
  3: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::consume($t0: u64, $t1: u64, $t2: u64, $t3: u64, $t4: u64) {
     # live vars: $t0, $t1, $t2, $t3, $t4
  0: return ()
}


[variant baseline]
fun m::take_ref($t0: &u64): u64 {
     var $t1: u64
     # live vars: $t0
  0: $t1 := read_ref($t0)
     # live vars: $t1
  1: return $t1
}


[variant baseline]
public fun m::test($t0: u64, $t1: u64, $t2: u64, $t3: u64) {
     var $t4: u64
     var $t5: &u64
     # live vars: $t0, $t1, $t2, $t3
  0: $t5 := borrow_local($t0)
     # live vars: $t0, $t1, $t2, $t3, $t5
  1: $t4 := m::take_ref($t5)
     # live vars: $t0, $t1, $t2, $t3, $t4
  2: m::consume($t0, $t4, $t1, $t2, $t3)
     # live vars:
  3: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::consume($t0: u64, $t1: u64, $t2: u64, $t3: u64, $t4: u64) {
     # live vars: $t0, $t1, $t2, $t3, $t4
  0: return ()
}


[variant baseline]
fun m::take_ref($t0: &u64): u64 {
     var $t1: u64
     # live vars: $t0
  0: $t1 := read_ref($t0)
     # live vars: $t1
  1: return $t1
}


[variant baseline]
public fun m::test($t0: u64, $t1: u64, $t2: u64, $t3: u64) {
     var $t4: u64
     var $t5: &u64
     # live vars: $t0, $t1, $t2, $t3
  0: $t5 := borrow_local($t0)
     # live vars: $t0, $t1, $t2, $t3, $t5
  1: $t4 := m::take_ref($t5)
     # live vars: $t0, $t1, $t2, $t3, $t4
  2: m::consume($t0, $t4, $t1, $t2, $t3)
     # live vars:
  3: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::consume($t0: u64, $t1: u64, $t2: u64, $t3: u64, $t4: u64) {
     # live vars: $t0, $t1, $t2, $t3, $t4
  0: return ()
}


[variant baseline]
fun m::take_ref($t0: &u64): u64 {
     var $t1: u64
     # live vars: $t0
  0: $t1 := read_ref($t0)
     # live vars: $t1
  1: return $t1
}


[variant baseline]
public fun m::test($t0: u64, $t1: u64, $t2: u64, $t3: u64) {
     var $t4: u64
     var $t5: &u64
     # live vars: $t0, $t1, $t2, $t3
  0: $t5 := borrow_local($t0)
     # live vars: $t0, $t1, $t2, $t3, $t5
  1: $t4 := m::take_ref($t5)
     # live vars: $t0, $t1, $t2, $t3, $t4
  2: m::consume($t0, $t4, $t1, $t2, $t3)
     # live vars:
  3: return ()
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


consume(Arg0: u64, Arg1: u64, Arg2: u64, Arg3: u64, Arg4: u64) /* def_idx: 0 */ {
B0:
	0: Ret
}
take_ref(Arg0: &u64): u64 /* def_idx: 1 */ {
B0:
	0: MoveLoc[0](Arg0: &u64)
	1: ReadRef
	2: Ret
}
public test(Arg0: u64, Arg1: u64, Arg2: u64, Arg3: u64) /* def_idx: 2 */ {
L4:	loc0: u64
B0:
	0: ImmBorrowLoc[0](Arg0: u64)
	1: Call take_ref(&u64): u64
	2: StLoc[4](loc0: u64)
	3: MoveLoc[0](Arg0: u64)
	4: MoveLoc[4](loc0: u64)
	5: MoveLoc[1](Arg1: u64)
	6: MoveLoc[2](Arg2: u64)
	7: MoveLoc[3](Arg3: u64)
	8: Call consume(u64, u64, u64, u64, u64)
	9: Ret
}
}
============ bytecode verification succeeded ========
