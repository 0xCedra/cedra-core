============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::bar($t0: u64, $t1: u64) {
     # live vars: $t0, $t1
  0: return ()
}


[variant baseline]
fun m::foo($t0: u64, $t1: &u64): u64 {
     var $t2: u64
     var $t3: u64
     # live vars: $t0, $t1
  0: $t3 := read_ref($t1)
     # live vars: $t0, $t3
  1: $t2 := +($t0, $t3)
     # live vars: $t2
  2: return $t2
}


[variant baseline]
public fun m::test($t0: address, $t1: u64, $t2: u64) {
     var $t3: &u64
     var $t4: &m::Foo
     var $t5: u64
     # live vars: $t0, $t1, $t2
  0: $t4 := borrow_global<m::Foo>($t0)
     # live vars: $t1, $t2, $t4
  1: $t3 := borrow_field<m::Foo>.x($t4)
     # live vars: $t1, $t2, $t3
  2: $t5 := m::foo($t1, $t3)
     # live vars: $t2, $t5
  3: m::bar($t2, $t5)
     # live vars:
  4: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::bar($t0: u64, $t1: u64) {
     # live vars: $t0, $t1
  0: return ()
}


[variant baseline]
fun m::foo($t0: u64, $t1: &u64): u64 {
     var $t2: u64
     var $t3: u64
     # live vars: $t0, $t1
  0: $t3 := read_ref($t1)
     # live vars: $t0, $t3
  1: $t2 := +($t0, $t3)
     # live vars: $t2
  2: return $t2
}


[variant baseline]
public fun m::test($t0: address, $t1: u64, $t2: u64) {
     var $t3: &u64
     var $t4: &m::Foo
     var $t5: u64
     # live vars: $t0, $t1, $t2
  0: $t4 := borrow_global<m::Foo>($t0)
     # live vars: $t1, $t2, $t4
  1: $t3 := borrow_field<m::Foo>.x($t4)
     # live vars: $t1, $t2, $t3
  2: $t5 := m::foo($t1, $t3)
     # live vars: $t2, $t5
  3: m::bar($t2, $t5)
     # live vars:
  4: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::bar($t0: u64, $t1: u64) {
     # live vars: $t0, $t1
  0: return ()
}


[variant baseline]
fun m::foo($t0: u64, $t1: &u64): u64 {
     var $t2: u64
     var $t3: u64
     # live vars: $t0, $t1
  0: $t3 := read_ref($t1)
     # live vars: $t0, $t3
  1: $t2 := +($t0, $t3)
     # live vars: $t2
  2: return $t2
}


[variant baseline]
public fun m::test($t0: address, $t1: u64, $t2: u64) {
     var $t3: &u64
     var $t4: &m::Foo
     var $t5: u64
     # live vars: $t0, $t1, $t2
  0: $t4 := borrow_global<m::Foo>($t0)
     # live vars: $t1, $t2, $t4
  1: $t3 := borrow_field<m::Foo>.x($t4)
     # live vars: $t1, $t2, $t3
  2: $t5 := m::foo($t1, $t3)
     # live vars: $t2, $t5
  3: m::bar($t2, $t5)
     # live vars:
  4: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::bar($t0: u64, $t1: u64) {
     # live vars: $t0, $t1
  0: return ()
}


[variant baseline]
fun m::foo($t0: u64, $t1: &u64): u64 {
     var $t2: u64
     var $t3: u64
     # live vars: $t0, $t1
  0: $t3 := read_ref($t1)
     # live vars: $t0, $t3
  1: $t2 := +($t0, $t3)
     # live vars: $t2
  2: return $t2
}


[variant baseline]
public fun m::test($t0: address, $t1: u64, $t2: u64) {
     var $t3: &u64
     var $t4: &m::Foo
     var $t5: u64
     # live vars: $t0, $t1, $t2
  0: $t4 := borrow_global<m::Foo>($t0)
     # live vars: $t1, $t2, $t4
  1: $t3 := borrow_field<m::Foo>.x($t4)
     # live vars: $t1, $t2, $t3
  2: $t5 := m::foo($t1, $t3)
     # live vars: $t2, $t5
  3: m::bar($t2, $t5)
     # live vars:
  4: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::bar($t0: u64, $t1: u64) {
     # live vars: $t0, $t1
  0: return ()
}


[variant baseline]
fun m::foo($t0: u64, $t1: &u64): u64 {
     var $t2: u64 [unused]
     var $t3: u64
     # live vars: $t0, $t1
  0: $t3 := read_ref($t1)
     # live vars: $t0, $t3
  1: $t0 := +($t0, $t3)
     # live vars: $t0
  2: return $t0
}


[variant baseline]
public fun m::test($t0: address, $t1: u64, $t2: u64) {
     var $t3: &u64
     var $t4: &m::Foo
     var $t5: u64 [unused]
     # live vars: $t0, $t1, $t2
  0: $t4 := borrow_global<m::Foo>($t0)
     # live vars: $t1, $t2, $t4
  1: $t3 := borrow_field<m::Foo>.x($t4)
     # live vars: $t1, $t2, $t3
  2: $t1 := m::foo($t1, $t3)
     # live vars: $t1, $t2
  3: m::bar($t2, $t1)
     # live vars:
  4: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::bar($t0: u64, $t1: u64) {
     # live vars: $t0, $t1
  0: return ()
}


[variant baseline]
fun m::foo($t0: u64, $t1: &u64): u64 {
     var $t2: u64 [unused]
     var $t3: u64
     # live vars: $t0, $t1
  0: $t3 := read_ref($t1)
     # live vars: $t0, $t3
  1: $t0 := +($t0, $t3)
     # live vars: $t0
  2: return $t0
}


[variant baseline]
public fun m::test($t0: address, $t1: u64, $t2: u64) {
     var $t3: &u64
     var $t4: &m::Foo
     var $t5: u64 [unused]
     # live vars: $t0, $t1, $t2
  0: $t4 := borrow_global<m::Foo>($t0)
     # live vars: $t1, $t2, $t4
  1: $t3 := borrow_field<m::Foo>.x($t4)
     # live vars: $t1, $t2, $t3
  2: $t1 := m::foo($t1, $t3)
     # live vars: $t1, $t2
  3: m::bar($t2, $t1)
     # live vars:
  4: return ()
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {
struct Foo has key {
	x: u64
}

bar(Arg0: u64, Arg1: u64) /* def_idx: 0 */ {
B0:
	0: Ret
}
foo(Arg0: u64, Arg1: &u64): u64 /* def_idx: 1 */ {
L2:	loc0: u64
B0:
	0: MoveLoc[1](Arg1: &u64)
	1: ReadRef
	2: StLoc[2](loc0: u64)
	3: MoveLoc[0](Arg0: u64)
	4: MoveLoc[2](loc0: u64)
	5: Add
	6: Ret
}
public test(Arg0: address, Arg1: u64, Arg2: u64) /* def_idx: 2 */ {
L3:	loc0: &u64
B0:
	0: MoveLoc[0](Arg0: address)
	1: ImmBorrowGlobal[0](Foo)
	2: ImmBorrowField[0](Foo.x: u64)
	3: StLoc[3](loc0: &u64)
	4: MoveLoc[1](Arg1: u64)
	5: MoveLoc[3](loc0: &u64)
	6: Call foo(u64, &u64): u64
	7: StLoc[1](Arg1: u64)
	8: MoveLoc[2](Arg2: u64)
	9: MoveLoc[1](Arg1: u64)
	10: Call bar(u64, u64)
	11: Ret
}
}
============ bytecode verification succeeded ========
