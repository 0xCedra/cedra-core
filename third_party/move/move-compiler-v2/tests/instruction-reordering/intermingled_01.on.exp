============ after InstructionReorderingProcessor: ================

[variant baseline]
fun m::bar($t0: u64, $t1: u64) {
  0: return ()
}


[variant baseline]
fun m::baz($t0: u64) {
  0: return ()
}


[variant baseline]
fun m::id($t0: u64): u64 {
     var $t1: u64 [unused]
  0: return $t0
}


[variant baseline]
fun m::one(): u64 {
     var $t0: u64
  0: $t0 := 1
  1: return $t0
}


[variant baseline]
public fun m::test1() {
     var $t0: u64
     var $t1: u64
     var $t2: u64 [unused]
     var $t3: u64 [unused]
  0: $t0 := m::one()
  1: $t1 := m::two()
  2: $t0 := m::id($t0)
  3: $t1 := m::id($t1)
  4: return ()
}


[variant baseline]
public fun m::test2() {
     var $t0: u64
     var $t1: u64
     var $t2: u64 [unused]
     var $t3: u64 [unused]
  0: $t1 := 1
  1: $t0 := m::id($t1)
  2: $t1 := 2
  3: $t1 := m::id($t1)
  4: return ()
}


[variant baseline]
public fun m::test3($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     var $t4: u64
  0: touch($t0)
  1: $t4 := 1
  2: $t4 := +($t0, $t4)
  3: $t4 := +($t4, $t0)
  4: $t0 := +($t4, $t0)
  5: return $t0
}


[variant baseline]
public fun m::test4() {
     var $t0: u64
     var $t1: u64
     var $t2: u64 [unused]
     var $t3: u64
     var $t4: u64
  0: $t0 := m::one()
  1: $t1 := m::two()
  2: $t3 := m::one()
  3: $t4 := m::two()
  4: $t3 := +($t3, $t4)
  5: m::bar($t0, $t1)
  6: m::baz($t3)
  7: return ()
}


[variant baseline]
fun m::two(): u64 {
     var $t0: u64
  0: $t0 := 2
  1: return $t0
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {
struct Foo {
	x: u64
}

bar(Arg0: u64, Arg1: u64) /* def_idx: 0 */ {
B0:
	0: Ret
}
baz(Arg0: u64) /* def_idx: 1 */ {
B0:
	0: Ret
}
id(Arg0: u64): u64 /* def_idx: 2 */ {
B0:
	0: MoveLoc[0](Arg0: u64)
	1: Ret
}
one(): u64 /* def_idx: 3 */ {
B0:
	0: LdU64(1)
	1: Ret
}
public test1() /* def_idx: 4 */ {
L0:	loc0: u64
L1:	loc1: u64
B0:
	0: Call one(): u64
	1: Call two(): u64
	2: StLoc[0](loc0: u64)
	3: StLoc[1](loc1: u64)
	4: MoveLoc[1](loc1: u64)
	5: Call id(u64): u64
	6: MoveLoc[0](loc0: u64)
	7: Call id(u64): u64
	8: Pop
	9: Pop
	10: Ret
}
public test2() /* def_idx: 5 */ {
B0:
	0: LdU64(1)
	1: Call id(u64): u64
	2: LdU64(2)
	3: Call id(u64): u64
	4: Pop
	5: Pop
	6: Ret
}
public test3(Arg0: u64): u64 /* def_idx: 6 */ {
B0:
	0: CopyLoc[0](Arg0: u64)
	1: LdU64(1)
	2: Add
	3: CopyLoc[0](Arg0: u64)
	4: Add
	5: MoveLoc[0](Arg0: u64)
	6: Add
	7: Ret
}
public test4() /* def_idx: 7 */ {
L0:	loc0: u64
L1:	loc1: u64
L2:	loc2: u64
B0:
	0: Call one(): u64
	1: Call two(): u64
	2: Call one(): u64
	3: Call two(): u64
	4: Add
	5: StLoc[0](loc0: u64)
	6: StLoc[1](loc1: u64)
	7: StLoc[2](loc2: u64)
	8: MoveLoc[2](loc2: u64)
	9: MoveLoc[1](loc1: u64)
	10: Call bar(u64, u64)
	11: MoveLoc[0](loc0: u64)
	12: Call baz(u64)
	13: Ret
}
two(): u64 /* def_idx: 8 */ {
B0:
	0: LdU64(2)
	1: Ret
}
}
============ bytecode verification succeeded ========
