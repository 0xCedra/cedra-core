============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun m::test1($t0: u64, $t1: u64) {
     var $t2: &mut u64
     # live vars: $t0, $t1
  0: $t2 := borrow_local($t0)
     # live vars: $t1, $t2
  1: write_ref($t1, $t2)
     # live vars:
  2: return ()
}


[variant baseline]
public fun m::test2($t0: u64) {
     var $t1: &mut u64
     var $t2: u64
     var $t3: &mut u64
     var $t4: u64
     # live vars: $t0
  0: $t1 := borrow_local($t0)
     # live vars: $t0, $t1
  1: $t2 := 2
     # live vars: $t0, $t1, $t2
  2: write_ref($t2, $t1)
     # live vars: $t0
  3: $t3 := borrow_local($t0)
     # live vars: $t3
  4: $t4 := 3
     # live vars: $t3, $t4
  5: write_ref($t4, $t3)
     # live vars:
  6: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun m::test1($t0: u64, $t1: u64) {
     var $t2: &mut u64
     # live vars: $t0, $t1
  0: $t2 := borrow_local($t0)
     # live vars: $t1, $t2
  1: write_ref($t1, $t2)
     # live vars:
  2: return ()
}


[variant baseline]
public fun m::test2($t0: u64) {
     var $t1: &mut u64
     var $t2: u64
     var $t3: &mut u64
     var $t4: u64
     # live vars: $t0
  0: $t1 := borrow_local($t0)
     # live vars: $t0, $t1
  1: $t2 := 2
     # live vars: $t0, $t1, $t2
  2: write_ref($t2, $t1)
     # live vars: $t0
  3: $t3 := borrow_local($t0)
     # live vars: $t3
  4: $t4 := 3
     # live vars: $t3, $t4
  5: write_ref($t4, $t3)
     # live vars:
  6: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun m::test1($t0: u64, $t1: u64) {
     var $t2: &mut u64
     # live vars: $t0, $t1
  0: $t2 := borrow_local($t0)
     # live vars: $t1, $t2
  1: write_ref($t1, $t2)
     # live vars:
  2: return ()
}


[variant baseline]
public fun m::test2($t0: u64) {
     var $t1: &mut u64
     var $t2: u64
     var $t3: &mut u64
     var $t4: u64
     # live vars: $t0
  0: $t1 := borrow_local($t0)
     # live vars: $t0, $t1
  1: $t2 := 2
     # live vars: $t0, $t1, $t2
  2: write_ref($t2, $t1)
     # live vars: $t0
  3: $t3 := borrow_local($t0)
     # live vars: $t3
  4: $t4 := 3
     # live vars: $t3, $t4
  5: write_ref($t4, $t3)
     # live vars:
  6: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun m::test1($t0: u64, $t1: u64) {
     var $t2: &mut u64
     # live vars: $t0, $t1
  0: $t2 := borrow_local($t0)
     # live vars: $t1, $t2
  1: write_ref($t1, $t2)
     # live vars:
  2: return ()
}


[variant baseline]
public fun m::test2($t0: u64) {
     var $t1: &mut u64
     var $t2: u64
     var $t3: &mut u64
     var $t4: u64
     # live vars: $t0
  0: $t1 := borrow_local($t0)
     # live vars: $t0, $t1
  1: $t2 := 2
     # live vars: $t0, $t1, $t2
  2: write_ref($t2, $t1)
     # live vars: $t0
  3: $t3 := borrow_local($t0)
     # live vars: $t3
  4: $t4 := 3
     # live vars: $t3, $t4
  5: write_ref($t4, $t3)
     # live vars:
  6: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun m::test1($t0: u64, $t1: u64) {
     var $t2: &mut u64
     # live vars: $t0, $t1
  0: $t2 := borrow_local($t0)
     # live vars: $t1, $t2
  1: write_ref($t1, $t2)
     # live vars:
  2: return ()
}


[variant baseline]
public fun m::test2($t0: u64) {
     var $t1: &mut u64
     var $t2: u64
     var $t3: &mut u64 [unused]
     var $t4: u64 [unused]
     # live vars: $t0
  0: $t1 := borrow_local($t0)
     # live vars: $t0, $t1
  1: $t2 := 2
     # live vars: $t0, $t1, $t2
  2: write_ref($t2, $t1)
     # live vars: $t0
  3: $t1 := borrow_local($t0)
     # live vars: $t1
  4: $t2 := 3
     # live vars: $t1, $t2
  5: write_ref($t2, $t1)
     # live vars:
  6: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun m::test1($t0: u64, $t1: u64) {
     var $t2: &mut u64
     # live vars: $t0, $t1
  0: $t2 := borrow_local($t0)
     # live vars: $t1, $t2
  1: write_ref($t1, $t2)
     # live vars:
  2: return ()
}


[variant baseline]
public fun m::test2($t0: u64) {
     var $t1: &mut u64
     var $t2: u64
     var $t3: &mut u64 [unused]
     var $t4: u64 [unused]
     # live vars: $t0
  0: $t1 := borrow_local($t0)
     # live vars: $t0, $t1
  1: $t2 := 2
     # live vars: $t0, $t1, $t2
  2: write_ref($t2, $t1)
     # live vars: $t0
  3: $t1 := borrow_local($t0)
     # live vars: $t1
  4: $t2 := 3
     # live vars: $t1, $t2
  5: write_ref($t2, $t1)
     # live vars:
  6: return ()
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


public test1(Arg0: u64, Arg1: u64) /* def_idx: 0 */ {
L2:	loc0: &mut u64
B0:
	0: MutBorrowLoc[0](Arg0: u64)
	1: StLoc[2](loc0: &mut u64)
	2: MoveLoc[1](Arg1: u64)
	3: MoveLoc[2](loc0: &mut u64)
	4: WriteRef
	5: Ret
}
public test2(Arg0: u64) /* def_idx: 1 */ {
L1:	loc0: u64
L2:	loc1: &mut u64
B0:
	0: MutBorrowLoc[0](Arg0: u64)
	1: LdU64(2)
	2: StLoc[1](loc0: u64)
	3: StLoc[2](loc1: &mut u64)
	4: MoveLoc[1](loc0: u64)
	5: MoveLoc[2](loc1: &mut u64)
	6: WriteRef
	7: MutBorrowLoc[0](Arg0: u64)
	8: LdU64(3)
	9: StLoc[1](loc0: u64)
	10: StLoc[2](loc1: &mut u64)
	11: MoveLoc[1](loc0: u64)
	12: MoveLoc[2](loc1: &mut u64)
	13: WriteRef
	14: Ret
}
}
============ bytecode verification succeeded ========
