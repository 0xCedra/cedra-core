============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun m::contains($t0: &vector<u8>, $t1: u64): bool {
     var $t2: bool
     var $t3: u8
     var $t4: u8
     var $t5: u8
     var $t6: bool
     var $t7: u64
     var $t8: u64
     var $t9: u8
     var $t10: u8
     var $t11: &u8
     var $t12: u64
     var $t13: u8
     # live vars: $t0, $t1
  0: $t4 := 1
     # live vars: $t0, $t1, $t4
  1: $t5 := (u8)($t1)
     # live vars: $t0, $t4, $t5
  2: $t3 := <<($t4, $t5)
     # live vars: $t0, $t3
  3: $t7 := 0
     # live vars: $t0, $t3, $t7
  4: $t8 := vector::length<u8>($t0)
     # live vars: $t0, $t3, $t7, $t8
  5: $t6 := <($t7, $t8)
     # live vars: $t0, $t3, $t6
  6: if ($t6) goto 7 else goto 15
     # live vars: $t0, $t3
  7: label L0
     # live vars: $t0, $t3
  8: $t12 := 0
     # live vars: $t0, $t3, $t12
  9: $t11 := vector::borrow<u8>($t0, $t12)
     # live vars: $t3, $t11
 10: $t10 := read_ref($t11)
     # live vars: $t3, $t10
 11: $t9 := &($t10, $t3)
     # live vars: $t9
 12: $t13 := 0
     # live vars: $t9, $t13
 13: $t2 := !=($t9, $t13)
     # live vars: $t2
 14: goto 17
     # live vars: $t0, $t3
 15: label L1
     # live vars:
 16: $t2 := false
     # live vars: $t2
 17: label L2
     # live vars: $t2
 18: return $t2
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun m::contains($t0: &vector<u8>, $t1: u64): bool {
     var $t2: bool
     var $t3: u8
     var $t4: u8
     var $t5: u8
     var $t6: bool
     var $t7: u64
     var $t8: u64
     var $t9: u8
     var $t10: u8
     var $t11: &u8
     var $t12: u64
     var $t13: u8
     # live vars: $t0, $t1
  0: $t4 := 1
     # live vars: $t0, $t1, $t4
  1: $t5 := (u8)($t1)
     # live vars: $t0, $t4, $t5
  2: $t3 := <<($t4, $t5)
     # live vars: $t0, $t3
  3: $t7 := 0
     # live vars: $t0, $t3, $t7
  4: $t8 := vector::length<u8>($t0)
     # live vars: $t0, $t3, $t7, $t8
  5: $t6 := <($t7, $t8)
     # live vars: $t0, $t3, $t6
  6: if ($t6) goto 7 else goto 15
     # live vars: $t0, $t3
  7: label L0
     # live vars: $t0, $t3
  8: $t12 := 0
     # live vars: $t0, $t3, $t12
  9: $t11 := vector::borrow<u8>($t0, $t12)
     # live vars: $t3, $t11
 10: $t10 := read_ref($t11)
     # live vars: $t3, $t10
 11: $t9 := &($t10, $t3)
     # live vars: $t9
 12: $t13 := 0
     # live vars: $t9, $t13
 13: $t2 := !=($t9, $t13)
     # live vars: $t2
 14: goto 17
     # live vars: $t0, $t3
 15: label L1
     # live vars:
 16: $t2 := false
     # live vars: $t2
 17: label L2
     # live vars: $t2
 18: return $t2
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun m::contains($t0: &vector<u8>, $t1: u64): bool {
     var $t2: bool
     var $t3: u8
     var $t4: u8
     var $t5: u8
     var $t6: bool
     var $t7: u64
     var $t8: u64
     var $t9: u8
     var $t10: u8
     var $t11: &u8
     var $t12: u64
     var $t13: u8
     var $t14: &vector<u8>
     # live vars: $t0, $t1
  0: $t4 := 1
     # live vars: $t0, $t1, $t4
  1: $t5 := (u8)($t1)
     # live vars: $t0, $t4, $t5
  2: $t3 := <<($t4, $t5)
     # live vars: $t0, $t3
  3: $t7 := 0
     # live vars: $t0, $t3, $t7
  4: $t14 := copy($t0)
     # live vars: $t0, $t3, $t7, $t14
  5: $t8 := vector::length<u8>($t14)
     # live vars: $t0, $t3, $t7, $t8
  6: $t6 := <($t7, $t8)
     # live vars: $t0, $t3, $t6
  7: if ($t6) goto 8 else goto 16
     # live vars: $t0, $t3
  8: label L0
     # live vars: $t0, $t3
  9: $t12 := 0
     # live vars: $t0, $t3, $t12
 10: $t11 := vector::borrow<u8>($t0, $t12)
     # live vars: $t3, $t11
 11: $t10 := read_ref($t11)
     # live vars: $t3, $t10
 12: $t9 := &($t10, $t3)
     # live vars: $t9
 13: $t13 := 0
     # live vars: $t9, $t13
 14: $t2 := !=($t9, $t13)
     # live vars: $t2
 15: goto 19
     # live vars: $t0, $t3
 16: label L1
     # live vars: $t0
 17: drop($t0)
     # live vars:
 18: $t2 := false
     # live vars: $t2
 19: label L2
     # live vars: $t2
 20: return $t2
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun m::contains($t0: &vector<u8>, $t1: u64): bool {
     var $t2: bool
     var $t3: u8
     var $t4: u8
     var $t5: u8
     var $t6: bool
     var $t7: u64
     var $t8: u64
     var $t9: u8
     var $t10: u8
     var $t11: &u8
     var $t12: u64
     var $t13: u8
     var $t14: &vector<u8>
     # live vars: $t0, $t1
  0: $t4 := 1
     # live vars: $t0, $t1, $t4
  1: $t5 := (u8)($t1)
     # live vars: $t0, $t4, $t5
  2: $t3 := <<($t4, $t5)
     # live vars: $t0, $t3
  3: $t7 := 0
     # live vars: $t0, $t3, $t7
  4: $t14 := copy($t0)
     # live vars: $t0, $t3, $t7, $t14
  5: $t8 := vector::length<u8>($t14)
     # live vars: $t0, $t3, $t7, $t8
  6: $t6 := <($t7, $t8)
     # live vars: $t0, $t3, $t6
  7: if ($t6) goto 8 else goto 16
     # live vars: $t0, $t3
  8: label L0
     # live vars: $t0, $t3
  9: $t12 := 0
     # live vars: $t0, $t3, $t12
 10: $t11 := vector::borrow<u8>($t0, $t12)
     # live vars: $t3, $t11
 11: $t10 := read_ref($t11)
     # live vars: $t3, $t10
 12: $t9 := &($t10, $t3)
     # live vars: $t9
 13: $t13 := 0
     # live vars: $t9, $t13
 14: $t2 := !=($t9, $t13)
     # live vars: $t2
 15: goto 19
     # live vars: $t0, $t3
 16: label L1
     # live vars: $t0
 17: drop($t0)
     # live vars:
 18: $t2 := false
     # live vars: $t2
 19: label L2
     # live vars: $t2
 20: return $t2
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun m::contains($t0: &vector<u8>, $t1: u64): bool {
     var $t2: bool [unused]
     var $t3: u8 [unused]
     var $t4: u8
     var $t5: u8
     var $t6: bool
     var $t7: u64 [unused]
     var $t8: u64
     var $t9: u8 [unused]
     var $t10: u8 [unused]
     var $t11: &u8
     var $t12: u64 [unused]
     var $t13: u8
     var $t14: &vector<u8>
     # live vars: $t0, $t1
  0: $t4 := 1
     # live vars: $t0, $t1, $t4
  1: $t5 := (u8)($t1)
     # live vars: $t0, $t4, $t5
  2: $t4 := <<($t4, $t5)
     # live vars: $t0, $t4
  3: $t1 := 0
     # live vars: $t0, $t1, $t4
  4: $t14 := copy($t0)
     # live vars: $t0, $t1, $t4, $t14
  5: $t8 := vector::length<u8>($t14)
     # live vars: $t0, $t1, $t4, $t8
  6: $t6 := <($t1, $t8)
     # live vars: $t0, $t4, $t6
  7: if ($t6) goto 8 else goto 16
     # live vars: $t0, $t4
  8: label L0
     # live vars: $t0, $t4
  9: $t1 := 0
     # live vars: $t0, $t1, $t4
 10: $t11 := vector::borrow<u8>($t0, $t1)
     # live vars: $t4, $t11
 11: $t5 := read_ref($t11)
     # live vars: $t4, $t5
 12: $t5 := &($t5, $t4)
     # live vars: $t5
 13: $t13 := 0
     # live vars: $t5, $t13
 14: $t6 := !=($t5, $t13)
     # live vars: $t6
 15: goto 19
     # live vars: $t0, $t4
 16: label L1
     # live vars: $t0
 17: drop($t0)
     # live vars:
 18: $t6 := false
     # live vars: $t6
 19: label L2
     # live vars: $t6
 20: return $t6
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun m::contains($t0: &vector<u8>, $t1: u64): bool {
     var $t2: bool [unused]
     var $t3: u8 [unused]
     var $t4: u8
     var $t5: u8
     var $t6: bool
     var $t7: u64 [unused]
     var $t8: u64
     var $t9: u8 [unused]
     var $t10: u8 [unused]
     var $t11: &u8
     var $t12: u64 [unused]
     var $t13: u8
     var $t14: &vector<u8>
     # live vars: $t0, $t1
  0: $t4 := 1
     # live vars: $t0, $t1, $t4
  1: $t5 := (u8)($t1)
     # live vars: $t0, $t4, $t5
  2: $t4 := <<($t4, $t5)
     # live vars: $t0, $t4
  3: $t1 := 0
     # live vars: $t0, $t1, $t4
  4: $t14 := copy($t0)
     # live vars: $t0, $t1, $t4, $t14
  5: $t8 := vector::length<u8>($t14)
     # live vars: $t0, $t1, $t4, $t8
  6: $t6 := <($t1, $t8)
     # live vars: $t0, $t4, $t6
  7: if ($t6) goto 8 else goto 16
     # live vars: $t0, $t4
  8: label L0
     # live vars: $t0, $t4
  9: $t1 := 0
     # live vars: $t0, $t1, $t4
 10: $t11 := vector::borrow<u8>($t0, $t1)
     # live vars: $t4, $t11
 11: $t5 := read_ref($t11)
     # live vars: $t4, $t5
 12: $t5 := &($t5, $t4)
     # live vars: $t5
 13: $t13 := 0
     # live vars: $t5, $t13
 14: $t6 := !=($t5, $t13)
     # live vars: $t6
 15: goto 19
     # live vars: $t0, $t4
 16: label L1
     # live vars: $t0
 17: drop($t0)
     # live vars:
 18: $t6 := false
     # live vars: $t6
 19: label L2
     # live vars: $t6
 20: return $t6
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


public contains(Arg0: &vector<u8>, Arg1: u64): bool /* def_idx: 0 */ {
L2:	loc0: &vector<u8>
L3:	loc1: bool
L4:	loc2: u8
B0:
	0: LdU8(1)
	1: MoveLoc[1](Arg1: u64)
	2: CastU8
	3: Shl
	4: LdU64(0)
	5: CopyLoc[0](Arg0: &vector<u8>)
	6: StLoc[2](loc0: &vector<u8>)
	7: MoveLoc[2](loc0: &vector<u8>)
	8: VecLen(2)
	9: Lt
	10: StLoc[3](loc1: bool)
	11: StLoc[4](loc2: u8)
	12: MoveLoc[3](loc1: bool)
	13: BrFalse(26)
B1:
	14: LdU64(0)
	15: StLoc[1](Arg1: u64)
	16: MoveLoc[0](Arg0: &vector<u8>)
	17: MoveLoc[1](Arg1: u64)
	18: VecImmBorrow(2)
	19: ReadRef
	20: MoveLoc[4](loc2: u8)
	21: BitAnd
	22: LdU8(0)
	23: Neq
	24: StLoc[3](loc1: bool)
	25: Branch(30)
B2:
	26: MoveLoc[0](Arg0: &vector<u8>)
	27: Pop
	28: LdFalse
	29: StLoc[3](loc1: bool)
B3:
	30: MoveLoc[3](loc1: bool)
	31: Ret
}
}
============ bytecode verification succeeded ========
