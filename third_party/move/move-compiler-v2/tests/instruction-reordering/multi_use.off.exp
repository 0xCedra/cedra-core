============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::consume($t0: u64, $t1: u64) {
     # live vars: $t0, $t1
  0: return ()
}


[variant baseline]
fun m::multi_consume($t0: u64, $t1: u64, $t2: u64, $t3: u64) {
     # live vars: $t0, $t1, $t2, $t3
  0: return ()
}


[variant baseline]
fun m::one(): u64 {
     var $t0: u64
     # live vars:
  0: $t0 := 1
     # live vars: $t0
  1: return $t0
}


[variant baseline]
public fun m::test1() {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     # live vars:
  0: $t0 := m::one()
     # live vars: $t0
  1: $t1 := 2
     # live vars: $t0, $t1
  2: $t2 := 1
     # live vars: $t0, $t1, $t2
  3: m::multi_consume($t0, $t1, $t0, $t2)
     # live vars:
  4: return ()
}


[variant baseline]
public fun m::test2($t0: u64) {
     var $t1: u64
     var $t2: u64
     # live vars: $t0
  0: $t1 := 2
     # live vars: $t0, $t1
  1: $t2 := 1
     # live vars: $t0, $t1, $t2
  2: m::multi_consume($t0, $t1, $t0, $t2)
     # live vars:
  3: return ()
}


[variant baseline]
public fun m::test3() {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     # live vars:
  0: $t0 := m::one()
     # live vars: $t0
  1: $t1 := 2
     # live vars: $t0, $t1
  2: m::consume($t0, $t1)
     # live vars: $t0
  3: $t2 := 1
     # live vars: $t0, $t2
  4: m::consume($t0, $t2)
     # live vars:
  5: return ()
}


[variant baseline]
public fun m::test4($t0: u64) {
     var $t1: u64
     var $t2: u64
     # live vars: $t0
  0: $t1 := 2
     # live vars: $t0, $t1
  1: m::consume($t0, $t1)
     # live vars: $t0
  2: $t2 := 1
     # live vars: $t0, $t2
  3: m::consume($t0, $t2)
     # live vars:
  4: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::consume($t0: u64, $t1: u64) {
     # live vars: $t0, $t1
  0: return ()
}


[variant baseline]
fun m::multi_consume($t0: u64, $t1: u64, $t2: u64, $t3: u64) {
     # live vars: $t0, $t1, $t2, $t3
  0: return ()
}


[variant baseline]
fun m::one(): u64 {
     var $t0: u64
     # live vars:
  0: $t0 := 1
     # live vars: $t0
  1: return $t0
}


[variant baseline]
public fun m::test1() {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     # live vars:
  0: $t0 := m::one()
     # live vars: $t0
  1: $t1 := 2
     # live vars: $t0, $t1
  2: $t2 := 1
     # live vars: $t0, $t1, $t2
  3: m::multi_consume($t0, $t1, $t0, $t2)
     # live vars:
  4: return ()
}


[variant baseline]
public fun m::test2($t0: u64) {
     var $t1: u64
     var $t2: u64
     # live vars: $t0
  0: $t1 := 2
     # live vars: $t0, $t1
  1: $t2 := 1
     # live vars: $t0, $t1, $t2
  2: m::multi_consume($t0, $t1, $t0, $t2)
     # live vars:
  3: return ()
}


[variant baseline]
public fun m::test3() {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     # live vars:
  0: $t0 := m::one()
     # live vars: $t0
  1: $t1 := 2
     # live vars: $t0, $t1
  2: m::consume($t0, $t1)
     # live vars: $t0
  3: $t2 := 1
     # live vars: $t0, $t2
  4: m::consume($t0, $t2)
     # live vars:
  5: return ()
}


[variant baseline]
public fun m::test4($t0: u64) {
     var $t1: u64
     var $t2: u64
     # live vars: $t0
  0: $t1 := 2
     # live vars: $t0, $t1
  1: m::consume($t0, $t1)
     # live vars: $t0
  2: $t2 := 1
     # live vars: $t0, $t2
  3: m::consume($t0, $t2)
     # live vars:
  4: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::consume($t0: u64, $t1: u64) {
     # live vars: $t0, $t1
  0: return ()
}


[variant baseline]
fun m::multi_consume($t0: u64, $t1: u64, $t2: u64, $t3: u64) {
     # live vars: $t0, $t1, $t2, $t3
  0: return ()
}


[variant baseline]
fun m::one(): u64 {
     var $t0: u64
     # live vars:
  0: $t0 := 1
     # live vars: $t0
  1: return $t0
}


[variant baseline]
public fun m::test1() {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     # live vars:
  0: $t0 := m::one()
     # live vars: $t0
  1: $t1 := 2
     # live vars: $t0, $t1
  2: $t2 := 1
     # live vars: $t0, $t1, $t2
  3: m::multi_consume($t0, $t1, $t0, $t2)
     # live vars:
  4: return ()
}


[variant baseline]
public fun m::test2($t0: u64) {
     var $t1: u64
     var $t2: u64
     # live vars: $t0
  0: $t1 := 2
     # live vars: $t0, $t1
  1: $t2 := 1
     # live vars: $t0, $t1, $t2
  2: m::multi_consume($t0, $t1, $t0, $t2)
     # live vars:
  3: return ()
}


[variant baseline]
public fun m::test3() {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     # live vars:
  0: $t0 := m::one()
     # live vars: $t0
  1: $t1 := 2
     # live vars: $t0, $t1
  2: m::consume($t0, $t1)
     # live vars: $t0
  3: $t2 := 1
     # live vars: $t0, $t2
  4: m::consume($t0, $t2)
     # live vars:
  5: return ()
}


[variant baseline]
public fun m::test4($t0: u64) {
     var $t1: u64
     var $t2: u64
     # live vars: $t0
  0: $t1 := 2
     # live vars: $t0, $t1
  1: m::consume($t0, $t1)
     # live vars: $t0
  2: $t2 := 1
     # live vars: $t0, $t2
  3: m::consume($t0, $t2)
     # live vars:
  4: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::consume($t0: u64, $t1: u64) {
     # live vars: $t0, $t1
  0: return ()
}


[variant baseline]
fun m::multi_consume($t0: u64, $t1: u64, $t2: u64, $t3: u64) {
     # live vars: $t0, $t1, $t2, $t3
  0: return ()
}


[variant baseline]
fun m::one(): u64 {
     var $t0: u64
     # live vars:
  0: $t0 := 1
     # live vars: $t0
  1: return $t0
}


[variant baseline]
public fun m::test1() {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     # live vars:
  0: $t0 := m::one()
     # live vars: $t0
  1: $t1 := 2
     # live vars: $t0, $t1
  2: $t2 := 1
     # live vars: $t0, $t1, $t2
  3: m::multi_consume($t0, $t1, $t0, $t2)
     # live vars:
  4: return ()
}


[variant baseline]
public fun m::test2($t0: u64) {
     var $t1: u64
     var $t2: u64
     # live vars: $t0
  0: $t1 := 2
     # live vars: $t0, $t1
  1: $t2 := 1
     # live vars: $t0, $t1, $t2
  2: m::multi_consume($t0, $t1, $t0, $t2)
     # live vars:
  3: return ()
}


[variant baseline]
public fun m::test3() {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     # live vars:
  0: $t0 := m::one()
     # live vars: $t0
  1: $t1 := 2
     # live vars: $t0, $t1
  2: m::consume($t0, $t1)
     # live vars: $t0
  3: $t2 := 1
     # live vars: $t0, $t2
  4: m::consume($t0, $t2)
     # live vars:
  5: return ()
}


[variant baseline]
public fun m::test4($t0: u64) {
     var $t1: u64
     var $t2: u64
     # live vars: $t0
  0: $t1 := 2
     # live vars: $t0, $t1
  1: m::consume($t0, $t1)
     # live vars: $t0
  2: $t2 := 1
     # live vars: $t0, $t2
  3: m::consume($t0, $t2)
     # live vars:
  4: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::consume($t0: u64, $t1: u64) {
     # live vars: $t0, $t1
  0: return ()
}


[variant baseline]
fun m::multi_consume($t0: u64, $t1: u64, $t2: u64, $t3: u64) {
     # live vars: $t0, $t1, $t2, $t3
  0: return ()
}


[variant baseline]
fun m::one(): u64 {
     var $t0: u64
     # live vars:
  0: $t0 := 1
     # live vars: $t0
  1: return $t0
}


[variant baseline]
public fun m::test1() {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     # live vars:
  0: $t0 := m::one()
     # live vars: $t0
  1: $t1 := 2
     # live vars: $t0, $t1
  2: $t2 := 1
     # live vars: $t0, $t1, $t2
  3: m::multi_consume($t0, $t1, $t0, $t2)
     # live vars:
  4: return ()
}


[variant baseline]
public fun m::test2($t0: u64) {
     var $t1: u64
     var $t2: u64
     # live vars: $t0
  0: $t1 := 2
     # live vars: $t0, $t1
  1: $t2 := 1
     # live vars: $t0, $t1, $t2
  2: m::multi_consume($t0, $t1, $t0, $t2)
     # live vars:
  3: return ()
}


[variant baseline]
public fun m::test3() {
     var $t0: u64
     var $t1: u64
     var $t2: u64 [unused]
     # live vars:
  0: $t0 := m::one()
     # live vars: $t0
  1: $t1 := 2
     # live vars: $t0, $t1
  2: m::consume($t0, $t1)
     # live vars: $t0
  3: $t1 := 1
     # live vars: $t0, $t1
  4: m::consume($t0, $t1)
     # live vars:
  5: return ()
}


[variant baseline]
public fun m::test4($t0: u64) {
     var $t1: u64
     var $t2: u64 [unused]
     # live vars: $t0
  0: $t1 := 2
     # live vars: $t0, $t1
  1: m::consume($t0, $t1)
     # live vars: $t0
  2: $t1 := 1
     # live vars: $t0, $t1
  3: m::consume($t0, $t1)
     # live vars:
  4: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::consume($t0: u64, $t1: u64) {
     # live vars: $t0, $t1
  0: return ()
}


[variant baseline]
fun m::multi_consume($t0: u64, $t1: u64, $t2: u64, $t3: u64) {
     # live vars: $t0, $t1, $t2, $t3
  0: return ()
}


[variant baseline]
fun m::one(): u64 {
     var $t0: u64
     # live vars:
  0: $t0 := 1
     # live vars: $t0
  1: return $t0
}


[variant baseline]
public fun m::test1() {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     # live vars:
  0: $t0 := m::one()
     # live vars: $t0
  1: $t1 := 2
     # live vars: $t0, $t1
  2: $t2 := 1
     # live vars: $t0, $t1, $t2
  3: m::multi_consume($t0, $t1, $t0, $t2)
     # live vars:
  4: return ()
}


[variant baseline]
public fun m::test2($t0: u64) {
     var $t1: u64
     var $t2: u64
     # live vars: $t0
  0: $t1 := 2
     # live vars: $t0, $t1
  1: $t2 := 1
     # live vars: $t0, $t1, $t2
  2: m::multi_consume($t0, $t1, $t0, $t2)
     # live vars:
  3: return ()
}


[variant baseline]
public fun m::test3() {
     var $t0: u64
     var $t1: u64
     var $t2: u64 [unused]
     # live vars:
  0: $t0 := m::one()
     # live vars: $t0
  1: $t1 := 2
     # live vars: $t0, $t1
  2: m::consume($t0, $t1)
     # live vars: $t0
  3: $t1 := 1
     # live vars: $t0, $t1
  4: m::consume($t0, $t1)
     # live vars:
  5: return ()
}


[variant baseline]
public fun m::test4($t0: u64) {
     var $t1: u64
     var $t2: u64 [unused]
     # live vars: $t0
  0: $t1 := 2
     # live vars: $t0, $t1
  1: m::consume($t0, $t1)
     # live vars: $t0
  2: $t1 := 1
     # live vars: $t0, $t1
  3: m::consume($t0, $t1)
     # live vars:
  4: return ()
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


consume(Arg0: u64, Arg1: u64) /* def_idx: 0 */ {
B0:
	0: Ret
}
multi_consume(Arg0: u64, Arg1: u64, Arg2: u64, Arg3: u64) /* def_idx: 1 */ {
B0:
	0: Ret
}
one(): u64 /* def_idx: 2 */ {
B0:
	0: LdU64(1)
	1: Ret
}
public test1() /* def_idx: 3 */ {
L0:	loc0: u64
L1:	loc1: u64
L2:	loc2: u64
B0:
	0: Call one(): u64
	1: LdU64(2)
	2: LdU64(1)
	3: StLoc[0](loc0: u64)
	4: StLoc[1](loc1: u64)
	5: StLoc[2](loc2: u64)
	6: CopyLoc[2](loc2: u64)
	7: MoveLoc[1](loc1: u64)
	8: MoveLoc[2](loc2: u64)
	9: MoveLoc[0](loc0: u64)
	10: Call multi_consume(u64, u64, u64, u64)
	11: Ret
}
public test2(Arg0: u64) /* def_idx: 4 */ {
L1:	loc0: u64
L2:	loc1: u64
B0:
	0: LdU64(2)
	1: LdU64(1)
	2: StLoc[1](loc0: u64)
	3: StLoc[2](loc1: u64)
	4: CopyLoc[0](Arg0: u64)
	5: MoveLoc[2](loc1: u64)
	6: MoveLoc[0](Arg0: u64)
	7: MoveLoc[1](loc0: u64)
	8: Call multi_consume(u64, u64, u64, u64)
	9: Ret
}
public test3() /* def_idx: 5 */ {
L0:	loc0: u64
L1:	loc1: u64
B0:
	0: Call one(): u64
	1: LdU64(2)
	2: StLoc[0](loc0: u64)
	3: StLoc[1](loc1: u64)
	4: CopyLoc[1](loc1: u64)
	5: MoveLoc[0](loc0: u64)
	6: Call consume(u64, u64)
	7: LdU64(1)
	8: StLoc[0](loc0: u64)
	9: MoveLoc[1](loc1: u64)
	10: MoveLoc[0](loc0: u64)
	11: Call consume(u64, u64)
	12: Ret
}
public test4(Arg0: u64) /* def_idx: 6 */ {
L1:	loc0: u64
B0:
	0: LdU64(2)
	1: StLoc[1](loc0: u64)
	2: CopyLoc[0](Arg0: u64)
	3: MoveLoc[1](loc0: u64)
	4: Call consume(u64, u64)
	5: LdU64(1)
	6: StLoc[1](loc0: u64)
	7: MoveLoc[0](Arg0: u64)
	8: MoveLoc[1](loc0: u64)
	9: Call consume(u64, u64)
	10: Ret
}
}
============ bytecode verification succeeded ========
