============ after InstructionReorderingProcessor: ================

[variant baseline]
fun m::update($t0: &mut u64, $t1: u64, $t2: u64) {
     var $t3: u64 [unused]
  0: touch($t1)
  1: $t1 := +($t1, $t2)
  2: write_ref($t1, $t0)
  3: return ()
}


[variant baseline]
fun m::test(): u64 {
     var $t0: u64 [unused]
     var $t1: u64
     var $t2: &mut u64
     var $t3: u64
     var $t4: u64
     var $t5: u64 [unused]
     var $t6: u64 [unused]
     var $t7: &mut u64
  0: $t1 := 0
  1: $t2 := borrow_local($t1)
  2: $t7 := copy($t2)
  3: $t3 := 3
  4: $t4 := 4
  5: m::update($t7, $t3, $t4)
  6: $t3 := 5
  7: $t4 := 6
  8: m::update($t2, $t3, $t4)
  9: $t3 := move($t1)
 10: return $t3
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


update(Arg0: &mut u64, Arg1: u64, Arg2: u64) /* def_idx: 0 */ {
B0:
	0: MoveLoc[1](Arg1: u64)
	1: MoveLoc[2](Arg2: u64)
	2: Add
	3: MoveLoc[0](Arg0: &mut u64)
	4: WriteRef
	5: Ret
}
test(): u64 /* def_idx: 1 */ {
L0:	loc0: u64
L1:	loc1: &mut u64
L2:	loc2: &mut u64
L3:	loc3: u64
L4:	loc4: u64
B0:
	0: LdU64(0)
	1: StLoc[0](loc0: u64)
	2: MutBorrowLoc[0](loc0: u64)
	3: StLoc[1](loc1: &mut u64)
	4: CopyLoc[1](loc1: &mut u64)
	5: StLoc[2](loc2: &mut u64)
	6: LdU64(3)
	7: LdU64(4)
	8: StLoc[3](loc3: u64)
	9: StLoc[4](loc4: u64)
	10: MoveLoc[2](loc2: &mut u64)
	11: MoveLoc[4](loc4: u64)
	12: MoveLoc[3](loc3: u64)
	13: Call update(&mut u64, u64, u64)
	14: LdU64(5)
	15: LdU64(6)
	16: StLoc[3](loc3: u64)
	17: StLoc[4](loc4: u64)
	18: MoveLoc[1](loc1: &mut u64)
	19: MoveLoc[4](loc4: u64)
	20: MoveLoc[3](loc3: u64)
	21: Call update(&mut u64, u64, u64)
	22: MoveLoc[0](loc0: u64)
	23: Ret
}
}
============ bytecode verification succeeded ========
