============ after InstructionReorderingProcessor: ================

[variant baseline]
fun m::foo($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: u64
     # deps: {1, 2}, dfs: [Some(0)]
  0: touch($t0)
     # deps: {1, 2}, dfs: [Some(1)]
  1: $t2 := 1
     # deps: {2}, dfs: [Some(2)]
  2: $t0 := +($t0, $t2)
     # deps: {}, dfs: [Some(3)]
  3: return $t0
}


[variant baseline]
public fun m::test1($t0: u64) {
     var $t1: u64
     var $t2: bool
     var $t3: u64 [unused]
     # deps: {1, 2, 3, 4, 5, 6}, dfs: [None]
  0: label L0
     # deps: {2, 3, 4, 5, 6}, dfs: [Some(0)]
  1: $t1 := m::foo($t0)
     # deps: {3, 4, 5, 6}, dfs: [Some(1)]
  2: $t0 := move($t1)
     # deps: {4, 5}, dfs: [Some(2)]
  3: touch($t0)
     # deps: {4, 5}, dfs: [Some(3)]
  4: $t1 := 10
     # deps: {5}, dfs: [Some(4)]
  5: $t2 := >($t0, $t1)
     # deps: {}, dfs: [Some(5)]
  6: if ($t2) goto 7 else goto 9
     # deps: {1}, dfs: []
  7: label L2
     # deps: {}, dfs: []
  8: goto 12
     # deps: {1, 2}, dfs: []
  9: label L3
     # deps: {2}, dfs: []
 10: label L4
     # deps: {}, dfs: []
 11: goto 0
     # deps: {1}, dfs: []
 12: label L1
     # deps: {}, dfs: []
 13: return ()
}


[variant baseline]
public fun m::test2($t0: u64, $t1: u64, $t2: u64): u64 {
     var $t3: u64 [unused]
     var $t4: bool
     var $t5: u64
     # deps: {2}, dfs: [None]
  0: label L0
     # deps: {1, 2}, dfs: [Some(0)]
  1: touch($t1)
     # deps: {2}, dfs: [Some(1)]
  2: $t4 := <($t1, $t2)
     # deps: {}, dfs: [Some(2)]
  3: if ($t4) goto 4 else goto 9
     # deps: {1, 2, 3, 4}, dfs: [None]
  4: label L2
     # deps: {2, 3, 4}, dfs: [Some(0)]
  5: $t5 := m::foo($t1)
     # deps: {3}, dfs: [None]
  6: $t0 := move($t5)
     # deps: {}, dfs: [None]
  7: $t1 := copy($t0)
     # deps: {}, dfs: [None]
  8: goto 11
     # deps: {1}, dfs: []
  9: label L3
     # deps: {}, dfs: []
 10: goto 13
     # deps: {1}, dfs: []
 11: label L4
     # deps: {}, dfs: []
 12: goto 0
     # deps: {1, 2}, dfs: [None]
 13: label L1
     # deps: {1, 2}, dfs: [Some(0)]
 14: touch($t0)
     # deps: {2}, dfs: [Some(1)]
 15: $t0 := +($t0, $t1)
     # deps: {}, dfs: [Some(2)]
 16: return $t0
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


foo(Arg0: u64): u64 /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](Arg0: u64)
	1: LdU64(1)
	2: Add
	3: Ret
}
public test1(Arg0: u64) /* def_idx: 1 */ {
B0:
	0: MoveLoc[0](Arg0: u64)
	1: Call foo(u64): u64
	2: StLoc[0](Arg0: u64)
	3: CopyLoc[0](Arg0: u64)
	4: LdU64(10)
	5: Gt
	6: BrFalse(8)
B1:
	7: Branch(9)
B2:
	8: Branch(0)
B3:
	9: Ret
}
public test2(Arg0: u64, Arg1: u64, Arg2: u64): u64 /* def_idx: 2 */ {
B0:
	0: CopyLoc[1](Arg1: u64)
	1: CopyLoc[2](Arg2: u64)
	2: Lt
	3: BrFalse(10)
B1:
	4: MoveLoc[1](Arg1: u64)
	5: Call foo(u64): u64
	6: StLoc[0](Arg0: u64)
	7: CopyLoc[0](Arg0: u64)
	8: StLoc[1](Arg1: u64)
	9: Branch(11)
B2:
	10: Branch(12)
B3:
	11: Branch(0)
B4:
	12: MoveLoc[0](Arg0: u64)
	13: MoveLoc[1](Arg1: u64)
	14: Add
	15: Ret
}
}
============ bytecode verification succeeded ========
