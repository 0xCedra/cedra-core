============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun m::test($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     # live vars: $t0
  0: $t2 := infer($t0)
     # live vars: $t2
  1: $t1 := +($t2, $t2)
     # live vars: $t1
  2: return $t1
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun m::test($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     # live vars: $t0
  0: $t2 := infer($t0)
     # live vars: $t2
  1: $t1 := +($t2, $t2)
     # live vars: $t1
  2: return $t1
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun m::test($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     # live vars: $t0
  0: $t2 := move($t0)
     # live vars: $t2
  1: $t1 := +($t2, $t2)
     # live vars: $t1
  2: return $t1
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun m::test($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     # live vars: $t0
  0: $t2 := move($t0)
     # live vars: $t2
  1: $t1 := +($t2, $t2)
     # live vars: $t1
  2: return $t1
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun m::test($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: u64 [unused]
     # live vars: $t0
  0: $t0 := move($t0)
     # live vars: $t0
  1: $t0 := +($t0, $t0)
     # live vars: $t0
  2: return $t0
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun m::test($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: u64 [unused]
     # live vars: $t0
  0: $t0 := +($t0, $t0)
     # live vars: $t0
  1: return $t0
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


public test(Arg0: u64): u64 /* def_idx: 0 */ {
B0:
	0: CopyLoc[0](Arg0: u64)
	1: MoveLoc[0](Arg0: u64)
	2: Add
	3: Ret
}
}
============ bytecode verification succeeded ========
