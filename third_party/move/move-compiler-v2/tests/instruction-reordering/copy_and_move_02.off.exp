============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::consume($t0: m::S, $t1: m::S) {
     var $t2: u64
     var $t3: u64
     # live vars: $t0, $t1
  0: $t2 := unpack m::S($t0)
     # live vars: $t1
  1: $t3 := unpack m::S($t1)
     # live vars:
  2: return ()
}


[variant baseline]
public fun m::test($t0: m::S) {
     var $t1: m::S
     var $t2: m::S
     # live vars: $t0
  0: $t1 := copy($t0)
     # live vars: $t0, $t1
  1: $t2 := move($t0)
     # live vars: $t1, $t2
  2: m::consume($t2, $t1)
     # live vars:
  3: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::consume($t0: m::S, $t1: m::S) {
     var $t2: u64
     var $t3: u64
     # live vars: $t0, $t1
  0: $t2 := unpack m::S($t0)
     # live vars: $t1
  1: $t3 := unpack m::S($t1)
     # live vars:
  2: return ()
}


[variant baseline]
public fun m::test($t0: m::S) {
     var $t1: m::S
     var $t2: m::S
     # live vars: $t0
  0: $t1 := copy($t0)
     # live vars: $t0, $t1
  1: $t2 := move($t0)
     # live vars: $t1, $t2
  2: m::consume($t2, $t1)
     # live vars:
  3: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::consume($t0: m::S, $t1: m::S) {
     var $t2: u64
     var $t3: u64
     # live vars: $t0, $t1
  0: $t2 := unpack m::S($t0)
     # live vars: $t1
  1: $t3 := unpack m::S($t1)
     # live vars:
  2: return ()
}


[variant baseline]
public fun m::test($t0: m::S) {
     var $t1: m::S
     var $t2: m::S
     # live vars: $t0
  0: $t1 := copy($t0)
     # live vars: $t0, $t1
  1: $t2 := move($t0)
     # live vars: $t1, $t2
  2: m::consume($t2, $t1)
     # live vars:
  3: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::consume($t0: m::S, $t1: m::S) {
     var $t2: u64
     var $t3: u64
     # live vars: $t0, $t1
  0: $t2 := unpack m::S($t0)
     # live vars: $t1
  1: $t3 := unpack m::S($t1)
     # live vars:
  2: return ()
}


[variant baseline]
public fun m::test($t0: m::S) {
     var $t1: m::S
     var $t2: m::S
     # live vars: $t0
  0: $t1 := copy($t0)
     # live vars: $t0, $t1
  1: $t2 := move($t0)
     # live vars: $t1, $t2
  2: m::consume($t2, $t1)
     # live vars:
  3: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::consume($t0: m::S, $t1: m::S) {
     var $t2: u64
     var $t3: u64
     # live vars: $t0, $t1
  0: $t2 := unpack m::S($t0)
     # live vars: $t1
  1: $t3 := unpack m::S($t1)
     # live vars:
  2: return ()
}


[variant baseline]
public fun m::test($t0: m::S) {
     var $t1: m::S
     var $t2: m::S [unused]
     # live vars: $t0
  0: $t1 := copy($t0)
     # live vars: $t0, $t1
  1: $t0 := move($t0)
     # live vars: $t0, $t1
  2: m::consume($t0, $t1)
     # live vars:
  3: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::consume($t0: m::S, $t1: m::S) {
     var $t2: u64
     var $t3: u64
     # live vars: $t0, $t1
  0: $t2 := unpack m::S($t0)
     # live vars: $t1
  1: $t3 := unpack m::S($t1)
     # live vars:
  2: return ()
}


[variant baseline]
public fun m::test($t0: m::S) {
     var $t1: m::S
     var $t2: m::S [unused]
     # live vars: $t0
  0: $t1 := copy($t0)
     # live vars: $t0, $t1
  1: m::consume($t0, $t1)
     # live vars:
  2: return ()
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {
struct S has copy {
	x: u64
}

consume(Arg0: S, Arg1: S) /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](Arg0: S)
	1: Unpack[0](S)
	2: MoveLoc[1](Arg1: S)
	3: Unpack[0](S)
	4: Pop
	5: Pop
	6: Ret
}
public test(Arg0: S) /* def_idx: 1 */ {
L1:	loc0: S
B0:
	0: CopyLoc[0](Arg0: S)
	1: StLoc[1](loc0: S)
	2: MoveLoc[0](Arg0: S)
	3: MoveLoc[1](loc0: S)
	4: Call consume(S, S)
	5: Ret
}
}
============ bytecode verification succeeded ========
