============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun m::test($t0: u16, $t1: u16): u32 {
     var $t2: u32
     var $t3: u32
     var $t4: u16
     # live vars: $t0, $t1
  0: $t4 := -($t1, $t0)
     # live vars: $t4
  1: $t3 := (u32)($t4)
     # live vars: $t3
  2: $t2 := infer($t3)
     # live vars: $t2
  3: return $t2
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun m::test($t0: u16, $t1: u16): u32 {
     var $t2: u32
     var $t3: u32
     var $t4: u16
     # live vars: $t0, $t1
  0: $t4 := -($t1, $t0)
     # live vars: $t4
  1: $t3 := (u32)($t4)
     # live vars: $t3
  2: $t2 := infer($t3)
     # live vars: $t2
  3: return $t2
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun m::test($t0: u16, $t1: u16): u32 {
     var $t2: u32
     var $t3: u32
     var $t4: u16
     # live vars: $t0, $t1
  0: $t4 := -($t1, $t0)
     # live vars: $t4
  1: $t3 := (u32)($t4)
     # live vars: $t3
  2: $t2 := move($t3)
     # live vars: $t2
  3: return $t2
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun m::test($t0: u16, $t1: u16): u32 {
     var $t2: u32
     var $t3: u32
     var $t4: u16
     # live vars: $t0, $t1
  0: $t4 := -($t1, $t0)
     # live vars: $t4
  1: $t3 := (u32)($t4)
     # live vars: $t3
  2: $t2 := move($t3)
     # live vars: $t2
  3: return $t2
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun m::test($t0: u16, $t1: u16): u32 {
     var $t2: u32 [unused]
     var $t3: u32
     var $t4: u16 [unused]
     # live vars: $t0, $t1
  0: $t0 := -($t1, $t0)
     # live vars: $t0
  1: $t3 := (u32)($t0)
     # live vars: $t3
  2: $t3 := move($t3)
     # live vars: $t3
  3: return $t3
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun m::test($t0: u16, $t1: u16): u32 {
     var $t2: u32 [unused]
     var $t3: u32
     var $t4: u16 [unused]
     # live vars: $t0, $t1
  0: $t0 := -($t1, $t0)
     # live vars: $t0
  1: $t3 := (u32)($t0)
     # live vars: $t3
  2: return $t3
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


public test(Arg0: u16, Arg1: u16): u32 /* def_idx: 0 */ {
B0:
	0: MoveLoc[1](Arg1: u16)
	1: MoveLoc[0](Arg0: u16)
	2: Sub
	3: CastU32
	4: Ret
}
}
============ bytecode verification succeeded ========
