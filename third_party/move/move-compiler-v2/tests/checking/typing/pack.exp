// ---- Model Dump
module 0x8675309::M {
    struct Nat {
        f: #0,
    }
    struct R {
        s: M::S,
        f: u64,
        n1: M::Nat<u64>,
        n2: M::Nat<M::S>,
    }
    struct S {
        f: u64,
    }
    private fun t0() {
        {
          let .f: u64 = 0;
          pack M::S(.f)
        };
        {
          let s: M::S = {
            let .f: u64 = 0;
            pack M::S(.f)
          };
          M::R{ s: _, f: _, n1: _, n2: _ } = {
            let .s: M::S = {
              let .f: u64 = 0;
              pack M::S(.f)
            };
            {
              let .n2: M::Nat<M::S> = {
                let .f: M::S = s;
                pack M::Nat<M::S>(.f)
              };
              {
                let .n1: M::Nat<u64> = {
                  let .f: u64 = 0;
                  pack M::Nat<u64>(.f)
                };
                {
                  let .f: u64 = 0;
                  pack M::R(.s, .f, .n1, .n2)
                }
              }
            }
          };
          {
            let f: u64 = 0;
            {
              let s: M::S = {
                let .f: u64 = 0;
                pack M::S(.f)
              };
              {
                let n1: M::Nat<u64> = {
                  let .f: u64 = f;
                  pack M::Nat<u64>(.f)
                };
                {
                  let n2: M::Nat<M::S> = {
                    let .f: M::S = Deref(Borrow(Immutable)(s));
                    pack M::Nat<M::S>(.f)
                  };
                  M::R{ s: _, f: _, n1: _, n2: _ } = {
                    let .s: M::S = s;
                    {
                      let .n2: M::Nat<M::S> = n2;
                      {
                        let .f: u64 = f;
                        {
                          let .n1: M::Nat<u64> = n1;
                          pack M::R(.s, .f, .n1, .n2)
                        }
                      }
                    }
                  };
                  {
                    let .f: M::Nat<M::Nat<M::S>> = {
                      let .f: M::Nat<M::S> = {
                        let .f: M::S = {
                          let .f: u64 = f;
                          pack M::S(.f)
                        };
                        pack M::Nat<M::S>(.f)
                      };
                      pack M::Nat<M::Nat<M::S>>(.f)
                    };
                    pack M::Nat<M::Nat<M::Nat<M::S>>>(.f)
                  };
                  Tuple()
                }
              }
            }
          }
        }
    }
    spec fun $t0();
} // end 0x8675309::M
