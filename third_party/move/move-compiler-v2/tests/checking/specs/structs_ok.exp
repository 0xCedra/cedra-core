// ---- Model Dump
module 0x42::M {
    struct T {
        x: u64,
    }
    struct G {
        x: #0,
        y: bool,
    }
    struct R {
        s: M::S,
    }
    struct S {
        x: u64,
        y: bool,
        z: vector<u64>,
    }
    public fun f(r: M::R): M::T {
        {
          let .x: u64 = select M::S.x(select M::R.s(r));
          pack M::T(.x)
        }
    }
    spec fun $f(r: M::R): M::T {
        {
          let .x: u64 = select M::S.x(select M::R.s(r));
          pack M::T(.x)
        }
    }
    spec fun struct_access(s: M::S): u64 {
        select M::S.x(s)
    }
    spec fun nested_struct_access(r: M::R): bool {
        select M::S.y(select M::R.s(r))
    }
    spec fun struct_pack(x: u64,y: bool,z: vector<u64>): M::S {
        {
          let .x: u64 = x;
          {
            let .y: bool = y;
            {
              let .z: vector<u64> = z;
              pack M::S(.x, .y, .z)
            }
          }
        }
    }
    spec fun struct_pack_other_order(x: u64,y: bool,z: vector<u64>): M::S {
        {
          let .z: vector<u64> = z;
          {
            let .y: bool = y;
            {
              let .x: u64 = x;
              pack M::S(.x, .y, .z)
            }
          }
        }
    }
    spec fun generic_struct_pack(x: u64,y: bool): M::G<u64> {
        {
          let .x: u64 = x;
          {
            let .y: bool = y;
            pack M::G<u64>(.x, .y)
          }
        }
    }
    spec fun generic_struct_pack_instantiated(x: u64,y: bool): M::G<u64> {
        {
          let .x: u64 = x;
          {
            let .y: bool = y;
            pack M::G<u64>(.x, .y)
          }
        }
    }
    spec fun resource_global(addr: address): M::T {
        global<M::T>(addr)
    }
    spec fun resource_global_exists(addr: address): bool {
        exists<M::T>(addr)
    }
} // end 0x42::M
