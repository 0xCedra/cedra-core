============ initial bytecode ================

[variant baseline]
fun m::f($t0: &mut u64): &mut u64 {
     var $t1: &mut u64
  0: $t1 := infer($t0)
  1: return $t1
}


[variant baseline]
fun m::g() {
     var $t0: u64
     var $t1: u64
     var $t2: &mut u64
     var $t3: &mut u64
     var $t4: &mut u64
     var $t5: &u64
     var $t6: &u64
  0: $t1 := 22
  1: $t0 := infer($t1)
  2: $t3 := borrow_local($t0)
  3: $t2 := infer($t3)
  4: $t4 := m::f($t2)
  5: $t2 := infer($t4)
  6: $t6 := borrow_local($t0)
  7: $t5 := infer($t6)
  8: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::f($t0: &mut u64): &mut u64 {
     var $t1: &mut u64
     # live vars: $t0
  0: $t1 := infer($t0)
     # live vars: $t1
  1: return $t1
}


[variant baseline]
fun m::g() {
     var $t0: u64
     var $t1: u64
     var $t2: &mut u64
     var $t3: &mut u64
     var $t4: &mut u64
     var $t5: &u64
     var $t6: &u64
     # live vars:
  0: $t1 := 22
     # live vars: $t1
  1: $t0 := infer($t1)
     # live vars: $t0
  2: $t3 := borrow_local($t0)
     # live vars: $t0, $t3
  3: $t2 := infer($t3)
     # live vars: $t0, $t2
  4: $t4 := m::f($t2)
     # live vars: $t0, $t4
  5: $t2 := infer($t4)
     # live vars: $t0
  6: $t6 := borrow_local($t0)
     # live vars: $t6
  7: $t5 := infer($t6)
     # live vars:
  8: return ()
}


Diagnostics:
warning: Unused assignment to `r`. Consider removing or prefixing with an underscore: `_r`
  ┌─ tests/ability-transform/destroy_after_call.move:8:9
  │
8 │         r = f(r);
  │         ^^^^^^^^

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::f($t0: &mut u64): &mut u64 {
     var $t1: &mut u64
     # live vars: $t0
  0: $t1 := infer($t0)
     # live vars: $t1
  1: return $t1
}


[variant baseline]
fun m::g() {
     var $t0: u64
     var $t1: u64
     var $t2: &mut u64
     var $t3: &mut u64
     var $t4: &mut u64
     var $t5: &u64
     var $t6: &u64
     # live vars:
  0: $t1 := 22
     # live vars: $t1
  1: $t0 := infer($t1)
     # live vars: $t0
  2: $t3 := borrow_local($t0)
     # live vars: $t0, $t3
  3: $t2 := infer($t3)
     # live vars: $t0, $t2
  4: $t4 := m::f($t2)
     # live vars: $t0, $t4
  5: $t2 := infer($t4)
     # live vars: $t0
  6: $t6 := borrow_local($t0)
     # live vars: $t6
  7: $t5 := infer($t6)
     # live vars:
  8: return ()
}

============ after ReferenceSafetyProcessor: ================

[variant baseline]
fun m::f($t0: &mut u64): &mut u64 {
     var $t1: &mut u64
     # live vars: $t0
     # refs: [$t0 => #0]
     # #0
     #   <no edges>
     # #root
     #   <no edges>
     #
  0: $t1 := infer($t0)
     # live vars: $t1
     # refs: [$t1 => #1]
     # #1
     #   <no edges>
     # #root
     #   <no edges>
     #
  1: return $t1
}


[variant baseline]
fun m::g() {
     var $t0: u64
     var $t1: u64
     var $t2: &mut u64
     var $t3: &mut u64
     var $t4: &mut u64
     var $t5: &u64
     var $t6: &u64
     # live vars:
     # refs: []
     #
  0: $t1 := 22
     # live vars: $t1
     # refs: []
     #
  1: $t0 := infer($t1)
     # live vars: $t0
     # refs: []
     #
  2: $t3 := borrow_local($t0)
     # live vars: $t0, $t3
     # refs: [$t3 => #3]
     # #3
     #   <no edges>
     # #root
     #   => (mut) #3 via [local `v`] at line 7
     #
  3: $t2 := infer($t3)
     # live vars: $t0, $t2
     # refs: [$t2 => #2]
     # #2
     #   <no edges>
     # #root
     #   => (mut) #2 via [local `v`] at line 7
     #
  4: $t4 := m::f($t2)
     # live vars: $t0, $t4
     # refs: [$t4 => #4]
     # #4
     #   <no edges>
     # #root
     #   -> (mut) #4 via [local `v`] at line 8
     #
  5: $t2 := infer($t4)
     # live vars: $t0
     # refs: []
     #
  6: $t6 := borrow_local($t0)
     # live vars: $t6
     # refs: [$t6 => #6]
     # #6
     #   <no edges>
     # #root
     #   => #6 via [local `v`] at line 9
     #
  7: $t5 := infer($t6)
     # live vars:
     # refs: []
     #
  8: return ()
}

============ after AbortAnalysisProcessor: ================

[variant baseline]
fun m::f($t0: &mut u64): &mut u64 {
     var $t1: &mut u64
     # abort state: {returns}
     # live vars: $t0
     # refs: [$t0 => #0]
     # #0
     #   <no edges>
     # #root
     #   <no edges>
     #
  0: $t1 := infer($t0)
     # abort state: {returns}
     # live vars: $t1
     # refs: [$t1 => #1]
     # #1
     #   <no edges>
     # #root
     #   <no edges>
     #
  1: return $t1
}


[variant baseline]
fun m::g() {
     var $t0: u64
     var $t1: u64
     var $t2: &mut u64
     var $t3: &mut u64
     var $t4: &mut u64
     var $t5: &u64
     var $t6: &u64
     # abort state: {returns,aborts}
     # live vars:
     # refs: []
     #
  0: $t1 := 22
     # abort state: {returns,aborts}
     # live vars: $t1
     # refs: []
     #
  1: $t0 := infer($t1)
     # abort state: {returns,aborts}
     # live vars: $t0
     # refs: []
     #
  2: $t3 := borrow_local($t0)
     # abort state: {returns,aborts}
     # live vars: $t0, $t3
     # refs: [$t3 => #3]
     # #3
     #   <no edges>
     # #root
     #   => (mut) #3 via [local `v`] at line 7
     #
  3: $t2 := infer($t3)
     # abort state: {returns,aborts}
     # live vars: $t0, $t2
     # refs: [$t2 => #2]
     # #2
     #   <no edges>
     # #root
     #   => (mut) #2 via [local `v`] at line 7
     #
  4: $t4 := m::f($t2)
     # abort state: {returns}
     # live vars: $t0, $t4
     # refs: [$t4 => #4]
     # #4
     #   <no edges>
     # #root
     #   -> (mut) #4 via [local `v`] at line 8
     #
  5: $t2 := infer($t4)
     # abort state: {returns}
     # live vars: $t0
     # refs: []
     #
  6: $t6 := borrow_local($t0)
     # abort state: {returns}
     # live vars: $t6
     # refs: [$t6 => #6]
     # #6
     #   <no edges>
     # #root
     #   => #6 via [local `v`] at line 9
     #
  7: $t5 := infer($t6)
     # abort state: {returns}
     # live vars:
     # refs: []
     #
  8: return ()
}

============ after AbilityProcessor: ================

[variant baseline]
fun m::f($t0: &mut u64): &mut u64 {
     var $t1: &mut u64
  0: $t1 := move($t0)
  1: return $t1
}


[variant baseline]
fun m::g() {
     var $t0: u64
     var $t1: u64
     var $t2: &mut u64
     var $t3: &mut u64
     var $t4: &mut u64
     var $t5: &u64
     var $t6: &u64
  0: $t1 := 22
  1: $t0 := move($t1)
  2: $t3 := borrow_local($t0)
  3: $t2 := move($t3)
  4: $t4 := m::f($t2)
  5: $t2 := move($t4)
  6: drop($t2)
  7: $t6 := borrow_local($t0)
  8: $t5 := move($t6)
  9: drop($t5)
 10: return ()
}
