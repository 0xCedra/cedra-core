============ initial bytecode ================

[variant baseline]
fun m::drop_after_loop() {
     var $t0: u64
     var $t1: u64
     var $t2: &mut u64
     var $t3: &mut u64
     var $t4: bool
     var $t5: bool
     var $t6: u64
     var $t7: bool
     var $t8: bool
     var $t9: u64
     var $t10: u64
  0: $t1 := 1
  1: $t0 := infer($t1)
  2: $t3 := borrow_local($t0)
  3: $t2 := infer($t3)
  4: $t5 := true
  5: $t4 := infer($t5)
  6: label L0
  7: if ($t4) goto 8 else goto 14
  8: label L2
  9: $t6 := 2
 10: write_ref($t2, $t6)
 11: $t7 := false
 12: $t4 := infer($t7)
 13: goto 16
 14: label L3
 15: goto 18
 16: label L4
 17: goto 6
 18: label L1
 19: $t9 := 2
 20: $t8 := ==($t0, $t9)
 21: if ($t8) goto 22 else goto 24
 22: label L5
 23: goto 27
 24: label L6
 25: $t10 := 0
 26: abort($t10)
 27: label L7
 28: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::drop_after_loop() {
     var $t0: u64
     var $t1: u64
     var $t2: &mut u64
     var $t3: &mut u64
     var $t4: bool
     var $t5: bool
     var $t6: u64
     var $t7: bool
     var $t8: bool
     var $t9: u64
     var $t10: u64
     # live vars:
  0: $t1 := 1
     # live vars: $t1
  1: $t0 := infer($t1)
     # live vars: $t0
  2: $t3 := borrow_local($t0)
     # live vars: $t0, $t3
  3: $t2 := infer($t3)
     # live vars: $t0, $t2
  4: $t5 := true
     # live vars: $t0, $t2, $t5
  5: $t4 := infer($t5)
     # live vars: $t0, $t2, $t4
  6: label L0
     # live vars: $t0, $t2, $t4
  7: if ($t4) goto 8 else goto 14
     # live vars: $t0, $t2
  8: label L2
     # live vars: $t0, $t2
  9: $t6 := 2
     # live vars: $t0, $t2, $t6
 10: write_ref($t2, $t6)
     # live vars: $t0, $t2
 11: $t7 := false
     # live vars: $t0, $t2, $t7
 12: $t4 := infer($t7)
     # live vars: $t0, $t2, $t4
 13: goto 16
     # live vars: $t0, $t2
 14: label L3
     # live vars: $t0
 15: goto 18
     # live vars: $t0, $t2, $t4
 16: label L4
     # live vars: $t0, $t2, $t4
 17: goto 6
     # live vars: $t0
 18: label L1
     # live vars: $t0
 19: $t9 := 2
     # live vars: $t0, $t9
 20: $t8 := ==($t0, $t9)
     # live vars: $t8
 21: if ($t8) goto 22 else goto 24
     # live vars:
 22: label L5
     # live vars:
 23: goto 27
     # live vars:
 24: label L6
     # live vars:
 25: $t10 := 0
     # live vars: $t10
 26: abort($t10)
     # live vars:
 27: label L7
     # live vars:
 28: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::drop_after_loop() {
     var $t0: u64
     var $t1: u64
     var $t2: &mut u64
     var $t3: &mut u64
     var $t4: bool
     var $t5: bool
     var $t6: u64
     var $t7: bool
     var $t8: bool
     var $t9: u64
     var $t10: u64
     # live vars:
  0: $t1 := 1
     # live vars: $t1
  1: $t0 := infer($t1)
     # live vars: $t0
  2: $t3 := borrow_local($t0)
     # live vars: $t0, $t3
  3: $t2 := infer($t3)
     # live vars: $t0, $t2
  4: $t5 := true
     # live vars: $t0, $t2, $t5
  5: $t4 := infer($t5)
     # live vars: $t0, $t2, $t4
  6: label L0
     # live vars: $t0, $t2, $t4
  7: if ($t4) goto 8 else goto 14
     # live vars: $t0, $t2
  8: label L2
     # live vars: $t0, $t2
  9: $t6 := 2
     # live vars: $t0, $t2, $t6
 10: write_ref($t2, $t6)
     # live vars: $t0, $t2
 11: $t7 := false
     # live vars: $t0, $t2, $t7
 12: $t4 := infer($t7)
     # live vars: $t0, $t2, $t4
 13: goto 16
     # live vars: $t0, $t2
 14: label L3
     # live vars: $t0
 15: goto 18
     # live vars: $t0, $t2, $t4
 16: label L4
     # live vars: $t0, $t2, $t4
 17: goto 6
     # live vars: $t0
 18: label L1
     # live vars: $t0
 19: $t9 := 2
     # live vars: $t0, $t9
 20: $t8 := ==($t0, $t9)
     # live vars: $t8
 21: if ($t8) goto 22 else goto 24
     # live vars:
 22: label L5
     # live vars:
 23: goto 27
     # live vars:
 24: label L6
     # live vars:
 25: $t10 := 0
     # live vars: $t10
 26: abort($t10)
     # live vars:
 27: label L7
     # live vars:
 28: return ()
}

============ after ReferenceSafetyProcessor: ================

[variant baseline]
fun m::drop_after_loop() {
     var $t0: u64
     var $t1: u64
     var $t2: &mut u64
     var $t3: &mut u64
     var $t4: bool
     var $t5: bool
     var $t6: u64
     var $t7: bool
     var $t8: bool
     var $t9: u64
     var $t10: u64
     # live vars:
     # refs: []
     #
  0: $t1 := 1
     # live vars: $t1
     # refs: []
     #
  1: $t0 := infer($t1)
     # live vars: $t0
     # refs: []
     #
  2: $t3 := borrow_local($t0)
     # live vars: $t0, $t3
     # refs: [$t3 => #3]
     # #3
     #   <no edges>
     # #root
     #   => (mut) #3 via [local `l`] at line 4
     #
  3: $t2 := infer($t3)
     # live vars: $t0, $t2
     # refs: [$t2 => #2]
     # #2
     #   <no edges>
     # #root
     #   => (mut) #2 via [local `l`] at line 4
     #
  4: $t5 := true
     # live vars: $t0, $t2, $t5
     # refs: [$t2 => #2]
     # #2
     #   <no edges>
     # #root
     #   => (mut) #2 via [local `l`] at line 4
     #
  5: $t4 := infer($t5)
     # live vars: $t0, $t2, $t4
     # refs: [$t2 => #2]
     # #2
     #   <no edges>
     # #root
     #   => (mut) #2 via [local `l`] at line 4
     #
  6: label L0
     # live vars: $t0, $t2, $t4
     # refs: [$t2 => #2]
     # #2
     #   <no edges>
     # #root
     #   => (mut) #2 via [local `l`] at line 4
     #
  7: if ($t4) goto 8 else goto 14
     # live vars: $t0, $t2
     # refs: [$t2 => #2]
     # #2
     #   <no edges>
     # #root
     #   => (mut) #2 via [local `l`] at line 4
     #
  8: label L2
     # live vars: $t0, $t2
     # refs: [$t2 => #2]
     # #2
     #   <no edges>
     # #root
     #   => (mut) #2 via [local `l`] at line 4
     #
  9: $t6 := 2
     # live vars: $t0, $t2, $t6
     # refs: [$t2 => #2]
     # #2
     #   <no edges>
     # #root
     #   => (mut) #2 via [local `l`] at line 4
     #
 10: write_ref($t2, $t6)
     # live vars: $t0, $t2
     # refs: [$t2 => #2]
     # #2
     #   <no edges>
     # #root
     #   => (mut) #2 via [local `l`] at line 4
     #
 11: $t7 := false
     # live vars: $t0, $t2, $t7
     # refs: [$t2 => #2]
     # #2
     #   <no edges>
     # #root
     #   => (mut) #2 via [local `l`] at line 4
     #
 12: $t4 := infer($t7)
     # live vars: $t0, $t2, $t4
     # refs: [$t2 => #2]
     # #2
     #   <no edges>
     # #root
     #   => (mut) #2 via [local `l`] at line 4
     #
 13: goto 16
     # live vars: $t0, $t2
     # refs: [$t2 => #2]
     # #2
     #   <no edges>
     # #root
     #   => (mut) #2 via [local `l`] at line 4
     #
 14: label L3
     # live vars: $t0
     # refs: []
     #
 15: goto 18
     # live vars: $t0, $t2, $t4
     # refs: [$t2 => #2]
     # #2
     #   <no edges>
     # #root
     #   => (mut) #2 via [local `l`] at line 4
     #
 16: label L4
     # live vars: $t0, $t2, $t4
     # refs: [$t2 => #2]
     # #2
     #   <no edges>
     # #root
     #   => (mut) #2 via [local `l`] at line 4
     #
 17: goto 6
     # live vars: $t0
     # refs: []
     #
 18: label L1
     # live vars: $t0
     # refs: []
     #
 19: $t9 := 2
     # live vars: $t0, $t9
     # refs: []
     #
 20: $t8 := ==($t0, $t9)
     # live vars: $t8
     # refs: []
     #
 21: if ($t8) goto 22 else goto 24
     # live vars:
     # refs: []
     #
 22: label L5
     # live vars:
     # refs: []
     #
 23: goto 27
     # live vars:
     # refs: []
     #
 24: label L6
     # live vars:
     # refs: []
     #
 25: $t10 := 0
     # live vars: $t10
     # refs: []
     #
 26: abort($t10)
     # live vars:
     # refs: []
     #
 27: label L7
     # live vars:
     # refs: []
     #
 28: return ()
}

============ after AbortAnalysisProcessor: ================

[variant baseline]
fun m::drop_after_loop() {
     var $t0: u64
     var $t1: u64
     var $t2: &mut u64
     var $t3: &mut u64
     var $t4: bool
     var $t5: bool
     var $t6: u64
     var $t7: bool
     var $t8: bool
     var $t9: u64
     var $t10: u64
     # abort state: {returns,aborts}
     # live vars:
     # refs: []
     #
  0: $t1 := 1
     # abort state: {returns,aborts}
     # live vars: $t1
     # refs: []
     #
  1: $t0 := infer($t1)
     # abort state: {returns,aborts}
     # live vars: $t0
     # refs: []
     #
  2: $t3 := borrow_local($t0)
     # abort state: {returns,aborts}
     # live vars: $t0, $t3
     # refs: [$t3 => #3]
     # #3
     #   <no edges>
     # #root
     #   => (mut) #3 via [local `l`] at line 4
     #
  3: $t2 := infer($t3)
     # abort state: {returns,aborts}
     # live vars: $t0, $t2
     # refs: [$t2 => #2]
     # #2
     #   <no edges>
     # #root
     #   => (mut) #2 via [local `l`] at line 4
     #
  4: $t5 := true
     # abort state: {returns,aborts}
     # live vars: $t0, $t2, $t5
     # refs: [$t2 => #2]
     # #2
     #   <no edges>
     # #root
     #   => (mut) #2 via [local `l`] at line 4
     #
  5: $t4 := infer($t5)
     # abort state: {returns,aborts}
     # live vars: $t0, $t2, $t4
     # refs: [$t2 => #2]
     # #2
     #   <no edges>
     # #root
     #   => (mut) #2 via [local `l`] at line 4
     #
  6: label L0
     # abort state: {returns,aborts}
     # live vars: $t0, $t2, $t4
     # refs: [$t2 => #2]
     # #2
     #   <no edges>
     # #root
     #   => (mut) #2 via [local `l`] at line 4
     #
  7: if ($t4) goto 8 else goto 14
     # abort state: {returns,aborts}
     # live vars: $t0, $t2
     # refs: [$t2 => #2]
     # #2
     #   <no edges>
     # #root
     #   => (mut) #2 via [local `l`] at line 4
     #
  8: label L2
     # abort state: {returns,aborts}
     # live vars: $t0, $t2
     # refs: [$t2 => #2]
     # #2
     #   <no edges>
     # #root
     #   => (mut) #2 via [local `l`] at line 4
     #
  9: $t6 := 2
     # abort state: {returns,aborts}
     # live vars: $t0, $t2, $t6
     # refs: [$t2 => #2]
     # #2
     #   <no edges>
     # #root
     #   => (mut) #2 via [local `l`] at line 4
     #
 10: write_ref($t2, $t6)
     # abort state: {returns,aborts}
     # live vars: $t0, $t2
     # refs: [$t2 => #2]
     # #2
     #   <no edges>
     # #root
     #   => (mut) #2 via [local `l`] at line 4
     #
 11: $t7 := false
     # abort state: {returns,aborts}
     # live vars: $t0, $t2, $t7
     # refs: [$t2 => #2]
     # #2
     #   <no edges>
     # #root
     #   => (mut) #2 via [local `l`] at line 4
     #
 12: $t4 := infer($t7)
     # abort state: {returns,aborts}
     # live vars: $t0, $t2, $t4
     # refs: [$t2 => #2]
     # #2
     #   <no edges>
     # #root
     #   => (mut) #2 via [local `l`] at line 4
     #
 13: goto 16
     # abort state: {returns,aborts}
     # live vars: $t0, $t2
     # refs: [$t2 => #2]
     # #2
     #   <no edges>
     # #root
     #   => (mut) #2 via [local `l`] at line 4
     #
 14: label L3
     # abort state: {returns,aborts}
     # live vars: $t0
     # refs: []
     #
 15: goto 18
     # abort state: {returns,aborts}
     # live vars: $t0, $t2, $t4
     # refs: [$t2 => #2]
     # #2
     #   <no edges>
     # #root
     #   => (mut) #2 via [local `l`] at line 4
     #
 16: label L4
     # abort state: {returns,aborts}
     # live vars: $t0, $t2, $t4
     # refs: [$t2 => #2]
     # #2
     #   <no edges>
     # #root
     #   => (mut) #2 via [local `l`] at line 4
     #
 17: goto 6
     # abort state: {returns,aborts}
     # live vars: $t0
     # refs: []
     #
 18: label L1
     # abort state: {returns,aborts}
     # live vars: $t0
     # refs: []
     #
 19: $t9 := 2
     # abort state: {returns,aborts}
     # live vars: $t0, $t9
     # refs: []
     #
 20: $t8 := ==($t0, $t9)
     # abort state: {returns,aborts}
     # live vars: $t8
     # refs: []
     #
 21: if ($t8) goto 22 else goto 24
     # abort state: {returns}
     # live vars:
     # refs: []
     #
 22: label L5
     # abort state: {returns}
     # live vars:
     # refs: []
     #
 23: goto 27
     # abort state: {aborts}
     # live vars:
     # refs: []
     #
 24: label L6
     # abort state: {aborts}
     # live vars:
     # refs: []
     #
 25: $t10 := 0
     # abort state: {aborts}
     # live vars: $t10
     # refs: []
     #
 26: abort($t10)
     # abort state: {returns}
     # live vars:
     # refs: []
     #
 27: label L7
     # abort state: {returns}
     # live vars:
     # refs: []
     #
 28: return ()
}

============ after AbilityProcessor: ================

[variant baseline]
fun m::drop_after_loop() {
     var $t0: u64
     var $t1: u64
     var $t2: &mut u64
     var $t3: &mut u64
     var $t4: bool
     var $t5: bool
     var $t6: u64
     var $t7: bool
     var $t8: bool
     var $t9: u64
     var $t10: u64
  0: $t1 := 1
  1: $t0 := move($t1)
  2: $t3 := borrow_local($t0)
  3: $t2 := move($t3)
  4: $t5 := true
  5: $t4 := move($t5)
  6: label L0
  7: if ($t4) goto 8 else goto 14
  8: label L2
  9: $t6 := 2
 10: write_ref($t2, $t6)
 11: $t7 := false
 12: $t4 := move($t7)
 13: goto 17
 14: label L3
 15: drop($t2)
 16: goto 19
 17: label L4
 18: goto 6
 19: label L1
 20: $t9 := 2
 21: $t8 := ==($t0, $t9)
 22: if ($t8) goto 23 else goto 25
 23: label L5
 24: goto 28
 25: label L6
 26: $t10 := 0
 27: abort($t10)
 28: label L7
 29: return ()
}
