============ initial bytecode ================

[variant baseline]
public fun m::singleton<#0>($t0: #0): vector<#0> {
     var $t1: vector<#0>
     var $t2: vector<#0>
     var $t3: vector<#0>
     var $t4: &mut vector<#0>
  0: $t3 := vector($t0)
  1: $t2 := infer($t3)
  2: $t4 := borrow_local($t2)
  3: m::g<#0>($t4)
  4: $t1 := infer($t2)
  5: return $t1
}


[variant baseline]
fun m::g<#0>($t0: &mut vector<#0>) {
  0: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun m::singleton<#0>($t0: #0): vector<#0> {
     var $t1: vector<#0>
     var $t2: vector<#0>
     var $t3: vector<#0>
     var $t4: &mut vector<#0>
     # live vars: $t0
  0: $t3 := vector($t0)
     # live vars: $t3
  1: $t2 := infer($t3)
     # live vars: $t2
  2: $t4 := borrow_local($t2)
     # live vars: $t2, $t4
  3: m::g<#0>($t4)
     # live vars: $t2
  4: $t1 := infer($t2)
     # live vars: $t1
  5: return $t1
}


[variant baseline]
fun m::g<#0>($t0: &mut vector<#0>) {
     # live vars: $t0
  0: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun m::singleton<#0>($t0: #0): vector<#0> {
     var $t1: vector<#0>
     var $t2: vector<#0>
     var $t3: vector<#0>
     var $t4: &mut vector<#0>
     # live vars: $t0
  0: $t3 := vector($t0)
     # live vars: $t3
  1: $t2 := infer($t3)
     # live vars: $t2
  2: $t4 := borrow_local($t2)
     # live vars: $t2, $t4
  3: m::g<#0>($t4)
     # live vars: $t2
  4: $t1 := infer($t2)
     # live vars: $t1
  5: return $t1
}


[variant baseline]
fun m::g<#0>($t0: &mut vector<#0>) {
     # live vars: $t0
  0: return ()
}

============ after ReferenceSafetyProcessor: ================

[variant baseline]
public fun m::singleton<#0>($t0: #0): vector<#0> {
     var $t1: vector<#0>
     var $t2: vector<#0>
     var $t3: vector<#0>
     var $t4: &mut vector<#0>
     # live vars: $t0
     # refs: []
     #
  0: $t3 := vector($t0)
     # live vars: $t3
     # refs: []
     #
  1: $t2 := infer($t3)
     # live vars: $t2
     # refs: []
     #
  2: $t4 := borrow_local($t2)
     # live vars: $t2, $t4
     # refs: [$t4 => #4]
     # #4
     #   <no edges>
     # #root
     #   => (mut) #4 via [local `v`] at line 6
     #
  3: m::g<#0>($t4)
     # live vars: $t2
     # refs: []
     #
  4: $t1 := infer($t2)
     # live vars: $t1
     # refs: []
     #
  5: return $t1
}


[variant baseline]
fun m::g<#0>($t0: &mut vector<#0>) {
     # live vars: $t0
     # refs: [$t0 => #0]
     # #0
     #   <no edges>
     # #root
     #   <no edges>
     #
  0: return ()
}

============ after AbortAnalysisProcessor: ================

[variant baseline]
public fun m::singleton<#0>($t0: #0): vector<#0> {
     var $t1: vector<#0>
     var $t2: vector<#0>
     var $t3: vector<#0>
     var $t4: &mut vector<#0>
     # abort state: {returns,aborts}
     # live vars: $t0
     # refs: []
     #
  0: $t3 := vector($t0)
     # abort state: {returns,aborts}
     # live vars: $t3
     # refs: []
     #
  1: $t2 := infer($t3)
     # abort state: {returns,aborts}
     # live vars: $t2
     # refs: []
     #
  2: $t4 := borrow_local($t2)
     # abort state: {returns,aborts}
     # live vars: $t2, $t4
     # refs: [$t4 => #4]
     # #4
     #   <no edges>
     # #root
     #   => (mut) #4 via [local `v`] at line 6
     #
  3: m::g<#0>($t4)
     # abort state: {returns}
     # live vars: $t2
     # refs: []
     #
  4: $t1 := infer($t2)
     # abort state: {returns}
     # live vars: $t1
     # refs: []
     #
  5: return $t1
}


[variant baseline]
fun m::g<#0>($t0: &mut vector<#0>) {
     # abort state: {returns}
     # live vars: $t0
     # refs: [$t0 => #0]
     # #0
     #   <no edges>
     # #root
     #   <no edges>
     #
  0: return ()
}

============ after AbilityProcessor: ================

[variant baseline]
public fun m::singleton<#0>($t0: #0): vector<#0> {
     var $t1: vector<#0>
     var $t2: vector<#0>
     var $t3: vector<#0>
     var $t4: &mut vector<#0>
  0: $t3 := vector($t0)
  1: $t2 := move($t3)
  2: $t4 := borrow_local($t2)
  3: m::g<#0>($t4)
  4: $t1 := move($t2)
  5: return $t1
}


[variant baseline]
fun m::g<#0>($t0: &mut vector<#0>) {
  0: drop($t0)
  1: return ()
}
