[
  {
    "type": "0x1::code::PackageRegistry",
    "data": {
      "packages": [
        {
          "abis": [],
          "build_info": "---\npackage_name: MoveStdlib\naddress_alias_instantiation:\n  std: \"0000000000000000000000000000000000000000000000000000000000000001\"\nsource_digest: BE764EF515214822832448071E6FD6E36624D60F1DF9162928C0EA55638C262D\nbuild_flags:\n  dev_mode: false\n  test_mode: false\n  generate_docs: false\n  generate_abis: true\n  install_dir: ~\n  force_recompilation: false\n  additional_named_addresses: {}\n  architecture: ~\n  fetch_deps_only: false\n",
          "error_map": "0x0d010000000000000010494e56414c49445f415247554d454e54312043616c6c65722073706563696669656420616e20696e76616c696420617267756d656e742028687474703a203430302902000000000000000c4f55545f4f465f52414e47454020416e20696e707574206f7220726573756c74206f66206120636f6d7075746174696f6e206973206f7574206f662072616e67652028687474703a203430302903000000000000000d494e56414c49445f53544154454e205468652073797374656d206973206e6f7420696e206120737461746520776865726520746865206f7065726174696f6e2063616e20626520706572666f726d65642028687474703a203430302904000000000000000f554e41555448454e54494341544544552052657175657374206e6f742061757468656e746963617465642064756520746f206d697373696e672c20696e76616c69642c206f722065787069726564206175746820746f6b656e2028687474703a20343031290500000000000000115045524d495353494f4e5f44454e4945443720636c69656e7420646f6573206e6f7420686176652073756666696369656e74207065726d697373696f6e2028687474703a20343033290600000000000000094e4f545f464f554e442e204120737065636966696564207265736f75726365206973206e6f7420666f756e642028687474703a203430342907000000000000000741424f525445444520436f6e63757272656e637920636f6e666c6963742c207375636820617320726561642d6d6f646966792d777269746520636f6e666c6963742028687474703a203430392908000000000000000e414c52454144595f4558495354534620546865207265736f757263652074686174206120636c69656e7420747269656420746f2063726561746520616c7265616479206578697374732028687474703a20343039290900000000000000125245534f555243455f4558484155535445442f204f7574206f6620676173206f72206f7468657220666f726d73206f662071756f74612028687474703a20343239290a000000000000000943414e43454c4c45442c20526571756573742063616e63656c6c65642062792074686520636c69656e742028687474703a20343939290b0000000000000008494e5445524e414c1b20496e7465726e616c206572726f722028687474703a20353030290c000000000000000f4e4f545f494d504c454d454e544544242046656174757265206e6f7420696d706c656d656e7465642028687474703a20353031290d000000000000000b554e415641494c41424c455f2054686520736572766963652069732063757272656e746c7920756e617661696c61626c652e20496e646963617465732074686174206120726574727920636f756c6420736f6c7665207468652069737375652028687474703a20353033290600000000000000000000000000000000000000000000000000000000000000010361636c0200000000000000000845434f4e5441494e26205468652041434c20616c726561647920636f6e7461696e732074686520616464726573732e01000000000000000c454e4f545f434f4e5441494e26205468652041434c20646f6573206e6f7420636f6e7461696e2074686520616464726573732e0000000000000000000000000000000000000000000000000000000000000001066f7074696f6e0200000400000000000e454f5054494f4e5f49535f534554742054686520604f7074696f6e6020697320696e20616e20696e76616c696420737461746520666f7220746865206f7065726174696f6e20617474656d707465642e0a2054686520604f7074696f6e602069732060536f6d6560207768696c652069742073686f756c6420626520604e6f6e65602e01000400000000000f454f5054494f4e5f4e4f545f534554742054686520604f7074696f6e6020697320696e20616e20696e76616c696420737461746520666f7220746865206f7065726174696f6e20617474656d707465642e0a2054686520604f7074696f6e6020697320604e6f6e6560207768696c652069742073686f756c642062652060536f6d65602e000000000000000000000000000000000000000000000000000000000000000106737472696e670201000000000000000d45494e56414c49445f555446381a20416e20696e76616c6964205554463820656e636f64696e672e02000000000000000e45494e56414c49445f494e4445581420496e646578206f7574206f662072616e67652e000000000000000000000000000000000000000000000000000000000000000106766563746f720100000200000000001445494e4445585f4f55545f4f465f424f554e44532b2054686520696e64657820696e746f2074686520766563746f72206973206f7574206f6620626f756e647300000000000000000000000000000000000000000000000000000000000000010a6269745f766563746f720200000200000000000645494e44455824205468652070726f766964656420696e646578206973206f7574206f6620626f756e6473010002000000000007454c454e4754482920416e20696e76616c6964206c656e677468206f6620626974766563746f722077617320676976656e00000000000000000000000000000000000000000000000000000000000000010d66697865645f706f696e7433320501000100000000000c4544454e4f4d494e41544f5222205468652064656e6f6d696e61746f722070726f766964656420776173207a65726f020002000000000009454449564953494f4e3c205468652071756f7469656e742076616c756520776f756c6420626520746f6f206c6172676520746f2062652068656c6420696e206120607536346003000200000000000f454d554c5449504c49434154494f4e3e20546865206d756c7469706c6965642076616c756520776f756c6420626520746f6f206c6172676520746f2062652068656c6420696e2061206075363460040001000000000011454449564953494f4e5f42595f5a45524f232041206469766973696f6e206279207a65726f2077617320656e636f756e746572656405000200000000001345524154494f5f4f55545f4f465f52414e4745502054686520636f6d707574656420726174696f207768656e20636f6e76657274696e6720746f206120604669786564506f696e7433326020776f756c6420626520756e726570726573656e7461626c65",
          "manifest": "[package]\nname = \"MoveStdlib\"\nversion = \"1.5.0\"\n\n[addresses]\nstd = \"0x1\"\n\n[dev-addresses]\nstd = \"0x1\"\n",
          "modules": [
            {
              "name": "bcs",
              "source": "/// Utility for converting a Move value to its binary representation in BCS (Binary Canonical\n/// Serialization). BCS is the binary encoding for Move resources and other non-module values\n/// published on-chain. See https://github.com/aptos/bcs#binary-canonical-serialization-bcs for more\n/// details on BCS.\nmodule std::bcs {\n    /// Return the binary representation of `v` in BCS (Binary Canonical Serialization) format\n    native public fun to_bytes<MoveValue>(v: &MoveValue): vector<u8>;\n\n    // ==============================\n    // Module Specification\n    spec module {} // switch to module documentation context\n\n    spec module {\n        /// Native function which is defined in the prover's prelude.\n        native fun serialize<MoveValue>(v: &MoveValue): vector<u8>;\n    }\n}\n",
              "source_map": "0x1c4e7a82ca7c1427093cfb1adf260861aec85b4693d3154140e48542f3c3200e410100004401000001000000000000000000000000000000000000000000000000000000000000000103626373000100001c4e7a82ca7c1427093cfb1adf260861aec85b4693d3154140e48542f3c3200ebc010000c401000001094d6f766556616c75651c4e7a82ca7c1427093cfb1adf260861aec85b4693d3154140e48542f3c3200ec5010000ce0100000101761c4e7a82ca7c1427093cfb1adf260861aec85b4693d3154140e48542f3c3200ed0010000d10100000000000100"
            },
            {
              "name": "fixed_point32",
              "source": "/// Defines a fixed-point numeric type with a 32-bit integer part and\n/// a 32-bit fractional part.\n\nmodule std::fixed_point32 {\n\n    /// Define a fixed-point numeric type with 32 fractional bits.\n    /// This is just a u64 integer but it is wrapped in a struct to\n    /// make a unique type. This is a binary representation, so decimal\n    /// values may not be exactly representable, but it provides more\n    /// than 9 decimal digits of precision both before and after the\n    /// decimal point (18 digits total). For comparison, double precision\n    /// floating-point has less than 16 decimal digits of precision, so\n    /// be careful about using floating-point to convert these values to\n    /// decimal.\n    struct FixedPoint32 has copy, drop, store { value: u64 }\n\n    ///> TODO: This is a basic constant and should be provided somewhere centrally in the framework.\n    const MAX_U64: u128 = 18446744073709551615;\n\n    /// The denominator provided was zero\n    const EDENOMINATOR: u64 = 0x10001;\n    /// The quotient value would be too large to be held in a `u64`\n    const EDIVISION: u64 = 0x20002;\n    /// The multiplied value would be too large to be held in a `u64`\n    const EMULTIPLICATION: u64 = 0x20003;\n    /// A division by zero was encountered\n    const EDIVISION_BY_ZERO: u64 = 0x10004;\n    /// The computed ratio when converting to a `FixedPoint32` would be unrepresentable\n    const ERATIO_OUT_OF_RANGE: u64 = 0x20005;\n\n    /// Multiply a u64 integer by a fixed-point number, truncating any\n    /// fractional part of the product. This will abort if the product\n    /// overflows.\n    public fun multiply_u64(val: u64, multiplier: FixedPoint32): u64 {\n        // The product of two 64 bit values has 128 bits, so perform the\n        // multiplication with u128 types and keep the full 128 bit product\n        // to avoid losing accuracy.\n        let unscaled_product = (val as u128) * (multiplier.value as u128);\n        // The unscaled product has 32 fractional bits (from the multiplier)\n        // so rescale it by shifting away the low bits.\n        let product = unscaled_product >> 32;\n        // Check whether the value is too large.\n        assert!(product <= MAX_U64, EMULTIPLICATION);\n        (product as u64)\n    }\n    spec multiply_u64 {\n        pragma opaque;\n        include MultiplyAbortsIf;\n        ensures result == spec_multiply_u64(val, multiplier);\n    }\n    spec schema MultiplyAbortsIf {\n        val: num;\n        multiplier: FixedPoint32;\n        aborts_if spec_multiply_u64(val, multiplier) > MAX_U64 with EMULTIPLICATION;\n    }\n    spec fun spec_multiply_u64(val: num, multiplier: FixedPoint32): num {\n        (val * multiplier.value) >> 32\n    }\n\n    /// Divide a u64 integer by a fixed-point number, truncating any\n    /// fractional part of the quotient. This will abort if the divisor\n    /// is zero or if the quotient overflows.\n    public fun divide_u64(val: u64, divisor: FixedPoint32): u64 {\n        // Check for division by zero.\n        assert!(divisor.value != 0, EDIVISION_BY_ZERO);\n        // First convert to 128 bits and then shift left to\n        // add 32 fractional zero bits to the dividend.\n        let scaled_value = (val as u128) << 32;\n        let quotient = scaled_value / (divisor.value as u128);\n        // Check whether the value is too large.\n        assert!(quotient <= MAX_U64, EDIVISION);\n        // the value may be too large, which will cause the cast to fail\n        // with an arithmetic error.\n        (quotient as u64)\n    }\n    spec divide_u64 {\n        pragma opaque;\n        include DivideAbortsIf;\n        ensures result == spec_divide_u64(val, divisor);\n    }\n    spec schema DivideAbortsIf {\n        val: num;\n        divisor: FixedPoint32;\n        aborts_if divisor.value == 0 with EDIVISION_BY_ZERO;\n        aborts_if spec_divide_u64(val, divisor) > MAX_U64 with EDIVISION;\n    }\n    spec fun spec_divide_u64(val: num, divisor: FixedPoint32): num {\n        (val << 32) / divisor.value\n    }\n\n    /// Create a fixed-point value from a rational number specified by its\n    /// numerator and denominator. Calling this function should be preferred\n    /// for using `Self::create_from_raw_value` which is also available.\n    /// This will abort if the denominator is zero. It will also\n    /// abort if the numerator is nonzero and the ratio is not in the range\n    /// 2^-32 .. 2^32-1. When specifying decimal fractions, be careful about\n    /// rounding errors: if you round to display N digits after the decimal\n    /// point, you can use a denominator of 10^N to avoid numbers where the\n    /// very small imprecision in the binary representation could change the\n    /// rounding, e.g., 0.0125 will round down to 0.012 instead of up to 0.013.\n    public fun create_from_rational(numerator: u64, denominator: u64): FixedPoint32 {\n        // If the denominator is zero, this will abort.\n        // Scale the numerator to have 64 fractional bits and the denominator\n        // to have 32 fractional bits, so that the quotient will have 32\n        // fractional bits.\n        let scaled_numerator = (numerator as u128) << 64;\n        let scaled_denominator = (denominator as u128) << 32;\n        assert!(scaled_denominator != 0, EDENOMINATOR);\n        let quotient = scaled_numerator / scaled_denominator;\n        assert!(quotient != 0 || numerator == 0, ERATIO_OUT_OF_RANGE);\n        // Return the quotient as a fixed-point number. We first need to check whether the cast\n        // can succeed.\n        assert!(quotient <= MAX_U64, ERATIO_OUT_OF_RANGE);\n        FixedPoint32 { value: (quotient as u64) }\n    }\n    spec create_from_rational {\n        pragma opaque;\n        include CreateFromRationalAbortsIf;\n        ensures result == spec_create_from_rational(numerator, denominator);\n    }\n    spec schema CreateFromRationalAbortsIf {\n        numerator: u64;\n        denominator: u64;\n        let scaled_numerator = numerator << 64;\n        let scaled_denominator = denominator << 32;\n        let quotient = scaled_numerator / scaled_denominator;\n        aborts_if scaled_denominator == 0 with EDENOMINATOR;\n        aborts_if quotient == 0 && scaled_numerator != 0 with ERATIO_OUT_OF_RANGE;\n        aborts_if quotient > MAX_U64 with ERATIO_OUT_OF_RANGE;\n    }\n    spec fun spec_create_from_rational(numerator: num, denominator: num): FixedPoint32 {\n        FixedPoint32{value: (numerator << 64) / (denominator << 32)}\n    }\n\n    /// Create a fixedpoint value from a raw value.\n    public fun create_from_raw_value(value: u64): FixedPoint32 {\n        FixedPoint32 { value }\n    }\n    spec create_from_raw_value {\n        pragma opaque;\n        aborts_if false;\n        ensures result.value == value;\n    }\n\n    /// Accessor for the raw u64 value. Other less common operations, such as\n    /// adding or subtracting FixedPoint32 values, can be done using the raw\n    /// values directly.\n    public fun get_raw_value(num: FixedPoint32): u64 {\n        num.value\n    }\n\n    /// Returns true if the ratio is zero.\n    public fun is_zero(num: FixedPoint32): bool {\n        num.value == 0\n    }\n\n    // **************** SPECIFICATIONS ****************\n\n    spec module {} // switch documentation context to module level\n\n    spec module {\n        pragma aborts_if_is_strict;\n    }\n}\n",
              "source_map": "0xbe74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1710000007e0000000100000000000000000000000000000000000000000000000000000000000000010d66697865645f706f696e743332010000be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1d3020000df0200000001be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1f8020000fd020000060000be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e191120000a51200000002096e756d657261746f72be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1a6120000af1200000b64656e6f6d696e61746f72be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1b6120000c11200000403252331be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1c1140000e01400000871756f7469656e74be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e17f14000087140000127363616c65645f64656e6f6d696e61746f72be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1091400001b140000107363616c65645f6e756d657261746f72be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1cf130000df13000000280000be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1e3130000ec1300000100be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1e2130000f51300000200be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1f9130000fb1300000300be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1f6130000f81300000400be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1cf130000df1300000500be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e11f1400002a1400000600be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e11e140000331400000700be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e137140000391400000800be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e134140000361400000900be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1091400001b1400000a00be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e14b1400005d1400000b00be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e161140000621400000c00be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e15e140000601400000d00be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e143140000711400000e00be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e164140000701400000f00be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e143140000711400001000be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e18a1400009a1400001100be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e19d140000af1400001200be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e19b1400009c1400001300be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e17f140000871400001400be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1c1140000c91400001500be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1cd140000ce1400001600be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1ca140000cc1400001700be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1c1140000e01400001c00be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1d2140000db1400001d00be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1df140000e01400001e00be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1dc140000de1400001f00be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1c1140000e01400002100be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1b9140000f61400002200be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1e2140000f51400002300be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1b9140000f61400002400be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e180150000881500002500be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e18c150000931500002600be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1891500008b1500002700be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e178150000a91500002800be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e195150000a81500002900be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e178150000a91500002a00be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1ca150000d21500002b00be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1c9150000da1500002c00be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1b3150000dc150000000100be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1571900006c19000000010576616c7565be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e16d190000721900000000020000be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1a0190000a51900000100be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e191190000a7190000000200be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1520b00005c0b000000020376616cbe74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e15d0b0000600b00000764697669736f72be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1670b00006e0b0000020871756f7469656e74be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1940c00009c0c00000c7363616c65645f76616c7565be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1640c0000700c0000001a0000be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1bc0b0000c30b00000100be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1bc0b0000c90b00000300be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1cd0b0000ce0b00000400be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1ca0b0000cc0b00000500be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1b40b0000e20b00000600be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1d00b0000e10b00000700be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1b40b0000e20b00000800be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1740c0000770c00000900be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1730c0000800c00000a00be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1840c0000860c00000b00be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1810c0000830c00000c00be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1640c0000700c00000d00be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e19f0c0000ab0c00000e00be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1af0c0000b60c00000f00be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1af0c0000bc0c00001100be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1ae0c0000c50c00001200be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1ac0c0000ad0c00001300be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1940c00009c0c00001400be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1080d0000100d00001500be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1140d00001b0d00001600be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1110d0000130d00001700be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1000d0000270d00001800be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e11d0d0000260d00001900be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1000d0000270d00001a00be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1a00d0000a80d00001b00be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e19f0d0000b00d0000000300be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1f01a0000fd1a00000001036e756dbe74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1fe1a0000011b00000000020000be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1201b0000231b00000100be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1201b0000291b0000000400be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e16b1b0000721b00000001036e756dbe74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1731b0000761b00000000050000be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1961b0000991b00000100be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1961b00009f1b00000300be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1a31b0000a41b00000400be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1a01b0000a21b00000500be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1961b0000a41b0000000500be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1530600005f06000000020376616cbe74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e160060000630600000a6d756c7469706c696572be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e16a06000074060000020770726f64756374be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1210800002808000010756e7363616c65645f70726f64756374be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1510700006107000000130000be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e165070000680700000100be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e164070000710700000200be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1750700007f0700000300be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e175070000850700000500be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1740700008e0700000600be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e172070000730700000700be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e151070000610700000800be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e12b0800003b0800000900be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e13f080000410800000a00be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e13c0800003e0800000b00be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e121080000280800000c00be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1840800008b0800000d00be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e18f080000960800000e00be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e18c0800008e0800000f00be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e17c080000a80800001000be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e198080000a70800001100be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e17c080000a80800001200be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1b3080000ba0800001300be74e81da7fe9b018b190e9d0f73e499d8292062ba948164b8beae81917b59e1b2080000c20800000006074d41585f553634050009454449564953494f4e01000c4544454e4f4d494e41544f5200000f454d554c5449504c49434154494f4e030011454449564953494f4e5f42595f5a45524f02001345524154494f5f4f55545f4f465f52414e47450400"
            },
            {
              "name": "hash",
              "source": "/// Module which defines SHA hashes for byte vectors.\n///\n/// The functions in this module are natively declared both in the Move runtime\n/// as in the Move prover's prelude.\nmodule std::hash {\n    native public fun sha2_256(data: vector<u8>): vector<u8>;\n    native public fun sha3_256(data: vector<u8>): vector<u8>;\n}\n",
              "source_map": "0xc2a03491eec1bcd457c8ccf2253c2c2fcead565df3e31a3759e108996857af9bbb000000bf000000010000000000000000000000000000000000000000000000000000000000000001046861736800020000c2a03491eec1bcd457c8ccf2253c2c2fcead565df3e31a3759e108996857af9bd8000000e000000000010464617461c2a03491eec1bcd457c8ccf2253c2c2fcead565df3e31a3759e108996857af9be1000000e5000000000000010100c2a03491eec1bcd457c8ccf2253c2c2fcead565df3e31a3759e108996857af9b160100001e01000000010464617461c2a03491eec1bcd457c8ccf2253c2c2fcead565df3e31a3759e108996857af9b1f010000230100000000000100"
            },
            {
              "name": "signer",
              "source": "module std::signer {\n    // Borrows the address of the signer\n    // Conceptually, you can think of the `signer` as being a struct wrapper arround an\n    // address\n    // ```\n    // struct signer has drop { addr: address }\n    // ```\n    // `borrow_address` borrows this inner field\n    native public fun borrow_address(s: &signer): &address;\n\n    // Copies the address of the signer\n    public fun address_of(s: &signer): address {\n        *borrow_address(s)\n    }\n\n    /// Return true only if `s` is a transaction signer. This is a spec function only available in spec.\n    spec native fun is_txn_signer(s: signer): bool;\n\n    /// Return true only if `a` is a transaction signer address. This is a spec function only available in spec.\n    spec native fun is_txn_signer_addr(a: address): bool;\n}\n",
              "source_map": "0x22ab920b3cd176ed32745aef9e1c270f63c3b72506bb92f133cbbcdce37c63ce0c00000012000000010000000000000000000000000000000000000000000000000000000000000001067369676e65720002000022ab920b3cd176ed32745aef9e1c270f63c3b72506bb92f133cbbcdce37c63ce900100009a0100000001017322ab920b3cd176ed32745aef9e1c270f63c3b72506bb92f133cbbcdce37c63ce9b0100009c010000000003000022ab920b3cd176ed32745aef9e1c270f63c3b72506bb92f133cbbcdce37c63ceca010000cb010000010022ab920b3cd176ed32745aef9e1c270f63c3b72506bb92f133cbbcdce37c63cebb010000cc010000020022ab920b3cd176ed32745aef9e1c270f63c3b72506bb92f133cbbcdce37c63ceba010000cc01000000010022ab920b3cd176ed32745aef9e1c270f63c3b72506bb92f133cbbcdce37c63ce32010000400100000001017322ab920b3cd176ed32745aef9e1c270f63c3b72506bb92f133cbbcdce37c63ce41010000420100000000000100"
            },
            {
              "name": "vector",
              "source": "/// A variable-sized container that can hold any type. Indexing is 0-based, and\n/// vectors are growable. This module has many native functions.\n/// Verification of modules that use this one uses model functions that are implemented\n/// directly in Boogie. The specification language has built-in functions operations such\n/// as `singleton_vector`. There are some helper functions defined here for specifications in other\n/// modules as well.\n///\n/// >Note: We did not verify most of the\n/// Move functions here because many have loops, requiring loop invariants to prove, and\n/// the return on investment didn't seem worth it for these simple functions.\nmodule std::vector {\n\n    /// The index into the vector is out of bounds\n    const EINDEX_OUT_OF_BOUNDS: u64 = 0x20000;\n\n    #[bytecode_instruction]\n    /// Create an empty vector.\n    native public fun empty<Element>(): vector<Element>;\n\n    #[bytecode_instruction]\n    /// Return the length of the vector.\n    native public fun length<Element>(v: &vector<Element>): u64;\n\n    #[bytecode_instruction]\n    /// Acquire an immutable reference to the `i`th element of the vector `v`.\n    /// Aborts if `i` is out of bounds.\n    native public fun borrow<Element>(v: &vector<Element>, i: u64): &Element;\n\n    #[bytecode_instruction]\n    /// Add element `e` to the end of the vector `v`.\n    native public fun push_back<Element>(v: &mut vector<Element>, e: Element);\n\n    #[bytecode_instruction]\n    /// Return a mutable reference to the `i`th element in the vector `v`.\n    /// Aborts if `i` is out of bounds.\n    native public fun borrow_mut<Element>(v: &mut vector<Element>, i: u64): &mut Element;\n\n    #[bytecode_instruction]\n    /// Pop an element from the end of vector `v`.\n    /// Aborts if `v` is empty.\n    native public fun pop_back<Element>(v: &mut vector<Element>): Element;\n\n    #[bytecode_instruction]\n    /// Destroy the vector `v`.\n    /// Aborts if `v` is not empty.\n    native public fun destroy_empty<Element>(v: vector<Element>);\n\n    #[bytecode_instruction]\n    /// Swaps the elements at the `i`th and `j`th indices in the vector `v`.\n    /// Aborts if `i` or `j` is out of bounds.\n    native public fun swap<Element>(v: &mut vector<Element>, i: u64, j: u64);\n\n    /// Return an vector of size one containing element `e`.\n    public fun singleton<Element>(e: Element): vector<Element> {\n        let v = empty();\n        push_back(&mut v, e);\n        v\n    }\n    spec singleton {\n        // TODO: when using opaque here, we get verification errors.\n        // pragma opaque;\n        aborts_if false;\n        ensures result == vec(e);\n    }\n\n    /// Reverses the order of the elements in the vector `v` in place.\n    public fun reverse<Element>(v: &mut vector<Element>) {\n        let len = length(v);\n        if (len == 0) return ();\n\n        let front_index = 0;\n        let back_index = len -1;\n        while (front_index < back_index) {\n            swap(v, front_index, back_index);\n            front_index = front_index + 1;\n            back_index = back_index - 1;\n        }\n    }\n    spec reverse {\n        pragma intrinsic = true;\n    }\n\n\n    /// Pushes all of the elements of the `other` vector into the `lhs` vector.\n    public fun append<Element>(lhs: &mut vector<Element>, other: vector<Element>) {\n        reverse(&mut other);\n        while (!is_empty(&other)) push_back(lhs, pop_back(&mut other));\n        destroy_empty(other);\n    }\n    spec append {\n        pragma intrinsic = true;\n    }\n    spec is_empty {\n        pragma intrinsic = true;\n    }\n\n\n    /// Return `true` if the vector `v` has no elements and `false` otherwise.\n    public fun is_empty<Element>(v: &vector<Element>): bool {\n        length(v) == 0\n    }\n\n    /// Return true if `e` is in the vector `v`.\n    public fun contains<Element>(v: &vector<Element>, e: &Element): bool {\n        let i = 0;\n        let len = length(v);\n        while (i < len) {\n            if (borrow(v, i) == e) return true;\n            i = i + 1;\n        };\n        false\n    }\n    spec contains {\n        pragma intrinsic = true;\n    }\n\n    /// Return `(true, i)` if `e` is in the vector `v` at index `i`.\n    /// Otherwise, returns `(false, 0)`.\n    public fun index_of<Element>(v: &vector<Element>, e: &Element): (bool, u64) {\n        let i = 0;\n        let len = length(v);\n        while (i < len) {\n            if (borrow(v, i) == e) return (true, i);\n            i = i + 1;\n        };\n        (false, 0)\n    }\n    spec index_of {\n        pragma intrinsic = true;\n    }\n\n    /// Remove the `i`th element of the vector `v`, shifting all subsequent elements.\n    /// This is O(n) and preserves ordering of elements in the vector.\n    /// Aborts if `i` is out of bounds.\n    public fun remove<Element>(v: &mut vector<Element>, i: u64): Element {\n        let len = length(v);\n        // i out of bounds; abort\n        if (i >= len) abort EINDEX_OUT_OF_BOUNDS;\n\n        len = len - 1;\n        while (i < len) swap(v, i, { i = i + 1; i });\n        pop_back(v)\n    }\n    spec remove {\n        pragma intrinsic = true;\n    }\n\n    /// Swap the `i`th element of the vector `v` with the last element and then pop the vector.\n    /// This is O(1), but does not preserve ordering of elements in the vector.\n    /// Aborts if `i` is out of bounds.\n    public fun swap_remove<Element>(v: &mut vector<Element>, i: u64): Element {\n        assert!(!is_empty(v), EINDEX_OUT_OF_BOUNDS);\n        let last_idx = length(v) - 1;\n        swap(v, i, last_idx);\n        pop_back(v)\n    }\n    spec swap_remove {\n        pragma intrinsic = true;\n    }\n\n    // =================================================================\n    // Module Specification\n\n    spec module {} // Switch to module documentation context\n\n    /// # Helper Functions\n\n    spec module {\n        /// Check if `v1` is equal to the result of adding `e` at the end of `v2`\n        fun eq_push_back<Element>(v1: vector<Element>, v2: vector<Element>, e: Element): bool {\n            len(v1) == len(v2) + 1 &&\n            v1[len(v1)-1] == e &&\n            v1[0..len(v1)-1] == v2[0..len(v2)]\n        }\n\n        /// Check if `v` is equal to the result of concatenating `v1` and `v2`\n        fun eq_append<Element>(v: vector<Element>, v1: vector<Element>, v2: vector<Element>): bool {\n            len(v) == len(v1) + len(v2) &&\n            v[0..len(v1)] == v1 &&\n            v[len(v1)..len(v)] == v2\n        }\n\n        /// Check `v1` is equal to the result of removing the first element of `v2`\n        fun eq_pop_front<Element>(v1: vector<Element>, v2: vector<Element>): bool {\n            len(v1) + 1 == len(v2) &&\n            v1 == v2[1..len(v2)]\n        }\n\n        /// Check that `v1` is equal to the result of removing the element at index `i` from `v2`.\n        fun eq_remove_elem_at_index<Element>(i: u64, v1: vector<Element>, v2: vector<Element>): bool {\n            len(v1) + 1 == len(v2) &&\n            v1[0..i] == v2[0..i] &&\n            v1[i..len(v1)] == v2[i + 1..len(v2)]\n        }\n    }\n\n}\n",
              "source_map": ""
            },
            {
              "name": "error",
              "source": "/// This module defines a set of canonical error codes which are optional to use by applications for the\n/// `abort` and `assert!` features.\n///\n/// Canonical error codes use the 3 lowest bytes of the u64 abort code range (the upper 5 bytes are free for other use).\n/// Of those, the highest byte represents the *error category* and the lower two bytes the *error reason*.\n/// Given an error category `0x1` and a reason `0x3`, a canonical abort code looks as `0x10003`.\n///\n/// A module can use a canonical code with a constant declaration of the following form:\n///\n/// ```\n/// ///  An invalid ASCII character was encountered when creating a string.\n/// const EINVALID_CHARACTER: u64 = 0x010003;\n/// ```\n///\n/// This code is both valid in the worlds with and without canonical errors. It can be used as a plain module local\n/// error reason understand by the existing error map tooling, or as a canonical code.\n///\n/// The actual canonical categories have been adopted from Google's canonical error codes, which in turn are derived\n/// from Unix error codes [see here](https://cloud.google.com/apis/design/errors#handling_errors). Each code has an\n/// associated HTTP error code which can be used in REST apis. The mapping from error code to http code is not 1:1;\n/// error codes here are a bit richer than HTTP codes.\nmodule std::error {\n\n  /// Caller specified an invalid argument (http: 400)\n  const INVALID_ARGUMENT: u64 = 0x1;\n\n  /// An input or result of a computation is out of range (http: 400)\n  const OUT_OF_RANGE: u64 = 0x2;\n\n  /// The system is not in a state where the operation can be performed (http: 400)\n  const INVALID_STATE: u64 = 0x3;\n\n  /// Request not authenticated due to missing, invalid, or expired auth token (http: 401)\n  const UNAUTHENTICATED: u64 = 0x4;\n\n  /// client does not have sufficient permission (http: 403)\n  const PERMISSION_DENIED: u64 = 0x5;\n\n  /// A specified resource is not found (http: 404)\n  const NOT_FOUND: u64 = 0x6;\n\n  /// Concurrency conflict, such as read-modify-write conflict (http: 409)\n  const ABORTED: u64 = 0x7;\n\n  /// The resource that a client tried to create already exists (http: 409)\n  const ALREADY_EXISTS: u64 = 0x8;\n\n  /// Out of gas or other forms of quota (http: 429)\n  const RESOURCE_EXHAUSTED: u64 = 0x9;\n\n  /// Request cancelled by the client (http: 499)\n  const CANCELLED: u64 = 0xA;\n\n  /// Internal error (http: 500)\n  const INTERNAL: u64 = 0xB;\n\n  /// Feature not implemented (http: 501)\n  const NOT_IMPLEMENTED: u64 = 0xC;\n\n  /// The service is currently unavailable. Indicates that a retry could solve the issue (http: 503)\n  const UNAVAILABLE: u64 = 0xD;\n\n  /// Construct a canonical error code from a category and a reason.\n  public fun canonical(category: u64, reason: u64): u64 {\n    (category << 16) + reason\n  }\n  spec canonical {\n    pragma opaque = true;\n    // TODO: `<<` has different meanings in code and spec in case of overvlow.\n    let shl_res = (category * 65536) % 18446744073709551616; // (category << 16)\n    ensures [concrete] result == shl_res + reason;\n    aborts_if [abstract] false;\n    ensures [abstract] result == category;\n  }\n\n  /// Functions to construct a canonical error code of the given category.\n  public fun invalid_argument(r: u64): u64 {  canonical(INVALID_ARGUMENT, r) }\n  public fun out_of_range(r: u64): u64 {  canonical(OUT_OF_RANGE, r) }\n  public fun invalid_state(r: u64): u64 {  canonical(INVALID_STATE, r) }\n  public fun unauthenticated(r: u64): u64 { canonical(UNAUTHENTICATED, r) }\n  public fun permission_denied(r: u64): u64 { canonical(PERMISSION_DENIED, r) }\n  public fun not_found(r: u64): u64 { canonical(NOT_FOUND, r) }\n  public fun aborted(r: u64): u64 { canonical(ABORTED, r) }\n  public fun already_exists(r: u64): u64 { canonical(ALREADY_EXISTS, r) }\n  public fun resource_exhausted(r: u64): u64 {  canonical(RESOURCE_EXHAUSTED, r) }\n  public fun internal(r: u64): u64 {  canonical(INTERNAL, r) }\n  public fun not_implemented(r: u64): u64 {  canonical(NOT_IMPLEMENTED, r) }\n  public fun unavailable(r: u64): u64 { canonical(UNAVAILABLE, r) }\n}\n",
              "source_map": "0xbd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df3405000039050000010000000000000000000000000000000000000000000000000000000000000001056572726f72000d0000bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df4e0e0000550e000000010172bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df560e0000570e00000000030000bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df6f0e0000760e00000100bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df780e0000790e00000200bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df650e00007a0e0000000100bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df8a0e0000980e000000010172bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df990e00009a0e00000000030000bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205dfb20e0000c00e00000100bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205dfc20e0000c30e00000200bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205dfa80e0000c40e0000000200bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df9c0a0000a50a000000020863617465676f7279bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205dfa60a0000ae0a000006726561736f6ebd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205dfb50a0000bb0a00000000060000bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205dfce0a0000d60a00000100bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205dfda0a0000dc0a00000200bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205dfd70a0000d90a00000300bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205dfe00a0000e60a00000400bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205dfde0a0000df0a00000500bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205dfcd0a0000e60a0000000300bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df270f00002f0f000000010172bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df300f0000310f00000000030000bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df4a0f0000520f00000100bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df540f0000550f00000200bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df400f0000560f0000000400bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df930c0000a30c000000010172bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205dfa40c0000a50c00000000030000bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205dfbe0c0000ce0c00000100bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205dfd00c0000d10c00000200bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205dfb40c0000d20c0000000500bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df290d0000360d000000010172bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df370d0000380d00000000030000bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df510d00005e0d00000100bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df600d0000610d00000200bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df470d0000620d0000000600bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df0e0e0000170e000000010172bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df180e0000190e00000000030000bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df310e00003a0e00000100bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df3c0e00003d0e00000200bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df270e00003e0e0000000700bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df660f0000750f000000010172bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df760f0000770f00000000030000bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df900f00009f0f00000100bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205dfa10f0000a20f00000200bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df860f0000a30f0000000800bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205dfe20c0000ee0c000000010172bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205dfef0c0000f00c00000000030000bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df090d0000150d00000100bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df170d0000180d00000200bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205dfff0c0000190d0000000900bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205dfbe0d0000cf0d000000010172bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205dfd00d0000d10d00000000030000bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205dfe90d0000fa0d00000100bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205dffc0d0000fd0d00000200bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205dfdf0d0000fe0d0000000a00bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205dfd40e0000e60e000000010172bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205dfe70e0000e80e00000000030000bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df010f0000130f00000100bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df150f0000160f00000200bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205dff70e0000170f0000000b00bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df720d0000810d000000010172bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df820d0000830d00000000030000bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df9b0d0000aa0d00000100bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205dfac0d0000ad0d00000200bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205df910d0000ae0d0000000c00bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205dfb30f0000be0f000000010172bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205dfbf0f0000c00f00000000030000bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205dfd80f0000e30f00000100bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205dfe50f0000e60f00000200bd9e875536cc5e37a3c6b71534e4df66311bd219e6c02366885d59e0846205dfce0f0000e70f0000000d0741424f52544544000008494e5445524e414c03000943414e43454c4c45440200094e4f545f464f554e4406000b554e415641494c41424c450c000c4f55545f4f465f52414e474508000d494e56414c49445f535441544505000e414c52454144595f45584953545301000f4e4f545f494d504c454d454e54454407000f554e41555448454e544943415445440b0010494e56414c49445f415247554d454e540400115045524d495353494f4e5f44454e4945440900125245534f555243455f4558484155535445440a00"
            },
            {
              "name": "acl",
              "source": "/// Access control list (acl) module. An acl is a list of account addresses who\n/// have the access permission to a certain object.\n/// This module uses a `vector` to represent the list, but can be refactored to\n/// use a \"set\" instead when it's available in the language in the future.\n\nmodule std::acl {\n    use std::vector;\n    use std::error;\n\n    /// The ACL already contains the address.\n    const ECONTAIN: u64 = 0;\n    /// The ACL does not contain the address.\n    const ENOT_CONTAIN: u64 = 1;\n\n    struct ACL has store, drop, copy {\n        list: vector<address>\n    }\n\n    /// Return an empty ACL.\n    public fun empty(): ACL {\n        ACL{ list: vector::empty<address>() }\n    }\n\n    /// Add the address to the ACL.\n    public fun add(acl: &mut ACL, addr: address) {\n        assert!(!vector::contains(&mut acl.list, &addr), error::invalid_argument(ECONTAIN));\n        vector::push_back(&mut acl.list, addr);\n    }\n\n    /// Remove the address from the ACL.\n    public fun remove(acl: &mut ACL, addr: address) {\n        let (found, index) = vector::index_of(&mut acl.list, &addr);\n        assert!(found, error::invalid_argument(ENOT_CONTAIN));\n        vector::remove(&mut acl.list, index);\n    }\n\n    /// Return true iff the ACL contains the address.\n    public fun contains(acl: &ACL, addr: address): bool {\n        vector::contains(&acl.list, &addr)\n    }\n\n    /// assert! that the ACL has the address.\n    public fun assert_contains(acl: &ACL, addr: address) {\n        assert!(contains(acl, addr), error::invalid_argument(ENOT_CONTAIN));\n    }\n}\n",
              "source_map": "0xe830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a2c0100002f0100000100000000000000000000000000000000000000000000000000000000000000010361636c010000e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a02020000050200000001e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a260200002a020000050000e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00ae6020000e902000000020361636ce830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00aea020000ed0200000461646472e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00af9020000fd0200000203252331e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a2b0300004103000003252332e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a2b03000041030000000f0000e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a31030000340300000100e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a2c030000390300000200e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a3b030000400300000300e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a2b030000410300000800e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a1b030000410300000900e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a1a0300001b0300000a00e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a12030000650300000d00e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a5b030000630300000e00e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a43030000640300000f00e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a12030000650300001000e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a86030000890300001100e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a810300008e0300001200e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a90030000940300001300e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a6f030000950300001400e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a9503000096030000000100e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a95050000a405000000020361636ce830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00aa5050000a80500000461646472e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00ab0050000b40500000000080000e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00ada050000dd0500000100e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00adf050000e30500000200e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00ad1050000e40500000300e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00ac90500000c0600000400e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00afe0500000a0600000500e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00ae60500000b0600000600e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00ac90500000c0600000700e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a0c0600000d060000000200e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00afb0400000305000000020361636ce830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a04050000070500000461646472e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a0f050000130500000000040000e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a40050000430500000100e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a3f050000480500000200e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a4a0500004f0500000300e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a2e05000050050000000300e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a6f0200007402000000000000020000e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a91020000a90200000100e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a86020000ab020000000400e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00ad6030000dc03000000020361636ce830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00add030000e00300000461646472e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00aec030000f00300000403252331e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a2a0400004004000003252332e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a2a0400004004000005666f756e64e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a0a0400000f04000005696e646578e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a110400001604000000110000e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a30040000330400000100e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a2b040000380400000200e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a3a0400003f0400000300e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a2a040000400400000800e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a1a040000400400000900e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a11040000160400000a00e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a0a0400000f0400000b00e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a52040000570400000c00e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a4a0400007f0400000f00e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a710400007d0400001000e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a590400007e0400001100e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a4a0400007f0400001200e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a9d040000a00400001300e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a98040000a50400001400e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00aa7040000ac0400001500e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00a89040000ad0400001700e830c1cb486378ddafc4a5bd0e629efa15aa26a51ee51c5dba4b3f679a6fc00aad040000ae04000000020845434f4e5441494e00000c454e4f545f434f4e5441494e0100"
            },
            {
              "name": "bit_vector",
              "source": "module std::bit_vector {\n    use std::vector;\n\n    /// The provided index is out of bounds\n    const EINDEX: u64 = 0x20000;\n    /// An invalid length of bitvector was given\n    const ELENGTH: u64 = 0x20001;\n\n    const WORD_SIZE: u64 = 1;\n    /// The maximum allowed bitvector size\n    const MAX_SIZE: u64 = 1024;\n\n    struct BitVector has copy, drop, store {\n        length: u64,\n        bit_field: vector<bool>,\n    }\n\n    public fun new(length: u64): BitVector {\n        assert!(length > 0, ELENGTH);\n        assert!(length < MAX_SIZE, ELENGTH);\n        let counter = 0;\n        let bit_field = vector::empty();\n        while ({spec {\n            invariant counter <= length;\n            invariant len(bit_field) == counter;\n        };\n            (counter < length)}) {\n            vector::push_back(&mut bit_field, false);\n            counter = counter + 1;\n        };\n        spec {\n            assert counter == length;\n            assert len(bit_field) == length;\n        };\n\n        BitVector {\n            length,\n            bit_field,\n        }\n    }\n    spec new {\n        include NewAbortsIf;\n        ensures result.length == length;\n        ensures len(result.bit_field) == length;\n    }\n    spec schema NewAbortsIf {\n        length: u64;\n        aborts_if length <= 0 with ELENGTH;\n        aborts_if length >= MAX_SIZE with ELENGTH;\n    }\n\n    /// Set the bit at `bit_index` in the `bitvector` regardless of its previous state.\n    public fun set(bitvector: &mut BitVector, bit_index: u64) {\n        assert!(bit_index < vector::length(&bitvector.bit_field), EINDEX);\n        let x = vector::borrow_mut(&mut bitvector.bit_field, bit_index);\n        *x = true;\n    }\n    spec set {\n        include SetAbortsIf;\n        ensures bitvector.bit_field[bit_index];\n    }\n    spec schema SetAbortsIf {\n        bitvector: BitVector;\n        bit_index: u64;\n        aborts_if bit_index >= length(bitvector) with EINDEX;\n    }\n\n    /// Unset the bit at `bit_index` in the `bitvector` regardless of its previous state.\n    public fun unset(bitvector: &mut BitVector, bit_index: u64) {\n        assert!(bit_index < vector::length(&bitvector.bit_field), EINDEX);\n        let x = vector::borrow_mut(&mut bitvector.bit_field, bit_index);\n        *x = false;\n    }\n    spec set {\n        include UnsetAbortsIf;\n        ensures bitvector.bit_field[bit_index];\n    }\n    spec schema UnsetAbortsIf {\n        bitvector: BitVector;\n        bit_index: u64;\n        aborts_if bit_index >= length(bitvector) with EINDEX;\n    }\n\n    /// Shift the `bitvector` left by `amount`. If `amount` is greater than the\n    /// bitvector's length the bitvector will be zeroed out.\n    public fun shift_left(bitvector: &mut BitVector, amount: u64) {\n        if (amount >= bitvector.length) {\n           let len = vector::length(&bitvector.bit_field);\n           let i = 0;\n           while (i < len) {\n               let elem = vector::borrow_mut(&mut bitvector.bit_field, i);\n               *elem = false;\n               i = i + 1;\n           };\n        } else {\n            let i = amount;\n\n            while (i < bitvector.length) {\n                if (is_index_set(bitvector, i)) set(bitvector, i - amount)\n                else unset(bitvector, i - amount);\n                i = i + 1;\n            };\n\n            i = bitvector.length - amount;\n\n            while (i < bitvector.length) {\n                unset(bitvector, i);\n                i = i + 1;\n            };\n        }\n    }\n\n    /// Return the value of the bit at `bit_index` in the `bitvector`. `true`\n    /// represents \"1\" and `false` represents a 0\n    public fun is_index_set(bitvector: &BitVector, bit_index: u64): bool {\n        assert!(bit_index < vector::length(&bitvector.bit_field), EINDEX);\n        *vector::borrow(&bitvector.bit_field, bit_index)\n    }\n    spec is_index_set {\n        include IsIndexSetAbortsIf;\n        ensures result == bitvector.bit_field[bit_index];\n    }\n    spec schema IsIndexSetAbortsIf {\n        bitvector: BitVector;\n        bit_index: u64;\n        aborts_if bit_index >= length(bitvector) with EINDEX;\n    }\n    spec fun spec_is_index_set(bitvector: BitVector, bit_index: u64): bool {\n        if (bit_index >= length(bitvector)) {\n            false\n        } else {\n            bitvector.bit_field[bit_index]\n        }\n    }\n\n    /// Return the length (number of usable bits) of this bitvector\n    public fun length(bitvector: &BitVector): u64 {\n        vector::length(&bitvector.bit_field)\n    }\n\n    /// Returns the length of the longest sequence of set bits starting at (and\n    /// including) `start_index` in the `bitvector`. If there is no such\n    /// sequence, then `0` is returned.\n    public fun longest_set_sequence_starting_at(bitvector: &BitVector, start_index: u64): u64 {\n        assert!(start_index < bitvector.length, EINDEX);\n        let index = start_index;\n\n        // Find the greatest index in the vector such that all indices less than it are set.\n        while (index < bitvector.length) {\n            if (!is_index_set(bitvector, index)) break;\n            index = index + 1;\n        };\n\n        index - start_index\n    }\n\n    #[test_only]\n    public fun word_size(): u64 {\n        WORD_SIZE\n    }\n}\n",
              "source_map": ""
            },
            {
              "name": "option",
              "source": "/// This module defines the Option type and its methods to represent and handle an optional value.\nmodule std::option {\n    use std::vector;\n\n    /// Abstraction of a value that may or may not be present. Implemented with a vector of size\n    /// zero or one because Move bytecode does not have ADTs.\n    struct Option<Element> has copy, drop, store {\n        vec: vector<Element>\n    }\n    spec Option {\n        /// The size of vector is always less than equal to 1\n        /// because it's 0 for \"none\" or 1 for \"some\".\n        invariant len(vec) <= 1;\n    }\n\n    /// The `Option` is in an invalid state for the operation attempted.\n    /// The `Option` is `Some` while it should be `None`.\n    const EOPTION_IS_SET: u64 = 0x40000;\n    /// The `Option` is in an invalid state for the operation attempted.\n    /// The `Option` is `None` while it should be `Some`.\n    const EOPTION_NOT_SET: u64 = 0x40001;\n\n    /// Return an empty `Option`\n    public fun none<Element>(): Option<Element> {\n        Option { vec: vector::empty() }\n    }\n    spec none {\n        pragma opaque;\n        aborts_if false;\n        ensures result == spec_none<Element>();\n    }\n    spec fun spec_none<Element>(): Option<Element> {\n        Option{ vec: vec() }\n    }\n\n    /// Return an `Option` containing `e`\n    public fun some<Element>(e: Element): Option<Element> {\n        Option { vec: vector::singleton(e) }\n    }\n    spec some {\n        pragma opaque;\n        aborts_if false;\n        ensures result == spec_some(e);\n    }\n    spec fun spec_some<Element>(e: Element): Option<Element> {\n        Option{ vec: vec(e) }\n    }\n\n    /// Return true if `t` does not hold a value\n    public fun is_none<Element>(t: &Option<Element>): bool {\n        vector::is_empty(&t.vec)\n    }\n    spec is_none {\n        pragma opaque;\n        aborts_if false;\n        ensures result == is_none(t);\n    }\n\n    /// Return true if `t` holds a value\n    public fun is_some<Element>(t: &Option<Element>): bool {\n        !vector::is_empty(&t.vec)\n    }\n    spec is_some {\n        pragma opaque;\n        aborts_if false;\n        ensures result == is_some(t);\n    }\n\n    /// Return true if the value in `t` is equal to `e_ref`\n    /// Always returns `false` if `t` does not hold a value\n    public fun contains<Element>(t: &Option<Element>, e_ref: &Element): bool {\n        vector::contains(&t.vec, e_ref)\n    }\n    spec contains {\n        pragma opaque;\n        aborts_if false;\n        ensures result == spec_contains(t, e_ref);\n    }\n    spec fun spec_contains<Element>(t: Option<Element>, e: Element): bool {\n        is_some(t) && borrow(t) == e\n    }\n\n    /// Return an immutable reference to the value inside `t`\n    /// Aborts if `t` does not hold a value\n    public fun borrow<Element>(t: &Option<Element>): &Element {\n        assert!(is_some(t), EOPTION_NOT_SET);\n        vector::borrow(&t.vec, 0)\n    }\n    spec borrow {\n        pragma opaque;\n        include AbortsIfNone<Element>;\n        ensures result == borrow(t);\n    }\n\n    /// Return a reference to the value inside `t` if it holds one\n    /// Return `default_ref` if `t` does not hold a value\n    public fun borrow_with_default<Element>(t: &Option<Element>, default_ref: &Element): &Element {\n        let vec_ref = &t.vec;\n        if (vector::is_empty(vec_ref)) default_ref\n        else vector::borrow(vec_ref, 0)\n    }\n    spec borrow_with_default {\n        pragma opaque;\n        aborts_if false;\n        ensures result == (if (is_some(t)) borrow(t) else default_ref);\n    }\n\n    /// Return the value inside `t` if it holds one\n    /// Return `default` if `t` does not hold a value\n    public fun get_with_default<Element: copy + drop>(\n        t: &Option<Element>,\n        default: Element,\n    ): Element {\n        let vec_ref = &t.vec;\n        if (vector::is_empty(vec_ref)) default\n        else *vector::borrow(vec_ref, 0)\n    }\n    spec get_with_default {\n        pragma opaque;\n        aborts_if false;\n        ensures result == (if (is_some(t)) borrow(t) else default);\n    }\n\n    /// Convert the none option `t` to a some option by adding `e`.\n    /// Aborts if `t` already holds a value\n    public fun fill<Element>(t: &mut Option<Element>, e: Element) {\n        let vec_ref = &mut t.vec;\n        if (vector::is_empty(vec_ref)) vector::push_back(vec_ref, e)\n        else abort EOPTION_IS_SET\n    }\n    spec fill {\n        pragma opaque;\n        aborts_if is_some(t) with EOPTION_IS_SET;\n        ensures is_some(t);\n        ensures borrow(t) == e;\n    }\n\n    /// Convert a `some` option to a `none` by removing and returning the value stored inside `t`\n    /// Aborts if `t` does not hold a value\n    public fun extract<Element>(t: &mut Option<Element>): Element {\n        assert!(is_some(t), EOPTION_NOT_SET);\n        vector::pop_back(&mut t.vec)\n    }\n    spec extract {\n        pragma opaque;\n        include AbortsIfNone<Element>;\n        ensures result == borrow(old(t));\n        ensures is_none(t);\n    }\n\n    /// Return a mutable reference to the value inside `t`\n    /// Aborts if `t` does not hold a value\n    public fun borrow_mut<Element>(t: &mut Option<Element>): &mut Element {\n        assert!(is_some(t), EOPTION_NOT_SET);\n        vector::borrow_mut(&mut t.vec, 0)\n    }\n    spec borrow_mut {\n        pragma opaque;\n        include AbortsIfNone<Element>;\n        ensures result == borrow(t);\n    }\n\n    /// Swap the old value inside `t` with `e` and return the old value\n    /// Aborts if `t` does not hold a value\n    public fun swap<Element>(t: &mut Option<Element>, e: Element): Element {\n        assert!(is_some(t), EOPTION_NOT_SET);\n        let vec_ref = &mut t.vec;\n        let old_value = vector::pop_back(vec_ref);\n        vector::push_back(vec_ref, e);\n        old_value\n    }\n    spec swap {\n        pragma opaque;\n        include AbortsIfNone<Element>;\n        ensures result == borrow(old(t));\n        ensures is_some(t);\n        ensures borrow(t) == e;\n    }\n\n    /// Swap the old value inside `t` with `e` and return the old value;\n    /// or if there is no old value, fill it with `e`.\n    /// Different from swap(), swap_or_fill() allows for `t` not holding a value.\n    public fun swap_or_fill<Element>(t: &mut Option<Element>, e: Element): Option<Element> {\n        let vec_ref = &mut t.vec;\n        let old_value = if (vector::is_empty(vec_ref)) none()\n            else some(vector::pop_back(vec_ref));\n        vector::push_back(vec_ref, e);\n        old_value\n    }\n    spec swap_or_fill {\n        pragma opaque;\n        ensures result == old(t);\n        ensures borrow(t) == e;\n    }\n\n    /// Destroys `t.` If `t` holds a value, return it. Returns `default` otherwise\n    public fun destroy_with_default<Element: drop>(t: Option<Element>, default: Element): Element {\n        let Option { vec } = t;\n        if (vector::is_empty(&mut vec)) default\n        else vector::pop_back(&mut vec)\n    }\n    spec destroy_with_default {\n        pragma opaque;\n        aborts_if false;\n        ensures result == (if (is_some(t)) borrow(t) else default);\n    }\n\n    /// Unpack `t` and return its contents\n    /// Aborts if `t` does not hold a value\n    public fun destroy_some<Element>(t: Option<Element>): Element {\n        assert!(is_some(&t), EOPTION_NOT_SET);\n        let Option { vec } = t;\n        let elem = vector::pop_back(&mut vec);\n        vector::destroy_empty(vec);\n        elem\n    }\n    spec destroy_some {\n        pragma opaque;\n        include AbortsIfNone<Element>;\n        ensures result == borrow(t);\n    }\n\n    /// Unpack `t`\n    /// Aborts if `t` holds a value\n    public fun destroy_none<Element>(t: Option<Element>) {\n        assert!(is_none(&t), EOPTION_IS_SET);\n        let Option { vec } = t;\n        vector::destroy_empty(vec)\n    }\n    spec destroy_none {\n        pragma opaque;\n        aborts_if is_some(t) with EOPTION_IS_SET;\n    }\n\n    /// Convert `t` into a vector of length 1 if it is `Some`,\n    /// and an empty vector otherwise\n    public fun to_vec<Element>(t: Option<Element>): vector<Element> {\n        let Option { vec } = t;\n        vec\n    }\n    spec to_vec {\n        pragma opaque;\n        aborts_if false;\n        ensures result == t.vec;\n    }\n\n    spec module {} // switch documentation context back to module level\n\n    spec module {\n        pragma aborts_if_is_strict;\n    }\n\n    /// # Helper Schema\n\n    spec schema AbortsIfNone<Element> {\n        t: Option<Element>;\n        aborts_if is_none(t) with EOPTION_NOT_SET;\n    }\n}\n",
              "source_map": "0x40ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac46f00000075000000010000000000000000000000000000000000000000000000000000000000000001066f7074696f6e01000040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4380100003e0100000107456c656d656e7440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac43f010000460100000140ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4680100006b01000011000040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4ad0a0000b30a00000107456c656d656e7440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4b40a0000bb0a000001017440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4bd0a0000be0a0000000009000040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4f60a0000f70a0000010040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4ee0a0000f80a0000020040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4e60a00000a0b0000050040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4fa0a0000090b0000060040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4e60a00000a0b0000070040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4240b0000250b0000080040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4230b0000290b0000090040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac42b0b00002c0b00000a0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4140b00002d0b000000010040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4c8130000d21300000107456c656d656e7440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4d3130000da13000001017440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4dc130000dd130000000009000040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac41d1400001e140000020040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4151400001f140000030040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac40d14000031140000060040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac42114000030140000070040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac40d14000031140000080040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac45314000054140000090040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac44e140000581400000a0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac45a1400005b1400000b0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac43b1400005c14000000020040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac43c0c00004f0c00000107456c656d656e7440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4500c0000570c000002017440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4590c00005a0c00000b64656661756c745f72656640ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac46e0c0000790c0000020325233140ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4b70c0000090d0000077665635f72656640ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac49d0c0000a40c0000000c000040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4a80c0000a90c0000010040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4a70c0000ad0c0000020040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac49d0c0000a40c0000030040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4cc0c0000d30c0000040040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4bb0c0000d40c0000050040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4b70c0000090d0000090040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4d60c0000e10c00000a0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4b70c0000090d00000e0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4fe0c0000050d00000f0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4070d0000080d0000100040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4ef0c0000090d0000110040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4b70c0000090d000000030040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4d1080000d90800000107456c656d656e7440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4da080000e108000002017440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4e3080000e408000005655f72656640ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4f8080000fd080000000004000040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac42b0900002c090000010040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac42a09000030090000020040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac43209000037090000030040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4190900003809000000040040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4811d00008d1d00000107456c656d656e7440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac48e1d0000951d000001017440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4971d0000981d0000010376656340ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4f01d0000f31d0000000a000040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4c51d0000c71d0000010040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4bd1d0000c81d0000020040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4b51d0000d91d0000030040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4ca1d0000d81d0000040040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4b51d0000d91d0000050040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4f81d0000f91d0000060040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4e71d0000f51d0000070040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4f01d0000f31d0000080040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4191e00001c1e0000090040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4031e00001d1e000000050040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4cf1b0000db1b00000107456c656d656e7440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4dc1b0000e31b000001017440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4e51b0000e61b00000204656c656d40ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac45f1c0000631c00000376656340ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4481c00004b1c0000000e000040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac41c1c00001e1c0000010040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4141c00001f1c0000020040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac40c1c0000311c0000030040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4211c0000301c0000040040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac40c1c0000311c0000050040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4501c0000511c0000060040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac43f1c00004d1c0000070040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4481c00004b1c0000080040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4771c00007f1c0000090040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4661c0000801c00000a0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac45f1c0000631c00000b0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4a01c0000a31c00000c0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac48a1c0000a41c00000d0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4ae1c0000b21c000000060040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4fb1900000f1a00000107456c656d656e7440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4101a0000171a000002017440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac41f1a0000201a00000764656661756c7440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4331a00003a1a0000020325233140ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4781a0000c71a00000376656340ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4651a0000681a0000000b000040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac46d1a00006e1a0000010040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac45c1a00006a1a0000020040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4651a0000681a0000030040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac48d1a0000951a0000050040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac47c1a0000961a0000060040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4781a0000c71a0000080040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4981a00009f1a0000090040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4781a0000c71a00000b0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4be1a0000c61a00000c0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4ad1a0000c71a00000d0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4781a0000c71a000000070040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4261200002d1200000107456c656d656e7440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac42e1200003512000001017440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac43712000038120000000008000040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac47312000074120000020040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac46b12000075120000030040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac46312000087120000060040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac47712000086120000070040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac46312000087120000080040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4a7120000a8120000090040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4a2120000ac1200000a0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac491120000ad12000000080040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4291000002d1000000107456c656d656e7440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac42e1000003510000002017440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac43710000038100000016540ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4501000005110000001077665635f72656640ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac46a10000071100000000d000040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4791000007a100000010040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4741000007e100000020040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac46a10000071100000030040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac49d100000a4100000050040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac48c100000a5100000060040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac488100000e6100000070040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4d2100000e6100000090040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4d8100000e61000000a0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4d2100000e61000000b0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4b9100000c01000000c0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4c2100000c31000000d0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4a7100000c41000000e0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac488100000e610000000090040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4270e0000370e00000107456c656d656e7440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4380e00003f0e000002017440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4570e0000580e00000764656661756c7440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4740e00007b0e0000020325233140ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4bd0e00000c0f0000077665635f72656640ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4a30e0000aa0e0000000d000040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4ae0e0000af0e0000010040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4ad0e0000b30e0000020040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4a30e0000aa0e0000030040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4d20e0000d90e0000040040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4c10e0000da0e0000050040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4bd0e00000c0f0000090040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4dc0e0000e30e00000a0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4bd0e00000c0f00000c0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4010f0000080f00000d0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac40a0f00000b0f00000e0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4f20e00000c0f00000f0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4f10e00000c0f0000100040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4bd0e00000c0f0000000a0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4870600008e0600000107456c656d656e7440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac48f0600009606000001017440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac49806000099060000000003000040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4cf060000d0060000010040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4ce060000d4060000020040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4bd060000d5060000000b0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4840700008b0700000107456c656d656e7440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac48c0700009307000001017440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac49507000096070000000005000040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4cd070000ce070000010040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4cc070000d2070000020040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4bb070000d3070000030040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4ba070000bb070000040040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4ba070000d3070000000c0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4bc030000c00300000107456c656d656e7440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4c1030000c803000000000002000040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4f503000004040000010040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4e703000006040000000d0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac415050000190500000107456c656d656e7440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac41a0500002105000001016540ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac42305000024050000000003000040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac46a0500006b050000010040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4580500006c050000020040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac44a0500006e050000000e0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4661500006a1500000107456c656d656e7440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac46b1500007215000002017440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac47415000075150000016540ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac48d1500008e15000002096f6c645f76616c756540ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac40016000009160000077665635f72656640ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4de150000e5150000000f000040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4bc150000bd150000020040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4b4150000be150000030040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4ac150000d0150000060040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4c0150000cf150000070040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4ac150000d0150000080040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4ed150000ee150000090040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4e8150000f21500000a0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4de150000e51500000b0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac41d160000241600000c0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac40c160000251600000d0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac400160000091600000e0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac441160000481600000f0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac44a1600004b160000100040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac42f1600004c160000110040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4561600005f160000000f0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4021800000e1800000107456c656d656e7440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac40f1800001618000002017440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac41818000019180000016540ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac43118000032180000030325233140ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac48a180000e0180000096f6c645f76616c756540ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac47e18000087180000077665635f72656640ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac45c180000631800000011000040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac46b1800006c180000010040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac46618000070180000020040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac45c18000063180000030040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac49f180000a6180000050040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac48e180000a7180000060040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac48a180000e0180000080040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4a9180000af180000090040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac48a180000e01800000b0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4d7180000de1800000c0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4c6180000df1800000d0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4c1180000e01800000e0040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac48a180000e0180000100040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac47e18000087180000110040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4fc18000003190000120040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac40519000006190000130040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4ea18000007190000140040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4111900001a19000000100040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4001f0000061f00000107456c656d656e7440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4071f00000e1f000001017440ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4101f0000111f0000010376656340ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac44c1f00004f1f00000004000040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4541f0000551f0000010040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac4431f0000511f0000020040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac44c1f00004f1f0000030040ec42211f2a368319284b2c3e7e7f9bb605a74840b59597be4ce4c3e9ed6ac45f1f0000621f000000020e454f5054494f4e5f49535f53455400000f454f5054494f4e5f4e4f545f5345540100"
            },
            {
              "name": "string",
              "source": "/// The `string` module defines the `String` type which represents UTF8 encoded strings.\nmodule std::string {\n    use std::vector;\n    use std::option::{Self, Option};\n\n    /// An invalid UTF8 encoding.\n    const EINVALID_UTF8: u64 = 1;\n\n    /// Index out of range.\n    const EINVALID_INDEX: u64 = 2;\n\n    /// A `String` holds a sequence of bytes which is guaranteed to be in utf8 format.\n    struct String has copy, drop, store {\n        bytes: vector<u8>,\n    }\n\n    /// Creates a new string from a sequence of bytes. Aborts if the bytes do not represent valid utf8.\n    public fun utf8(bytes: vector<u8>): String {\n        assert!(internal_check_utf8(&bytes), EINVALID_UTF8);\n        String{bytes}\n    }\n\n    /// Tries to create a new string from a sequence of bytes.\n    public fun try_utf8(bytes: vector<u8>): Option<String> {\n        if (internal_check_utf8(&bytes)) {\n            option::some(String{bytes})\n        } else {\n            option::none()\n        }\n    }\n\n    /// Returns a reference to the underlying byte vector.\n    public fun bytes(s: &String): &vector<u8> {\n        &s.bytes\n    }\n\n    /// Checks whether this string is empty.\n    public fun is_empty(s: &String): bool {\n        vector::is_empty(&s.bytes)\n    }\n\n    /// Returns the length of this string, in bytes.\n    public fun length(s: &String): u64 {\n        vector::length(&s.bytes)\n    }\n\n    /// Appends a string.\n    public fun append(s: &mut String, r: String) {\n        vector::append(&mut s.bytes, r.bytes)\n    }\n\n    /// Appends bytes which must be in valid utf8 format.\n    public fun append_utf8(s: &mut String, bytes: vector<u8>) {\n        append(s, utf8(bytes))\n    }\n\n    /// Insert the other string at the byte index in given string. The index must be at a valid utf8 char\n    /// boundary.\n    public fun insert(s: &mut String, at: u64, o: String) {\n        let bytes = &s.bytes;\n        assert!(at <= vector::length(bytes) && internal_is_char_boundary(bytes, at), EINVALID_INDEX);\n        let l = length(s);\n        let front = sub_string(s, 0, at);\n        let end = sub_string(s, at, l);\n        append(&mut front, o);\n        append(&mut front, end);\n        *s = front;\n    }\n\n    /// Returns a sub-string using the given byte indices, where `i` is the first byte position and `j` is the start\n    /// of the first byte not included (or the length of the string). The indices must be at valid utf8 char boundaries,\n    /// guaranteeing that the result is valid utf8.\n    public fun sub_string(s: &String, i: u64, j: u64): String {\n        let bytes = &s.bytes;\n        let l = vector::length(bytes);\n        assert!(\n            j <= l && i <= j && internal_is_char_boundary(bytes, i) && internal_is_char_boundary(bytes, j),\n            EINVALID_INDEX\n        );\n        String{bytes: internal_sub_string(bytes, i, j)}\n    }\n\n    /// Computes the index of the first occurrence of a string. Returns `length(s)` if no occurrence found.\n    public fun index_of(s: &String, r: &String): u64 {\n        internal_index_of(&s.bytes, &r.bytes)\n    }\n\n\n    // Native API\n    native fun internal_check_utf8(v: &vector<u8>): bool;\n    native fun internal_is_char_boundary(v: &vector<u8>, i: u64): bool;\n    native fun internal_sub_string(v: &vector<u8>, i: u64, j: u64): vector<u8>;\n    native fun internal_index_of(v: &vector<u8>, r: &vector<u8>): u64;\n}\n",
              "source_map": ""
            }
          ],
          "name": "MoveStdlib",
          "upgrade_policy": {
            "policy": 1
          }
        },
        {
          "abis": [],
          "build_info": "---\npackage_name: AptosStdlib\naddress_alias_instantiation:\n  Extensions: \"0000000000000000000000000000000000000000000000000000000000000001\"\n  aptos_framework: \"0000000000000000000000000000000000000000000000000000000000000001\"\n  aptos_std: \"0000000000000000000000000000000000000000000000000000000000000001\"\n  std: \"0000000000000000000000000000000000000000000000000000000000000001\"\nsource_digest: 3E3C93D540BF490587EE82037A34547B6D979EEFB03BB75EFCE77FD7BD6ECBF5\nbuild_flags:\n  dev_mode: false\n  test_mode: false\n  generate_docs: false\n  generate_abis: true\n  install_dir: ~\n  force_recompilation: false\n  additional_named_addresses: {}\n  architecture: ~\n  fetch_deps_only: false\n",
          "error_map": "",
          "manifest": "[package]\nname = \"AptosStdlib\"\nversion = \"1.0.0\"\n\n[addresses]\nstd = \"0x1\"\naptos_std = \"0x1\"\naptos_framework = \"0x1\"\nExtensions = \"0x1\" # TODO: Needed for Prover to instantiate `{{Ext}}` in prelude.\n\n[dependencies]\nMoveStdlib = { local = \"../move-stdlib\" }\n",
          "modules": [
            {
              "name": "debug",
              "source": "/// Module providing debug functionality.\nmodule std::debug {\n    native public fun print<T>(x: &T);\n\n    native public fun print_stack_trace();\n}\n",
              "source_map": "0xbcc54ab2e4e55926f0259d49b7da528416c646f97f1878598a2282ed2ff1392e360000003b00000001000000000000000000000000000000000000000000000000000000000000000105646562756700020000bcc54ab2e4e55926f0259d49b7da528416c646f97f1878598a2282ed2ff1392e5400000059000000010154bcc54ab2e4e55926f0259d49b7da528416c646f97f1878598a2282ed2ff1392e5a0000005b000000010178bcc54ab2e4e55926f0259d49b7da528416c646f97f1878598a2282ed2ff1392e5d0000005e000000000000010100bcc54ab2e4e55926f0259d49b7da528416c646f97f1878598a2282ed2ff1392e7c0000008d00000000000000000100"
            },
            {
              "name": "table",
              "source": "/// Type of large-scale storage tables.\n/// source: https://github.com/move-language/move/blob/1b6b7513dcc1a5c866f178ca5c1e74beb2ce181e/language/extensions/move-table-extension/sources/Table.move#L1\n///\n/// It implements the Table type which supports individual table items to be represented by\n/// separate global state items. The number of items and a unique handle are tracked on the table\n/// struct itself, while the operations are implemented as native functions. No traversal is provided.\n\nmodule aptos_std::table {\n    friend aptos_std::table_with_length;\n    friend aptos_std::table_with_aggregator_length;\n\n    // native code raises this with error::invalid_arguments()\n    const EALREADY_EXISTS: u64 = 100;\n    // native code raises this with error::invalid_arguments()\n    const ENOT_FOUND: u64 = 101;\n\n    /// Type of tables\n    struct Table<phantom K: copy + drop, phantom V> has store {\n        handle: u128,\n    }\n\n    /// Create a new Table.\n    public fun new<K: copy + drop, V: store>(): Table<K, V> {\n        Table{\n            handle: new_table_handle<K, V>(),\n        }\n    }\n\n    /// Add a new entry to the table. Aborts if an entry for this\n    /// key already exists. The entry itself is not stored in the\n    /// table, and cannot be discovered from it.\n    public fun add<K: copy + drop, V>(table: &mut Table<K, V>, key: K, val: V) {\n        add_box<K, V, Box<V>>(table, key, Box{val})\n    }\n\n    /// Acquire an immutable reference to the value which `key` maps to.\n    /// Aborts if there is no entry for `key`.\n    public fun borrow<K: copy + drop, V>(table: &Table<K, V>, key: K): &V {\n        &borrow_box<K, V, Box<V>>(table, key).val\n    }\n\n    /// Acquire a mutable reference to the value which `key` maps to.\n    /// Aborts if there is no entry for `key`.\n    public fun borrow_mut<K: copy + drop, V>(table: &mut Table<K, V>, key: K): &mut V {\n        &mut borrow_box_mut<K, V, Box<V>>(table, key).val\n    }\n\n    /// Acquire a mutable reference to the value which `key` maps to.\n    /// Insert the pair (`key`, `default`) first if there is no entry for `key`.\n    public fun borrow_mut_with_default<K: copy + drop, V: drop>(table: &mut Table<K, V>, key: K, default: V): &mut V {\n        if (!contains(table, copy key)) {\n            add(table, copy key, default)\n        };\n        borrow_mut(table, key)\n    }\n\n    /// Insert the pair (`key`, `value`) if there is no entry for `key`.\n    /// update the value of the entry for `key` to `value` otherwise\n    public fun upsert<K: copy + drop, V: drop>(table: &mut Table<K, V>, key: K, value: V) {\n        if (!contains(table, copy key)) {\n            add(table, copy key, value)\n        } else {\n            let ref = borrow_mut(table, key);\n            *ref = value;\n        };\n    }\n\n    /// Remove from `table` and return the value which `key` maps to.\n    /// Aborts if there is no entry for `key`.\n    public fun remove<K: copy + drop, V>(table: &mut Table<K, V>, key: K): V {\n        let Box{ val } = remove_box<K, V, Box<V>>(table, key);\n        val\n    }\n\n    /// Returns true iff `table` contains an entry for `key`.\n    public fun contains<K: copy + drop, V>(table: &Table<K, V>, key: K): bool {\n        contains_box<K, V, Box<V>>(table, key)\n    }\n\n    #[test_only]\n    /// Testing only: allows to drop a table even if it is not empty.\n    public fun drop_unchecked<K: copy + drop, V>(table: Table<K, V>) {\n        drop_unchecked_box<K, V, Box<V>>(table)\n    }\n\n    public(friend) fun destroy<K: copy + drop, V>(table: Table<K, V>) {\n        destroy_empty_box<K, V, Box<V>>(&table);\n        drop_unchecked_box<K, V, Box<V>>(table)\n    }\n\n    #[test_only]\n    struct TableHolder<phantom K: copy + drop, phantom V: drop> has key{\n        t: Table<K, V>\n    }\n\n    #[test(account = @0x1)]\n    fun test_upsert(account: signer) {\n        let t = new<u64, u8>();\n        let key: u64 = 111;\n        let error_code: u64 = 1;\n        assert!(!contains(&t, key), error_code);\n        upsert(&mut t, key, 12);\n        assert!(*borrow(&t, key) == 12, error_code);\n        upsert(&mut t, key, 23);\n        assert!(*borrow(&t, key) == 23, error_code);\n\n        move_to(&account, TableHolder{ t });\n    }\n\n    // ======================================================================================================\n    // Internal API\n\n    /// Wrapper for values. Required for making values appear as resources in the implementation.\n    struct Box<V> has key, drop, store {\n        val: V\n    }\n\n    // Primitives which take as an additional type parameter `Box<V>`, so the implementation\n    // can use this to determine serialization layout.\n    native fun new_table_handle<K, V>(): u128;\n    native fun add_box<K: copy + drop, V, B>(table: &mut Table<K, V>, key: K, val: Box<V>);\n    native fun borrow_box<K: copy + drop, V, B>(table: &Table<K, V>, key: K): &Box<V>;\n    native fun borrow_box_mut<K: copy + drop, V, B>(table: &mut Table<K, V>, key: K): &mut Box<V>;\n    native fun contains_box<K: copy + drop, V, B>(table: &Table<K, V>, key: K): bool;\n    native fun remove_box<K: copy + drop, V, B>(table: &mut Table<K, V>, key: K): Box<V>;\n    native fun destroy_empty_box<K: copy + drop, V, B>(table: &Table<K, V>);\n    native fun drop_unchecked_box<K: copy + drop, V, B>(table: Table<K, V>);\n}\n",
              "source_map": ""
            },
            {
              "name": "aggregator",
              "source": "/// This module provides an API for aggregatable integers that allow addition,\n/// subtraction, and reading.\n///\n/// Design rationale (V1)\n/// =====================\n/// Aggregator can be seen as a parellizable integer that supports addition,\n/// subtraction and reading. The first version (V1) of aggregator has the\n/// the following specification.\n///\n/// add(value: u128)\n///   Speculatively adds a `value` to aggregator. This is a cheap operation\n///   which is easly parallelizable. If the result of addition overflows a\n///   `limit` (one of aggregator's fields), an error is produced and the\n///   execution aborts.\n///\n/// sub(value: u128)\n///   Subtracts a `value` from aggregator. This is an expensive operation\n///   which is non-parallelizable. It reads the value of the aggregator, and\n///   the tries to subtract. If the result goes below zero, an error is produced\n///   and the execution aborts.\n///\n/// read(): u128\n///   Reads (materializes) the value of an aggregator. This is an expensive\n///   operation which usually involves reading from the storage.\n///\n/// destroy()\n///   Destriys and aggregator, also cleaning up storage if necessary.\n///\n/// Note that there is no constructor in `Aggregator` API. This is done on purpose.\n/// For every aggregator, we need to know where its value is stored on chain.\n/// Currently, Move does not allow fine grained access to struct fields. For\n/// example, given a struct\n///\n///   struct Foo<A> has key {\n///       a: A,\n///       b: u128,\n///   }\n///\n/// there is no way of getting a value of `Foo::a` without hardcoding the layout\n/// of `Foo` and the field offset. To mitigate this problem, one can use a table.\n/// Every item stored in the table is uniqely identified by (handle, key) pair:\n/// `handle` identifies a table instance, `key` identifies an item within the table.\n///\n/// So how is this related to aggregator? Well, aggregator can reuse the table's\n/// approach for fine-grained storage. However, since native functions only see a\n/// reference to aggregator, we must ensure that both `handle` and `key` are\n/// included as fields. Therefore, the struct looks like\n///\n///  struct Aggregator {\n///      handle: u128,\n///      key: u128,\n///      ..\n///  }\n///\n/// Remaining question is how to generate this (handle, key) pair. For that, we have\n/// a dedicated struct called `AggregatorFactory` which is responsible for constructing\n/// aggregators. See `aggregator_factory.move` for more details.\n///\n/// Advice to users (V1)\n/// ====================\n/// Users are encouraged to use \"cheap\" operations (e.g. additions) to exploit the\n/// parallelism in execution.\nmodule aptos_std::aggregator {\n\n    /// When the value of aggregator (actual or accumulated) overflows (raised\n    /// by native code).\n    const EAGGREGATOR_OVERFLOW: u64 = 1;\n\n    /// When the value of aggregator (actual or accumulated) underflows, i.e goes\n    /// below zero (raised by native code).\n    const EAGGREGATOR_UNDERFLOW: u64 = 2;\n\n    /// When aggregator feature is not supported (raised by native code).\n    const ENOT_SUPPORTED: u64 = 3;\n\n    struct Aggregator has store {\n        handle: u128,\n        key: u128,\n        limit: u128,\n    }\n\n    /// Adds `value` to aggregator. Aborts on overflowing the limit.\n    public native fun add(aggregator: &mut Aggregator, value: u128);\n\n    /// Subtracts `value` from aggregator. Aborts on going below zero.\n    public native fun sub(aggregator: &mut Aggregator, value: u128);\n\n    /// Returns a value stored in this aggregator.\n    public native fun read(aggregator: &Aggregator): u128;\n\n    /// Destroys an aggregator and removes it from its `AggregatorFactory`.\n    public native fun destroy(aggregator: Aggregator);\n}\n",
              "source_map": "0x968c97b297eec5aa46a853ac3a9eb5eecc71d7ef95d0920a374a909d73b79318640a00006e0a00000100000000000000000000000000000000000000000000000000000000000000010a61676772656761746f72010000968c97b297eec5aa46a853ac3a9eb5eecc71d7ef95d0920a374a909d73b79318260c0000300c00000003968c97b297eec5aa46a853ac3a9eb5eecc71d7ef95d0920a374a909d73b79318450c00004b0c0000968c97b297eec5aa46a853ac3a9eb5eecc71d7ef95d0920a374a909d73b793185b0c00005e0c0000968c97b297eec5aa46a853ac3a9eb5eecc71d7ef95d0920a374a909d73b793186e0c0000730c0000040000968c97b297eec5aa46a853ac3a9eb5eecc71d7ef95d0920a374a909d73b79318dd0c0000e00c000000020a61676772656761746f72968c97b297eec5aa46a853ac3a9eb5eecc71d7ef95d0920a374a909d73b79318e10c0000eb0c00000576616c7565968c97b297eec5aa46a853ac3a9eb5eecc71d7ef95d0920a374a909d73b79318fe0c0000030d0000000000010100968c97b297eec5aa46a853ac3a9eb5eecc71d7ef95d0920a374a909d73b793186b0e0000720e000000010a61676772656761746f72968c97b297eec5aa46a853ac3a9eb5eecc71d7ef95d0920a374a909d73b79318730e00007d0e0000000000010200968c97b297eec5aa46a853ac3a9eb5eecc71d7ef95d0920a374a909d73b79318e30d0000e70d000000010a61676772656761746f72968c97b297eec5aa46a853ac3a9eb5eecc71d7ef95d0920a374a909d73b79318e80d0000f20d0000000000010300968c97b297eec5aa46a853ac3a9eb5eecc71d7ef95d0920a374a909d73b793186a0d00006d0d000000020a61676772656761746f72968c97b297eec5aa46a853ac3a9eb5eecc71d7ef95d0920a374a909d73b793186e0d0000780d00000576616c7565968c97b297eec5aa46a853ac3a9eb5eecc71d7ef95d0920a374a909d73b793188b0d0000900d000000000001030e454e4f545f535550504f525445440200144541474752454741544f525f4f564552464c4f570000154541474752454741544f525f554e444552464c4f570100"
            },
            {
              "name": "aggregator_factory",
              "source": "/// This module provides foundations to create aggregators in the system.\n///\n/// Design rationale (V1)\n/// =====================\n/// First, we encourage the reader to see rationale of `Aggregator` in\n/// `aggregator.move`.\n///\n/// Recall that the value of any aggregator can be identified in storage by\n/// (handle, key) pair. How this pair can be generated? Short answer: with\n/// `AggregatorFactory`!\n///\n/// `AggregatorFactory` is a struct that can be stored as a resource on some\n/// account and which contains a `phantom_table` field. When the factory is\n/// initialized, we initialize this table. Importantly, table initialization\n/// only generates a uniue table `handle` - something we can reuse.\n///\n/// When the user wants to create a new aggregator, he/she calls a constructor\n/// provided by the factory (`create_aggregator(..)`). This constructor generates\n/// a unique key, which with the handle is used to initialize `Aggregator` struct.\n///\n/// Use cases\n/// =========\n/// We limit the usage of `AggregatorFactory` by only storing it on the core\n/// account.\n///\n/// When something whants to use an aggregator, the factory is queried and an\n/// aggregator instance is created. Once aggregator is no longer in use, it\n/// should be destroyed by the user.\nmodule aptos_std::aggregator_factory {\n    use std::error;\n    use std::signer;\n\n    use aptos_std::aggregator::Aggregator;\n    use aptos_std::table::{Self, Table};\n\n    #[test_only]\n    friend aptos_std::aggregator_tests;\n\n    // TODO: only certain modules are allowed to create a aggregator.\n    friend aptos_std::optional_aggregator;\n    friend aptos_std::table_with_aggregator_length;\n\n    /// When aggregator factory has already been published.\n    const EAGGREGATOR_FACTORY_EXISTS: u64 = 1;\n\n    /// When aggregator factory is published to not core framework address.\n    const ENOT_CORE_FRAMEWORK_ADDRESS: u64 = 2;\n\n    /// When aggregator feature is not supported (raised by native code).\n    const ENOT_SUPPORTED: u64 = 3;\n\n    /// Struct that creates aggregators.\n    struct AggregatorFactory has key {\n        phantom_table: Table<u128, u128>,\n    }\n\n    /// Creates a new factory for aggregators.\n    public fun initialize_aggregator_factory(account: &signer) {\n        assert!(\n            signer::address_of(account) == @aptos_framework,\n            error::permission_denied(ENOT_CORE_FRAMEWORK_ADDRESS)\n        );\n\n        assert!(\n            !exists<AggregatorFactory>(signer::address_of(account)),\n            error::already_exists(EAGGREGATOR_FACTORY_EXISTS)\n        );\n\n        let aggregator_factory = AggregatorFactory {\n            phantom_table: table::new()\n        };\n        move_to(account, aggregator_factory);\n    }\n\n    /// Creates a new aggregator instance which overflows on exceeding a `limit`.\n    public(friend) fun create_aggregator(limit: u128): Aggregator acquires AggregatorFactory {\n        let aggregator_factory = borrow_global_mut<AggregatorFactory>(@aptos_framework);\n        new_aggregator(aggregator_factory, limit)\n    }\n\n    native fun new_aggregator(aggregator_factory: &mut AggregatorFactory, limit: u128): Aggregator;\n}\n",
              "source_map": "0x72004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d48090500001b0500000100000000000000000000000000000000000000000000000000000000000000011261676772656761746f725f666163746f727901000072004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d480808000019080000000172004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d482c0800003908000003000072004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d48070b0000180b00000001056c696d697472004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d48190b00001e0b0000011261676772656761746f725f666163746f727972004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d485b0b00006d0b00000006000072004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d48950b0000a50b0000010072004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d48700b0000810b0000020072004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d485b0b00006d0b0000030072004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d48bf0b0000d10b0000040072004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d48d30b0000d80b0000050072004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d48b00b0000d90b000000010072004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d4893080000b00800000001076163636f756e7472004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d48b1080000b8080000011261676772656761746f725f666163746f727972004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d480d0a00001f0a00000017000072004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d48f5080000fc080000010072004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d48e2080000fd080000020072004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d480109000011090000030072004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d48fe08000000090000040072004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d48cd0800005e090000070072004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d483809000053090000080072004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d481f09000054090000090072004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d48cd0800005e0900000a0072004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d48ac090000b30900000b0072004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d4899090000b40900000c0072004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d487f090000850900000d0072004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d487e0900007f0900000e0072004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d4869090000fe090000110072004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d48d9090000f3090000120072004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d48c3090000f4090000130072004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d4869090000fe090000140072004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d48510a00005d0a0000150072004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d48220a0000670a0000160072004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d480d0a00001f0a0000170072004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d48790a0000800a0000180072004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d48820a0000940a0000190072004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d48710a0000780a00001a0072004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d48950a0000960a000000020072004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d48f00b0000fe0b000000021261676772656761746f725f666163746f727972004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d48ff0b0000110c0000056c696d697472004d27e39da9add9bbb05a587e9f5d7affebe3be5bf2b886a1eedf91a78d482b0c0000300c000000000001030e454e4f545f535550504f5254454402001a4541474752454741544f525f464143544f52595f45584953545300001b454e4f545f434f52455f4652414d45574f524b5f414444524553530100"
            },
            {
              "name": "aptos_hash",
              "source": "/// Non-cryptographic hashes\nmodule aptos_std::aptos_hash {\n    use std::bcs;\n\n    native public fun sip_hash(bytes: vector<u8>): u64;\n\n    public fun sip_hash_from_value<MoveValue>(v: &MoveValue): u64 {\n        let bytes = bcs::to_bytes(v);\n\n        sip_hash(bytes)\n    }\n\n    spec sip_hash_from_value {\n        // TODO: temporary mockup.\n        pragma opaque;\n    }\n}\n",
              "source_map": "0x6ff47d72084f62a203c65026c980d7039c77aa36260a1b697773295dd4775ad42f000000390000000100000000000000000000000000000000000000000000000000000000000000010a6170746f735f68617368000200006ff47d72084f62a203c65026c980d7039c77aa36260a1b697773295dd4775ad4650000006d00000000010562797465736ff47d72084f62a203c65026c980d7039c77aa36260a1b697773295dd4775ad46e000000730000000000000101006ff47d72084f62a203c65026c980d7039c77aa36260a1b697773295dd4775ad497000000aa00000001094d6f766556616c75656ff47d72084f62a203c65026c980d7039c77aa36260a1b697773295dd4775ad4ab000000b40000000101766ff47d72084f62a203c65026c980d7039c77aa36260a1b697773295dd4775ad4b6000000b7000000010562797465736ff47d72084f62a203c65026c980d7039c77aa36260a1b697773295dd4775ad4d8000000dd000000000500006ff47d72084f62a203c65026c980d7039c77aa36260a1b697773295dd4775ad4ee000000ef00000001006ff47d72084f62a203c65026c980d7039c77aa36260a1b697773295dd4775ad4e0000000f000000002006ff47d72084f62a203c65026c980d7039c77aa36260a1b697773295dd4775ad4d8000000dd00000003006ff47d72084f62a203c65026c980d7039c77aa36260a1b697773295dd4775ad4040100000901000004006ff47d72084f62a203c65026c980d7039c77aa36260a1b697773295dd4775ad4fb0000000a0100000000"
            },
            {
              "name": "table_with_length",
              "source": "/// Extends Table and provides functions such as length and the ability to be desttroyed\n\nmodule aptos_std::table_with_length {\n    use std::error;\n    use aptos_std::table::{Self, Table};\n\n    // native code raises this with error::invalid_arguments()\n    const EALREADY_EXISTS: u64 = 100;\n    // native code raises this with error::invalid_arguments()\n    const ENOT_FOUND: u64 = 101;\n    const ENOT_EMPTY: u64 = 102;\n\n    /// Type of tables\n    struct TableWithLength<phantom K: copy + drop, phantom V> has store {\n        inner: Table<K, V>,\n        length: u64,\n    }\n\n    /// Create a new Table.\n    public fun new<K: copy + drop, V: store>(): TableWithLength<K, V> {\n        TableWithLength {\n            inner: table::new<K, V>(),\n            length: 0,\n        }\n    }\n\n    /// Destroy a table. The table must be empty to succeed.\n    public fun destroy_empty<K: copy + drop, V>(table: TableWithLength <K, V>) {\n        assert!(table.length == 0, error::invalid_state(ENOT_EMPTY));\n        let TableWithLength  { inner, length: _ } = table;\n        table::destroy(inner)\n    }\n\n    /// Add a new entry to the table. Aborts if an entry for this\n    /// key already exists. The entry itself is not stored in the\n    /// table, and cannot be discovered from it.\n    public fun add<K: copy + drop, V>(table: &mut TableWithLength <K, V>, key: K, val: V) {\n        table::add(&mut table.inner, key, val);\n        table.length = table.length + 1;\n    }\n\n    /// Acquire an immutable reference to the value which `key` maps to.\n    /// Aborts if there is no entry for `key`.\n    public fun borrow<K: copy + drop, V>(table: &TableWithLength <K, V>, key: K): &V {\n        table::borrow(&table.inner, key)\n    }\n\n    /// Acquire a mutable reference to the value which `key` maps to.\n    /// Aborts if there is no entry for `key`.\n    public fun borrow_mut<K: copy + drop, V>(table: &mut TableWithLength <K, V>, key: K): &mut V {\n        table::borrow_mut(&mut table.inner, key)\n    }\n\n    /// Returns the length of the table, i.e. the number of entries.\n    public fun length<K: copy + drop, V>(table: &TableWithLength <K, V>): u64 {\n        table.length\n    }\n\n    /// Returns true if this table is empty.\n    public fun empty<K: copy + drop, V>(table: &TableWithLength <K, V>): bool {\n        table.length == 0\n    }\n\n    /// Acquire a mutable reference to the value which `key` maps to.\n    /// Insert the pair (`key`, `default`) first if there is no entry for `key`.\n    public fun borrow_mut_with_default<K: copy + drop, V: drop>(table: &mut TableWithLength <K, V>, key: K, default: V): &mut V {\n        table::borrow_mut_with_default(&mut table.inner, key, default)\n    }\n\n    /// Remove from `table` and return the value which `key` maps to.\n    /// Aborts if there is no entry for `key`.\n    public fun remove<K: copy + drop, V>(table: &mut TableWithLength <K, V>, key: K): V {\n        let val = table::remove(&mut table.inner, key);\n        table.length = table.length - 1;\n        val\n    }\n\n    /// Returns true iff `table` contains an entry for `key`.\n    public fun contains<K: copy + drop, V>(table: &TableWithLength <K, V>, key: K): bool {\n        table::contains(&table.inner, key)\n    }\n}\n",
              "source_map": "0x1d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e56c0000007d000000010000000000000000000000000000000000000000000000000000000000000001117461626c655f776974685f6c656e6774680100001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5c7010000d601000002014b1d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5df010000e001000001561d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5f7010000f8010000021d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e50e020000130200001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e52a020000300200000a00001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5030500000605000002014b1d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5070500000805000001561d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5170500001805000003057461626c651d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e51a0500001f050000036b65791d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e53e050000410500000376616c1d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5460500004905000000000d00001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5680500006d05000001001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5630500007305000002001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5750500007805000003001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e57a0500007d05000004001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5580500007e05000005001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5970500009c05000006001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e597050000a305000008001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5a6050000a705000009001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5a4050000a50500000a001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5880500008d0500000b001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e588050000940500000c001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e588050000a70500000d001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5a7050000a80500000001001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5370600003d06000002014b1d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e53e0600003f06000001561d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e54e0600004f06000002057461626c651d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e55106000056060000036b65791d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5710600007406000000000400001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5960600009b06000001001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e595060000a106000002001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5a3060000a606000003001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e587060000a70600000002001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5330700003d07000002014b1d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e53e0700003f07000001561d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e54e0700004f07000002057461626c651d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e55107000056070000036b65791d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5750700007807000000000400001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5a6070000ab07000001001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5a1070000b107000002001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5b3070000b607000003001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e58f070000b70700000003001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5b4090000cb09000002014b1d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5cc090000cd09000001561d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5dc090000dd09000003057461626c651d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5e5090000ea090000036b65791d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5090a00000c0a00000764656661756c741d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5110a0000180a000000000500001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5530a0000580a000001001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e54e0a00005e0a000002001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5600a0000630a000003001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5650a00006c0a000004001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e52f0a00006d0a00000004001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5050c00000d0c000002014b1d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e50e0c00000f0c000001561d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e51e0c00001f0c000002057461626c651d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5210c0000260c0000036b65791d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5410c0000440c000000000400001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e56a0c00006f0c000001001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5690c0000750c000002001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5770c00007a0c000003001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5590c00007b0c00000005001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5570300006403000002014b1d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5650300006603000001561d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5750300007603000001057461626c651d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5780300007d0300000105696e6e65721d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5fe03000003040000000e00001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5a9030000ae03000001001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5a9030000b503000003001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5b9030000ba03000004001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5b6030000b803000005001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5a1030000dd03000006001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5d1030000db03000007001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5bc030000dc03000008001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5a1030000dd03000009001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e513040000180400000a001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5eb030000100400000b001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e50d0400000e0400000c001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5fe030000030400000d001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e531040000360400000e001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e522040000370400000006001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5ac080000b108000002014b1d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5b2080000b308000001561d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5c2080000c308000001057461626c651d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5c5080000ca08000000000500001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5f5080000fa08000001001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5f50800000109000003001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5050900000609000004001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5020900000409000005001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5f5080000060900000007001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5130800001908000002014b1d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e51a0800001b08000001561d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e52a0800002b08000001057461626c651d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e52d0800003208000000000200001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e55c0800006108000001001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e55c080000680800000008001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5690200006c02000002014b1d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e56d0200006e02000001561d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e57d0200007e0200000000000300001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5cf020000e102000001001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5f7020000f802000002001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5aa020000030300000009001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5f90a0000ff0a000002014b1d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5000b0000010b000001561d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5100b0000110b000002057461626c651d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5130b0000180b0000036b65791d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5370b00003a0b0000010376616c1d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5500b0000530b0000000d00001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5690b00006e0b000001001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5640b0000740b000002001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5760b0000790b000003001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5560b00007a0b000004001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5500b0000530b000005001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5930b0000980b000006001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5930b00009f0b000008001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5a20b0000a30b000009001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5a00b0000a10b00000a001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5840b0000890b00000b001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5840b0000900b00000c001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5840b0000a30b00000d001d3a29d412ac2b4a254ca4bb3be30dcdf915b6e5636170297ef17e4602b0c3e5ad0b0000b00b000000030a454e4f545f454d50545901000a454e4f545f464f554e4402000f45414c52454144595f4558495354530000"
            },
            {
              "name": "big_vector",
              "source": "module aptos_std::big_vector {\n    use std::error;\n    use std::vector;\n    use aptos_std::table_with_length::{Self, TableWithLength};\n\n    /// The index into the vector is out of bounds\n    const EINDEX_OUT_OF_BOUNDS: u64 = 0;\n    /// Need to reserve more buckets for push_back_no_grow.\n    const EOUT_OF_CAPACITY: u64 = 1;\n    /// Destory a non-empty vector.\n    const ENOT_EMPTY: u64 = 2;\n\n    /// Index of the value in the buckets.\n    struct BigVectorIndex has copy, drop, store {\n        bucket_index: u64,\n        vec_index: u64,\n    }\n\n    /// A Scalable vector implementation based on tables, elements are grouped into buckets with `bucket_size`.\n    struct BigVector<T> has store {\n        buckets: TableWithLength<u64, vector<T>>,\n        end_index: BigVectorIndex,\n        num_buckets: u64,\n        bucket_size: u64\n    }\n\n    /// Regular Vector API\n\n    /// Create an empty vector.\n    public fun new<T: store>(bucket_size: u64): BigVector<T> {\n        assert!(bucket_size > 0, 0);\n        BigVector {\n            buckets: table_with_length::new(),\n            end_index: BigVectorIndex {\n                bucket_index: 0,\n                vec_index: 0,\n            },\n            num_buckets: 0,\n            bucket_size,\n        }\n    }\n\n    /// Create an empty vector with `num_buckets` reserved.\n    public fun new_with_capacity<T: store>(bucket_size: u64, num_buckets: u64): BigVector<T> {\n        let v = new(bucket_size);\n        reserve(&mut v, num_buckets);\n        v\n    }\n\n    /// Destroy the vector `v`.\n    /// Aborts if `v` is not empty.\n    public fun destroy_empty<T>(v: BigVector<T>) {\n        assert!(is_empty(&v), error::invalid_argument(ENOT_EMPTY));\n        shrink_to_fit(&mut v);\n        let BigVector { buckets, end_index: _, num_buckets: _, bucket_size: _ } = v;\n        table_with_length::destroy_empty(buckets);\n    }\n\n    /// Add element `val` to the end of the vector `v`. It grows the buckets when the current buckets are full.\n    /// This operation will cost more gas when it adds new bucket.\n    public fun push_back<T>(v: &mut BigVector<T>, val: T) {\n        if (v.end_index.bucket_index == v.num_buckets) {\n            table_with_length::add(&mut v.buckets, v.num_buckets, vector::empty());\n            v.num_buckets = v.num_buckets + 1;\n        };\n        vector::push_back(table_with_length::borrow_mut(&mut v.buckets, v.end_index.bucket_index), val);\n        increment_index(&mut v.end_index, v.bucket_size);\n    }\n\n    /// Add element `val` to the end of the vector `v`.\n    /// Aborts if all buckets are full.\n    /// It can split the gas responsibility between user of the vector and owner of the vector.\n    /// Call `reserve` to explicit add more buckets.\n    public fun push_back_no_grow<T>(v: &mut BigVector<T>, val: T) {\n        assert!(v.end_index.bucket_index < v.num_buckets, error::invalid_argument(EOUT_OF_CAPACITY));\n        vector::push_back(table_with_length::borrow_mut(&mut v.buckets, v.end_index.bucket_index), val);\n        increment_index(&mut v.end_index, v.bucket_size);\n    }\n\n    /// Pop an element from the end of vector `v`. It doesn't shrink the buckets even if they're empty.\n    /// Call `shrink_to_fit` explicity to deallocate empty buckets.\n    /// Aborts if `v` is empty.\n    public fun pop_back<T>(v: &mut BigVector<T>): T {\n        assert!(!is_empty(v), error::invalid_argument(EINDEX_OUT_OF_BOUNDS));\n        decrement_index(&mut v.end_index, v.bucket_size);\n        let val = vector::pop_back(table_with_length::borrow_mut(&mut v.buckets, v.end_index.bucket_index));\n        val\n    }\n\n    /// Acquire an immutable reference to the `i`th element of the vector `v`.\n    /// Aborts if `i` is out of bounds.\n    public fun borrow<T>(v: &BigVector<T>, index: &BigVectorIndex): &T {\n        vector::borrow(table_with_length::borrow(&v.buckets, index.bucket_index), index.vec_index)\n    }\n\n    /// Return a mutable reference to the `i`th element in the vector `v`.\n    /// Aborts if `i` is out of bounds.\n    public fun borrow_mut<T>(v: &mut BigVector<T>, index: &BigVectorIndex): &mut T {\n        vector::borrow_mut(table_with_length::borrow_mut(&mut v.buckets, index.bucket_index), index.vec_index)\n    }\n\n    /// Return the length of the vector.\n    public fun length<T>(v: &BigVector<T>): u64 {\n        v.end_index.bucket_index * v.bucket_size + v.end_index.vec_index\n    }\n\n    /// Return `true` if the vector `v` has no elements and `false` otherwise.\n    public fun is_empty<T>(v: &BigVector<T>): bool {\n        length(v) == 0\n    }\n\n    /// Swap the `i`th element of the vector `v` with the last element and then pop the vector.\n    /// This is O(1), but does not preserve ordering of elements in the vector.\n    /// Aborts if `i` is out of bounds.\n    public fun swap_remove<T>(v: &mut BigVector<T>, index: &BigVectorIndex): T {\n        let last_val = pop_back(v);\n        // if the requested value is the last one, return it\n        if (v.end_index.bucket_index == index.bucket_index && v.end_index.vec_index == index.vec_index) {\n            return last_val\n        };\n        // because the lack of mem::swap, here we swap remove the requested value from the bucket\n        // and append the last_val to the bucket then swap the last bucket val back\n        let bucket = table_with_length::borrow_mut(&mut v.buckets, index.bucket_index);\n        let bucket_len = vector::length(bucket);\n        let val = vector::swap_remove(bucket, index.vec_index);\n        vector::push_back(bucket, last_val);\n        vector::swap(bucket, index.vec_index, bucket_len - 1);\n        val\n    }\n\n    /// Return true if `val` is in the vector `v`.\n    public fun contains<T>(v: &BigVector<T>, val: &T): bool {\n        if (is_empty(v)) return false;\n        let (exist, _) = index_of(v, val);\n        exist\n    }\n\n    /// Return `(true, i)` if `val` is in the vector `v` at index `i`.\n    /// Otherwise, returns `(false, 0)`.\n    public fun index_of<T>(v: &BigVector<T>, val: &T): (bool, u64) {\n        let i = 0;\n        let len = length(v);\n        let index = bucket_index(v, 0);\n        while (i < len) {\n            if (borrow(v, &index) == val) {\n                return (true, i)\n            };\n            i = i + 1;\n            increment_index(&mut index, v.bucket_size);\n        };\n        (false, 0)\n    }\n\n    /// Buckets related API\n\n    /// Return corresponding BigVectorIndex for `i`, we can avoid this once table supports lookup by value instead of by reference.\n    /// Aborts if `i` is out of bounds.\n    public fun bucket_index<T>(v: &BigVector<T>, i: u64): BigVectorIndex {\n        assert!(i < length(v), EINDEX_OUT_OF_BOUNDS);\n        BigVectorIndex {\n            bucket_index: i / v.bucket_size,\n            vec_index: i % v.bucket_size,\n        }\n    }\n\n    /// Return the bucket size of the vector.\n    public fun bucket_size<T>(v: &BigVector<T>): u64 {\n        v.bucket_size\n    }\n\n    /// Equivalent to i = i + 1 for BigVectorIndex with `bucket_size`.\n    public fun increment_index(index: &mut BigVectorIndex, bucket_size: u64) {\n        if (index.vec_index + 1 == bucket_size) {\n            index.bucket_index  = index.bucket_index + 1;\n            index.vec_index = 0;\n        } else {\n            index.vec_index = index.vec_index + 1;\n        }\n    }\n\n    /// Equivalent to i = i - 1 for BigVectorIndex with `bucket_size`.\n    /// Aborts if `i` becomes out of bounds.\n    public fun decrement_index(index: &mut BigVectorIndex, bucket_size: u64) {\n        if (index.vec_index == 0) {\n            assert!(index.bucket_index > 0, EINDEX_OUT_OF_BOUNDS);\n            index.bucket_index = index.bucket_index - 1;\n            index.vec_index = bucket_size - 1;\n        } else {\n            index.vec_index = index.vec_index - 1;\n        }\n    }\n\n    /// Reserver `additional_buckets` more buckets.\n    public fun reserve<T>(v: &mut BigVector<T>, additional_buckets: u64) {\n        while (additional_buckets > 0) {\n            table_with_length::add(&mut v.buckets, v.num_buckets, vector::empty());\n            v.num_buckets = v.num_buckets + 1;\n            additional_buckets = additional_buckets - 1;\n        }\n    }\n\n    /// Shrink the buckets to fit the current length.\n    public fun shrink_to_fit<T>(v: &mut BigVector<T>) {\n        while (v.num_buckets > buckets_required(&v.end_index)) {\n            v.num_buckets = v.num_buckets - 1;\n            let v = table_with_length::remove(&mut v.buckets, v.num_buckets);\n            vector::destroy_empty(v);\n        }\n    }\n\n    fun buckets_required(end_index: &BigVectorIndex): u64 {\n        let additional = if (end_index.vec_index == 0) { 0 } else { 1 };\n        end_index.bucket_index + additional\n    }\n\n    #[test]\n    fun big_vector_test() {\n        let v = new(5);\n        let i = 0;\n        while (i < 100) {\n            push_back(&mut v, i);\n            i = i + 1;\n        };\n        let j = 0;\n        while (j < 100) {\n            let index = bucket_index(&v, j);\n            let val = borrow(&v, &index);\n            assert!(*val == j, 0);\n            j = j + 1;\n        };\n        while (i > 0) {\n            i = i - 1;\n            let (exist, index) = index_of(&v, &i);\n            let j = pop_back(&mut v);\n            assert!(exist, 0);\n            assert!(index == i, 0);\n            assert!(j == i, 0);\n        };\n        while (i < 100) {\n            push_back(&mut v, i);\n            i = i + 1;\n        };\n        let last_index = bucket_index(&v, length(&v) - 1);\n        assert!(swap_remove(&mut v, &last_index) == 99, 0);\n        let first_index = bucket_index(&v, 0);\n        assert!(swap_remove(&mut v, &first_index) == 0, 0);\n        while (length(&v) > 0) {\n            // the vector is always [N, 1, 2, ... N-1] with repetitive swap_remove(&mut v, 0)\n            let expected = length(&v);\n            let index = bucket_index(&v, 0);\n            let val = swap_remove(&mut v, &index);\n            assert!(val == expected, 0);\n        };\n        shrink_to_fit(&mut v);\n        destroy_empty(v);\n    }\n\n    #[test]\n    #[expected_failure]\n    fun big_vector_need_grow() {\n        let v = new_with_capacity(5, 1);\n        let i = 0;\n        while (i < 6) {\n            push_back_no_grow(&mut v, i);\n            i = i + 1;\n        };\n        destroy_empty(v);\n    }\n\n    #[test]\n    fun big_vector_reserve_and_shrink() {\n        let v = new (10);\n        reserve(&mut v, 10);\n        assert!(v.num_buckets == 10, 0);\n        let i = 0;\n        while (i < 100) {\n            push_back_no_grow(&mut v, i);\n            i = i + 1;\n        };\n        while (i < 120) {\n            push_back(&mut v, i);\n            i = i + 1;\n        };\n        while (i > 90) {\n            pop_back(&mut v);\n            i = i - 1;\n        };\n        assert!(v.num_buckets == 12, 0);\n        shrink_to_fit(&mut v);\n        assert!(v.num_buckets == 9, 0);\n        while (i > 55) {\n            pop_back(&mut v);\n            i = i - 1;\n        };\n        shrink_to_fit(&mut v);\n        assert!(v.num_buckets == 6, 0);\n        while (i > 0) {\n            pop_back(&mut v);\n            i = i - 1;\n        };\n        shrink_to_fit(&mut v);\n        destroy_empty(v);\n    }\n\n    #[test]\n    fun big_vector_empty_contains() {\n        let v = new<u64> (10);\n        assert!(!contains<u64>(&v, &(1 as u64)), 0);\n        destroy_empty(v);\n    }\n}\n",
              "source_map": ""
            },
            {
              "name": "capability",
              "source": "/// A module which defines the basic concept of\n/// [*capabilities*](https://en.wikipedia.org/wiki/Capability-based_security) for managing access control.\n///\n/// EXPERIMENTAL\n///\n/// # Overview\n///\n/// A capability is a unforgeable token which testifies that a signer has authorized a certain operation.\n/// The token is valid during the transaction where it is obtained. Since the type `capability::Cap` has\n/// no ability to be stored in global memory, capabilities cannot leak out of a transaction. For every function\n/// called within a transaction which has a capability as a parameter, it is guaranteed that the capability\n/// has been obtained via a proper signer-based authorization step previously in the transaction's execution.\n///\n/// ## Usage\n///\n/// Initializing and acquiring capabilities is usually encapsulated in a module with a type\n/// tag which can only be constructed by this module.\n///\n/// ```\n/// module Pkg::Feature {\n///   use std::capability::Cap;\n///\n///   /// A type tag used in Cap<Feature>. Only this module can create an instance,\n///   /// and there is no public function other than Self::acquire which returns a value of this type.\n///   /// This way, this module has full control how Cap<Feature> is given out.\n///   struct Feature has drop {}\n///\n///   /// Initializes this module.\n///   public fun initialize(s: &signer) {\n///     // Create capability. This happens once at module initialization time.\n///     // One needs to provide a witness for being the owner of Feature\n///     // in the 2nd parameter.\n///     <<additional conditions allowing to initialize this capability>>\n///     capability::create<Feature>(s, &Feature{});\n///   }\n///\n///   /// Acquires the capability to work with this feature.\n///   public fun acquire(s: &signer): Cap<Feature> {\n///     <<additional conditions allowing to acquire this capability>>\n///     capability::acquire<Feature>(s, &Feature{});\n///   }\n///\n///   /// Does something related to the feature. The caller must pass a Cap<Feature>.\n///   public fun do_something(_cap: Cap<Feature>) { ... }\n/// }\n/// ```\n///\n/// ## Delegation\n///\n/// Capabilities come with the optional feature of *delegation*. Via `Self::delegate`, an owner of a capability\n/// can designate another signer to be also capable of acquiring the capability. Like the original creator,\n/// the delegate needs to present his signer to obtain the capability in his transactions. Delegation can\n/// be revoked via `Self::revoke`, removing this access right from the delegate.\n///\n/// While the basic authorization mechanism for delegates is the same as with core capabilities, the\n/// target of delegation might be subject of restrictions which need to be specified and verified. This can\n/// be done via global invariants in the specification language. For example, in order to prevent delegation\n/// all together for a capability, one can use the following invariant:\n///\n/// ```\n///   invariant forall a: address where capability::spec_has_cap<Feature>(a):\n///               len(capability::spec_delegates<Feature>(a)) == 0;\n/// ```\n///\n/// Similarly, the following invariant would enforce that delegates, if existent, must satisfy a certain\n/// predicate:\n///\n/// ```\n///   invariant forall a: address where capability::spec_has_cap<Feature>(a):\n///               forall d in capability::spec_delegates<Feature>(a):\n///                  is_valid_delegate_for_feature(d);\n/// ```\n///\nmodule std::capability {\n    use std::error;\n    use std::signer;\n    use std::vector;\n\n    const ECAP: u64 = 0;\n    const EDELEGATE: u64 = 1;\n\n    /// The token representing an acquired capability. Cannot be stored in memory, but copied and dropped freely.\n    struct Cap<phantom Feature> has copy, drop {\n        root: address\n    }\n\n    /// A linear version of a capability token. This can be used if an acquired capability should be enforced\n    /// to be used only once for an authorization.\n    struct LinearCap<phantom Feature> has drop {\n        root: address\n    }\n\n    /// An internal data structure for representing a configured capability.\n    struct CapState<phantom Feature> has key {\n        delegates: vector<address>\n    }\n\n    /// An internal data structure for representing a configured delegated capability.\n    struct CapDelegateState<phantom Feature> has key {\n        root: address\n    }\n\n    /// Creates a new capability class, owned by the passed signer. A caller must pass a witness that\n    /// they own the `Feature` type parameter.\n    public fun create<Feature>(owner: &signer, _feature_witness: &Feature) {\n        let addr = signer::address_of(owner);\n        assert!(!exists<CapState<Feature>>(addr), error::already_exists(ECAP));\n        move_to<CapState<Feature>>(owner, CapState{ delegates: vector::empty() });\n    }\n\n    /// Acquires a capability token. Only the owner of the capability class, or an authorized delegate,\n    /// can succeed with this operation. A caller must pass a witness that they own the `Feature` type\n    /// parameter.\n    public fun acquire<Feature>(requester: &signer, _feature_witness: &Feature): Cap<Feature>\n    acquires CapState, CapDelegateState {\n        Cap<Feature>{root: validate_acquire<Feature>(requester)}\n    }\n\n    /// Acquires a linear capability token. It is up to the module which owns `Feature` to decide\n    /// whether to expose a linear or non-linear capability.\n    public fun acquire_linear<Feature>(requester: &signer, _feature_witness: &Feature): LinearCap<Feature>\n    acquires CapState, CapDelegateState {\n        LinearCap<Feature>{root: validate_acquire<Feature>(requester)}\n    }\n\n    /// Helper to validate an acquire. Returns the root address of the capability.\n    fun validate_acquire<Feature>(requester: &signer): address\n    acquires CapState, CapDelegateState {\n        let addr = signer::address_of(requester);\n        if (exists<CapDelegateState<Feature>>(addr)) {\n            let root_addr = borrow_global<CapDelegateState<Feature>>(addr).root;\n            // double check that requester is actually registered as a delegate\n            assert!(exists<CapState<Feature>>(root_addr), error::invalid_state(EDELEGATE));\n            assert!(vector::contains(&borrow_global<CapState<Feature>>(root_addr).delegates, &addr),\n                   error::invalid_state(EDELEGATE));\n            root_addr\n        } else {\n            assert!(exists<CapState<Feature>>(addr), error::not_found(ECAP));\n            addr\n        }\n    }\n\n    /// Returns the root address associated with the given capability token. Only the owner\n    /// of the feature can do this.\n    public fun root_addr<Feature>(cap: Cap<Feature>, _feature_witness: &Feature): address {\n        cap.root\n    }\n\n    /// Returns the root address associated with the given linear capability token.\n    public fun linear_root_addr<Feature>(cap: LinearCap<Feature>, _feature_witness: &Feature): address {\n        cap.root\n    }\n\n    /// Registers a delegation relation. If the relation already exists, this function does\n    /// nothing.\n    // TODO: explore whether this should be idempotent like now or abort\n    public fun delegate<Feature>(cap: Cap<Feature>, _feature_witness: &Feature, to: &signer)\n    acquires CapState {\n        let addr = signer::address_of(to);\n        if (exists<CapDelegateState<Feature>>(addr)) return;\n        move_to(to, CapDelegateState<Feature>{root: cap.root});\n        add_element(&mut borrow_global_mut<CapState<Feature>>(cap.root).delegates, addr);\n    }\n\n    /// Revokes a delegation relation. If no relation exists, this function does nothing.\n    // TODO: explore whether this should be idempotent like now or abort\n    public fun revoke<Feature>(cap: Cap<Feature>, _feature_witness: &Feature, from: address)\n    acquires CapState, CapDelegateState\n    {\n        if (!exists<CapDelegateState<Feature>>(from)) return;\n        let CapDelegateState{root: _root} = move_from<CapDelegateState<Feature>>(from);\n        remove_element(&mut borrow_global_mut<CapState<Feature>>(cap.root).delegates, &from);\n    }\n\n    /// Helper to remove an element from a vector.\n    fun remove_element<E: drop>(v: &mut vector<E>, x: &E) {\n        let (found, index) = vector::index_of(v, x);\n        if (found) {\n            vector::remove(v, index);\n        }\n    }\n\n    /// Helper to add an element to a vector.\n    fun add_element<E: drop>(v: &mut vector<E>, x: E) {\n        if (!vector::contains(v, &x)) {\n            vector::push_back(v, x)\n        }\n    }\n\n    /// Helper specification function to check whether a capability exists at address.\n    spec fun spec_has_cap<Feature>(addr: address): bool {\n        exists<CapState<Feature>>(addr)\n    }\n\n    /// Helper specification function to obtain the delegates of a capability.\n    spec fun spec_delegates<Feature>(addr: address): vector<address> {\n        global<CapState<Feature>>(addr).delegates\n    }\n}\n",
              "source_map": ""
            },
            {
              "name": "comparator",
              "source": "/// Provides a framework for comparing two elements\nmodule aptos_std::comparator {\n    use std::bcs;\n    use std::vector;\n\n    const EQUAL: u8 = 0;\n    const SMALLER: u8 = 1;\n    const GREATER: u8 = 2;\n\n    struct Result has drop {\n        inner: u8,\n    }\n\n    public fun is_equal(result: &Result): bool {\n        return result.inner == EQUAL\n    }\n\n    public fun is_smaller_than(result: &Result): bool {\n        return result.inner == SMALLER\n    }\n\n    public fun is_greater_than(result: &Result): bool {\n        result.inner == GREATER\n    }\n\n    // Performs a comparison of two types after BCS serialization.\n    public fun compare<T>(left: &T, right: &T): Result {\n        let left_bytes = bcs::to_bytes(left);\n        let right_bytes = bcs::to_bytes(right);\n\n        compare_u8_vector(left_bytes, right_bytes)\n    }\n\n    // Performs a comparison of two vector<u8>s or byte vectors\n    public fun compare_u8_vector(left: vector<u8>, right: vector<u8>): Result {\n        let left_length = vector::length(&left);\n        let right_length = vector::length(&right);\n\n        let idx = 0;\n\n        while (idx < left_length && idx < right_length) {\n            let left_byte = *vector::borrow(&left, idx);\n            let right_byte = *vector::borrow(&right, idx);\n\n            if (left_byte < right_byte) {\n                return Result { inner: SMALLER }\n            } else if (left_byte > right_byte) {\n                return Result { inner: GREATER }\n            };\n            idx = idx + 1;\n        };\n\n        if (left_length < right_length) {\n            Result { inner: SMALLER }\n        } else if (left_length > right_length) {\n            Result { inner: GREATER }\n        } else {\n            Result { inner: EQUAL }\n        }\n    }\n\n    #[test]\n    public fun test_strings() {\n        use std::string;\n\n        let value0 = string::utf8(b\"alpha\");\n        let value1 = string::utf8(b\"beta\");\n        let value2 = string::utf8(b\"betaa\");\n\n        assert!(is_equal(&compare(&value0, &value0)), 0);\n        assert!(is_equal(&compare(&value1, &value1)), 1);\n        assert!(is_equal(&compare(&value2, &value2)), 2);\n\n        assert!(is_greater_than(&compare(&value0, &value1)), 3);\n        assert!(is_smaller_than(&compare(&value1, &value0)), 4);\n\n        assert!(is_smaller_than(&compare(&value0, &value2)), 5);\n        assert!(is_greater_than(&compare(&value2, &value0)), 6);\n\n        assert!(is_smaller_than(&compare(&value1, &value2)), 7);\n        assert!(is_greater_than(&compare(&value2, &value1)), 8);\n    }\n\n    #[test]\n    public fun test_u128() {\n        let value0: u128 = 5;\n        let value1: u128 = 152;\n        let value2: u128 = 511; // 0x1ff\n\n        assert!(is_equal(&compare(&value0, &value0)), 0);\n        assert!(is_equal(&compare(&value1, &value1)), 1);\n        assert!(is_equal(&compare(&value2, &value2)), 2);\n\n        assert!(is_smaller_than(&compare(&value0, &value1)), 2);\n        assert!(is_greater_than(&compare(&value1, &value0)), 3);\n\n        assert!(is_smaller_than(&compare(&value0, &value2)), 3);\n        assert!(is_greater_than(&compare(&value2, &value0)), 4);\n\n        assert!(is_smaller_than(&compare(&value1, &value2)), 5);\n        assert!(is_greater_than(&compare(&value2, &value1)), 6);\n    }\n\n    #[test_only]\n    struct Complex has drop {\n        value0: vector<u128>,\n        value1: u8,\n        value2: u64,\n    }\n\n    #[test]\n    public fun test_complex() {\n        let value0_0 = vector::empty();\n        vector::push_back(&mut value0_0, 10);\n        vector::push_back(&mut value0_0, 9);\n        vector::push_back(&mut value0_0, 5);\n\n        let value0_1 = vector::empty();\n        vector::push_back(&mut value0_1, 10);\n        vector::push_back(&mut value0_1, 9);\n        vector::push_back(&mut value0_1, 5);\n        vector::push_back(&mut value0_1, 1);\n\n        let base = Complex {\n            value0: value0_0,\n            value1: 13,\n            value2: 41,\n        };\n\n        let other_0 = Complex {\n            value0: value0_1,\n            value1: 13,\n            value2: 41,\n        };\n\n        let other_1 = Complex {\n            value0: copy value0_0,\n            value1: 14,\n            value2: 41,\n        };\n\n        let other_2 = Complex {\n            value0: value0_0,\n            value1: 13,\n            value2: 42,\n        };\n\n        assert!(is_equal(&compare(&base, &base)), 0);\n        assert!(is_smaller_than(&compare(&base, &other_0)), 1);\n        assert!(is_greater_than(&compare(&other_0, &base)), 2);\n        assert!(is_smaller_than(&compare(&base, &other_1)), 3);\n        assert!(is_greater_than(&compare(&other_1, &base)), 4);\n        assert!(is_smaller_than(&compare(&base, &other_2)), 5);\n        assert!(is_greater_than(&compare(&other_2, &base)), 6);\n    }\n}\n",
              "source_map": ""
            },
            {
              "name": "guid",
              "source": "/// A module for generating globally unique identifiers\nmodule std::guid {\n    use std::signer;\n\n    /// A generator for new GUIDs.\n    struct Generator has key {\n        /// A monotonically increasing counter\n        counter: u64,\n    }\n\n    /// A globally unique identifier derived from the sender's address and a counter\n    struct GUID has drop, store {\n        id: ID\n    }\n\n    /// A non-privileged identifier that can be freely created by anyone. Useful for looking up GUID's.\n    struct ID has copy, drop, store {\n        /// If creation_num is `i`, this is the `i+1`th GUID created by `addr`\n        creation_num: u64,\n        /// Address that created the GUID\n        addr: address\n    }\n\n    /// A capability to create a privileged identifier on behalf of the given address\n    struct CreateCapability has key, store, drop {\n        addr: address\n    }\n\n    /// GUID generator must be published ahead of first usage of `create_with_capability` function.\n    const EGUID_GENERATOR_NOT_PUBLISHED: u64 = 0;\n\n    /// Generates a capability to create the privileged GUID on behalf of the signer\n    // (also makes sure that the Generator is published under the signer account)\n    public fun gen_create_capability(account: &signer): CreateCapability {\n        let addr = signer::address_of(account);\n        if (!exists<Generator>(addr)) {\n            move_to(account, Generator { counter: 0 })\n        };\n        CreateCapability { addr }\n    }\n\n    /// Create a non-privileged id from `addr` and `creation_num`\n    public fun create_id(addr: address, creation_num: u64): ID {\n        ID { creation_num, addr }\n    }\n\n    public fun create_with_capability(addr: address, _cap: &CreateCapability): GUID acquires Generator {\n        assert!(exists<Generator>(addr), EGUID_GENERATOR_NOT_PUBLISHED);\n        create_impl(addr)\n    }\n\n    /// Create and return a new GUID. Creates a `Generator` under `account`\n    /// if it does not already have one\n    public fun create(account: &signer): GUID acquires Generator {\n        let addr = signer::address_of(account);\n        if (!exists<Generator>(addr)) {\n            move_to(account, Generator { counter: 0 })\n        };\n        create_impl(addr)\n    }\n\n    fun create_impl(addr: address): GUID acquires Generator {\n        let generator = borrow_global_mut<Generator>(addr);\n        let creation_num = generator.counter;\n        generator.counter = creation_num + 1;\n        GUID { id: ID { creation_num, addr } }\n    }\n\n    /// Publish a Generator resource under `account`\n    public fun publish_generator(account: &signer) {\n        move_to(account, Generator { counter: 0 })\n    }\n\n    /// Get the non-privileged ID associated with a GUID\n    public fun id(guid: &GUID): ID {\n        *&guid.id\n    }\n\n    /// Return the account address that created the GUID\n    public fun creator_address(guid: &GUID): address {\n        guid.id.addr\n    }\n\n    /// Return the account address that created the guid::ID\n    public fun id_creator_address(id: &ID): address {\n        id.addr\n    }\n\n    /// Return the creation number associated with the GUID\n    public fun creation_num(guid: &GUID): u64 {\n        guid.id.creation_num\n    }\n\n    /// Return the creation number associated with the guid::ID\n    public fun id_creation_num(id: &ID): u64 {\n        id.creation_num\n    }\n\n    /// Return true if the GUID's ID is `id`\n    public fun eq_id(guid: &GUID, id: &ID): bool {\n        &guid.id == id\n    }\n\n    /// Return the number of the next GUID to be created by `addr`\n    public fun get_next_creation_num(addr: address): u64 acquires Generator {\n        if (!exists<Generator>(addr)) {\n            0\n        } else {\n            borrow_global<Generator>(addr).counter\n        }\n    }\n}\n",
              "source_map": "0x52eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f64400000048000000010000000000000000000000000000000000000000000000000000000000000001046775696404000052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f61c0300002c030000000152eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f64c03000050030000010052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f64f01000053010000000152eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f66e01000070010000020052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f68f00000098000000000152eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6da000000e1000000030052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6ef010000f1010000000252eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6610200006d02000052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6a6020000aa0200000d000052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6af070000b50700000001076163636f756e7452eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6b6070000bd07000001046164647252eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6ef070000f3070000000f000052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f60908000010080000010052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6f607000011080000020052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6ef070000f3070000030052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f63208000036080000040052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f62008000026080000050052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f61f08000020080000060052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f61b0800007b080000080052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f64f08000056080000090052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f66d0800006e0800000a0052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f658080000700800000b0052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6470800004e0800000c0052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f647080000710800000d0052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f61b0800007b0800000f0052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f69108000095080000100052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6850800009608000000010052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6fe050000070600000002046164647252eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6080600000c0600000c6372656174696f6e5f6e756d52eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f61706000023060000000003000052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f63d06000049060000010052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f64b0600004f060000020052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6380600005106000000020052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6a6080000b10800000001046164647252eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6b2080000b6080000020c6372656174696f6e5f6e756d52eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f624090000300900000967656e657261746f7252eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6e8080000f10800000010000052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f61109000015090000010052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6f408000005090000020052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6e8080000f1080000030052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6330900003c090000040052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f63309000044090000060052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f62409000030090000070052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6620900006e090000080052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f67109000072090000090052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f66f090000700900000a0052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f64e090000570900000b0052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f64e0900005f0900000c0052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f64e090000720900000d0052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f68c090000980900000e0052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f69a0900009e0900000f0052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f687090000a0090000100052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f67c090000a209000000030052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6680600007e0600000002046164647252eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f67f06000083060000045f63617052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f68e06000092060000000007000052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6e4060000e8060000010052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6d2060000d8060000020052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6ca06000009070000030052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6eb06000008070000040052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6ca06000009070000050052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f61f07000023070000060052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6130700002407000000040052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6260c0000320c00000001046775696452eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6330c0000370c0000000003000052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f64f0c0000530c0000010052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f64f0c0000560c0000020052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f64f0c0000630c000000050052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f60d0b00001c0b00000001046775696452eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f61d0b0000210b0000000003000052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f63d0b0000410b0000010052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f63d0b0000440b0000020052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f63d0b0000490b000000060052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6350d00003a0d00000002046775696452eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f63b0d00003f0d000002696452eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6480d00004a0d0000000005000052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6620d0000660d0000010052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6610d0000690d0000020052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f66d0d00006f0d0000030052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f66a0d00006c0d0000040052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6610d00006f0d000000070052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6ae040000c30400000001076163636f756e7452eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6c4040000cb04000001046164647252eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6f6040000fa040000000f000052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f61005000017050000010052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6fd04000018050000020052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6f6040000fa040000030052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6390500003d050000040052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6270500002d050000050052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f62605000027050000060052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f62205000082050000080052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6560500005d050000090052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f674050000750500000a0052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f65f050000770500000b0052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f64e050000550500000c0052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f64e050000780500000d0052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f622050000820500000f0052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f69f050000a3050000100052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f68c050000a505000000080052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6c90d0000de0d00000001046164647252eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6df0d0000e30d0000010325233152eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6100e00008b0e0000000a000052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6270e00002b0e0000010052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6150e00001b0e0000020052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6140e0000150e0000030052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6100e00008b0e0000050052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f63c0e00003d0e0000060052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6100e00008b0e0000080052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6740e0000780e0000090052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f65b0e0000680e00000a0052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f65b0e0000810e00000c0052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6100e00008b0e000000090052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6960a0000980a00000001046775696452eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6990a00009d0a0000000003000052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6b60a0000ba0a0000010052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6b50a0000bd0a0000020052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6b40a0000bd0a0000000a0052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6ba0c0000c90c0000000102696452eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6ca0c0000cc0c0000000002000052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6e20c0000e40c0000010052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6e20c0000f10c0000000b0052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f69d0b0000af0b0000000102696452eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6b00b0000b20b0000000002000052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6cc0b0000ce0b0000010052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6cc0b0000d30b0000000c0052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6ee090000ff0900000001076163636f756e7452eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6000a0000070a0000000005000052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6240a00002b0a0000010052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f6420a0000430a0000020052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f62d0a0000450a0000030052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f61c0a0000230a0000040052eb4906086e03819a5177db30892d61ff9cf0b5e5e96e1706c725fa141790f61c0a0000460a000000011d45475549445f47454e455241544f525f4e4f545f5055424c49534845440000"
            },
            {
              "name": "event",
              "source": "/// The Event module defines an `EventHandleGenerator` that is used to create\n/// `EventHandle`s with unique GUIDs. It contains a counter for the number\n/// of `EventHandle`s it generates. An `EventHandle` is used to count the number of\n/// events emitted to a handle and emit events to the event store.\nmodule aptos_std::event {\n    use std::bcs;\n    use std::guid::{Self, GUID};\n\n    /// A handle for an event such that:\n    /// 1. Other modules can emit events to this handle.\n    /// 2. Storage can use this handle to prove the total number of events that happened in the past.\n    struct EventHandle<phantom T: drop + store> has store {\n        /// Total number of events emitted to this event stream.\n        counter: u64,\n        /// A globally unique ID for this event stream.\n        guid: GUID,\n    }\n\n    /// Deprecated. Only kept around so Aptos clients know how to deserialize existing EventHandleGenerator's\n    struct EventHandleGenerator has key {\n        // A monotonically increasing counter\n        counter: u64,\n        addr: address,\n    }\n\n    /// Use EventHandleGenerator to generate a unique event handle for `sig`\n    public fun new_event_handle<T: drop + store>(account: &signer): EventHandle<T> {\n        EventHandle<T> {\n            counter: 0,\n            guid: guid::create(account)\n        }\n    }\n\n    /// Emit an event with payload `msg` by using `handle_ref`'s key and counter.\n    public fun emit_event<T: drop + store>(handle_ref: &mut EventHandle<T>, msg: T) {\n        write_to_event_store<T>(bcs::to_bytes(&handle_ref.guid), handle_ref.counter, msg);\n        handle_ref.counter = handle_ref.counter + 1;\n    }\n\n    /// Return the GUID associated with this EventHandle\n    public fun guid<T: drop + store>(handle_ref: &EventHandle<T>): &GUID {\n        &handle_ref.guid\n    }\n    spec guid {\n        pragma intrinsic = false;\n    }\n\n    /// Return the current counter associated with this EventHandle\n    public fun counter<T: drop + store>(handle_ref: &EventHandle<T>): u64 {\n        handle_ref.counter\n    }\n    spec counter {\n        pragma intrinsic = false;\n    }\n\n    /// Log `msg` as the `count`th event associated with the event stream identified by `guid`\n    native fun write_to_event_store<T: drop + store>(guid: vector<u8>, count: u64, msg: T);\n\n    /// Destroy a unique handle.\n    public fun destroy_handle<T: drop + store>(handle: EventHandle<T>) {\n        EventHandle<T> { counter: _, guid: _ } = handle;\n    }\n\n    // ****************** TEST-ONLY FUNCTIONS **************\n\n    #[test_only]\n    public fun create_guid_wrapper_for_test<T: drop + store>(s: &signer): GUID {\n        let EventHandle<T> { counter: _, guid } = new_event_handle<T>(s);\n        guid\n    }\n\n    // ****************** SPECIFICATIONS *******************\n    spec module {} // switch documentation context to module\n\n    spec module {\n        /// Functions of the event module are mocked out using the intrinsic\n        /// pragma. They are implemented in the prover's prelude.\n        pragma intrinsic = true;\n\n        /// Determines equality between the guids of two event handles. Since fields of intrinsic\n        /// structs cannot be accessed, this function is provided.\n        fun spec_guid_eq<T>(h1: EventHandle<T>, h2: EventHandle<T>): bool {\n            // The implementation currently can just use native equality since the mocked prover\n            // representation does not have the `counter` field.\n            h1 == h2\n        }\n    }\n}\n",
              "source_map": "0x842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342c4201000047010000010000000000000000000000000000000000000000000000000000000000000001056576656e74020000842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342c510200005c020000010154842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342c650200006602000002842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342ccb020000d2020000842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342c190300001d0300000100842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342ca5030000b90300000002842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342cfa03000001040000842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342c1004000014040000060000842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342ca0070000a7070000010154842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342ca8070000a9070000010a68616e646c655f726566842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342cb9070000c30700000000020000842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342ce5070000ef0700000100842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342ce5070000f7070000000100842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342c2609000034090000010154842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342c3509000036090000010668616e646c65842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342c460900004c0900000000050000842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342c91090000970900000100842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342c680900008e0900000200842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342c8b0900008c0900000300842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342c82090000830900000400842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342c9709000098090000000200842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342c930500009d050000010154842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342c9e0500009f050000020a68616e646c655f726566842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342caf050000b9050000036d7367842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342cd0050000d305000000000f0000842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342c09060000130600000100842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342c08060000180600000200842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342cfa050000190600000300842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342c1b060000250600000400842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342c1b0600002d0600000600842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342c2f060000320600000700842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342ce2050000330600000800842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342c520600005c0600000900842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342c52060000640600000b00842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342c67060000680600000c00842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342c65060000660600000d00842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342c3d060000470600000e00842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342c3d0600004f0600000f00842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342c3d060000680600001000842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342c6806000069060000000300842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342cb9060000bd060000010154842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342cbe060000bf060000010a68616e646c655f726566842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342ccf060000d90600000000020000842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342cfe060000080700000100842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342cfd0600000d070000000400842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342c8204000092040000010154842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342c930400009404000001076163636f756e74842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342ca4040000ab0400000000040000842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342cf6040000f70400000100842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342c180500001f0500000200842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342c0b050000200500000300842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342cd00400002a050000000500842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342ca8080000bc080000010154842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342cbd080000be080000030467756964842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342cce080000d208000005636f756e74842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342ce0080000e5080000036d7367842d1be522994521a363152e8fe4be56da2a5d708be4adb32f8e3a4e6fbc342cec080000ef0800000000000100"
            },
            {
              "name": "iterable_table",
              "source": "module aptos_std::iterable_table {\n    use std::option::{Self, Option};\n    use aptos_std::table_with_length::{Self, TableWithLength};\n\n    /// The iterable wrapper around value, points to previous and next key if any.\n    struct IterableValue<K: copy + store + drop, V: store> has store {\n        val: V,\n        prev: Option<K>,\n        next: Option<K>,\n    }\n\n    /// An iterable table implementation based on double linked list.\n    struct IterableTable<K: copy + store + drop, V: store> has store {\n        inner: TableWithLength<K, IterableValue<K, V>>,\n        head: Option<K>,\n        tail: Option<K>,\n    }\n\n    /// Regular table API.\n\n    /// Create an empty table.\n    public fun new<K: copy + store + drop, V: store>(): IterableTable<K, V> {\n        IterableTable {\n            inner: table_with_length::new(),\n            head: option::none(),\n            tail: option::none(),\n        }\n    }\n\n    /// Destroy a table. The table must be empty to succeed.\n    public fun destroy_empty<K: copy + store + drop, V: store>(table: IterableTable<K, V>) {\n        assert!(empty(&table), 0);\n        assert!(option::is_none(&table.head), 0);\n        assert!(option::is_none(&table.tail), 0);\n        let IterableTable {inner, head: _, tail: _} = table;\n        table_with_length::destroy_empty(inner);\n    }\n\n    /// Add a new entry to the table. Aborts if an entry for this\n    /// key already exists.\n    public fun add<K: copy + store + drop, V: store>(table: &mut IterableTable<K, V>, key: K, val: V) {\n        let wrapped_value = IterableValue {\n            val,\n            prev: table.tail,\n            next: option::none(),\n        };\n        table_with_length::add(&mut table.inner, key, wrapped_value);\n        if (option::is_some(&table.tail)) {\n            let k = option::borrow(&table.tail);\n            table_with_length::borrow_mut(&mut table.inner, *k).next = option::some(key);\n        } else {\n            table.head = option::some(key);\n        };\n        table.tail = option::some(key);\n    }\n\n    /// Remove from `table` and return the value which `key` maps to.\n    /// Aborts if there is no entry for `key`.\n    public fun remove<K: copy + store + drop, V: store>(table: &mut IterableTable<K, V>, key: K): V {\n        let (val, _, _) = remove_iter(table, key);\n        val\n    }\n\n    /// Acquire an immutable reference to the value which `key` maps to.\n    /// Aborts if there is no entry for `key`.\n    public fun borrow<K: copy + store + drop, V: store>(table: &IterableTable<K, V>, key: K): &V {\n        &table_with_length::borrow(&table.inner, key).val\n    }\n\n    /// Acquire a mutable reference to the value which `key` maps to.\n    /// Aborts if there is no entry for `key`.\n    public fun borrow_mut<K: copy + store + drop, V: store>(table: &mut IterableTable<K, V>, key: K): &mut V {\n        &mut table_with_length::borrow_mut(&mut table.inner, key).val\n    }\n\n    /// Acquire a mutable reference to the value which `key` maps to.\n    /// Insert the pair (`key`, `default`) first if there is no entry for `key`.\n    public fun borrow_mut_with_default<K: copy + store + drop, V: store + drop>(table: &mut IterableTable<K, V>, key: K, default: V): &mut V {\n        if (!contains(table, key)) {\n            add(table, key, default)\n        };\n        borrow_mut(table, key)\n    }\n\n    /// Returns the length of the table, i.e. the number of entries.\n    public fun length<K: copy + store + drop, V: store>(table: &IterableTable<K, V>): u64 {\n        table_with_length::length(&table.inner)\n    }\n\n    /// Returns true if this table is empty.\n    public fun empty<K: copy + store + drop, V: store>(table: &IterableTable<K, V>): bool {\n        table_with_length::empty(&table.inner)\n    }\n\n    /// Returns true iff `table` contains an entry for `key`.\n    public fun contains<K: copy + store + drop, V: store>(table: &IterableTable<K, V>, key: K): bool {\n        table_with_length::contains(&table.inner, key)\n    }\n\n    /// Iterable API.\n\n    /// Returns the key of the head for iteration.\n    public fun head_key<K: copy + store + drop, V: store>(table: &IterableTable<K, V>): Option<K> {\n        table.head\n    }\n\n    /// Returns the key of the tail for iteration.\n    public fun tail_key<K: copy + store + drop, V: store>(table: &IterableTable<K, V>): Option<K> {\n        table.tail\n    }\n\n    /// Acquire an immutable reference to the IterableValue which `key` maps to.\n    /// Aborts if there is no entry for `key`.\n    public fun borrow_iter<K: copy + store + drop, V: store>(table: &IterableTable<K, V>, key: K): (&V, Option<K>, Option<K>) {\n        let v = table_with_length::borrow(&table.inner, key);\n        (&v.val, v.prev, v.next)\n    }\n\n    /// Acquire a mutable reference to the value and previous/next key which `key` maps to.\n    /// Aborts if there is no entry for `key`.\n    public fun borrow_iter_mut<K: copy + store + drop, V: store>(table: &mut IterableTable<K, V>, key: K): (&mut V, Option<K>, Option<K>) {\n        let v = table_with_length::borrow_mut(&mut table.inner, key);\n        (&mut v.val, v.prev, v.next)\n    }\n\n    /// Remove from `table` and return the value and previous/next key which `key` maps to.\n    /// Aborts if there is no entry for `key`.\n    public fun remove_iter<K: copy + store + drop, V: store>(table: &mut IterableTable<K, V>, key: K): (V, Option<K>, Option<K>) {\n        let val = table_with_length::remove(&mut table.inner, copy key);\n        if (option::contains(&table.tail, &key)) {\n            table.tail = val.prev;\n        };\n        if (option::contains(&table.head, &key)) {\n            table.head = val.next;\n        };\n        if (option::is_some(&val.prev)) {\n            let key = option::borrow(&val.prev);\n            table_with_length::borrow_mut(&mut table.inner, *key).next = val.next;\n        };\n        if (option::is_some(&val.next)) {\n            let key = option::borrow(&val.next);\n            table_with_length::borrow_mut(&mut table.inner, *key).prev = val.prev;\n        };\n        let IterableValue {val, prev, next} = val;\n        (val, prev, next)\n    }\n\n    /// Remove all items from v2 and append to v1.\n    public fun append<K: copy + store + drop, V: store>(v1: &mut IterableTable<K, V>, v2: &mut IterableTable<K, V>) {\n        let key = head_key(v2);\n        while (option::is_some(&key)) {\n            let (val, _, next) = remove_iter(v2, *option::borrow(&key));\n            add(v1, *option::borrow(&key), val);\n            key = next;\n        };\n    }\n\n    #[test]\n    fun iterable_table_test() {\n        let table = new();\n        let i = 0;\n        while (i < 100) {\n            add(&mut table, i, i);\n            i = i + 1;\n        };\n        assert!(length(&table) == 100, 0);\n        i = 0;\n        while (i < 100) {\n            assert!(remove(&mut table, i) == i, 0);\n            i = i + 2;\n        };\n        assert!(!empty(&table), 0);\n        let key = head_key(&table);\n        i = 1;\n        while (option::is_some(&key)) {\n            let (val, _, next) = borrow_iter(&table, *option::borrow(&key));\n            assert!(*val == i, 0);\n            key = next;\n            i = i + 2;\n        };\n        assert!(i == 101, 0);\n        let table2 = new();\n        append(&mut table2, &mut table);\n        destroy_empty(table);\n        let key = tail_key(&table2);\n        while (option::is_some(&key)) {\n            let (val, prev, _) = remove_iter(&mut table2, *option::borrow(&key));\n            assert!(val == *option::borrow(&key), 0);\n            key = prev;\n        };\n        destroy_empty(table2);\n    }\n}\n",
              "source_map": ""
            },
            {
              "name": "optional_aggregator",
              "source": "/// This module provides an interface to aggregate integers either via\n/// aggregator (parallelizable) or via normal integers.\nmodule aptos_std::optional_aggregator {\n    use std::error;\n    use std::option::{Self, Option};\n\n    use aptos_std::aggregator_factory;\n    use aptos_std::aggregator::{Self, Aggregator};\n\n    // These error codes are produced by `Aggregator` and used by `Integer` for\n    // consistency.\n    const EAGGREGATOR_OVERFLOW: u64 = 1;\n    const EAGGREGATOR_UNDERFLOW: u64 = 2;\n\n    /// Wrapper around integer to have a custom overflow limit. Note that\n    /// Move has no traits (and trait bounds), so integer value must be u128.\n    /// `Integer` provides API to add/subtract and read, just like `Aggregator`.\n    struct Integer has store {\n        value: u128,\n        limit: u128,\n    }\n\n    fun new_integer(limit: u128): Integer {\n        Integer {\n            value: 0,\n            limit,\n        }\n    }\n\n    fun add_integer(base: &mut Integer, value: u128) {\n        assert!(\n            value <= (base.limit - base.value),\n            error::out_of_range(EAGGREGATOR_OVERFLOW)\n        );\n        base.value = base.value + value;\n    }\n\n    fun sub_integer(base: &mut Integer, value: u128) {\n        assert!(value <= base.value, error::out_of_range(EAGGREGATOR_UNDERFLOW));\n        base.value = base.value - value;\n    }\n\n    fun read_integer(base: &Integer): u128 {\n        base.value\n    }\n\n    fun destroy_integer(integer: Integer) {\n        let Integer {value: _, limit: _ } = integer;\n    }\n\n    /// Struct that contains either an aggregator or a normal integer, both\n    /// overflowing on limit.\n    struct OptionalAggregator has store {\n        // Parallelizable.\n        aggregator: Option<Aggregator>,\n        // Non-parallelizable.\n        integer: Option<Integer>,\n    }\n\n    public fun new(limit: u128, parallelizable: bool): OptionalAggregator {\n        if (parallelizable) {\n            OptionalAggregator {\n                aggregator: option::some(aggregator_factory::create_aggregator(limit)),\n                integer: option::none(),\n            }\n        } else {\n            OptionalAggregator {\n                aggregator: option::none(),\n                integer: option::some(new_integer(limit)),\n            }\n        }\n    }\n\n    public fun destroy(optional_aggregator: OptionalAggregator) {\n        let OptionalAggregator { aggregator, integer } = optional_aggregator;\n\n        if (option::is_some(&aggregator)) {\n            aggregator::destroy(option::destroy_some(aggregator));\n            option::destroy_none(integer);\n        } else {\n            destroy_integer(option::destroy_some(integer));\n            option::destroy_none(aggregator);\n        }\n    }\n\n    public fun add(optional_aggregator: &mut OptionalAggregator, value: u128) {\n        if (option::is_some(&optional_aggregator.aggregator)) {\n            let aggregator = option::borrow_mut(&mut optional_aggregator.aggregator);\n            aggregator::add(aggregator, value);\n        } else {\n            let integer = option::borrow_mut(&mut optional_aggregator.integer);\n            add_integer(integer, value);\n        }\n    }\n\n    public fun sub(optional_aggregator: &mut OptionalAggregator, value: u128) {\n        if (option::is_some(&optional_aggregator.aggregator)) {\n            let aggregator = option::borrow_mut(&mut optional_aggregator.aggregator);\n            aggregator::sub(aggregator, value);\n        } else {\n            let integer = option::borrow_mut(&mut optional_aggregator.integer);\n            sub_integer(integer, value);\n        }\n    }\n\n    public fun read(optional_aggregator: &OptionalAggregator): u128 {\n        if (option::is_some(&optional_aggregator.aggregator)) {\n            let aggregator = option::borrow(&optional_aggregator.aggregator);\n            aggregator::read(aggregator)\n        } else {\n            let integer = option::borrow(&optional_aggregator.integer);\n            read_integer(integer)\n        }\n    }\n\n    #[test(account = @aptos_framework)]\n    fun optional_aggregator_test(account: signer) {\n        aggregator_factory::initialize_aggregator_factory(&account);\n\n        let aggregator = new(15, false);\n        add(&mut aggregator, 12);\n        add(&mut aggregator, 3);\n        assert!(read(&aggregator) == 15, 0);\n\n        sub(&mut aggregator, 15);\n        assert!(read(&aggregator) == 0, 0);\n        destroy(aggregator);\n\n        // Repate with parallelizable aggregator.\n        let aggregator = new(15, true);\n        add(&mut aggregator, 12);\n        add(&mut aggregator, 3);\n        assert!(read(&aggregator) == 15, 0);\n\n        sub(&mut aggregator, 15);\n        assert!(read(&aggregator) == 0, 0);\n        destroy(aggregator);\n    }\n\n    #[test(account = @aptos_framework)]\n    #[expected_failure(abort_code = 0x020001)]\n    fun non_parallelizable_aggregator_overflow_test(account: signer) {\n        aggregator_factory::initialize_aggregator_factory(&account);\n        let aggregator = new(15, false);\n\n        // Overflow!\n        add(&mut aggregator, 16);\n\n        destroy(aggregator);\n    }\n\n    #[test(account = @aptos_framework)]\n    #[expected_failure(abort_code = 0x020002)]\n    fun non_parallelizable_aggregator_underflow_test(account: signer) {\n        aggregator_factory::initialize_aggregator_factory(&account);\n        let aggregator = new(100, false);\n\n        // Underflow!\n        sub(&mut aggregator, 100);\n        add(&mut aggregator, 100);\n\n        destroy(aggregator);\n    }\n\n    #[test(account = @aptos_framework)]\n    #[expected_failure(abort_code = 0x020001)]\n    fun parallelizable_aggregator_overflow_test(account: signer) {\n        aggregator_factory::initialize_aggregator_factory(&account);\n        let aggregator = new(15, true);\n\n        // Overflow!\n        add(&mut aggregator, 16);\n\n        destroy(aggregator);\n    }\n\n    #[test(account = @aptos_framework)]\n    #[expected_failure(abort_code = 0x020002)]\n    fun parallelizable_aggregator_underflow_test(account: signer) {\n        aggregator_factory::initialize_aggregator_factory(&account);\n        let aggregator = new(100, true);\n\n        // Underflow!\n        add(&mut aggregator, 99);\n        sub(&mut aggregator, 100);\n        add(&mut aggregator, 100);\n\n        destroy(aggregator);\n    }\n}\n",
              "source_map": ""
            },
            {
              "name": "signature",
              "source": "/// Contains functions for:\n///\n///  1. [Ed25519](https://en.wikipedia.org/wiki/EdDSA#Ed25519) digital signatures\n///\n///  2. ECDSA digital signatures over secp256k1 elliptic curves\n///\n///  3. The minimum-pubkey-size variant of [Boneh-Lynn-Shacham (BLS) signatures](https://en.wikipedia.org/wiki/BLS_digital_signature),\n///     where public keys are BLS12-381 elliptic-curve points in $\\mathbb{G}_1$ and signatures are in $\\mathbb{G}_2$,\n///     as per the [IETF BLS draft standard](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-bls-signature#section-2.1).\n///     TODO: Describe APIs\nmodule aptos_std::signature {\n    use std::option::Option;\n\n    /// CRYPTOGRAPHY WARNING: This function assumes that the caller verified all public keys have a valid\n    /// proof-of-possesion (PoP) using `bls12381_verify_proof_of_possession`.\n    ///\n    /// Given a vector of serialized public keys, combines them into an aggregated public key which can be used to verify\n    /// multisignatures using `bls12381_verify_signature`.\n    /// Returns 'None' if no public keys are given as input.\n    /// Does not abort.\n    native public fun bls12381_aggregate_pop_verified_pubkeys(public_keys: vector<vector<u8>>): Option<vector<u8>>;\n\n    /// CRYPTOGRAPHY WARNING: This function can be safely called without verifying that the input signatures are elements\n    /// of the prime-order subgroup of the BLS12-381 curve.\n    ///\n    /// Given a vector of serialized signatures, combines them and returns the aggregate signature. Does not check the\n    /// input signatures nor the final aggregated signatures for prime-order subgroup membership. Instead, verifying the\n    /// aggregated signature either via `bls12381_verify_multisignature` or `bls12381_verify_aggregate_signature` will\n    /// implicitly check it for prime-order subgroup membership.\n    /// Returns 'None' if no signatures are given as input.\n    /// Does not abort.\n    native public fun bls12381_aggregate_signatures(signatures: vector<vector<u8>>): Option<vector<u8>>;\n\n    /// Return `true` if the elliptic curve point serialized in `signature`:\n    ///  (1) is NOT the identity point, and\n    ///  (2) is a BLS12-381 elliptic curve point, and\n    ///  (3) is a prime-order point\n    /// Return `false` otherwise.\n    /// Does not abort.\n    native public fun bls12381_signature_subgroup_check(signature: vector<u8>): bool;\n\n    /// Return `true` if the bytes in `public_key` are a valid BLS12-381 public key:\n    ///  (1) it is NOT the identity point, and\n    ///  (2) it is a BLS12-381 elliptic curve point, and\n    ///  (3) it is a prime-order point\n    /// Return `false` otherwise.\n    /// Does not abort.\n    native public fun bls12381_validate_pubkey(public_key: vector<u8>): bool;\n\n    /// CRYPTOGRAPHY WARNING: First, before calling this function, the caller MUST verify that all public keys have a valid\n    /// proof-of-possesion (PoP) via `bls12381_verify_proof_of_possession`. This prevents both small-subgroup attacks and\n    /// rogue-key attacks. Second, this function can be safely called without verifying that the aggregate signature is\n    /// in the prime-order subgroup of the BLS12-381 curve.\n    ///\n    /// Returns true if the aggregate signature `aggsig` on `messages` under `public_keys` verifies (where `messages[i]`\n    /// should be signed by `public_keys[i]`).\n    /// Returns 'false' if either:\n    /// - no public keys or messages are given as input,\n    /// - number of messages does not equal number of public keys\n    /// - `aggsig` (1) is the identity point, or (2) is NOT a BLS12-381 elliptic curve point, or (3) is NOT a\n    ///   prime-order point\n    /// Does not abort.\n    native public fun bls12381_verify_aggregate_signature(\n        aggsig: vector<u8>,\n        public_keys: vector<vector<u8>>,\n        messages: vector<vector<u8>>,\n    ): bool;\n\n    /// CRYPTOGRAPHY WARNING: Before calling this function, the caller MUST have verified proofs-of-possesion (PoP) for\n    /// the public keys that were used in computing the aggregate public key. This prevents small-subgroup attacks and\n    /// rogue-key attacks.\n    ///\n    /// Return true if the BLS `multisignature` on `message` verifies against the BLS aggregate public key `agg_public_key`.\n    /// Returns `false` if either:\n    /// - `multisignature` is not 96 bytes\n    /// - `agg_public_key` is not 48 bytes\n    /// - `agg_public_key` (1) is the identity point, or (2) is NOT a BLS12-381 elliptic curve point\n    /// - `multisignature` (1) is the identity point, or (2) is NOT a BLS12-381 elliptic curve point, or (3) is NOT a\n    ///    prime-order point\n    /// - the signature on `message` does not verify\n    ///\n    /// This function can be used to verify BLS multisignatures (as mentioned above, the `agg_public_key` needs to be\n    /// aggregated via `bls12381_aggregate_pop_verified_pubkeys` where the input public keys have had their PoPs verified\n    /// via `bls12381_verify_proof_of_possession`).\n    ///\n    /// This function CANNOT be SECURELY used to verify normal (non-aggregated) BLS signatures. This is because public\n    /// keys in such a scheme would not normally come with a proof-of-possession (PoP). Therefore, they may NOT lie in\n    /// the prime-order subgroup, which leads to small-subgroup attacks.\n    ///\n    /// For now, this function CAN be abused to verify signature shares for a BLS multisignature scheme or for a BLS\n    /// aggregate signature scheme, but library users MUST use `bls12381_verify_signature_share` instead.\n    ///\n    /// Does not abort.\n    native public fun bls12381_verify_multisignature(\n        multisignature: vector<u8>,\n        agg_public_key: vector<u8>,\n        message: vector<u8>\n    ): bool;\n\n    /// CRYPTOGRAPHY WARNING: This function WILL check that the public key is a prime-order point, in order to prevent\n    /// library users from misusing the library by forgetting to validate public keys before giving them as arguments to\n    /// this function.\n    ///\n    /// Returns true if the `signature` on `message` verifies under `public key`.\n    /// Returns false if either\n    /// - `multisignature` is not 96 bytes\n    /// - `agg_public_key` is not 48 bytes\n    /// - `agg_public_key` (1) is the identity point, or (2) is NOT a BLS12-381 elliptic curve point, or (3) is NOT a\n    ///    prime-order point\n    /// - `multisignature` (1) is the identity point, or (2) is NOT a BLS12-381 elliptic curve point, or (3) is NOT a\n    ///    prime-order point\n    /// - the signature on `message` does not verify\n    /// Does not abort.\n    native public fun bls12381_verify_normal_signature(\n        signature: vector<u8>,\n        public_key: vector<u8>,\n        message: vector<u8>\n    ): bool;\n\n    /// Return `true` if the bytes in `public_key` are a valid bls12381 public key (as per `bls12381_validate_pubkey`)\n    /// *and* has a valid proof-of-possesion (PoP).\n    /// Return `false` otherwise.\n    /// Does not abort.\n    native public fun bls12381_verify_proof_of_possession(\n        public_key: vector<u8>,\n        proof_of_possesion: vector<u8>\n    ): bool;\n    spec bls12381_verify_proof_of_possession { // TODO: temporary mockup.\n        pragma opaque;\n    }\n\n    /// CRYPTOGRAPHY WARNING: Before calling this function, the caller MUST have verified the public key's\n    /// proofs-of-possesion (PoP). This prevents rogue-key attacks later on during signature aggregation.\n    ///\n    /// Returns true if the `signature_share` on `message` verifies under `public key`.\n    /// Returns false otherwise, similar to `bls12381_verify_multisignature`.\n    /// Does not abort.\n    native public fun bls12381_verify_signature_share(\n        signature_share: vector<u8>,\n        public_key: vector<u8>,\n        message: vector<u8>\n    ): bool;\n\n    /// Return `true` if the bytes in `public_key` can be parsed as a valid Ed25519 public key: i.e., it passes\n    /// points-on-curve and not-in-small-subgroup checks.\n    /// Returns `false` if `public_key` otherwise.\n    /// This function should NOT be needed for most users since `ed25519_verify` already does all these checks.\n    /// We leave it here just in case. See the Rust `aptos_crypto::Ed25519PublicKey` type for more details.\n    /// Does not abort.\n    native public fun ed25519_validate_pubkey(public_key: vector<u8>): bool;\n\n    /// Return true if the Ed25519 `signature` on `message` verifies against the Ed25519 `public_key`.\n    /// Returns `false` if either:\n    /// - `signature` is not 64 bytes\n    /// - `public_key` is not 32 bytes\n    /// - `public_key` does not pass points-on-curve or not-in-small-subgroup checks,\n    /// - `signature` does not pass points-on-curve or not-in-small-subgroup checks,\n    /// - the signature on `message` does not verify.\n    /// Does not abort.\n    native public fun ed25519_verify(\n        signature: vector<u8>,\n        public_key: vector<u8>,\n        message: vector<u8>\n    ): bool;\n\n    /// Recovers the signer's public key from a secp256k1 ECDSA `signature` given the `recovery_id` and the signed\n    /// `message` (32 byte digest).\n    /// Returns `(public_key, true)` if `signature` verifies on `message` under the recovered `public_key`\n    /// and returns `([], false)` otherwise.\n    ///\n    /// Note that an invalid signature, or a signature from a different message, will result in the recovery of an\n    /// incorrect public key. This recovery algorithm can only be used to check validity of a signature if the signer's\n    /// public key (or its hash) is known beforehand.\n    native public fun secp256k1_ecdsa_recover(\n        message: vector<u8>,\n        recovery_id: u8,\n        signature: vector<u8>\n    ): (vector<u8>, bool);\n\n    #[test_only]\n    use std::vector;\n    #[test_only]\n    use std::option;\n\n    #[test]\n    /// Test on a valid secp256k1 ECDSA signature created using sk = x\"0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\"\n    fun test_secp256k1_recover() {\n        use std::hash;\n\n        let (pk, ok) = secp256k1_ecdsa_recover(\n            hash::sha2_256(b\"test aptos secp256k1\"),\n            0,\n            x\"f7ad936da03f948c14c542020e3c5f4e02aaacd1f20427c11aa6e2fbf8776477646bba0e1a37f9e7c777c423a1d2849baafd7ff6a9930814a43c3f80d59db56f\",\n        );\n        assert!(ok == true, 1);\n        assert!(pk == x\"4646ae5047316b4230d0086c8acec687f00b1cd9d1dc634f6cb358ac0a9a8ffffe77b4dd0a4bfb95851f3b7355c781dd60f8418fc8a65d14907aff47c903a559\", 2);\n\n        // Flipped bits; Signature stays valid\n        let (pk, ok) = secp256k1_ecdsa_recover(\n            hash::sha2_256(b\"test aptos secp256k1\"),\n            0,\n            x\"f7ad936da03f948c14c542020e3c5f4e02aaacd1f20427c11aa6e2fbf8776477646bba0e1a37f9e7c7f7c423a1d2849baafd7ff6a9930814a43c3f80d59db56f\",\n        );\n        assert!(ok == true, 3);\n        assert!(pk != x\"4646ae5047316b4230d0086c8acec687f00b1cd9d1dc634f6cb358ac0a9a8ffffe77b4dd0a4bfb95851f3b7355c781dd60f8418fc8a65d14907aff47c903a559\", 4);\n\n        // Flipped bits; Signature becomes invalid\n        let (_, ok) = secp256k1_ecdsa_recover(\n            hash::sha2_256(b\"test aptos secp256k1\"),\n            0,\n            x\"ffad936da03f948c14c542020e3c5f4e02aaacd1f20427c11aa6e2fbf8776477646bba0e1a37f9e7c7f7c423a1d2849baafd7ff6a9930814a43c3f80d59db56f\",\n        );\n        assert!(ok == false, 5);\n    }\n\n\n    #[test]\n    fun test_bls12381_verify_aggsig() {\n        // First, make sure verification returns None when no inputs are given or |pks| != |msgs|\n        assert!(bls12381_verify_aggregate_signature(x\"ab\", vector[], vector[]) == false, 1);\n        assert!(bls12381_verify_aggregate_signature(x\"ab\", vector[x\"ab\"], vector[]) == false, 1);\n        assert!(bls12381_verify_aggregate_signature(x\"ab\", vector[], vector[x\"ab\"]) == false, 1);\n        assert!(bls12381_verify_aggregate_signature(x\"ab\", vector[x\"ab\"], vector[x\"cd\", x\"ef\"]) == false, 1);\n        assert!(bls12381_verify_aggregate_signature(x\"ab\", vector[x\"ab\", x\"01\", x\"23\"], vector[x\"cd\", x\"ef\"]) == false, 1);\n\n        // Test zeros\n        assert!(bls12381_verify_aggregate_signature(x\"00\", vector[x\"00\"], vector[x\"00\"]) == false, 1);\n\n        // Third, try some test-cases generated by running the following command in `crates/aptos-crypto`:\n        //  $ cargo test -- bls12381_sample_aggregate_pk_and_aggsig --nocapture --ignored\n\n        // The signed messages are \"Hello, Aptos <i>!\", where <i> \\in {1, ..., 5}\n        let msgs = vector[\n            x\"48656c6c6f2c204170746f73203121\",\n            x\"48656c6c6f2c204170746f73203221\",\n            x\"48656c6c6f2c204170746f73203321\",\n            x\"48656c6c6f2c204170746f73203421\",\n            x\"48656c6c6f2c204170746f73203521\",\n        ];\n\n        // Public key of signer i\n        let pks = vector[\n            x\"b93d6aabb2b83e52f4b8bda43c24ea920bbced87a03ffc80f8f70c814a8b3f5d69fbb4e579ca76ee008d61365747dbc6\",\n            x\"b45648ceae3a983bcb816a96db599b5aef3b688c5753fa20ce36ac7a4f2c9ed792ab20af6604e85e42dab746398bb82c\",\n            x\"b3e4921277221e01ed71284be5e3045292b26c7f465a6fcdba53ee47edd39ec5160da3b229a73c75671024dcb36de091\",\n            x\"8463b8671c9775a7dbd98bf76d3deba90b5a90535fc87dc8c13506bb5c7bbd99be4d257e60c548140e1e30b107ff5822\",\n            x\"a79e3d0e9d04587a3b27d05efe5717da05fd93485dc47978c866dc70a01695c2efd247d1dd843a011a4b6b24079d7384\",\n        ];\n\n        // aggsigs[i] = \\sum_{j <= i}  sigs[j], where sigs[j] is a signature on msgs[j] under pks[j]\n        let aggsigs = vector[\n            x\"a2bc8bdebe6215ba74b5b53c5ed2aa0c68221a4adf868989ccdcfb62bb0eecc6537def9ee686a7960169c5917d25e5220177ed1c5e95ecfd68c09694062e76efcb00759beac874e4f9a715fd144210883bf9bb272f156b0a1fa15d0e9460f01f\",\n            x\"a523aa3c3f1f1074d968ffecf017c7b93ae5243006bf0abd2e45c036ddbec99302984b650ebe5ba306cda4071d281ba50a99ef0e66c3957fab94163296f9d673fc58a36de4276f82bfb1d9180b591df93b5c2804d40dd68cf0f72cd92f86442e\",\n            x\"abed10f464de74769121fc09715e59a3ac96a5054a43a9d43cc890a2d4d332614c74c7fb4cceef6d25f85c65dee337330f062f89f23fec9ecf7ce3193fbba2c886630d753be6a4513a4634428904b767af2f230c5cadbcb53a451dd9c7d977f6\",\n            x\"8362871631ba822742a31209fa4abce6dc94b741ac4725995459da2951324b51efbbf6bc3ab4681e547ebfbadd80e0360dc078c04188198f0acea26c12645ace9107a4a23cf8db46abc7a402637f16a0477c72569fc9966fe804ef4dc0e5e758\",\n            x\"a44d967935fbe63a763ce2dd2b16981f967ecd31e20d3266eef5517530cdc233c8a18273b6d9fd7f61dd39178826e3f115df4e7b304f2de17373a95ea0c9a14293dcfd6f0ef416e06fa23f6a3c850d638e4d8f97ab4562ef55d49a96a50baa13\",\n        ];\n\n        let i = 0;\n        let msg_subset = std::vector::empty<vector<u8>>();\n        let pk_subset = std::vector::empty<vector<u8>>();\n        while (i < std::vector::length(&pks)) {\n\n            let aggsig = *std::vector::borrow(&aggsigs, i);\n\n            std::vector::push_back(&mut pk_subset, *std::vector::borrow(&pks, i));\n            std::vector::push_back(&mut msg_subset, *std::vector::borrow(&msgs, i));\n\n            assert!(bls12381_verify_aggregate_signature(aggsig, pk_subset, msg_subset), 1);\n\n            i = i + 1;\n        };\n    }\n\n    #[test]\n    fun test_bls12381_verify_multisig() {\n        // First, make sure if no inputs are given, the function returns None\n        // assert!(bls12381_aggregate_pop_verified_pubkeys(vector::empty()) == option::none(), 1);\n        let none_opt = bls12381_aggregate_pop_verified_pubkeys(vector::empty());\n        assert!(option::is_none(&none_opt), 1);\n\n        // Second, try some test-cases generated by running the following command in `crates/aptos-crypto`:\n        //  $ cargo test -- bls12381_sample_aggregate_pk_and_multisig --nocapture --include-ignored\n        let pks = vector[\n            x\"92e201a806af246f805f460fbdc6fc90dd16a18d6accc236e85d3578671d6f6690dde22134d19596c58ce9d63252410a\",\n            x\"ab9df801c6f96ade1c0490c938c87d5bcc2e52ccb8768e1b5d14197c5e8bfa562783b96711b702dda411a1a9f08ebbfa\",\n            x\"b698c932cf7097d99c17bd6e9c9dc4eeba84278c621700a8f80ec726b1daa11e3ab55fc045b4dbadefbeef05c4182494\",\n            x\"934706a8b876d47a996d427e1526ce52c952d5ec0858d49cd262efb785b62b1972d06270b0a7adda1addc98433ad1843\",\n            x\"a4cd352daad3a0651c1998dfbaa7a748e08d248a54347544bfedd51a197e016bb6008e9b8e45a744e1a030cc3b27d2da\",\n        ];\n\n        // agg_pks[i] = \\sum_{j <= i}  pk[j]\n        let agg_pks = vector[\n            x\"92e201a806af246f805f460fbdc6fc90dd16a18d6accc236e85d3578671d6f6690dde22134d19596c58ce9d63252410a\",\n            x\"b79ad47abb441d7eda9b220a626df2e4e4910738c5f777947f0213398ecafae044ec0c20d552d1348347e9abfcf3eca1\",\n            x\"b5f5eb6153ab5388a1a76343d714e4a2dcf224c5d0722d1e8e90c6bcead05c573fffe986460bd4000645a655bf52bc60\",\n            x\"b922006ec14c183572a8864c31dc6632dccffa9f9c86411796f8b1b5a93a2457762c8e2f5ef0a2303506c4bca9a4e0bf\",\n            x\"b53df1cfee2168f59e5792e710bf22928dc0553e6531dae5c7656c0a66fc12cb82fbb04863938c953dc901a5a79cc0f3\",\n        ];\n\n        // multisigs[i] is a signature on \"Hello, Aptoverse!\" under agg_pks[i]\n        let multisigs = vector[\n            x\"ade45c67bff09ae57e0575feb0be870f2d351ce078e8033d847615099366da1299c69497027b77badb226ff1708543cd062597030c3f1553e0aef6c17e7af5dd0de63c1e4f1f9da68c966ea6c1dcade2cdc646bd5e8bcd4773931021ec5be3fd\",\n            x\"964af3d83436f6a9a382f34590c0c14e4454dc1de536af205319ce1ed417b87a2374863d5df7b7d5ed900cf91dffa7a105d3f308831d698c0d74fb2259d4813434fb86425db0ded664ae8f85d02ec1d31734910317d4155cbf69017735900d4d\",\n            x\"b523a31813e771e55aa0fc99a48db716ecc1085f9899ccadb64e759ecb481a2fb1cdcc0b266f036695f941361de773081729311f6a1bca9d47393f5359c8c87dc34a91f5dae335590aacbff974076ad1f910dd81750553a72ccbcad3c8cc0f07\",\n            x\"a945f61699df58617d37530a85e67bd1181349678b89293951ed29d1fb7588b5c12ebb7917dfc9d674f3f4fde4d062740b85a5f4927f5a4f0091e46e1ac6e41bbd650a74dd49e91445339d741e3b10bdeb9bc8bba46833e0011ff91fa5c77bd2\",\n            x\"b627b2cfd8ae59dcf5e58cc6c230ae369985fd096e1bc3be38da5deafcbed7d939f07cccc75383539940c56c6b6453db193f563f5b6e4fe54915afd9e1baea40a297fa7eda74abbdcd4cc5c667d6db3b9bd265782f7693798894400f2beb4637\",\n        ];\n\n        let i = 0;\n        let accum_pk = std::vector::empty<vector<u8>>();\n        while (i < std::vector::length(&pks)) {\n            std::vector::push_back(&mut accum_pk, *std::vector::borrow(&pks, i));\n\n            let apk = bls12381_aggregate_pop_verified_pubkeys(accum_pk);\n            assert!(option::is_some(&apk), 1);\n\n            let apk = option::extract(&mut apk);\n            assert!(apk == *std::vector::borrow(&agg_pks, i), 1);\n\n            assert!(bls12381_verify_multisignature(*std::vector::borrow(&multisigs, i), apk, b\"Hello, Aptoverse!\"), 1);\n\n            i = i + 1;\n        };\n    }\n\n\n    #[test]\n    /// Tests verification of a random BLS signature created using sk = x\"\"\n    fun test_bls12381_verify_normal_and_verify_sigshare() {\n        // Test case generated by running `cargo test -- bls12381_sample_signature --nocapture --include-ignored` in\n        // `crates/aptos-crypto`\n        // =============================================================================================================\n        // SK:        077c8a56f26259215a4a245373ab6ddf328ac6e00e5ea38d8700efa361bdc58d\n\n        let message = b\"Hello Aptos!\";\n\n        // First, test signatures that verify\n        let ok = bls12381_verify_normal_signature(\n            x\"b01ce4632e94d8c611736e96aa2ad8e0528a02f927a81a92db8047b002a8c71dc2d6bfb94729d0973790c10b6ece446817e4b7543afd7ca9a17c75de301ae835d66231c26a003f11ae26802b98d90869a9e73788c38739f7ac9d52659e1f7cf7\",\n            x\"94209a296b739577cb076d3bfb1ca8ee936f29b69b7dae436118c4dd1cc26fd43dcd16249476a006b8b949bf022a7858\",\n            message,\n        );\n        assert!(ok == true, 1);\n\n        let ok = bls12381_verify_signature_share(\n            x\"b01ce4632e94d8c611736e96aa2ad8e0528a02f927a81a92db8047b002a8c71dc2d6bfb94729d0973790c10b6ece446817e4b7543afd7ca9a17c75de301ae835d66231c26a003f11ae26802b98d90869a9e73788c38739f7ac9d52659e1f7cf7\",\n            x\"94209a296b739577cb076d3bfb1ca8ee936f29b69b7dae436118c4dd1cc26fd43dcd16249476a006b8b949bf022a7858\",\n            message,\n        );\n        assert!(ok == true, 1);\n\n        // Second, test signatures that do NOT verify\n        let sigs = vector[\n        x\"a01ce4632e94d8c611736e96aa2ad8e0528a02f927a81a92db8047b002a8c71dc2d6bfb94729d0973790c10b6ece446817e4b7543afd7ca9a17c75de301ae835d66231c26a003f11ae26802b98d90869a9e73788c38739f7ac9d52659e1f7cf7\",\n        x\"b01ce4632e94d8c611736e96aa2ad8e0528a02f927a81a92db8047b002a8c71dc2d6bfb94729d0973790c10b6ece446817e4b7543afd7ca9a17c75de301ae835d66231c26a003f11ae26802b98d90869a9e73788c38739f7ac9d52659e1f7cf7\",\n        x\"b01ce4632e94d8c611736e96aa2ad8e0528a02f927a81a92db8047b002a8c71dc2d6bfb94729d0973790c10b6ece446817e4b7543afd7ca9a17c75de301ae835d66231c26a003f11ae26802b98d90869a9e73788c38739f7ac9d52659e1f7cf7\",\n        ];\n        let pks = vector[\n        x\"94209a296b739577cb076d3bfb1ca8ee936f29b69b7dae436118c4dd1cc26fd43dcd16249476a006b8b949bf022a7858\",\n        x\"84209a296b739577cb076d3bfb1ca8ee936f29b69b7dae436118c4dd1cc26fd43dcd16249476a006b8b949bf022a7858\",\n        x\"94209a296b739577cb076d3bfb1ca8ee936f29b69b7dae436118c4dd1cc26fd43dcd16249476a006b8b949bf022a7858\",\n        ];\n        let messages = vector[\n        b\"Hello Aptos!\",\n        b\"Hello Aptos!\",\n        b\"Bello Aptos!\",\n        ];\n\n        let i = 0;\n        while (i < std::vector::length(&pks)) {\n            let sig = *std::vector::borrow(&sigs, i);\n            let pk = *std::vector::borrow(&pks, i);\n            let msg = *std::vector::borrow(&messages, i);\n\n            let notok = bls12381_verify_normal_signature(\n                sig,\n                pk,\n                msg,\n            );\n            assert!(notok == false, 1);\n\n            let notok = bls12381_verify_signature_share(\n                sig,\n                pk,\n                msg,\n            );\n            assert!(notok == false, 1);\n\n            i = i + 1;\n        }\n    }\n\n    #[test]\n    /// Tests verification of random BLS proofs-of-possession (PoPs)\n    fun test_bls12381_verify_pop() {\n        // Test case generated by running `cargo test -- sample_pop --nocapture --include-ignored` in `crates/aptos-crypto`\n        // =============================================================================================================\n\n        let pks = vector[\n        x\"808864c91ae7a9998b3f5ee71f447840864e56d79838e4785ff5126c51480198df3d972e1e0348c6da80d396983e42d7\",\n        x\"8843843c76d167c02842a214c21277bad0bfd83da467cb5cf2d3ee67b2dcc7221b9fafa6d430400164012580e0c34d27\",\n        x\"a23b524d4308d46e43ee8cbbf57f3e1c20c47061ad9c3f915212334ea6532451dd5c01d3d3ada6bea10fe180b2c3b450\",\n        x\"a2aaa3eae1df3fc36365491afa1da5181acbb03801afd1430f04bb3b3eb18036f8b756b3508e4caee04beff50d455d1c\",\n        x\"84985b7e983dbdaddfca1f0b7dad9660bb39fff660e329acec15f69ac48c75dfa5d2df9f0dc320e4e7b7658166e0ac1c\",\n        ];\n\n        let pops = vector[\n        x\"ab42afff92510034bf1232a37a0d31bc8abfc17e7ead9170d2d100f6cf6c75ccdcfedbd31699a112b4464a06fd636f3f190595863677d660b4c5d922268ace421f9e86e3a054946ee34ce29e1f88c1a10f27587cf5ec528d65ba7c0dc4863364\",\n        x\"a6da5f2bc17df70ce664cff3e3a3e09d17162e47e652032b9fedc0c772fd5a533583242cba12095602e422e579c5284b1735009332dbdd23430bbcf61cc506ae37e41ff9a1fc78f0bc0d99b6bc7bf74c8f567dfb59079a035842bdc5fa3a0464\",\n        x\"b8eef236595e2eab34d3c1abdab65971f5cfa1988c731ef62bd63c9a9ad3dfc9259f4f183bfffbc8375a38ba62e1c41a11173209705996ce889859bcbb3ddd7faa3c4ea3d8778f30a9ff814fdcfea1fb163d745c54dfb4dcc5a8cee092ee0070\",\n        x\"a03a12fab68ad59d85c15dd1528560eff2c89250070ad0654ba260fda4334da179811d2ecdaca57693f80e9ce977d62011e3b1ee7bb4f7e0eb9b349468dd758f10fc35d54e0d0b8536ca713a77a301944392a5c192b6adf2a79ae2b38912dc98\",\n        x\"8899b294f3c066e6dfb59bc0843265a1ccd6afc8f0f38a074d45ded8799c39d25ee0376cd6d6153b0d4d2ff8655e578b140254f1287b9e9df4e2aecc5b049d8556a4ab07f574df68e46348fd78e5298b7913377cf5bb3cf4796bfc755902bfdd\",\n        ];\n\n        assert!(std::vector::length(&pks) == std::vector::length(&pops), 1);\n\n        let i = 0;\n        while (i < std::vector::length(&pks)) {\n            assert!(bls12381_verify_proof_of_possession(*std::vector::borrow(&pks, i), *std::vector::borrow(&pops, i)), 1);\n\n            i = i + 1;\n        };\n\n        // assert first PK's PoP does not verify against modifed PK' = 0xa0 + PK[1:]\n        assert!(bls12381_verify_proof_of_possession(x\"a08864c91ae7a9998b3f5ee71f447840864e56d79838e4785ff5126c51480198df3d972e1e0348c6da80d396983e42d7\", x\"ab42afff92510034bf1232a37a0d31bc8abfc17e7ead9170d2d100f6cf6c75ccdcfedbd31699a112b4464a06fd636f3f190595863677d660b4c5d922268ace421f9e86e3a054946ee34ce29e1f88c1a10f27587cf5ec528d65ba7c0dc4863364\") == false, 1);\n        // assert first PK's PoP does not verify if modifed as pop' = 0xb0 + pop[1:]\n        assert!(bls12381_verify_proof_of_possession(x\"808864c91ae7a9998b3f5ee71f447840864e56d79838e4785ff5126c51480198df3d972e1e0348c6da80d396983e42d7\", x\"bb42afff92510034bf1232a37a0d31bc8abfc17e7ead9170d2d100f6cf6c75ccdcfedbd31699a112b4464a06fd636f3f190595863677d660b4c5d922268ace421f9e86e3a054946ee34ce29e1f88c1a10f27587cf5ec528d65ba7c0dc4863364\") == false, 1);\n    }\n}\n",
              "source_map": "0x8eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef1640200006d020000010000000000000000000000000000000000000000000000000000000000000001097369676e6174757265000c00008eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef16e0400009504000000010b7075626c69635f6b6579738eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef196040000a10400000000000101008eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef19d070000ba07000000010a7369676e6174757265738eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef1bb070000c50700000000000102008eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef114090000350900000001097369676e61747572658eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef1360900003f0900000000000103008eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef1890a0000a10a000000010a7075626c69635f6b65798eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef1a20a0000ac0a00000000000104008eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef1720e0000950e00000003066167677369678eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef19f0e0000a50e00000b7075626c69635f6b6579738eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef1bb0e0000c60e0000086d657373616765738eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef1e40e0000ec0e00000000000105008eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef1cd150000eb15000000030e6d756c74697369676e61747572658eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef1f5150000031600000e6167675f7075626c69635f6b65798eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef11916000027160000076d6573736167658eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef13d160000441600000000000106008eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef1bf190000df1900000003097369676e61747572658eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef1e9190000f21900000a7075626c69635f6b65798eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef1081a0000121a0000076d6573736167658eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef1281a00002f1a00000000000107008eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef1451b0000681b000000020a7075626c69635f6b65798eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef1721b00007c1b00001270726f6f665f6f665f706f73736573696f6e8eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef1921b0000a41b00000000000108008eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef1d71d0000f61d000000030f7369676e61747572655f73686172658eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef1001e00000f1e00000a7075626c69635f6b65798eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef1251e00002f1e0000076d6573736167658eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef1451e00004c1e00000000000109008eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef14e2000006520000000010a7075626c69635f6b65798eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef16620000070200000000000010a008eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef16c2200007a2200000003097369676e61747572658eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef1842200008d2200000a7075626c69635f6b65798eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef1a3220000ad220000076d6573736167658eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef1c3220000ca220000000000010b008eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef1532500006a2500000003076d6573736167658eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef1742500007b2500000b7265636f766572795f69648eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef1912500009c250000097369676e61747572658eeff8ec44b31fe76e42e05f573282e3906e2e7559d475e6339843df1a618ef1aa250000b32500000000000100"
            },
            {
              "name": "simple_map",
              "source": "/// This module provides a solution for sorted maps, that is it has the properties that\n/// 1) Keys point to Values\n/// 2) Each Key must be unique\n/// 3) A Key can be found within O(Log N) time\n/// 4) The data is stored as a sorted by Key\n/// 5) Adds and removals take O(N) time\nmodule aptos_std::simple_map {\n    use std::error;\n    use std::option;\n    use std::vector;\n    use aptos_std::comparator;\n\n    const EKEY_ALREADY_EXISTS: u64 = 0;\n    const EKEY_NOT_FOUND: u64 = 1;\n\n    struct SimpleMap<Key, Value> has copy, drop, store {\n        data: vector<Element<Key, Value>>,\n    }\n\n    struct Element<Key, Value> has copy, drop, store {\n        key: Key,\n        value: Value,\n    }\n\n    public fun length<Key: store, Value: store>(map: &SimpleMap<Key, Value>): u64 {\n        vector::length(&map.data)\n    }\n\n    public fun create<Key: store, Value: store>(): SimpleMap<Key, Value> {\n        SimpleMap {\n            data: vector::empty(),\n        }\n    }\n\n    public fun borrow<Key: store, Value: store>(\n        map: &SimpleMap<Key, Value>,\n        key: &Key,\n    ): &Value {\n        let (maybe_idx, _) = find(map, key);\n        assert!(option::is_some(&maybe_idx), error::invalid_argument(EKEY_NOT_FOUND));\n        let idx = option::extract(&mut maybe_idx);\n        &vector::borrow(&map.data, idx).value\n    }\n\n    public fun borrow_mut<Key: store, Value: store>(\n        map: &mut SimpleMap<Key, Value>,\n        key: &Key,\n    ): &mut Value {\n        let (maybe_idx, _) = find(map, key);\n        assert!(option::is_some(&maybe_idx), error::invalid_argument(EKEY_NOT_FOUND));\n        let idx = option::extract(&mut maybe_idx);\n        &mut vector::borrow_mut(&mut map.data, idx).value\n    }\n\n    public fun contains_key<Key: store, Value: store>(\n        map: &SimpleMap<Key, Value>,\n        key: &Key,\n    ): bool {\n        let (maybe_idx, _) = find(map, key);\n        option::is_some(&maybe_idx)\n    }\n\n    public fun destroy_empty<Key: store, Value: store>(map: SimpleMap<Key, Value>) {\n        let SimpleMap { data } = map;\n        vector::destroy_empty(data);\n    }\n\n    public fun add<Key: store, Value: store>(\n        map: &mut SimpleMap<Key, Value>,\n        key: Key,\n        value: Value,\n    ) {\n        let (maybe_idx, maybe_placement) = find(map, &key);\n        assert!(option::is_none(&maybe_idx), error::invalid_argument(EKEY_ALREADY_EXISTS));\n\n        // Append to the end and then swap elements until the list is ordered again\n        vector::push_back(&mut map.data, Element { key, value });\n\n        let placement = option::extract(&mut maybe_placement);\n        let end = vector::length(&map.data) - 1;\n        while (placement < end) {\n          vector::swap(&mut map.data, placement, end);\n          placement = placement + 1;\n        };\n    }\n\n    public fun remove<Key: store, Value: store>(\n        map: &mut SimpleMap<Key, Value>,\n        key: &Key,\n    ): (Key, Value) {\n        let (maybe_idx, _) = find(map, key);\n        assert!(option::is_some(&maybe_idx), error::invalid_argument(EKEY_NOT_FOUND));\n\n        let placement = option::extract(&mut maybe_idx);\n        let end = vector::length(&map.data) - 1;\n\n        while (placement < end) {\n            vector::swap(&mut map.data, placement, placement + 1);\n            placement = placement + 1;\n        };\n\n        let Element { key, value } = vector::pop_back(&mut map.data);\n        (key, value)\n    }\n\n    fun find<Key: store, Value: store>(\n        map: &SimpleMap<Key, Value>,\n        key: &Key,\n    ): (option::Option<u64>, option::Option<u64>) {\n        let length = vector::length(&map.data);\n\n        if (length == 0) {\n            return (option::none(), option::some(0))\n        };\n\n        let left = 0;\n        let right = length;\n\n        while (left != right) {\n            let mid = (left + right) / 2;\n            let potential_key = &vector::borrow(&map.data, mid).key;\n            if (comparator::is_smaller_than(&comparator::compare(potential_key, key))) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            };\n        };\n\n        if (left != length && key == &vector::borrow(&map.data, left).key) {\n            (option::some(left), option::none())\n        } else {\n            (option::none(), option::some(left))\n        }\n    }\n\n    #[test]\n    public fun add_remove_many() {\n        let map = create<u64, u64>();\n\n        assert!(length(&map) == 0, 0);\n        assert!(!contains_key(&map, &3), 1);\n        add(&mut map, 3, 1);\n        assert!(length(&map) == 1, 2);\n        assert!(contains_key(&map, &3), 3);\n        assert!(borrow(&map, &3) == &1, 4);\n        *borrow_mut(&mut map, &3) = 2;\n        assert!(borrow(&map, &3) == &2, 5);\n\n        assert!(!contains_key(&map, &2), 6);\n        add(&mut map, 2, 5);\n        assert!(length(&map) == 2, 7);\n        assert!(contains_key(&map, &2), 8);\n        assert!(borrow(&map, &2) == &5, 9);\n        *borrow_mut(&mut map, &2) = 9;\n        assert!(borrow(&map, &2) == &9, 10);\n\n        remove(&mut map, &2);\n        assert!(length(&map) == 1, 11);\n        assert!(!contains_key(&map, &2), 12);\n        assert!(borrow(&map, &3) == &2, 13);\n\n        remove(&mut map, &3);\n        assert!(length(&map) == 0, 14);\n        assert!(!contains_key(&map, &3), 15);\n\n        destroy_empty(map);\n    }\n\n    #[test]\n    public fun test_several() {\n        let map = create<u64, u64>();\n        add(&mut map, 6, 6);\n        add(&mut map, 1, 1);\n        add(&mut map, 5, 5);\n        add(&mut map, 2, 2);\n        add(&mut map, 3, 3);\n        add(&mut map, 0, 0);\n        add(&mut map, 7, 7);\n        add(&mut map, 4, 4);\n\n        let idx = 0;\n        while (idx < vector::length(&map.data)) {\n            assert!(idx == vector::borrow(&map.data, idx).key, idx);\n            idx = idx + 1;\n        };\n\n        remove(&mut map, &0);\n        remove(&mut map, &1);\n        remove(&mut map, &2);\n        remove(&mut map, &3);\n        remove(&mut map, &4);\n        remove(&mut map, &5);\n        remove(&mut map, &6);\n        remove(&mut map, &7);\n\n        destroy_empty(map);\n    }\n\n    #[test]\n    #[expected_failure]\n    public fun add_twice() {\n        let map = create<u64, u64>();\n        add(&mut map, 3, 1);\n        add(&mut map, 3, 1);\n\n        remove(&mut map, &3);\n        destroy_empty(map);\n    }\n\n    #[test]\n    #[expected_failure]\n    public fun remove_twice() {\n        let map = create<u64, u64>();\n        add(&mut map, 3, 1);\n        remove(&mut map, &3);\n        remove(&mut map, &3);\n\n        destroy_empty(map);\n    }\n}\n",
              "source_map": "0xde293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc40029010000330100000100000000000000000000000000000000000000000000000000000000000000010a73696d706c655f6d6170020000de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400560200005d02000002034b6579de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4005e020000610200000556616c7565de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400630200006802000002de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4008a0200008d020000de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4009c020000a10200000100de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400eb010000f401000002034b6579de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400f5010000f80100000556616c7565de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400fa010000ff01000001de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4002102000025020000090000de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4002e0800003108000002034b6579de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc40032080000350800000556616c7565de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4003e0800004308000003036d6170de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4005508000058080000036b6579de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4007e080000810800000576616c7565de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc40090080000950800000603252331de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400d5080000e008000003252332de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400d5080000e008000003656e64de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400210a0000240a0000096d617962655f696478de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400b3080000bc0800000f6d617962655f706c6163656d656e74de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400be080000cd08000009706c6163656d656e74de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400e2090000eb090000002a0000de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400d6080000d90800000100de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400db080000df0800000200de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400d5080000e00800000700de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400d1080000e00800000800de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400be080000cd0800000900de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400b3080000bc0800000a00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400020900000c0900000b00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400f20800000d0900000c00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400ea0800003c0900000f00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400270900003a0900001000de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4000f0900003b0900001100de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400ea0800003c0900001200de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400b2090000b50900001300de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400ad090000ba0900001400de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400c6090000c90900001500de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400cb090000d00900001600de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400bc090000d20900001700de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4009b090000d30900001800de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400fe090000120a00001900de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400ee090000130a00001a00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400e2090000eb0900001b00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400370a00003a0a00001c00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400360a00003f0a00001d00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400270a0000400a00001e00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400430a0000440a00001f00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400410a0000420a00002000de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400210a0000240a00002100de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400550a00005e0a00002200de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400610a0000640a00002300de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4005f0a0000600a00002400de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4004e0a0000cd0a00002600de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400840a0000870a00002700de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4007f0a00008c0a00002800de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4008e0a0000970a00002900de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400990a00009c0a00002a00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400720a00009d0a00002b00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400b50a0000be0a00002c00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400c10a0000c20a00002d00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400bf0a0000c00a00002e00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400a90a0000b20a00002f00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400c20a0000c30a00003000de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400cd0a0000ce0a0000000100de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400d0030000d603000002034b6579de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400d7030000da0300000556616c7565de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400e3030000e803000002036d6170de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400fa030000fd030000036b6579de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4001f040000220400000203696478de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400ca040000cd040000096d617962655f696478de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400470400005004000000130000de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4005c0400005f0400000100de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc40061040000640400000200de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc40057040000650400000300de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc40052040000530400000400de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc40047040000500400000500de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc40087040000910400000600de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc40077040000920400000700de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4006f040000bc0400000a00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400ac040000ba0400000b00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc40094040000bb0400000c00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4006f040000bc0400000d00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400e0040000ee0400000e00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400d0040000ef0400000f00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400ca040000cd0400001000de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4000a0500000d0500001100de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc40009050000120500001200de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc40014050000170500001300de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400fa040000180500001400de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400f90400001e050000000200de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400350500003f05000002034b6579de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc40040050000430500000556616c7565de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4004c0500005105000002036d6170de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4006305000066050000036b6579de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4008c0500008f0500000403252331de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400cc050000d605000003252332de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400cc050000d605000003696478de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4003b0600003e060000096d617962655f696478de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400b8050000c105000000140000de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400cd050000d00500000100de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400d2050000d50500000200de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400cc050000d60500000700de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400c8050000d60500000800de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400c3050000c40500000900de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400b8050000c10500000a00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400f8050000020600000b00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400e8050000030600000c00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400e00500002d0600000f00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4001d0600002b0600001000de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400050600002c0600001100de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400e00500002d0600001200de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400510600005f0600001300de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc40041060000600600001400de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4003b0600003e0600001500de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400870600008a0600001600de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400820600008f0600001700de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc40091060000940600001800de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4006f060000950600001900de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4006a0600009b060000000300de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400b2060000be06000002034b6579de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400bf060000c20600000556616c7565de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400cb060000d006000002036d6170de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400e2060000e5060000036b6579de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400070700000a07000001096d617962655f696478de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4002d0700003607000000070000de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc40042070000450700000100de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400470700004a0700000200de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4003d0700004b0700000300de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc40038070000390700000400de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4002d070000360700000500de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400650700006f0700000600de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4005507000070070000000400de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4003d0300004303000002034b6579de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc40044030000470300000556616c7565de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4005003000055030000000000020000de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4009f030000ae0300000100de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc40081030000b9030000000500de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400870700009407000002034b6579de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc40095070000980700000556616c7565de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400a1070000a607000001036d6170de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400af070000b2070000010464617461de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400e5070000e907000000060000de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400ee070000f10700000100de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400d9070000eb0700000200de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400e5070000e90700000300de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc40011080000150800000400de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400fb070000160800000500de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4001608000017080000000600de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4004b0d00004f0d000002034b6579de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400500d0000530d00000556616c7565de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4005c0d0000610d000002036d6170de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400730d0000760d0000036b6579de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400980d00009b0d00000903252331de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400530f00007a0f000003252332de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400f80f00003510000003252333de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400f40f0000b510000003252334de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400f40f0000b5100000046c656674de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400700e0000740e0000066c656e677468de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400e30d0000e90d0000036d6964de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400c70e0000ca0e00000d706f74656e7469616c5f6b6579de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400f10e0000fe0e0000057269676874de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400860e00008b0e000000440000de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400fc0d0000ff0d00000100de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400fb0d0000040e00000200de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400ec0d0000050e00000300de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400e30d0000e90d00000400de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400140e00001a0e00000500de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4001e0e00001f0e00000600de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4001b0e00001d0e00000700de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400100e0000610e00000900de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4002f0e0000570e00000d00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400370e0000450e00000e00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400540e0000550e00000f00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400470e0000560e00001000de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4002f0e0000570e00001100de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400770e0000780e00001200de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400700e0000740e00001300de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4008e0e0000940e00001400de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400860e00008b0e00001500de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400a60e0000aa0e00001600de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400ae0e0000b30e00001700de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400ab0e0000ad0e00001800de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4009f0e0000e90f00001a00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400ce0e0000d20e00001b00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400d50e0000da0e00001c00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400d30e0000d40e00001d00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400de0e0000df0e00001e00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400dc0e0000dd0e00001f00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400c70e0000ca0e00002000de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400120f0000150f00002100de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400110f00001a0f00002200de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4001c0f00001f0f00002300de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400020f0000200f00002400de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400010f0000240f00002500de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400f10e0000fe0e00002600de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400670f0000740f00002700de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400760f0000790f00002800de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400530f00007a0f00002a00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400520f00007a0f00002b00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400360f00007b0f00002c00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400320f0000de0f00002e00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400960f0000990f00002f00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4009c0f00009d0f00003000de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4009a0f00009b0f00003100de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4008f0f0000930f00003200de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4009d0f00009e0f00003300de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400cc0f0000cf0f00003400de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400c40f0000c90f00003500de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400de0f0000df0f00003600de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400f80f0000fc0f00003700de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc40000100000061000003800de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400fd0f0000ff0f00003900de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400f80f0000351000003b00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4000a1000000d1000003c00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc40022100000251000003d00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400211000002a1000003e00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4002c100000301000003f00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc40012100000311000004000de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc40011100000351000004100de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4000e100000101000004200de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400f80f0000351000004b00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400f40f0000b51000004d00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc40053100000571000004e00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc40046100000581000004f00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4005a100000681000005000de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400f40f0000b51000005300de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc40088100000961000005400de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400a5100000a91000005500de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc40098100000aa1000005600de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400f40f0000b5100000000700de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400c0020000c602000002034b6579de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400c7020000ca0200000556616c7565de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400d3020000d802000001036d6170de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400e1020000e40200000000030000de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4001d030000200300000100de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4001c030000250300000200de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4000d03000026030000000800de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400e50a0000eb0a000002034b6579de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400ec0a0000ef0a00000556616c7565de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400f80a0000fd0a000002036d6170de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4000f0b0000120b0000036b6579de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400380b00003b0b00000703252331de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4007a0b0000840b000003252332de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4007a0b0000840b000003656e64de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400230c0000260c0000056b65792333de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400f70c0000fa0c0000096d617962655f696478de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400660b00006f0b000009706c6163656d656e74de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400ea0b0000f30b00000576616c7565de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400fc0c0000010d0000002e0000de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4007b0b00007e0b00000100de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400800b0000830b00000200de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4007a0b0000840b00000700de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400760b0000840b00000800de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400710b0000720b00000900de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400660b00006f0b00000a00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400a60b0000b00b00000b00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400960b0000b10b00000c00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4008e0b0000db0b00000f00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400cb0b0000d90b00001000de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400b30b0000da0b00001100de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4008e0b0000db0b00001200de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400060c0000140c00001300de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400f60b0000150c00001400de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400ea0b0000f30b00001500de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400390c00003c0c00001600de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400380c0000410c00001700de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400290c0000420c00001800de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400450c0000460c00001900de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400430c0000440c00001a00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400230c0000260c00001b00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400580c0000610c00001c00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400640c0000670c00001d00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400620c0000630c00001e00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400510c0000de0c00002000de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400890c00008c0c00002100de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400840c0000910c00002200de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400930c00009c0c00002300de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4009e0c0000a70c00002400de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400aa0c0000ab0c00002500de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400a80c0000a90c00002600de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400770c0000ac0c00002700de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400c60c0000cf0c00002800de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400d20c0000d30c00002900de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400d00c0000d10c00002a00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400ba0c0000c30c00002b00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400d30c0000d40c00002c00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4001c0d00001f0d00002d00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400170d0000240d00002e00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400060d0000250d00002f00de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400ed0c0000030d00003000de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400fc0c0000010d00003100de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400f70c0000fa0c00003200de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400300d0000330d00003300de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc400350d00003a0d00003400de293656fad9e9bd6cf74e71b68fbaacc8a4892b913378a4e9562c811d1cc4002f0d00003b0d000000020e454b45595f4e4f545f464f554e44010013454b45595f414c52454144595f4558495354530000"
            },
            {
              "name": "table_with_aggregator_length",
              "source": "/// This module has the same API as `TableWithLength`, but instead of integer\n/// uses an aggregator.\nmodule aptos_std::table_with_aggregator_length {\n    use std::error;\n\n    use aptos_std::aggregator_factory;\n    use aptos_std::aggregator::{Self, Aggregator};\n    use aptos_std::table::{Self, Table};\n\n    // Native code raises this with error::invalid_arguments()\n    const EALREADY_EXISTS: u64 = 100;\n    // Native code raises this with error::invalid_arguments()\n    const ENOT_FOUND: u64 = 101;\n    const ENOT_EMPTY: u64 = 102;\n\n    const MAX_U64: u128 = 18446744073709551615;\n\n    struct TableWithAggregatorLength<phantom K: copy + drop, phantom V> has store {\n        inner: Table<K, V>,\n        length: Aggregator,\n    }\n\n    /// Creates a new table with aggregatable length.\n    public fun new<K: copy + drop, V: store>(): TableWithAggregatorLength<K, V> {\n        let aggregator = aggregator_factory::create_aggregator(MAX_U64);\n        TableWithAggregatorLength {\n            inner: table::new<K, V>(),\n            length: aggregator,\n        }\n    }\n\n    /// Destroys a table. The table must be empty to succeed.\n    public fun destroy_empty<K: copy + drop, V>(table: TableWithAggregatorLength <K, V>) {\n        assert!(aggregator::read(&table.length) == 0, error::invalid_state(ENOT_EMPTY));\n        let TableWithAggregatorLength { inner, length } = table;\n        table::destroy(inner);\n        aggregator::destroy(length);\n    }\n\n    /// Adds a new entry to the table. Aborts if an entry for this\n    /// key already exists. The entry itself is not stored in the\n    /// table, and cannot be discovered from it.\n    public fun add<K: copy + drop, V>(table: &mut TableWithAggregatorLength <K, V>, key: K, val: V) {\n        table::add(&mut table.inner, key, val);\n        aggregator::add(&mut table.length, 1);\n    }\n\n    /// Acquires an immutable reference to the value which `key` maps to.\n    /// Aborts if there is no entry for `key`.\n    public fun borrow<K: copy + drop, V>(table: &TableWithAggregatorLength <K, V>, key: K): &V {\n        table::borrow(&table.inner, key)\n    }\n\n    /// Acquires a mutable reference to the value which `key` maps to.\n    /// Aborts if there is no entry for `key`.\n    public fun borrow_mut<K: copy + drop, V>(table: &mut TableWithAggregatorLength <K, V>, key: K): &mut V {\n        table::borrow_mut(&mut table.inner, key)\n    }\n\n    /// Returns the length of the table, i.e. the number of entries.\n    public fun length<K: copy + drop, V>(table: &TableWithAggregatorLength <K, V>): u64 {\n        (aggregator::read(&table.length) as u64)\n    }\n\n    /// Returns true if this table is empty.\n    public fun empty<K: copy + drop, V>(table: &TableWithAggregatorLength <K, V>): bool {\n        aggregator::read(&table.length) == 0\n    }\n\n    /// Acquires a mutable reference to the value which `key` maps to.\n    /// Insert the pair (`key`, `default`) first if there is no entry for `key`.\n    public fun borrow_mut_with_default<K: copy + drop, V: drop>(table: &mut TableWithAggregatorLength <K, V>, key: K, default: V): &mut V {\n        table::borrow_mut_with_default(&mut table.inner, key, default)\n    }\n\n    /// Removes the value which `key` maps to and returns it.\n    /// Aborts if there is no entry for `key`.\n    public fun remove<K: copy + drop, V>(table: &mut TableWithAggregatorLength <K, V>, key: K): V {\n        let val = table::remove(&mut table.inner, key);\n        aggregator::sub(&mut table.length, 1);\n        val\n    }\n\n    /// Returns true iff `table` contains an entry for `key`.\n    public fun contains<K: copy + drop, V>(table: &TableWithAggregatorLength <K, V>, key: K): bool {\n        table::contains(&table.inner, key)\n    }\n\n    #[test(account = @aptos_framework)]\n    fun table_with_aggregatable_length_test(account: signer) {\n        // Factory should always exist on the core account.\n        aggregator_factory::initialize_aggregator_factory(&account);\n\n        let table = new<u128, u128>();\n        let i = 0;\n        while (i < 500) {\n            add(&mut table, i, i);\n            i = i + 1;\n        };\n\n        // Check aggregator materializes the length correctly.\n        assert!(length(&table) == 500, 0);\n\n        while (i > 0) {\n            i = i - 1;\n            assert!(contains(&table, i), 0);\n            assert!(remove(&mut table, i) == i, 0);\n        };\n\n        destroy_empty(table);\n    }\n}\n",
              "source_map": ""
            },
            {
              "name": "type_info",
              "source": "module aptos_std::type_info {\n    use std::string;\n\n    struct TypeInfo has copy, drop, store {\n        account_address: address,\n        module_name: vector<u8>,\n        struct_name: vector<u8>,\n    }\n\n    public fun account_address(type_info: &TypeInfo): address {\n        type_info.account_address\n    }\n\n    public fun module_name(type_info: &TypeInfo): vector<u8> {\n        type_info.module_name\n    }\n\n    public fun struct_name(type_info: &TypeInfo): vector<u8> {\n        type_info.struct_name\n    }\n\n    public native fun type_of<T>(): TypeInfo;\n    public native fun type_name<T>(): string::String;\n\n    spec type_of { // TODO: temporary mockup.\n        pragma opaque;\n    }\n\n    #[test]\n    fun test() {\n        let type_info = type_of<TypeInfo>();\n        assert!(account_address(&type_info) == @aptos_std, 0);\n        assert!(module_name(&type_info) == b\"type_info\", 1);\n        assert!(struct_name(&type_info) == b\"TypeInfo\", 2);\n    }\n\n    #[test]\n    fun test_type_name() {\n        use aptos_std::table::Table;\n\n        assert!(type_name<bool>() == string::utf8(b\"bool\"), 0);\n        assert!(type_name<u8>() == string::utf8(b\"u8\"), 1);\n        assert!(type_name<u64>() == string::utf8(b\"u64\"), 2);\n        assert!(type_name<u128>() == string::utf8(b\"u128\"), 3);\n        assert!(type_name<address>() == string::utf8(b\"address\"), 4);\n        assert!(type_name<signer>() == string::utf8(b\"signer\"), 5);\n\n        // vector\n        assert!(type_name<vector<u8>>() == string::utf8(b\"vector<u8>\"), 6);\n        assert!(type_name<vector<vector<u8>>>() == string::utf8(b\"vector<vector<u8>>\"), 7);\n        assert!(type_name<vector<vector<TypeInfo>>>() == string::utf8(b\"vector<vector<0x1::type_info::TypeInfo>>\"), 8);\n\n\n        // struct\n        assert!(type_name<TypeInfo>() == string::utf8(b\"0x1::type_info::TypeInfo\"), 9);\n        assert!(type_name<\n            Table<\n                TypeInfo,\n                Table<u8, vector<TypeInfo>>\n            >\n        >() == string::utf8(b\"0x1::table::Table<0x1::type_info::TypeInfo, 0x1::table::Table<u8, vector<0x1::type_info::TypeInfo>>>\"), 10);\n    }\n}\n",
              "source_map": "0xe845f3434a443b947736c254637f4dbc222253b48305ad34c96e95c8b91741e6120000001b00000001000000000000000000000000000000000000000000000000000000000000000109747970655f696e666f010000e845f3434a443b947736c254637f4dbc222253b48305ad34c96e95c8b91741e63f000000470000000003e845f3434a443b947736c254637f4dbc222253b48305ad34c96e95c8b91741e66800000077000000e845f3434a443b947736c254637f4dbc222253b48305ad34c96e95c8b91741e68a00000095000000e845f3434a443b947736c254637f4dbc222253b48305ad34c96e95c8b91741e6ab000000b6000000050000e845f3434a443b947736c254637f4dbc222253b48305ad34c96e95c8b91741e6da000000e9000000000109747970655f696e666fe845f3434a443b947736c254637f4dbc222253b48305ad34c96e95c8b91741e6ea000000f30000000000020000e845f3434a443b947736c254637f4dbc222253b48305ad34c96e95c8b91741e6130100001c0100000100e845f3434a443b947736c254637f4dbc222253b48305ad34c96e95c8b91741e6130100002c010000000100e845f3434a443b947736c254637f4dbc222253b48305ad34c96e95c8b91741e6430100004e010000000109747970655f696e666fe845f3434a443b947736c254637f4dbc222253b48305ad34c96e95c8b91741e64f010000580100000000020000e845f3434a443b947736c254637f4dbc222253b48305ad34c96e95c8b91741e67b010000840100000100e845f3434a443b947736c254637f4dbc222253b48305ad34c96e95c8b91741e67b01000090010000000200e845f3434a443b947736c254637f4dbc222253b48305ad34c96e95c8b91741e6a7010000b2010000000109747970655f696e666fe845f3434a443b947736c254637f4dbc222253b48305ad34c96e95c8b91741e6b3010000bc0100000000020000e845f3434a443b947736c254637f4dbc222253b48305ad34c96e95c8b91741e6df010000e80100000100e845f3434a443b947736c254637f4dbc222253b48305ad34c96e95c8b91741e6df010000f4010000000300e845f3434a443b947736c254637f4dbc222253b48305ad34c96e95c8b91741e64002000049020000010154e845f3434a443b947736c254637f4dbc222253b48305ad34c96e95c8b91741e64a0200004b02000000000000010400e845f3434a443b947736c254637f4dbc222253b48305ad34c96e95c8b91741e61202000019020000010154e845f3434a443b947736c254637f4dbc222253b48305ad34c96e95c8b91741e61a0200001b020000000000000100"
            }
          ],
          "name": "AptosStdlib",
          "upgrade_policy": {
            "policy": 1
          }
        },
        {
          "abis": [
            "0x010e6372656174655f6163636f756e740000000000000000000000000000000000000000000000000000000000000001076163636f756e7420204261736963206163636f756e74206372656174696f6e206d6574686f64732e000108617574685f6b657904",
            "0x0119726f746174655f61757468656e7469636174696f6e5f6b65790000000000000000000000000000000000000000000000000000000000000001076163636f756e740000010c6e65775f617574685f6b65790601",
            "0x01087472616e736665720000000000000000000000000000000000000000000000000000000000000001076163636f756e7400000202746f0406616d6f756e7402",
            "0x0115636c61696d5f6d696e745f6361706162696c69747900000000000000000000000000000000000000000000000000000000000000010a6170746f735f636f696e9301204f6e6c792063616c6c61626c6520696e20746573747320616e6420746573746e6574732077686572652074686520636f7265207265736f7572636573206163636f756e74206578697374732e0a20436c61696d207468652064656c656761746564206d696e74206361706162696c69747920616e642064657374726f79207468652064656c65676174656420746f6b656e2e0000",
            "0x011864656c65676174655f6d696e745f6361706162696c69747900000000000000000000000000000000000000000000000000000000000000010a6170746f735f636f696ea601204f6e6c792063616c6c61626c6520696e20746573747320616e6420746573746e6574732077686572652074686520636f7265207265736f7572636573206163636f756e74206578697374732e0a204372656174652064656c65676174656420746f6b656e20666f7220746865206164647265737320736f20746865206163636f756e7420636f756c6420636c61696d204d696e744361706162696c697479206c617465722e000102746f04",
            "0x01046d696e7400000000000000000000000000000000000000000000000000000000000000010a6170746f735f636f696e8901204f6e6c792063616c6c61626c6520696e20746573747320616e6420746573746e6574732077686572652074686520636f7265207265736f7572636573206163636f756e74206578697374732e0a20437265617465206e657720636f696e7320616e64206465706f736974207468656d20696e746f206473745f616464722773206163636f756e742e0002086473745f616464720406616d6f756e7402",
            "0x010f6372656174655f70726f706f73616c0000000000000000000000000000000000000000000000000000000000000001106170746f735f676f7665726e616e6365e4012043726561746520612070726f706f73616c207769746820746865206261636b696e6720607374616b655f706f6f6c602e0a2040706172616d20657865637574696f6e5f686173682052657175697265642e2054686973206973207468652068617368206f6620746865207265736f6c7574696f6e207363726970742e205768656e207468652070726f706f73616c206973207265736f6c7665642c0a206f6e6c7920746865206578616374207363726970742077697468206d61746368696e6720686173682063616e206265207375636365737366756c6c792065786563757465642e00040a7374616b655f706f6f6c040e657865637574696f6e5f686173680601116d657461646174615f6c6f636174696f6e06010d6d657461646174615f686173680601",
            "0x0104766f74650000000000000000000000000000000000000000000000000000000000000001106170746f735f676f7665726e616e63654820566f7465206f6e2070726f706f73616c2077697468206070726f706f73616c5f69646020616e6420766f74696e6720706f7765722066726f6d20607374616b655f706f6f6c602e00030a7374616b655f706f6f6c040b70726f706f73616c5f6964020b73686f756c645f7061737300",
            "0x01137075626c6973685f7061636b6167655f74786e000000000000000000000000000000000000000000000000000000000000000104636f6465c2012053616d6520617320607075626c6973685f7061636b616765602062757420617320616e20656e7472792066756e6374696f6e2077686963682063616e2062652063616c6c65642061732061207472616e73616374696f6e2e20426563617573650a206f662063757272656e74207265737472696374696f6e7320666f722074786e20706172616d65746572732c20746865206d65746164617461206e6565647320746f2062652070617373656420696e2073657269616c697a656420666f726d2e00020f7061636b5f73657269616c697a6564060104636f6465060601",
            "0x01087472616e73666572000000000000000000000000000000000000000000000000000000000000000104636f696e3c205472616e73666572732060616d6f756e7460206f6620636f696e732060436f696e54797065602066726f6d206066726f6d6020746f2060746f602e0109636f696e5f747970650202746f0406616d6f756e7402",
            "0x01087265676973746572000000000000000000000000000000000000000000000000000000000000000105636f696e73dd01205363726970742066756e6374696f6e20746f20726567697374657220746f207265636569766520612073706563696669632060436f696e54797065602e20416e206163636f756e7420746861742077616e747320746f20686f6c64206120636f696e20747970650a2068617320746f206578706c696369746c792072656769737465727320746f20646f20736f2e2054686520726567697374657220637265617465732061207370656369616c2060436f696e53746f7265600a20746f20686f6c6420746865207370656369666965642060436f696e54797065602e0109636f696e5f7479706500",
            "0x01107365745f6761735f7363686564756c6500000000000000000000000000000000000000000000000000000000000000010c6761735f7363686564756c65000001116761735f7363686564756c655f626c6f620601",
            "0x01046275726e00000000000000000000000000000000000000000000000000000000000000010c6d616e616765645f636f696e4420576974686472617720616e2060616d6f756e7460206f6620636f696e2060436f696e54797065602066726f6d20606163636f756e746020616e64206275726e2069742e0109636f696e5f747970650106616d6f756e7402",
            "0x010a696e697469616c697a6500000000000000000000000000000000000000000000000000000000000000010c6d616e616765645f636f696e8b0120496e697469616c697a65206e657720636f696e2060436f696e547970656020696e204170746f7320426c6f636b636861696e2e0a204d696e7420616e64204275726e204361706162696c69746965732077696c6c2062652073746f72656420756e64657220606163636f756e746020696e20604361706162696c697469657360207265736f757263652e0109636f696e5f7479706504046e616d6506010673796d626f6c060108646563696d616c73020e6d6f6e69746f725f737570706c7900",
            "0x01046d696e7400000000000000000000000000000000000000000000000000000000000000010c6d616e616765645f636f696e4620437265617465206e657720636f696e732060436f696e547970656020616e64206465706f736974207468656d20696e746f206473745f616464722773206163636f756e742e0109636f696e5f7479706502086473745f616464720406616d6f756e7402",
            "0x0108726567697374657200000000000000000000000000000000000000000000000000000000000000010c6d616e616765645f636f696ec001204372656174696e672061207265736f7572636520746861742073746f7265732062616c616e6365206f662060436f696e5479706560206f6e20757365722773206163636f756e742c20776974686472617720616e64206465706f736974206576656e742068616e646c6572732e0a20526571756972656420696620757365722077616e747320746f20737461727420616363657074696e67206465706f73697473206f662060436f696e547970656020696e20686973206163636f756e742e0109636f696e5f7479706500",
            "0x0111666f7263655f7265636f6e66696775726500000000000000000000000000000000000000000000000000000000000000010f7265636f6e66696775726174696f6e1720466f72636520616e2065706f6368206368616e67652e0000",
            "0x01176372656174655f7265736f757263655f6163636f756e740000000000000000000000000000000000000000000000000000000000000001107265736f757263655f6163636f756e74c00120437265617465732061206e6577207265736f75726365206163636f756e7420616e6420726f7461746573207468652061757468656e7469636174696f6e206b657920746f206569746865720a20746865206f7074696f6e616c2061757468206b6579206966206974206973206e6f6e2d656d707479202874686f7567682061757468206b657973206172652033322d6279746573290a206f722074686520736f75726365206163636f756e74732063757272656e742061757468206b65792e000204736565640601116f7074696f6e616c5f617574685f6b65790601",
            "0x01096164645f7374616b650000000000000000000000000000000000000000000000000000000000000001057374616b653f204164642060616d6f756e7460206f6620636f696e732066726f6d2074686520606163636f756e7460206f776e696e6720746865205374616b65506f6f6c2e000106616d6f756e7402",
            "0x010f696e6372656173655f6c6f636b75700000000000000000000000000000000000000000000000000000000000000001057374616b65602053696d696c617220746f20696e6372656173655f6c6f636b75705f776974685f636170206275742077696c6c20757365206f776e657273686970206361706162696c6974792066726f6d20746865207369676e696e67206163636f756e742e0000",
            "0x0115696e697469616c697a655f6f776e65725f6f6e6c790000000000000000000000000000000000000000000000000000000000000001057374616b65f20120496e697469616c697a65207468652076616c696461746f72206163636f756e7420616e642067697665206f776e65727368697020746f20746865207369676e696e67206163636f756e740a20657863657074206974206c6561766573207468652056616c696461746f72436f6e66696720746f2062652073657420627920616e6f7468657220656e746974792e0a204e6f74653a20746869732074726967676572732073657474696e6720746865206f70657261746f7220616e64206f776e65722c2073657420697420746f20746865206163636f756e74277320616464726573730a20746f20736574206c617465722e000314696e697469616c5f7374616b655f616d6f756e7402086f70657261746f720405766f74657204",
            "0x0114696e697469616c697a655f76616c696461746f720000000000000000000000000000000000000000000000000000000000000001057374616b654c20496e697469616c697a65207468652076616c696461746f72206163636f756e7420616e642067697665206f776e65727368697020746f20746865207369676e696e67206163636f756e742e000410636f6e73656e7375735f7075626b657906011370726f6f665f6f665f706f7373657373696f6e0601116e6574776f726b5f61646472657373657306011266756c6c6e6f64655f6164647265737365730601",
            "0x01126a6f696e5f76616c696461746f725f7365740000000000000000000000000000000000000000000000000000000000000001057374616b654420546869732063616e206f6e6c792063616c6c656420627920746865206f70657261746f72206f66207468652076616c696461746f722f7374616b696e6720706f6f6c2e00010c706f6f6c5f6164647265737304",
            "0x01136c656176655f76616c696461746f725f7365740000000000000000000000000000000000000000000000000000000000000001057374616b65d602205265717565737420746f20686176652060706f6f6c5f6164647265737360206c65617665207468652076616c696461746f72207365742e205468652076616c696461746f72206973206f6e6c792061637475616c6c792072656d6f7665642066726f6d2074686520736574207768656e0a20746865206e6578742065706f6368207374617274732e0a20546865206c6173742076616c696461746f7220696e20746865207365742063616e6e6f74206c656176652e205468697320697320616e2065646765206361736520746861742073686f756c64206e657665722068617070656e206173206c6f6e6720617320746865206e6574776f726b0a206973207374696c6c206f7065726174696f6e616c2e0a0a2043616e206f6e6c792062652063616c6c656420627920746865206f70657261746f72206f66207468652076616c696461746f722f7374616b696e6720706f6f6c2e00010c706f6f6c5f6164647265737304",
            "0x0114726f746174655f636f6e73656e7375735f6b65790000000000000000000000000000000000000000000000000000000000000001057374616b654c20526f746174652074686520636f6e73656e737573206b6579206f66207468652076616c696461746f722c206974276c6c2074616b652065666665637420696e206e6578742065706f63682e00030c706f6f6c5f6164647265737304146e65775f636f6e73656e7375735f7075626b657906011370726f6f665f6f665f706f7373657373696f6e0601",
            "0x01137365745f64656c6567617465645f766f7465720000000000000000000000000000000000000000000000000000000000000001057374616b654120416c6c6f777320616e206f776e657220746f206368616e6765207468652064656c65676174656420766f746572206f6620746865207374616b6520706f6f6c2e0001136e65775f64656c6567617465645f766f74657204",
            "0x010c7365745f6f70657261746f720000000000000000000000000000000000000000000000000000000000000001057374616b653a20416c6c6f777320616e206f776e657220746f206368616e676520746865206f70657261746f72206f6620746865207374616b6520706f6f6c2e00010c6e65775f6f70657261746f7204",
            "0x0106756e6c6f636b0000000000000000000000000000000000000000000000000000000000000001057374616b65572053696d696c617220746f20756e6c6f636b5f776974685f636170206275742077696c6c20757365206f776e657273686970206361706162696c6974792066726f6d20746865207369676e696e67206163636f756e742e000106616d6f756e7402",
            "0x01257570646174655f6e6574776f726b5f616e645f66756c6c6e6f64655f6164647265737365730000000000000000000000000000000000000000000000000000000000000001057374616b65672055706461746520746865206e6574776f726b20616e642066756c6c206e6f646520616464726573736573206f66207468652076616c696461746f722e2054686973206f6e6c792074616b65732065666665637420696e20746865206e6578742065706f63682e00030c706f6f6c5f6164647265737304156e65775f6e6574776f726b5f6164647265737365730601166e65775f66756c6c6e6f64655f6164647265737365730601",
            "0x010877697468647261770000000000000000000000000000000000000000000000000000000000000001057374616b652a2057697468647261772066726f6d20606163636f756e7460277320696e616374697665207374616b652e00010f77697468647261775f616d6f756e7402",
            "0x010b7365745f76657273696f6e00000000000000000000000000000000000000000000000000000000000000010776657273696f6e9801205570646174657320746865206d616a6f722076657273696f6e20746f2061206c61726765722076657273696f6e2e0a2054686973206973206f6e6c79207573656420696e207465737420656e7669726f6e6d656e747320616e64206f757473696465206f66207468656d2c2074686520636f7265207265736f7572636573206163636f756e742073686f756c646e27742065786973742e0001056d616a6f7202"
          ],
          "build_info": "---\npackage_name: AptosFramework\naddress_alias_instantiation:\n  Extensions: \"0000000000000000000000000000000000000000000000000000000000000001\"\n  aptos_framework: \"0000000000000000000000000000000000000000000000000000000000000001\"\n  aptos_std: \"0000000000000000000000000000000000000000000000000000000000000001\"\n  core_resources: 000000000000000000000000000000000000000000000000000000000a550c18\n  std: \"0000000000000000000000000000000000000000000000000000000000000001\"\n  vm_reserved: \"0000000000000000000000000000000000000000000000000000000000000000\"\nsource_digest: C51A5383292D28CBE1B264CBC11DB8498C96E4DC88AE3C5916F1845919783733\nbuild_flags:\n  dev_mode: false\n  test_mode: false\n  generate_docs: false\n  generate_abis: true\n  install_dir: ~\n  force_recompilation: false\n  additional_named_addresses: {}\n  architecture: ~\n  fetch_deps_only: false\n",
          "error_map": "",
          "manifest": "[package]\nname = \"AptosFramework\"\nversion = \"1.0.0\"\n\n[addresses]\nstd = \"0x1\"\naptos_std = \"0x1\"\naptos_framework = \"0x1\"\ncore_resources = \"0xA550C18\"\nvm_reserved = \"0x0\"\n\n[dependencies]\nAptosStdlib = { local = \"../aptos-stdlib\" }\nMoveStdlib = { local = \"../move-stdlib\" }\n",
          "modules": [
            {
              "name": "system_addresses",
              "source": "module aptos_framework::system_addresses {\n    use std::error;\n    use std::signer;\n\n    /// The address/account did not correspond to the core resource address\n    const ENOT_CORE_RESOURCE_ADDRESS: u64 = 0;\n    /// The operation can only be performed by the VM\n    const EVM: u64 = 1;\n    /// The address/account did not correspond to the core framework address\n    const ENOT_CORE_FRAMEWORK_ADDRESS: u64 = 2;\n\n    public fun assert_core_resource(account: &signer) {\n        assert_core_resource_address(signer::address_of(account))\n    }\n\n    public fun assert_core_resource_address(addr: address) {\n        assert!(is_core_resource_address(addr), error::permission_denied(ENOT_CORE_RESOURCE_ADDRESS))\n    }\n\n    public fun is_core_resource_address(addr: address): bool {\n        addr == @core_resources\n    }\n\n    public fun assert_aptos_framework(account: &signer) {\n        assert!(signer::address_of(account) == @aptos_framework, error::permission_denied(ENOT_CORE_FRAMEWORK_ADDRESS))\n    }\n\n    /// Assert that the signer has the VM reserved address.\n    public fun assert_vm(account: &signer) {\n        assert!(signer::address_of(account) == @vm_reserved, error::permission_denied(EVM))\n    }\n}\n",
              "source_map": "0x5fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aed18000000280000000100000000000000000000000000000000000000000000000000000000000000011073797374656d5f616464726573736573000500005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aed3c030000520300000001076163636f756e745fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aed530300005a03000000000800005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aed8a0300009103000001005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aed770300009203000002005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aed96030000a603000003005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aed930300009503000004005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aed6f030000de03000005005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aedc1030000dc03000006005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aeda8030000dd03000007005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aed6f030000de0300000001005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aedab010000bf0100000001076163636f756e745fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aedc0010000c701000000000300005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aed0c0200001302000001005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aedf90100001402000002005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aeddc010000150200000002005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aed2c02000048020000000104616464725fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aed490200004d02000000000600005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aed830200008702000001005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aed6a0200008802000002005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aed62020000bf02000003005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aeda3020000bd02000004005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aed8a020000be02000005005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aed62020000bf0200000003005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aed310400003a0400000001076163636f756e745fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aed3b0400004204000000000800005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aed720400007904000001005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aed5f0400007a04000002005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aed7e0400008a04000003005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aed7b0400007d04000004005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aed57040000aa04000005005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aeda5040000a804000006005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aed8c040000a904000007005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aed57040000aa0400000004005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aedd6020000ee020000000104616464725fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aedef020000f302000000000400005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aed0e0300001203000001005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aed160300002503000002005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aed130300001503000003005fbabf55e0af9d47673eec7b61231c032fcdcd13249a9a7ef1e080aa0e459aed0e0300002503000000030345564d02001a454e4f545f434f52455f5245534f555243455f4144445245535301001b454e4f545f434f52455f4652414d45574f524b5f414444524553530000"
            },
            {
              "name": "coin",
              "source": "/// This module provides the foundation for typesafe Coins.\nmodule aptos_framework::coin {\n    use std::string;\n    use std::error;\n    use std::option::{Self, Option};\n    use std::signer;\n    use aptos_std::event::{Self, EventHandle};\n    use aptos_std::type_info;\n\n    friend aptos_framework::account;\n    friend aptos_framework::aptos_coin;\n    friend aptos_framework::coins;\n\n    //\n    // Errors.\n    //\n\n    /// When address of account which is used to initilize a coin `CoinType`\n    /// doesn't match the deployer of module containining `CoinType`.\n    const ECOIN_INFO_ADDRESS_MISMATCH: u64 = 0;\n\n    /// When `CoinType` is already initilized as a coin.\n    const ECOIN_INFO_ALREADY_PUBLISHED: u64 = 1;\n\n    /// When `CoinType` hasn't been initialized as a coin.\n    const ECOIN_INFO_NOT_PUBLISHED: u64 = 2;\n\n    /// When an account already has `CoinStore` registered for `CoinType`.\n    const ECOIN_STORE_ALREADY_PUBLISHED: u64 = 3;\n\n    /// When an account hasn't registered `CoinStore` for `CoinType`.\n    const ECOIN_STORE_NOT_PUBLISHED: u64 = 4;\n\n    /// When there's not enough funds to withdraw from an account or from `Coin` resource.\n    const EINSUFFICIENT_BALANCE: u64 = 5;\n\n    /// When destruction of `Coin` resource contains non-zero value attempted.\n    const EDESTRUCTION_OF_NONZERO_TOKEN: u64 = 6;\n\n    /// Total supply of the coin overflows. No additional coins can be minted.\n    const ETOTAL_SUPPLY_OVERFLOW: u64 = 7;\n\n    const EINVALID_COIN_AMOUNT: u64 = 8;\n\n    /// Coins cannot be deposited or withdrawn from this CoinStore.\n    const EFROZEN: u64 = 9;\n\n    const MAX_U128: u128 = 340282366920938463463374607431768211455;\n\n    /// Core data structures\n\n    /// Main structure representing a coin/token in an account's custody.\n    struct Coin<phantom CoinType> has store {\n        /// Amount of coin this address has.\n        value: u64,\n    }\n\n    /// A holder of a specific coin types and associated event handles.\n    /// These are kept in a single resource to ensure locality of data.\n    struct CoinStore<phantom CoinType> has key {\n        coin: Coin<CoinType>,\n        frozen: bool,\n        deposit_events: EventHandle<DepositEvent>,\n        withdraw_events: EventHandle<WithdrawEvent>,\n    }\n\n    /// Information about a specific coin type. Stored on the creator of the coin's account.\n    struct CoinInfo<phantom CoinType> has key {\n        name: string::String,\n        /// Symbol of the coin, usually a shorter version of the name.\n        /// For example, Singapore Dollar is SGD.\n        symbol: string::String,\n        /// Number of decimals used to get its user representation.\n        /// For example, if `decimals` equals `2`, a balance of `505` coins should\n        /// be displayed to a user as `5.05` (`505 / 10 ** 2`).\n        decimals: u64,\n        /// Amount of this coin type in existence.\n        supply: Option<u128>,\n    }\n\n    /// Event emitted when some amount of a coin is deposited into an account.\n    struct DepositEvent has drop, store {\n        amount: u64,\n    }\n\n    /// Event emitted when some amount of a coin is withdrawn from an account.\n    struct WithdrawEvent has drop, store {\n        amount: u64,\n    }\n\n    /// Capability required to mint coins.\n    struct MintCapability<phantom CoinType> has copy, key, store { }\n\n    /// Capability required to freeze a coin store.\n    struct FreezeCapability<phantom CoinType> has copy, key, store { }\n\n    /// Capability required to burn coins.\n    struct BurnCapability<phantom CoinType> has copy, key, store { }\n\n    //\n    // Getter functions\n    //\n\n    /// Returns the balance of `owner` for provided `CoinType`.\n    public fun balance<CoinType>(owner: address): u64 acquires CoinStore {\n        assert!(\n            is_account_registered<CoinType>(owner),\n            error::not_found(ECOIN_STORE_NOT_PUBLISHED),\n        );\n        borrow_global<CoinStore<CoinType>>(owner).coin.value\n    }\n\n    /// Returns `true` if the type `CoinType` is an initialized coin.\n    public fun is_coin_initialized<CoinType>(): bool {\n        let type_info = type_info::type_of<CoinType>();\n        let coin_address = type_info::account_address(&type_info);\n        exists<CoinInfo<CoinType>>(coin_address)\n    }\n\n    /// Returns `true` if `account_addr` is registered to receive `CoinType`.\n    public fun is_account_registered<CoinType>(account_addr: address): bool {\n        exists<CoinStore<CoinType>>(account_addr)\n    }\n\n    /// Returns the name of the coin.\n    public fun name<CoinType>(): string::String acquires CoinInfo {\n        let type_info = type_info::type_of<CoinType>();\n        let coin_address = type_info::account_address(&type_info);\n        borrow_global<CoinInfo<CoinType>>(coin_address).name\n    }\n\n    /// Returns the symbol of the coin, usually a shorter version of the name.\n    public fun symbol<CoinType>(): string::String acquires CoinInfo {\n        let type_info = type_info::type_of<CoinType>();\n        let coin_address = type_info::account_address(&type_info);\n        borrow_global<CoinInfo<CoinType>>(coin_address).symbol\n    }\n\n    /// Returns the number of decimals used to get its user representation.\n    /// For example, if `decimals` equals `2`, a balance of `505` coins should\n    /// be displayed to a user as `5.05` (`505 / 10 ** 2`).\n    public fun decimals<CoinType>(): u64 acquires CoinInfo {\n        let type_info = type_info::type_of<CoinType>();\n        let coin_address = type_info::account_address(&type_info);\n        borrow_global<CoinInfo<CoinType>>(coin_address).decimals\n    }\n\n    /// Returns the amount of coin in existence.\n    public fun supply<CoinType>(): Option<u128> acquires CoinInfo {\n        let type_info = type_info::type_of<CoinType>();\n        let coin_address = type_info::account_address(&type_info);\n        borrow_global<CoinInfo<CoinType>>(coin_address).supply\n    }\n\n    // Public functions\n    /// Burn `coin` with capability.\n    /// The capability `_cap` should be passed as a reference to `BurnCapability<CoinType>`.\n    public fun burn<CoinType>(\n        coin: Coin<CoinType>,\n        _cap: &BurnCapability<CoinType>,\n    ) acquires CoinInfo {\n        let Coin { value: amount } = coin;\n        assert!(amount > 0, error::invalid_argument(EINVALID_COIN_AMOUNT));\n\n        let coin_addr = type_info::account_address(&type_info::type_of<CoinType>());\n        let supply = &mut borrow_global_mut<CoinInfo<CoinType>>(coin_addr).supply;\n        if (option::is_some(supply)) {\n            let supply = option::borrow_mut(supply);\n            *supply = *supply - (amount as u128);\n        }\n    }\n\n    /// Burn `coin` from the specified `account` with capability.\n    /// The capability `burn_cap` should be passed as a reference to `BurnCapability<CoinType>`.\n    /// This function shouldn't fail as it's called as part of transaction fee burning.\n    ///\n    /// Note: This bypasses CoinStore::frozen -- coins within a frozen CoinStore can be burned.\n    public fun burn_from<CoinType>(\n        account_addr: address,\n        amount: u64,\n        burn_cap: &BurnCapability<CoinType>,\n    ) acquires CoinInfo, CoinStore {\n        // Skip burning if amount is zero. This shouldn't error out as it's called as part of transaction fee burning.\n        if (amount == 0) {\n            return\n        };\n\n        let coin_store = borrow_global_mut<CoinStore<CoinType>>(account_addr);\n        let coin_to_burn = extract(&mut coin_store.coin, amount);\n        burn(coin_to_burn, burn_cap);\n    }\n\n    /// Deposit the coin balance into the recipient's account and emit an event.\n    public fun deposit<CoinType>(account_addr: address, coin: Coin<CoinType>) acquires CoinStore {\n        assert!(\n            is_account_registered<CoinType>(account_addr),\n            error::not_found(ECOIN_STORE_NOT_PUBLISHED),\n        );\n\n        let coin_store = borrow_global_mut<CoinStore<CoinType>>(account_addr);\n        assert!(\n            !coin_store.frozen,\n            error::permission_denied(EFROZEN),\n        );\n\n        event::emit_event<DepositEvent>(\n            &mut coin_store.deposit_events,\n            DepositEvent { amount: coin.value },\n        );\n\n        merge(&mut coin_store.coin, coin);\n    }\n\n    /// Destroys a zero-value coin. Calls will fail if the `value` in the passed-in `token` is non-zero\n    /// so it is impossible to \"burn\" any non-zero amount of `Coin` without having\n    /// a `BurnCapability` for the specific `CoinType`.\n    public fun destroy_zero<CoinType>(zero_coin: Coin<CoinType>) {\n        let Coin { value } = zero_coin;\n        assert!(value == 0, error::invalid_argument(EDESTRUCTION_OF_NONZERO_TOKEN))\n    }\n\n    /// Extracts `amount` from the passed-in `coin`, where the original token is modified in place.\n    public fun extract<CoinType>(coin: &mut Coin<CoinType>, amount: u64): Coin<CoinType> {\n        assert!(coin.value >= amount, error::invalid_argument(EINSUFFICIENT_BALANCE));\n        coin.value = coin.value - amount;\n        Coin { value: amount }\n    }\n\n    /// Extracts the entire amount from the passed-in `coin`, where the original token is modified in place.\n    public fun extract_all<CoinType>(coin: &mut Coin<CoinType>): Coin<CoinType> {\n        let total_value = coin.value;\n        coin.value = 0;\n        Coin { value: total_value }\n    }\n\n    /// Freeze a CoinStore to prevent transfers\n    public entry fun freeze_coin_store<CoinType>(\n        account_addr: address,\n        _freeze_cap: &FreezeCapability<CoinType>,\n    ) acquires CoinStore {\n        let coin_store = borrow_global_mut<CoinStore<CoinType>>(account_addr);\n        coin_store.frozen = true\n    }\n\n    /// Creates a new Coin with given `CoinType` and returns minting/burning capabilities.\n    /// The given signer also becomes the account hosting the information\n    /// about the coin (name, supply, etc.).\n    public fun initialize<CoinType>(\n        account: &signer,\n        name: string::String,\n        symbol: string::String,\n        decimals: u64,\n        monitor_supply: bool,\n    ): (BurnCapability<CoinType>, FreezeCapability<CoinType>, MintCapability<CoinType>) {\n        let account_addr = signer::address_of(account);\n\n        let type_info = type_info::type_of<CoinType>();\n        assert!(\n            type_info::account_address(&type_info) == account_addr,\n            error::invalid_argument(ECOIN_INFO_ADDRESS_MISMATCH),\n        );\n\n        assert!(\n            !exists<CoinInfo<CoinType>>(account_addr),\n            error::already_exists(ECOIN_INFO_ALREADY_PUBLISHED),\n        );\n\n        let coin_info = CoinInfo<CoinType> {\n            name,\n            symbol,\n            decimals,\n            supply: if (monitor_supply) { option::some(0) } else { option::none() },\n        };\n        move_to(account, coin_info);\n\n        (BurnCapability<CoinType>{ }, FreezeCapability<CoinType>{ }, MintCapability<CoinType>{ })\n    }\n\n    /// \"Merges\" the two given coins.  The coin passed in as `dst_coin` will have a value equal\n    /// to the sum of the two tokens (`dst_coin` and `source_coin`).\n    public fun merge<CoinType>(dst_coin: &mut Coin<CoinType>, source_coin: Coin<CoinType>) {\n        dst_coin.value = dst_coin.value + source_coin.value;\n        let Coin { value: _ } = source_coin;\n    }\n\n    /// Mint new `Coin` with capability.\n    /// The capability `_cap` should be passed as reference to `MintCapability<CoinType>`.\n    /// Returns minted `Coin`.\n    public fun mint<CoinType>(\n        amount: u64,\n        _cap: &MintCapability<CoinType>,\n    ): Coin<CoinType> acquires CoinInfo {\n        if (amount == 0) {\n            return zero<CoinType>()\n        };\n\n        let coin_addr = type_info::account_address(&type_info::type_of<CoinType>());\n        let supply = &mut borrow_global_mut<CoinInfo<CoinType>>(coin_addr).supply;\n        if (option::is_some(supply)) {\n            let supply = option::borrow_mut(supply);\n            let amount_u128 = (amount as u128);\n            assert!(*supply <= MAX_U128 - amount_u128, error::invalid_argument(ETOTAL_SUPPLY_OVERFLOW));\n            *supply = *supply + amount_u128;\n        };\n\n        Coin<CoinType> { value: amount }\n    }\n\n    #[test_only]\n    public fun register_for_test<CoinType>(account: &signer) {\n        register<CoinType>(account)\n    }\n\n    public(friend) fun register<CoinType>(account: &signer) {\n        let account_addr = signer::address_of(account);\n        assert!(\n            !is_account_registered<CoinType>(account_addr),\n            error::already_exists(ECOIN_STORE_ALREADY_PUBLISHED),\n        );\n\n        let coin_store = CoinStore<CoinType> {\n            coin: Coin { value: 0 },\n            frozen: false,\n            deposit_events: event::new_event_handle<DepositEvent>(account),\n            withdraw_events: event::new_event_handle<WithdrawEvent>(account),\n        };\n        move_to(account, coin_store);\n    }\n\n    /// Transfers `amount` of coins `CoinType` from `from` to `to`.\n    public entry fun transfer<CoinType>(\n        from: &signer,\n        to: address,\n        amount: u64,\n    ) acquires CoinStore {\n        let coin = withdraw<CoinType>(from, amount);\n        deposit(to, coin);\n    }\n\n    /// Returns the `value` passed in `coin`.\n    public fun value<CoinType>(coin: &Coin<CoinType>): u64 {\n        coin.value\n    }\n\n    /// Withdraw specifed `amount` of coin `CoinType` from the signing account.\n    public fun withdraw<CoinType>(\n        account: &signer,\n        amount: u64,\n    ): Coin<CoinType> acquires CoinStore {\n        let account_addr = signer::address_of(account);\n        assert!(\n            is_account_registered<CoinType>(account_addr),\n            error::not_found(ECOIN_STORE_NOT_PUBLISHED),\n        );\n\n        let coin_store = borrow_global_mut<CoinStore<CoinType>>(account_addr);\n        assert!(\n            !coin_store.frozen,\n            error::permission_denied(EFROZEN),\n        );\n\n        event::emit_event<WithdrawEvent>(\n            &mut coin_store.withdraw_events,\n            WithdrawEvent { amount },\n        );\n\n        extract(&mut coin_store.coin, amount)\n    }\n\n    /// Create a new `Coin<CoinType>` with a value of `0`.\n    public fun zero<CoinType>(): Coin<CoinType> {\n        Coin<CoinType> {\n            value: 0\n        }\n    }\n\n    /// Freeze capability is dangerous and therefore should be destroyed if not used.\n    public fun destroy_freeze_cap<CoinType>(freeze_cap: FreezeCapability<CoinType>) {\n        let FreezeCapability<CoinType> { } = freeze_cap;\n    }\n\n    //\n    // Tests\n    //\n\n    #[test_only]\n    struct FakeMoney { }\n\n    #[test_only]\n    struct FakeMoneyCapabilities has key {\n        burn_cap: BurnCapability<FakeMoney>,\n        freeze_cap: FreezeCapability<FakeMoney>,\n        mint_cap: MintCapability<FakeMoney>,\n    }\n\n    #[test_only]\n    public entry fun create_fake_money(\n        source: &signer,\n        destination: &signer,\n        amount: u64\n    ) acquires CoinInfo, CoinStore {\n        let name = string::utf8(b\"Fake money\");\n        let symbol = string::utf8(b\"FMD\");\n\n        let (burn_cap, freeze_cap, mint_cap) = initialize<FakeMoney>(\n            source,\n            name,\n            symbol,\n            18,\n            true\n        );\n        register<FakeMoney>(source);\n        register<FakeMoney>(destination);\n        let coins_minted = mint<FakeMoney>(amount, &mint_cap);\n        deposit(signer::address_of(source), coins_minted);\n        move_to(source, FakeMoneyCapabilities {\n            burn_cap,\n            freeze_cap,\n            mint_cap,\n        });\n    }\n\n    #[test(source = @0x1, destination = @0x2)]\n    public entry fun end_to_end(\n        source: signer,\n        destination: signer,\n    ) acquires CoinInfo, CoinStore {\n        let source_addr = signer::address_of(&source);\n        let destination_addr = signer::address_of(&destination);\n\n        let name = string::utf8(b\"Fake money\");\n        let symbol = string::utf8(b\"FMD\");\n\n        let (burn_cap, freeze_cap, mint_cap) = initialize<FakeMoney>(\n            &source,\n            name,\n            symbol,\n            18,\n            true\n        );\n        register<FakeMoney>(&source);\n        register<FakeMoney>(&destination);\n        assert!(*option::borrow(&supply<FakeMoney>()) == 0, 0);\n\n        assert!(name<FakeMoney>() == name, 1);\n        assert!(symbol<FakeMoney>() == symbol, 2);\n        assert!(decimals<FakeMoney>() == 18, 3);\n\n        let coins_minted = mint<FakeMoney>(100, &mint_cap);\n        deposit(source_addr, coins_minted);\n        transfer<FakeMoney>(&source, destination_addr, 50);\n\n        assert!(balance<FakeMoney>(source_addr) == 50, 4);\n        assert!(balance<FakeMoney>(destination_addr) == 50, 5);\n        assert!(*option::borrow(&supply<FakeMoney>()) == 100, 6);\n\n        let coin = withdraw<FakeMoney>(&source, 10);\n        assert!(value(&coin) == 10, 7);\n        burn(coin, &burn_cap);\n        assert!(*option::borrow(&supply<FakeMoney>()) == 90, 8);\n\n        move_to(&source, FakeMoneyCapabilities {\n            burn_cap,\n            freeze_cap,\n            mint_cap,\n        });\n    }\n\n    #[test(source = @0x1, destination = @0x2)]\n    public entry fun end_to_end_no_supply(\n        source: signer,\n        destination: signer,\n    ) acquires CoinInfo, CoinStore {\n        let source_addr = signer::address_of(&source);\n        let destination_addr = signer::address_of(&destination);\n\n        let (burn_cap, freeze_cap, mint_cap) = initialize<FakeMoney>(\n            &source,\n            string::utf8(b\"Fake money\"),\n            string::utf8(b\"FMD\"),\n            1,\n            false,\n        );\n\n        register<FakeMoney>(&source);\n        register<FakeMoney>(&destination);\n        assert!(option::is_none(&supply<FakeMoney>()), 0);\n\n        let coins_minted = mint<FakeMoney>(100, &mint_cap);\n        deposit<FakeMoney>(source_addr, coins_minted);\n        transfer<FakeMoney>(&source, destination_addr, 50);\n\n        assert!(balance<FakeMoney>(source_addr) == 50, 1);\n        assert!(balance<FakeMoney>(destination_addr) == 50, 2);\n        assert!(option::is_none(&supply<FakeMoney>()), 3);\n\n        let coin = withdraw<FakeMoney>(&source, 10);\n        burn(coin, &burn_cap);\n        assert!(option::is_none(&supply<FakeMoney>()), 4);\n\n        move_to(&source, FakeMoneyCapabilities {\n            burn_cap,\n            freeze_cap,\n            mint_cap,\n        });\n    }\n\n    #[test(source = @0x2)]\n    #[expected_failure(abort_code = 0x10000)]\n    public fun fail_initialize(source: signer) {\n        let (burn_cap, freeze_cap, mint_cap) = initialize<FakeMoney>(\n            &source,\n            string::utf8(b\"Fake money\"),\n            string::utf8(b\"FMD\"),\n            1,\n            true,\n        );\n\n        move_to(&source, FakeMoneyCapabilities {\n            burn_cap,\n            freeze_cap,\n            mint_cap,\n        });\n    }\n\n    #[test(source = @0x1, destination = @0x2)]\n    #[expected_failure(abort_code = 0x60004)]\n    public entry fun fail_transfer(\n        source: signer,\n        destination: signer,\n    ) acquires CoinInfo, CoinStore {\n        let source_addr = signer::address_of(&source);\n        let destination_addr = signer::address_of(&destination);\n\n        let (burn_cap, freeze_cap, mint_cap) = initialize<FakeMoney>(\n            &source,\n            string::utf8(b\"Fake money\"),\n            string::utf8(b\"FMD\"),\n            1,\n            true,\n        );\n        register<FakeMoney>(&source);\n        assert!(*option::borrow(&supply<FakeMoney>()) == 0, 0);\n\n        let coins_minted = mint<FakeMoney>(100, &mint_cap);\n        deposit(source_addr, coins_minted);\n        transfer<FakeMoney>(&source, destination_addr, 50);\n\n        move_to(&source, FakeMoneyCapabilities {\n            burn_cap,\n            freeze_cap,\n            mint_cap,\n        });\n    }\n\n    #[test(source = @0x1, destination = @0x2)]\n    public entry fun test_burn_from_with_capability(\n        source: signer,\n    ) acquires CoinInfo, CoinStore {\n        let source_addr = signer::address_of(&source);\n\n        let (burn_cap, freeze_cap, mint_cap) = initialize<FakeMoney>(\n            &source,\n            string::utf8(b\"Fake money\"),\n            string::utf8(b\"FMD\"),\n            1,\n            true\n        );\n        register<FakeMoney>(&source);\n\n        let coins_minted = mint<FakeMoney>(100, &mint_cap);\n        deposit(source_addr, coins_minted);\n        assert!(balance<FakeMoney>(source_addr) == 100, 0);\n        assert!(*option::borrow(&supply<FakeMoney>()) == 100, 1);\n\n        burn_from<FakeMoney>(source_addr, 10, &burn_cap);\n        assert!(balance<FakeMoney>(source_addr) == 90, 2);\n        assert!(*option::borrow(&supply<FakeMoney>()) == 90, 3);\n\n        move_to(&source, FakeMoneyCapabilities{\n            burn_cap,\n            freeze_cap,\n            mint_cap,\n        });\n    }\n\n    #[test(source = @0x1)]\n    #[expected_failure(abort_code = 0x10006)]\n    public fun test_destroy_non_zero(\n        source: signer,\n    ) acquires CoinInfo {\n        let (burn_cap, freeze_cap, mint_cap) = initialize<FakeMoney>(\n            &source,\n            string::utf8(b\"Fake money\"),\n            string::utf8(b\"FMD\"),\n            1,\n            true,\n        );\n\n        let coins_minted = mint<FakeMoney>( 100, &mint_cap);\n        destroy_zero(coins_minted);\n\n        move_to(&source, FakeMoneyCapabilities {\n            burn_cap,\n            freeze_cap,\n            mint_cap,\n        });\n    }\n\n    #[test(source = @0x1)]\n    public entry fun test_extract(\n        source: signer,\n    ) acquires CoinInfo, CoinStore {\n        let source_addr = signer::address_of(&source);\n\n        let (burn_cap, freeze_cap, mint_cap) = initialize<FakeMoney>(\n            &source,\n            string::utf8(b\"Fake money\"),\n            string::utf8(b\"FMD\"),\n            1,\n            true\n        );\n\n        register<FakeMoney>(&source);\n\n        let coins_minted = mint<FakeMoney>(100, &mint_cap);\n\n        let extracted = extract(&mut coins_minted, 25);\n        assert!(value(&coins_minted) == 75, 0);\n        assert!(value(&extracted) == 25, 1);\n\n        deposit(source_addr, coins_minted);\n        deposit(source_addr, extracted);\n\n        assert!(balance<FakeMoney>(source_addr) == 100, 2);\n\n        move_to(&source, FakeMoneyCapabilities {\n            burn_cap,\n            freeze_cap,\n            mint_cap,\n        });\n    }\n\n    #[test(source = @0x1)]\n    public fun test_is_coin_initialized(source: signer) {\n        assert!(!is_coin_initialized<FakeMoney>(), 0);\n        let (burn_cap, freeze_cap, mint_cap) = initialize<FakeMoney>(\n            &source,\n            string::utf8(b\"Fake money\"),\n            string::utf8(b\"FMD\"),\n            1,\n            true\n        );\n        assert!(is_coin_initialized<FakeMoney>(), 1);\n\n        move_to(&source, FakeMoneyCapabilities {\n            burn_cap,\n            freeze_cap,\n            mint_cap,\n        });\n    }\n\n    #[test]\n    fun test_zero() {\n        let zero = zero<FakeMoney>();\n        assert!(value(&zero) == 0, 1);\n        destroy_zero(zero);\n    }\n\n    #[test(account = @0x1)]\n    public entry fun burn_frozen(account: signer) acquires CoinInfo, CoinStore {\n        let account_addr = signer::address_of(&account);\n\n        let (burn_cap, freeze_cap, mint_cap) = initialize<FakeMoney>(\n            &account,\n            string::utf8(b\"Fake money\"),\n            string::utf8(b\"FMD\"),\n            18,\n            true\n        );\n        register<FakeMoney>(&account);\n\n        let coins_minted = mint<FakeMoney>(100, &mint_cap);\n        deposit(account_addr, coins_minted);\n\n        freeze_coin_store(account_addr, &freeze_cap);\n        burn_from(account_addr, 100, &burn_cap);\n\n        move_to(&account, FakeMoneyCapabilities {\n            burn_cap,\n            freeze_cap,\n            mint_cap,\n        });\n    }\n\n    #[test(account = @0x1)]\n    #[expected_failure(abort_code = 0x50009)]\n    public entry fun withdraw_frozen(account: signer) acquires CoinStore {\n        let account_addr = signer::address_of(&account);\n\n        let (burn_cap, freeze_cap, mint_cap) = initialize<FakeMoney>(\n            &account,\n            string::utf8(b\"Fake money\"),\n            string::utf8(b\"FMD\"),\n            18,\n            true\n        );\n        register<FakeMoney>(&account);\n\n        freeze_coin_store(account_addr, &freeze_cap);\n        let coin = withdraw<FakeMoney>(&account, 10);\n        deposit(account_addr, coin);\n\n        move_to(&account, FakeMoneyCapabilities {\n            burn_cap,\n            freeze_cap,\n            mint_cap,\n        });\n    }\n\n    #[test(account = @0x1)]\n    #[expected_failure(abort_code = 0x50009)]\n    public entry fun deposit_frozen(account: signer) acquires CoinInfo, CoinStore {\n        let account_addr = signer::address_of(&account);\n\n        let (burn_cap, freeze_cap, mint_cap) = initialize<FakeMoney>(\n            &account,\n            string::utf8(b\"Fake money\"),\n            string::utf8(b\"FMD\"),\n            18,\n            true\n        );\n        register<FakeMoney>(&account);\n\n        let coins_minted = mint<FakeMoney>(100, &mint_cap);\n        freeze_coin_store(account_addr, &freeze_cap);\n        deposit(account_addr, coins_minted);\n\n        move_to(&account, FakeMoneyCapabilities {\n            burn_cap,\n            freeze_cap,\n            mint_cap,\n        });\n    }\n\n    #[test_only]\n    public fun destroy_mint_cap<CoinType>(mint_cap: MintCapability<CoinType>) {\n        let MintCapability<CoinType> { } = mint_cap;\n    }\n\n    #[test_only]\n    public fun destroy_burn_cap<CoinType>(burn_cap: BurnCapability<CoinType>) {\n        let BurnCapability<CoinType> { } = burn_cap;\n    }\n}\n",
              "source_map": "0x8c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8540000005800000001000000000000000000000000000000000000000000000000000000000000000104636f696e0800008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8930d0000a10d00000108436f696e547970658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8aa0d0000b20d0000018c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8930d0000a10d000001008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8ec060000f00600000108436f696e547970658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8f906000001070000018c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8440700004907000002008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8230900002b0900000108436f696e547970658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8340900003c090000048c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f850090000540900008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8e7090000ed0900008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8de0a0000e60a00008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8280b00002e0b000003008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8f2070000fb0700000108436f696e547970658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8040800000c080000048c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f820080000240800008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f83e080000440800008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f854080000620800008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8870800009608000004008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f89f0b0000ab0b000000018c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8c60b0000cc0b000005008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8200d0000300d00000108436f696e547970658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8390d0000410d0000018c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8200d0000300d000006008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8a60c0000b40c00000108436f696e547970658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8bd0c0000c50c0000018c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8a60c0000b40c000007008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8340c0000410c000000018c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f85c0c0000620c00001700008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8440e00004b0e00000108436f696e547970658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f84c0e0000540e000001056f776e65728c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8560e00005b0e000000000a00008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8bd0e0000c20e000001008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f89d0e0000c30e000002008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8880e0000070f000003008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8e20e0000fb0e000004008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8d10e0000fc0e000005008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8880e0000070f000006008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8340f0000390f000007008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8110f00001e0f000008008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8110f00003f0f000009008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8110f0000450f00000001008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8871700008b1700000108436f696e547970658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f88c170000941700000204636f696e8c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f89f170000a3170000045f6361708c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8bd170000c117000005032523318c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8a4180000c218000006616d6f756e748c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8121800001818000009636f696e5f616464728c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f87c1800008518000006737570706c798c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8d1180000d718000008737570706c7923328c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f84f19000055190000002000008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f81d1800002118000001008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8041800001a18000002008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8121800001818000003008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8331800003918000004008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f83c1800003d18000005008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f83a1800003b18000006008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f82b1800006d18000007008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8571800006b18000008008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f83f1800006c18000009008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f82b1800006d1800000a008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8a4180000c21800000c008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8a3180000c21800000d008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f888180000c31800000e008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f87c180000851800000f008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8051900000e19000010008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8df180000f018000011008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8da1800001619000012008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8d1180000d718000013008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8341900003a19000015008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8241900003b19000016008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f820190000af19000018008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f86b1900007119000019008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f858190000721900001a008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f84f190000551900001b008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f88b190000911900001c008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f88a190000911900001d008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8951900009b1900001e008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f894190000a41900001f008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8921900009319000020008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8811900008719000021008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f880190000a419000022008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f820190000af1900000002008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8291b0000321b00000108436f696e547970658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8331b00003b1b0000030c6163636f756e745f616464728c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8461b0000521b000006616d6f756e748c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8651b00006b1b0000086275726e5f6361708c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f87a1b0000821b0000020a636f696e5f73746f72658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8811c00008b1c00000c636f696e5f746f5f6275726e8c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8d01c0000dc1c0000001100008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8471c00004d1c000001008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8511c0000521c000002008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f84e1c0000501c000003008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8431c0000721c000005008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8621c0000681c000008008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8b51c0000c11c000009008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f88e1c00009f1c00000a008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8811c00008b1c00000b008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8ec1c0000f61c00000c008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8e71c0000fb1c00000d008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8fd1c0000031d00000e008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8df1c0000041d00000f008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8d01c0000dc1c000010008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8131d00001f1d000011008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8211d0000291d000012008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f80e1d00002a1d000013008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f82a1d00002b1d00000003008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8b7140000bf1400000108436f696e547970658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8c0140000c814000000020c636f696e5f616464726573738c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8291500003515000009747970655f696e666f8c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8f1140000fa140000000800008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8fd1400001b15000001008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8f1140000fa14000002008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8531500005d15000003008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8381500005e15000004008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8291500003515000005008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f88a1500009615000006008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8681500007515000007008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f868150000a01500000004008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8931d00009a1d00000108436f696e547970658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f89b1d0000a31d0000020c6163636f756e745f616464728c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8a51d0000b11d000004636f696e8c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8bc1d0000c01d0000010a636f696e5f73746f72658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8841e00008e1e0000001b00008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8241e0000301e000001008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8041e0000311e000002008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8ef1d0000751e000003008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8501e0000691e000004008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f83f1e00006a1e000005008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8ef1d0000751e000006008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8b81e0000c41e000007008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8911e0000a21e000008008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8841e00008e1e000009008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8e51e0000ef1e00000a008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8e51e0000f61e00000c008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8e41e0000e51e00000d008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8cf1e0000301f000010008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f81d1f0000241f000011008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8041f0000251f000012008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8cf1e0000301f000013008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f86d1f0000771f000014008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8681f0000861f000015008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8ab1f0000af1f000016008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8ab1f0000b51f000018008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8941f0000b71f000019008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f83b1f0000c21f00001a008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8d81f0000e21f00001b008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8d31f0000e71f00001c008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8e91f0000ed1f00001d008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8cd1f0000ee1f00001e008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8ee1f0000ef1f00000005008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8e2370000f43700000108436f696e547970658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8f5370000fd370000010a667265657a655f6361708c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8ff3700000938000000000300008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8563800006038000001008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8353800005338000003008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f860380000613800000006008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8f9200000052100000108436f696e547970658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8062100000e21000001097a65726f5f636f696e8c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f81021000019210000010576616c75658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f84021000045210000000a00008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f84a2100005321000001008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8392100004721000002008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8402100004521000003008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8652100006a21000004008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f86e2100006f21000005008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f86b2100006d21000006008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f85d210000a821000007008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f889210000a621000008008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f871210000a721000009008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f85d210000a82100000007008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8232200002a2200000108436f696e547970658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f82b220000332200000204636f696e8c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8352200003922000006616d6f756e748c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8502200005622000000001100008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f87f2200008322000001008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f87f2200008922000003008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f88d2200009322000004008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f88a2200008c22000005008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f877220000c422000008008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8ad220000c222000009008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f895220000c32200000a008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f877220000c42200000b008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8db220000df2200000c008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8db220000e52200000e008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8e8220000ee2200000f008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8e6220000e722000010008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8ce220000d222000011008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8ce220000d822000012008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8ce220000ee22000013008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8062300000c23000014008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8f82200000e2300000008008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8922300009d2300000108436f696e547970658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f89e230000a62300000104636f696e8c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8a8230000ac230000010b746f74616c5f76616c75658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8e1230000ec230000000900008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8ef230000f323000001008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8ef230000f923000003008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8e1230000ec23000004008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8102400001124000005008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8032400000724000006008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8032400000d24000007008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8032400001124000008008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8292400003424000009008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f81b240000362400000009008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f883240000942400000108436f696e547970658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8952400009d240000020c6163636f756e745f616464728c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8a8240000b42400000b5f667265657a655f6361708c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8c7240000d2240000010a636f696e5f73746f72658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f81825000022250000000700008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f84c2500005825000001008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8252500003625000002008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8182500002225000003008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8772500007b25000004008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8632500006d25000005008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8632500007425000006008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8632500007b250000000a008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8642600006e2600000108436f696e547970658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f86f2600007726000005076163636f756e748c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f88226000089260000046e616d658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f89c260000a02600000673796d626f6c8c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8ba260000c026000008646563696d616c738c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8da260000e22600000e6d6f6e69746f725f737570706c798c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8f1260000ff26000007032523318c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f887290000c6290000032523328c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f86929000071290000032523338c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8552900005b290000032523348c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f843290000472900000c6163636f756e745f616464728c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f86d2700007927000009636f696e5f696e666f8c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8162900001f29000009747970655f696e666f8c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8a6270000af270000002b00008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f88f2700009627000001008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f87c2700009727000002008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f86d2700007927000003008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8b2270000d027000004008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8a6270000af27000005008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f80a2800001428000006008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8ef2700001528000007008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8192800002528000008008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8162800001828000009008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8da270000722800000c008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f84b280000662800000d008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f833280000672800000e008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8da270000722800000f008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8ae280000ba28000010008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8932800009928000011008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8922800009328000012008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f87d2800000729000015008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8df280000fb28000016008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8c9280000fc28000017008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f87d2800000729000018008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f843290000472900001a008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8552900005b2900001c008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f869290000712900001e008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f88b290000992900001f008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f887290000c629000021008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8aa290000ab29000022008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f89d290000ac29000023008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f887290000c629000025008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8b6290000c429000026008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f887290000c629000027008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8432900004729000028008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8552900005b29000029008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f869290000712900002a008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f887290000c62900002b008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f822290000d12900002c008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8162900001f2900002d008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8e3290000ea2900002e008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8ec290000f52900002f008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8db290000e229000030008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8022a00001d2a000032008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f81f2a00003c2a000034008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f83e2a0000592a000036008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8012a00005a2a0000000b008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8da100000ef1000000108436f696e547970658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8f0100000f8100000010c6163636f756e745f616464728c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8fa1000000611000000000300008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f83d1100004911000001008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8211100002711000002008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8211100004a110000000c008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8a20f0000b50f00000108436f696e547970658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8b60f0000be0f000000020c636f696e5f616464726573738c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f80e1000001a10000009747970655f696e666f8c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8d60f0000df0f0000000800008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8e20f00000010000001008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8d60f0000df0f000002008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8381000004210000003008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f81d1000004310000004008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f80e1000001a10000005008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8681000007410000006008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f84d1000005310000007008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f84d10000075100000000d008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8162b00001b2b00000108436f696e547970658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f81c2b0000242b000002086473745f636f696e8c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8262b00002e2b00000b736f757263655f636f696e8c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8452b0000502b000000000c00008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f87d2b0000852b000001008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f87d2b00008b2b000003008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f88e2b0000992b000004008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f88e2b00009f2b000006008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f88c2b00008d2b000007008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f86c2b0000742b000008008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f86c2b00007a2b000009008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f86c2b00009f2b00000a008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8c12b0000cc2b00000b008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8ad2b0000be2b00000c008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8bb2b0000bc2b00000d008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8cc2b0000cd2b0000000e008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8872c00008b2c00000108436f696e547970658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f88c2c0000942c00000206616d6f756e748c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f89f2c0000a52c0000045f6361708c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8b42c0000b82c000005032523318c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f87e2d00009c2d00000b616d6f756e745f753132388c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f85e2e0000692e000009636f696e5f616464728c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8562d00005f2d000006737570706c798c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8ab2d0000b12d000008737570706c7923328c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8292e00002f2e0000002b00008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f80b2d0000112d000001008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8152d0000162d000002008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8122d0000142d000003008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8072d0000472d000005008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f82d2d00003d2d000006008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8262d00003d2d000007008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f87e2d00009c2d000009008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f87d2d00009c2d00000a008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8622d00009d2d00000b008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8562d00005f2d00000c008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8df2d0000e82d00000d008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8b92d0000ca2d00000e008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8b42d0000f02d00000f008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8ab2d0000b12d000010008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f80e2e0000142e000012008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8fe2d0000152e000013008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8fa2d00001d2f000015008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8452e00004b2e000016008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8322e00004c2e000017008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8292e00002f2e000018008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f86d2e0000732e000019008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f86c2e00007c2e00001a008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f85e2e0000692e00001b008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8932e0000992e00001c008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8922e0000992e00001d008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f89d2e0000a52e00001e008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8a82e0000b32e00001f008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8a62e0000a72e000020008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f89a2e00009c2e000021008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f88a2e0000e52e000024008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8cd2e0000e32e000025008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8b52e0000e42e000026008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f88a2e0000e52e000027008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8fe2e0000042f000028008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8fd2e0000042f000029008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8072f0000122f00002a008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8052f0000062f00002b008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8f42e0000fa2e00002c008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8f32e0000122f00002d008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8122f0000132f00002e008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8fa2d00001d2f000030008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8402f0000462f000031008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8282f0000482f0000000f008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8871100008b1100000108436f696e547970658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f88c1100009411000000020c636f696e5f616464726573738c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8001200000c12000009747970655f696e666f8c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8c8110000d1110000000800008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8d4110000f211000001008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8c8110000d111000002008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f82a1200003412000003008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f80f1200003512000004008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8001200000c12000005008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8611200006d12000006008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f83f1200004c12000007008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f83f120000731200000010008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8e22f0000ea2f00000108436f696e547970658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8eb2f0000f32f000001076163636f756e748c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8f52f0000fc2f0000020c6163636f756e745f616464728c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f815300000213000000a636f696e5f73746f72658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8e8300000f2300000001700008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8373000003e30000001008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8243000003f30000002008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8153000002130000003008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f87f3000008b30000004008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f85f3000008c30000005008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f85e3000005f30000006008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f849300000d930000009008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8b0300000cd3000000a008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f89a300000ce3000000b008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f849300000d93000000c008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f82b3100002c3100000d008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f81d3100002e3100000e008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f844310000493100000f008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f88d3100009431000010008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8673100009531000011008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8db310000e231000012008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8b4310000e331000013008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8f5300000ee31000014008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8e8300000f230000015008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8003200000732000016008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8093200001332000017008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8f8310000ff31000018008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f814320000153200000011008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8e8150000ee1500000108436f696e547970658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8ef150000f715000000020c636f696e5f616464726573738c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8611600006d16000009747970655f696e666f8c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f82916000032160000000800008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8351600005316000001008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8291600003216000002008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f88b1600009516000003008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8701600009616000004008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8611600006d16000005008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8c2160000ce16000006008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8a0160000ad16000007008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8a0160000d61600000012008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8d9120000df1200000108436f696e547970658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8e0120000e812000000020c636f696e5f616464726573738c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8541300006013000009747970655f696e666f8c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f81c13000025130000000800008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8281300004613000001008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f81c1300002513000002008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f87e1300008813000003008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8631300008913000004008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8541300006013000005008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8b5130000c113000006008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f893130000a013000007008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f893130000c91300000013008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8763200007e3200000108436f696e547970658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f87f32000087320000030466726f6d8c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8923200009632000002746f8c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8a9320000ab32000006616d6f756e748c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8be320000c43200000104636f696e8c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8f2320000f6320000000800008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f80c3300001033000001008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8123300001833000002008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8f93200001933000003008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8f2320000f632000004008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f82b3300002d33000005008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f82f3300003333000006008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8233300003433000007008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f834330000353300000014008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f87a3300007f3300000108436f696e547970658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f880330000883300000104636f696e8c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f88a3300008e33000000000200008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8b0330000b433000001008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8b0330000ba3300000015008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f821340000293400000108436f696e547970658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f82a3400003234000002076163636f756e748c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f83d3400004434000006616d6f756e748c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8573400005d340000020c6163636f756e745f616464728c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f89b340000a73400000a636f696e5f73746f72658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8643500006e350000001c00008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8bd340000c434000001008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8aa340000c534000002008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f89b340000a734000003008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8043500001035000004008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8e43400001135000005008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8cf3400005535000006008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8303500004935000007008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f81f3500004a35000008008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8cf3400005535000009008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f898350000a43500000a008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f871350000823500000b008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8643500006e3500000c008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8c5350000cf3500000d008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8c5350000d63500000f008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8c4350000c535000010008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8af3500001036000013008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8fd3500000436000014008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8e43500000536000015008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8af3500001036000016008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f84e3600005836000017008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8493600006836000018008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8863600008c36000019008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8763600008e3600001a008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f81b360000993600001b008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8b1360000bb3600001c008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8ac360000c03600001d008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8c2360000c83600001e008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f8a4360000c93600000016008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f81b3700001f3700000108436f696e547970658c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f820370000283700000000000200008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f86a3700006b37000001008c2031e1895ccc6a1f3ac1588ffdd6a3473b699d8b401f625759d1b86ae579f84637000075370000000b074546524f5a454e0600084d41585f553132380a001445494e56414c49445f434f494e5f414d4f554e5408001545494e53554646494349454e545f42414c414e434507001645544f54414c5f535550504c595f4f564552464c4f5709001845434f494e5f494e464f5f4e4f545f5055424c495348454402001945434f494e5f53544f52455f4e4f545f5055424c495348454404001b45434f494e5f494e464f5f414444524553535f4d49534d4154434800001c45434f494e5f494e464f5f414c52454144595f5055424c495348454401001d45434f494e5f53544f52455f414c52454144595f5055424c495348454403001d454445535452554354494f4e5f4f465f4e4f4e5a45524f5f544f4b454e0500"
            },
            {
              "name": "aptos_coin",
              "source": "/// This module defines a minimal and generic Coin and Balance.\n/// modified from https://github.com/move-language/move/tree/main/language/documentation/tutorial\nmodule aptos_framework::aptos_coin {\n    use std::string;\n    use std::error;\n    use std::signer;\n    use std::vector;\n    use std::option::{Self, Option};\n\n    use aptos_framework::coin::{Self, BurnCapability, MintCapability};\n    use aptos_framework::system_addresses;\n\n    friend aptos_framework::genesis;\n\n    /// Error codes\n    const ENO_CAPABILITIES: u64 = 1;\n    const EALREADY_DELEGATED: u64 = 2;\n    const EDELEGATION_NOT_FOUND: u64 = 3;\n\n    struct AptosCoin has key { }\n\n    struct Capabilities has key {\n        mint_cap: MintCapability<AptosCoin>,\n    }\n\n    /// Delegation token created by delegator and can be claimed by the delegatee as MintCapability.\n    struct DelegatedMintCapability has store {\n        to: address\n    }\n\n    /// The container stores the current pending delegations.\n    struct Delegations has key {\n        inner: vector<DelegatedMintCapability>,\n    }\n\n    /// Can only called during genesis to initialize the Aptos coin.\n    public(friend) fun initialize(aptos_framework: &signer): (BurnCapability<AptosCoin>, MintCapability<AptosCoin>) {\n        system_addresses::assert_aptos_framework(aptos_framework);\n\n        let (burn_cap, freeze_cap, mint_cap) = coin::initialize<AptosCoin>(\n            aptos_framework,\n            string::utf8(b\"Aptos Coin\"),\n            string::utf8(b\"APT\"),\n            8, /* decimals */\n            false, /* monitor_supply */\n        );\n\n        coin::destroy_freeze_cap(freeze_cap);\n        (burn_cap, mint_cap)\n    }\n\n    /// Can only be called during genesis for tests to grant mint capability to aptos framework and core resources\n    /// accounts.\n    public(friend) fun configure_accounts_for_test(\n        aptos_framework: &signer,\n        core_resources: &signer,\n        mint_cap: MintCapability<AptosCoin>,\n    ) {\n        system_addresses::assert_aptos_framework(aptos_framework);\n\n        // Aptos framework needs mint cap to mint coins to initial validators.\n        move_to(aptos_framework, Capabilities { mint_cap });\n\n        // Mint the core resource account AptosCoin for gas so it can execute system transactions.\n        coin::register<AptosCoin>(core_resources);\n        let coins = coin::mint<AptosCoin>(\n            18446744073709551615,\n            &mint_cap,\n        );\n        coin::deposit<AptosCoin>(signer::address_of(core_resources), coins);\n\n        move_to(core_resources, Capabilities { mint_cap });\n        move_to(core_resources, Delegations { inner: vector::empty() });\n    }\n\n    /// Only callable in tests and testnets where the core resources account exists.\n    /// Create new coins and deposit them into dst_addr's account.\n    public entry fun mint(\n        account: &signer,\n        dst_addr: address,\n        amount: u64,\n    ) acquires Capabilities {\n        let account_addr = signer::address_of(account);\n\n        assert!(\n            exists<Capabilities>(account_addr),\n            error::not_found(ENO_CAPABILITIES),\n        );\n\n        let capabilities = borrow_global<Capabilities>(account_addr);\n        let coins_minted = coin::mint<AptosCoin>(amount, &capabilities.mint_cap);\n        coin::deposit<AptosCoin>(dst_addr, coins_minted);\n    }\n\n    /// Only callable in tests and testnets where the core resources account exists.\n    /// Create delegated token for the address so the account could claim MintCapability later.\n    public entry fun delegate_mint_capability(account: signer, to: address) acquires Delegations {\n        system_addresses::assert_core_resource(&account);\n        let delegations = &mut borrow_global_mut<Delegations>(@core_resources).inner;\n        let i = 0;\n        while (i < vector::length(delegations)) {\n            let element = vector::borrow(delegations, i);\n            assert!(element.to != to, error::invalid_argument(EALREADY_DELEGATED));\n            i = i + 1;\n        };\n        vector::push_back(delegations, DelegatedMintCapability { to });\n    }\n\n    /// Only callable in tests and testnets where the core resources account exists.\n    /// Claim the delegated mint capability and destroy the delegated token.\n    public entry fun claim_mint_capability(account: &signer) acquires Delegations, Capabilities {\n        let maybe_index = find_delegation(signer::address_of(account));\n        assert!(option::is_some(&maybe_index), EDELEGATION_NOT_FOUND);\n        let idx = *option::borrow(&maybe_index);\n        let delegations = &mut borrow_global_mut<Delegations>(@core_resources).inner;\n        let DelegatedMintCapability { to: _} = vector::swap_remove(delegations, idx);\n\n        // Make a copy of mint cap and give it to the specified account.\n        let mint_cap = borrow_global<Capabilities>(@core_resources).mint_cap;\n        move_to(account, Capabilities { mint_cap });\n    }\n\n    fun find_delegation(addr: address): Option<u64> acquires Delegations {\n        let delegations = &borrow_global<Delegations>(@core_resources).inner;\n        let i = 0;\n        let len = vector::length(delegations);\n        let index = option::none();\n        while (i < len) {\n            let element = vector::borrow(delegations, i);\n            if (element.to == addr) {\n                index = option::some(i);\n                break\n            };\n            i = i + 1;\n        };\n        index\n    }\n\n    #[test_only]\n    public fun initialize_for_test(aptos_framework: &signer): (BurnCapability<AptosCoin>, MintCapability<AptosCoin>) {\n        initialize(aptos_framework)\n    }\n}\n",
              "source_map": ""
            },
            {
              "name": "transaction_fee",
              "source": "module aptos_framework::transaction_fee {\n    use aptos_framework::coin::{Self, BurnCapability};\n    use aptos_framework::aptos_coin::AptosCoin;\n    use aptos_framework::system_addresses;\n\n    friend aptos_framework::account;\n    friend aptos_framework::genesis;\n\n    struct AptosCoinCapabilities has key {\n        burn_cap: BurnCapability<AptosCoin>,\n    }\n\n    /// Burn transaction fees in epilogue.\n    public(friend) fun burn_fee(account: address, fee: u64) acquires AptosCoinCapabilities {\n        coin::burn_from<AptosCoin>(\n            account,\n            fee,\n            &borrow_global<AptosCoinCapabilities>(@aptos_framework).burn_cap,\n        );\n    }\n\n    /// Only called during genesis.\n    public(friend) fun store_aptos_coin_burn_cap(account: &signer, burn_cap: BurnCapability<AptosCoin>) {\n        system_addresses::assert_aptos_framework(account);\n        move_to(account, AptosCoinCapabilities { burn_cap })\n    }\n}\n",
              "source_map": "0xcfdbe9128389e29665c42663eef7285acad7fc828e8950967b87af9f75cc207318000000270000000100000000000000000000000000000000000000000000000000000000000000010f7472616e73616374696f6e5f666565010000cfdbe9128389e29665c42663eef7285acad7fc828e8950967b87af9f75cc207313010000280100000001cfdbe9128389e29665c42663eef7285acad7fc828e8950967b87af9f75cc20733b01000043010000020000cfdbe9128389e29665c42663eef7285acad7fc828e8950967b87af9f75cc2073a9010000b10100000002076163636f756e74cfdbe9128389e29665c42663eef7285acad7fc828e8950967b87af9f75cc2073b2010000b901000003666565cfdbe9128389e29665c42663eef7285acad7fc828e8950967b87af9f75cc2073c4010000c70100000000070000cfdbe9128389e29665c42663eef7285acad7fc828e8950967b87af9f75cc20731f020000260200000100cfdbe9128389e29665c42663eef7285acad7fc828e8950967b87af9f75cc207334020000370200000200cfdbe9128389e29665c42663eef7285acad7fc828e8950967b87af9f75cc20736b0200007b0200000300cfdbe9128389e29665c42663eef7285acad7fc828e8950967b87af9f75cc207346020000530200000400cfdbe9128389e29665c42663eef7285acad7fc828e8950967b87af9f75cc207345020000850200000500cfdbe9128389e29665c42663eef7285acad7fc828e8950967b87af9f75cc2073f7010000900200000600cfdbe9128389e29665c42663eef7285acad7fc828e8950967b87af9f75cc20739002000091020000000100cfdbe9128389e29665c42663eef7285acad7fc828e8950967b87af9f75cc2073d4020000ed0200000002076163636f756e74cfdbe9128389e29665c42663eef7285acad7fc828e8950967b87af9f75cc2073ee020000f5020000086275726e5f636170cfdbe9128389e29665c42663eef7285acad7fc828e8950967b87af9f75cc207300030000080300000000070000cfdbe9128389e29665c42663eef7285acad7fc828e8950967b87af9f75cc2073580300005f0300000100cfdbe9128389e29665c42663eef7285acad7fc828e8950967b87af9f75cc20732f030000600300000200cfdbe9128389e29665c42663eef7285acad7fc828e8950967b87af9f75cc207372030000790300000300cfdbe9128389e29665c42663eef7285acad7fc828e8950967b87af9f75cc2073930300009b0300000400cfdbe9128389e29665c42663eef7285acad7fc828e8950967b87af9f75cc20737b0300009d0300000500cfdbe9128389e29665c42663eef7285acad7fc828e8950967b87af9f75cc20736a030000710300000600cfdbe9128389e29665c42663eef7285acad7fc828e8950967b87af9f75cc20736a0300009e0300000000"
            },
            {
              "name": "timestamp",
              "source": "/// This module keeps a global wall clock that stores the current Unix time in microseconds.\n/// It interacts with the other modules in the following ways:\n///\n/// * Genesis: to initialize the timestamp\n/// * ValidatorSystem, AptosAccount, Reconfiguration: to check if the current state is in the genesis state\n/// * Block: to reach consensus on the global wall clock time\n///\n/// This module moreover enables code to assert that it is running in genesis (`Self::assert_genesis`) or after\n/// genesis (`Self::assert_operating`). These are essentially distinct states of the system. Specifically,\n/// if `Self::assert_operating` succeeds, assumptions about invariants over the global state can be made\n/// which reflect that the system has been successfully initialized.\nmodule aptos_framework::timestamp {\n    use aptos_framework::system_addresses;\n    use std::error;\n\n    friend aptos_framework::genesis;\n\n    /// A singleton resource holding the current Unix time in microseconds\n    struct CurrentTimeMicroseconds has key {\n        microseconds: u64,\n    }\n\n    /// Conversion factor between seconds and microseconds\n    const MICRO_CONVERSION_FACTOR: u64 = 1000000;\n\n    /// The blockchain is not in the genesis state anymore\n    const ENOT_GENESIS: u64 = 1;\n    /// The blockchain is not in an operating state yet\n    const ENOT_OPERATING: u64 = 2;\n    /// An invalid timestamp was provided\n    const ETIMESTAMP: u64 = 3;\n\n    /// Marks that time has started and genesis has finished. This can only be called from genesis and with the root\n    /// account.\n    public(friend) fun set_time_has_started(account: &signer) {\n        assert_genesis();\n        system_addresses::assert_aptos_framework(account);\n        let timer = CurrentTimeMicroseconds { microseconds: 0 };\n        move_to(account, timer);\n    }\n\n    #[test_only]\n    public fun set_time_has_started_for_testing(account: &signer) {\n        set_time_has_started(account);\n    }\n\n    /// Updates the wall clock time by consensus. Requires VM privilege and will be invoked during block prologue.\n    public fun update_global_time(\n        account: &signer,\n        proposer: address,\n        timestamp: u64\n    ) acquires CurrentTimeMicroseconds {\n        assert_operating();\n        // Can only be invoked by AptosVM signer.\n        system_addresses::assert_vm(account);\n\n        let global_timer = borrow_global_mut<CurrentTimeMicroseconds>(@aptos_framework);\n        let now = global_timer.microseconds;\n        if (proposer == @vm_reserved) {\n            // NIL block with null address as proposer. Timestamp must be equal.\n            assert!(now == timestamp, error::invalid_argument(ETIMESTAMP));\n        } else {\n            // Normal block. Time must advance\n            assert!(now < timestamp, error::invalid_argument(ETIMESTAMP));\n        };\n        global_timer.microseconds = timestamp;\n    }\n\n    /// Gets the current time in microseconds.\n    public fun now_microseconds(): u64 acquires CurrentTimeMicroseconds {\n        assert_operating();\n        borrow_global<CurrentTimeMicroseconds>(@aptos_framework).microseconds\n    }\n\n    /// Gets the current time in seconds.\n    public fun now_seconds(): u64 acquires CurrentTimeMicroseconds {\n        now_microseconds() / MICRO_CONVERSION_FACTOR\n    }\n\n    /// Helper function to determine if Aptos is in genesis state.\n    public fun is_genesis(): bool {\n        !exists<CurrentTimeMicroseconds>(@aptos_framework)\n    }\n\n    /// Helper function to assert genesis state.\n    public fun assert_genesis() {\n        assert!(is_genesis(), error::invalid_state(ENOT_GENESIS));\n    }\n\n    /// Helper function to determine if Aptos is operating. This is the same as `!is_genesis()` and is provided\n    /// for convenience. Testing `is_operating()` is more frequent than `is_genesis()`.\n    public fun is_operating(): bool {\n        exists<CurrentTimeMicroseconds>(@aptos_framework)\n    }\n\n    /// Helper function to assert operating (!genesis) state.\n    public fun assert_operating() {\n        assert!(is_operating(), error::invalid_state(ENOT_OPERATING));\n    }\n\n    #[test_only]\n    public fun update_global_time_for_test(timestamp_microsecs: u64) acquires CurrentTimeMicroseconds {\n        let global_timer = borrow_global_mut<CurrentTimeMicroseconds>(@aptos_framework);\n        let now = global_timer.microseconds;\n        assert!(now < timestamp_microsecs, error::invalid_argument(ETIMESTAMP));\n        global_timer.microseconds = timestamp_microsecs;\n    }\n\n    #[test_only]\n    public fun fast_forward_seconds(timestamp_seconds: u64) acquires CurrentTimeMicroseconds {\n        update_global_time_for_test(now_microseconds() + timestamp_seconds * 1000000);\n    }\n}\n",
              "source_map": "0x047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c371a030000230300000100000000000000000000000000000000000000000000000000000000000000010974696d657374616d70010000047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37e2030000f90300000001047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c370c04000018040000080000047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37b90d0000c70d000000000000060000047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37dc0d0000e80d00000100047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37d40d00000d0e00000200047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37ff0d00000b0e00000300047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37ea0d00000c0e00000400047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37d40d00000d0e00000500047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c370d0e00000e0e0000000100047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37920f0000a20f000000000000060000047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37b70f0000c50f00000100047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37af0f0000ec0f00000200047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37dc0f0000ea0f00000300047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37c70f0000eb0f00000400047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37af0f0000ec0f00000500047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37ec0f0000ed0f0000000200047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37220d00002c0d000000000000040000047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37600d0000700d00000100047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37400d0000460d00000200047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c373f0d0000400d00000300047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c373f0d0000710d0000000300047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37ed0e0000f90e000000000000030000047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c372c0f00003c0f00000100047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c370c0f0000120f00000200047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c370c0f00003d0f0000000400047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37790b0000890b000000000000040000047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37bc0b0000ce0b00000100047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37ff0b00000f0c00000200047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37d80b0000e50b00000300047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37d80b00001d0c0000000500047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c375e0c0000690c000000000000040000047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c379c0c0000ae0c00000100047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37b10c0000c80c00000200047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37af0c0000b00c00000300047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c379c0c0000c80c0000000600047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c3732060000460600000001076163636f756e74047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37470600004e060000010574696d6572047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37bc060000c106000000080000047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c3763060000730600000100047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37a6060000ad0600000200047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c377d060000ae0600000300047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c3701070000080700000400047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37ec060000ed0600000500047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37c4060000ef0600000600047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37f9060000000700000700047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c371007000011070000000700047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c371e080000300800000003076163636f756e74047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c373a080000410800000870726f706f736572047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37540800005c0800000974696d657374616d70047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c376f08000078080000020c676c6f62616c5f74696d6572047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37300900003c090000036e6f77047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37890900008c09000000210000047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37af080000c10800000100047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c3719090000200900000200047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37fd080000210900000300047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c376a0900007a0900000400047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c373f090000500900000500047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37300900003c0900000600047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c378f0900009b0900000700047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c378f090000a80900000900047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37890900008c0900000a00047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37b6090000be0900000b00047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37c2090000ce0900000c00047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37bf090000c10900000d00047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37b2090000030b00000f00047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37370a00003a0a00001000047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c373e0a0000470a00001100047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c373b0a00003d0a00001200047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c372f0a00006d0a00001500047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37610a00006b0a00001600047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37490a00006c0a00001700047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c372f0a00006d0a00001800047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c376d0a00006e0a00001900047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37c30a0000c60a00001a00047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37c90a0000d20a00001b00047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37c70a0000c80a00001c00047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37bb0a0000f80a00001f00047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37ec0a0000f60a00002000047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37d40a0000f70a00002100047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37bb0a0000f80a00002200047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37290b0000320b00002300047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c370d0b0000190b00002400047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c370d0b0000260b00002500047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c370d0b0000320b00002600047e81135441310e471a7a9151be6c75344b5d5414ca2300c1c3606176484c37320b0000330b000000040a4554494d455354414d5002000c454e4f545f47454e4553495300000e454e4f545f4f5045524154494e470100174d4943524f5f434f4e56455253494f4e5f464143544f520300"
            },
            {
              "name": "chain_id",
              "source": "/// The chain id distinguishes between different chains (e.g., testnet and the main network).\n/// One important role is to prevent transactions intended for one chain from being executed on another.\n/// This code provides a container for storing a chain id and functions to initialize and get it.\nmodule aptos_framework::chain_id {\n    use aptos_framework::system_addresses;\n    use aptos_framework::timestamp;\n\n    friend aptos_framework::genesis;\n\n    struct ChainId has key {\n        id: u8\n    }\n\n    /// Only called during genesis.\n    /// Publish the chain ID `id` of this instance under the SystemAddresses address\n    public(friend) fun initialize(account: &signer, id: u8) {\n        timestamp::assert_genesis();\n        system_addresses::assert_aptos_framework(account);\n        move_to(account, ChainId { id })\n    }\n\n    /// Return the chain ID of this instance\n    public fun get(): u8 acquires ChainId {\n        timestamp::assert_operating();\n        borrow_global<ChainId>(@aptos_framework).id\n    }\n}\n",
              "source_map": "0xeba37f1787ec9a468e70748358a72937a0ebec892870a5738104e299b46f5ae9410100004901000001000000000000000000000000000000000000000000000000000000000000000108636861696e5f6964010000eba37f1787ec9a468e70748358a72937a0ebec892870a5738104e299b46f5ae9cd010000d40100000001eba37f1787ec9a468e70748358a72937a0ebec892870a5738104e299b46f5ae9e7010000e9010000020000eba37f1787ec9a468e70748358a72937a0ebec892870a5738104e299b46f5ae9780300007b03000000000000040000eba37f1787ec9a468e70748358a72937a0ebec892870a5738104e299b46f5ae99d030000ba0300000100eba37f1787ec9a468e70748358a72937a0ebec892870a5738104e299b46f5ae9db030000eb0300000200eba37f1787ec9a468e70748358a72937a0ebec892870a5738104e299b46f5ae9c4030000d10300000300eba37f1787ec9a468e70748358a72937a0ebec892870a5738104e299b46f5ae9c4030000ef030000000100eba37f1787ec9a468e70748358a72937a0ebec892870a5738104e299b46f5ae9850200008f0200000002076163636f756e74eba37f1787ec9a468e70748358a72937a0ebec892870a5738104e299b46f5ae99002000097020000026964eba37f1787ec9a468e70748358a72937a0ebec892870a5738104e299b46f5ae9a2020000a40200000000080000eba37f1787ec9a468e70748358a72937a0ebec892870a5738104e299b46f5ae9b4020000cf0200000100eba37f1787ec9a468e70748358a72937a0ebec892870a5738104e299b46f5ae902030000090300000200eba37f1787ec9a468e70748358a72937a0ebec892870a5738104e299b46f5ae9d90200000a0300000300eba37f1787ec9a468e70748358a72937a0ebec892870a5738104e299b46f5ae91c030000230300000400eba37f1787ec9a468e70748358a72937a0ebec892870a5738104e299b46f5ae92f030000310300000500eba37f1787ec9a468e70748358a72937a0ebec892870a5738104e299b46f5ae925030000330300000600eba37f1787ec9a468e70748358a72937a0ebec892870a5738104e299b46f5ae9140300001b0300000700eba37f1787ec9a468e70748358a72937a0ebec892870a5738104e299b46f5ae914030000340300000000"
            },
            {
              "name": "account",
              "source": "module aptos_framework::account {\n    use std::bcs;\n    use std::error;\n    use std::hash;\n    use std::signer;\n    use std::vector;\n    use aptos_std::event::{Self, EventHandle};\n    use aptos_std::type_info::{Self, TypeInfo};\n    use aptos_framework::aptos_coin::AptosCoin;\n    use aptos_framework::chain_id;\n    use aptos_framework::coin;\n    use aptos_framework::system_addresses;\n    use aptos_framework::timestamp;\n    use aptos_framework::transaction_fee;\n\n    friend aptos_framework::coins;\n    friend aptos_framework::genesis;\n\n    /// Resource representing an account.\n    struct Account has key, store {\n        authentication_key: vector<u8>,\n        sequence_number: u64,\n        coin_register_events: EventHandle<CoinRegisterEvent>,\n    }\n\n    struct CoinRegisterEvent has drop, store {\n        type_info: TypeInfo,\n    }\n\n    /// This holds information that will be picked up by the VM to call the\n    /// correct chain-specific prologue and epilogue functions\n    struct ChainSpecificAccountInfo has key {\n        module_addr: address,\n        module_name: vector<u8>,\n        script_prologue_name: vector<u8>,\n        module_prologue_name: vector<u8>,\n        writeset_prologue_name: vector<u8>,\n        multi_agent_prologue_name: vector<u8>,\n        user_epilogue_name: vector<u8>,\n        writeset_epilogue_name: vector<u8>,\n    }\n\n    struct SignerCapability has drop, store { account: address }\n\n    const MAX_U64: u128 = 18446744073709551615;\n\n    /// Account already existed\n    const EACCOUNT: u64 = 0;\n    /// Sequence number exceeded the maximum value for a u64\n    const ESEQUENCE_NUMBER_TOO_BIG: u64 = 1;\n    /// The address provided didn't match the `aptos_framework` address.\n    const ENOT_APTOS_FRAMEWORK: u64 = 2;\n    /// The provided authentication had an invalid length\n    const EMALFORMED_AUTHENTICATION_KEY: u64 = 3;\n\n    const ECANNOT_CREATE_AT_VM_RESERVED: u64 = 4;\n    const EGAS: u64 = 5;\n    const ECANNOT_CREATE_AT_CORE_CODE: u64 = 6;\n    const EADDR_NOT_MATCH_PREIMAGE: u64 = 7;\n    const EWRITESET_NOT_ALLOWED: u64 = 8;\n    const EMULTI_AGENT_NOT_SUPPORTED: u64 = 9;\n    const EMODULE_NOT_ALLOWED: u64 = 10;\n    const ESCRIPT_NOT_ALLOWED: u64 = 11;\n\n    /// Prologue errors. These are separated out from the other errors in this\n    /// module since they are mapped separately to major VM statuses, and are\n    /// important to the semantics of the system.\n    const PROLOGUE_EINVALID_ACCOUNT_AUTH_KEY: u64 = 1001;\n    const PROLOGUE_ESEQUENCE_NUMBER_TOO_OLD: u64 = 1002;\n    const PROLOGUE_ESEQUENCE_NUMBER_TOO_NEW: u64 = 1003;\n    const PROLOGUE_EACCOUNT_DNE: u64 = 1004;\n    const PROLOGUE_ECANT_PAY_GAS_DEPOSIT: u64 = 1005;\n    const PROLOGUE_ETRANSACTION_EXPIRED: u64 = 1006;\n    const PROLOGUE_EBAD_CHAIN_ID: u64 = 1007;\n    const PROLOGUE_ESCRIPT_NOT_ALLOWED: u64 = 1008;\n    const PROLOGUE_EMODULE_NOT_ALLOWED: u64 = 1009;\n    const PROLOGUE_EINVALID_WRITESET_SENDER: u64 = 1010;\n    const PROLOGUE_ESEQUENCE_NUMBER_TOO_BIG: u64 = 1011;\n    const PROLOGUE_ESECONDARY_KEYS_ADDRESSES_COUNT_MISMATCH: u64 = 1012;\n\n    #[test_only]\n    public fun create_address_for_test(bytes: vector<u8>): address {\n        create_address(bytes)\n    }\n\n    native fun create_address(bytes: vector<u8>): address;\n    native fun create_signer(addr: address): signer;\n\n    public(friend) fun initialize(\n        account: &signer,\n        module_addr: address,\n        module_name: vector<u8>,\n        script_prologue_name: vector<u8>,\n        module_prologue_name: vector<u8>,\n        writeset_prologue_name: vector<u8>,\n        multi_agent_prologue_name: vector<u8>,\n        user_epilogue_name: vector<u8>,\n        writeset_epilogue_name: vector<u8>,\n    ) {\n        system_addresses::assert_aptos_framework(account);\n\n        move_to(account, ChainSpecificAccountInfo {\n            module_addr,\n            module_name,\n            script_prologue_name,\n            module_prologue_name,\n            writeset_prologue_name,\n            multi_agent_prologue_name,\n            user_epilogue_name,\n            writeset_epilogue_name,\n        });\n    }\n\n    /// Publishes a new `Account` resource under `new_address`. A signer representing `new_address`\n    /// is returned. This way, the caller of this function can publish additional resources under\n    /// `new_address`.\n    public(friend) fun create_account_internal(new_address: address): signer {\n        // there cannot be an Account resource under new_addr already.\n        assert!(!exists<Account>(new_address), error::already_exists(EACCOUNT));\n        assert!(\n            new_address != @vm_reserved,\n            error::invalid_argument(ECANNOT_CREATE_AT_VM_RESERVED)\n        );\n        assert!(\n            new_address != @aptos_framework,\n            error::invalid_argument(ECANNOT_CREATE_AT_CORE_CODE)\n        );\n\n        create_account_unchecked(new_address)\n    }\n\n    fun create_account_unchecked(new_address: address): signer {\n        let new_account = create_signer(new_address);\n        let authentication_key = bcs::to_bytes(&new_address);\n        assert!(\n            vector::length(&authentication_key) == 32,\n            error::invalid_argument(EMALFORMED_AUTHENTICATION_KEY)\n        );\n        move_to(\n            &new_account,\n            Account {\n                authentication_key,\n                sequence_number: 0,\n                coin_register_events: event::new_event_handle<CoinRegisterEvent>(&new_account),\n            }\n        );\n\n        new_account\n    }\n\n    public fun exists_at(addr: address): bool {\n        exists<Account>(addr)\n    }\n\n    public fun get_sequence_number(addr: address) : u64 acquires Account {\n        borrow_global<Account>(addr).sequence_number\n    }\n\n    public fun get_authentication_key(addr: address) : vector<u8> acquires Account {\n        *&borrow_global<Account>(addr).authentication_key\n    }\n\n    public entry fun rotate_authentication_key(account: &signer, new_auth_key: vector<u8>) acquires Account {\n        rotate_authentication_key_internal(account, new_auth_key);\n    }\n\n    public fun rotate_authentication_key_internal(\n        account: &signer,\n        new_auth_key: vector<u8>,\n    ) acquires Account {\n        let addr = signer::address_of(account);\n        assert!(exists_at(addr), error::not_found(EACCOUNT));\n        assert!(\n            vector::length(&new_auth_key) == 32,\n            error::invalid_argument(EMALFORMED_AUTHENTICATION_KEY)\n        );\n        let account_resource = borrow_global_mut<Account>(addr);\n        account_resource.authentication_key = new_auth_key;\n    }\n\n    fun prologue_common(\n        sender: signer,\n        txn_sequence_number: u64,\n        txn_public_key: vector<u8>,\n        txn_gas_price: u64,\n        txn_max_gas_units: u64,\n        txn_expiration_time: u64,\n        chain_id: u8,\n    ) acquires Account {\n        assert!(\n            timestamp::now_seconds() < txn_expiration_time,\n            error::invalid_argument(PROLOGUE_ETRANSACTION_EXPIRED),\n        );\n        let transaction_sender = signer::address_of(&sender);\n        assert!(chain_id::get() == chain_id, error::invalid_argument(PROLOGUE_EBAD_CHAIN_ID));\n        assert!(exists<Account>(transaction_sender), error::invalid_argument(PROLOGUE_EACCOUNT_DNE));\n        let sender_account = borrow_global<Account>(transaction_sender);\n        assert!(\n            hash::sha3_256(txn_public_key) == *&sender_account.authentication_key,\n            error::invalid_argument(PROLOGUE_EINVALID_ACCOUNT_AUTH_KEY),\n        );\n        assert!(\n            (txn_sequence_number as u128) < MAX_U64,\n            error::out_of_range(PROLOGUE_ESEQUENCE_NUMBER_TOO_BIG)\n        );\n\n        assert!(\n            txn_sequence_number >= sender_account.sequence_number,\n            error::invalid_argument(PROLOGUE_ESEQUENCE_NUMBER_TOO_OLD)\n        );\n\n        // [PCA12]: Check that the transaction's sequence number matches the\n        // current sequence number. Otherwise sequence number is too new by [PCA11].\n        assert!(\n            txn_sequence_number == sender_account.sequence_number,\n            error::invalid_argument(PROLOGUE_ESEQUENCE_NUMBER_TOO_NEW)\n        );\n        let max_transaction_fee = txn_gas_price * txn_max_gas_units;\n        assert!(\n            coin::is_account_registered<AptosCoin>(transaction_sender),\n            error::invalid_argument(PROLOGUE_ECANT_PAY_GAS_DEPOSIT),\n        );\n        let balance = coin::balance<AptosCoin>(transaction_sender);\n        assert!(balance >= max_transaction_fee, error::invalid_argument(PROLOGUE_ECANT_PAY_GAS_DEPOSIT));\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // Prologues and epilogues\n    ///////////////////////////////////////////////////////////////////////////\n    fun module_prologue(\n        sender: signer,\n        txn_sequence_number: u64,\n        txn_public_key: vector<u8>,\n        txn_gas_price: u64,\n        txn_max_gas_units: u64,\n        txn_expiration_time: u64,\n        chain_id: u8,\n    ) acquires Account {\n        prologue_common(sender, txn_sequence_number, txn_public_key, txn_gas_price, txn_max_gas_units, txn_expiration_time, chain_id)\n    }\n\n    fun script_prologue(\n        sender: signer,\n        txn_sequence_number: u64,\n        txn_public_key: vector<u8>,\n        txn_gas_price: u64,\n        txn_max_gas_units: u64,\n        txn_expiration_time: u64,\n        chain_id: u8,\n        _script_hash: vector<u8>,\n    ) acquires Account {\n        prologue_common(sender, txn_sequence_number, txn_public_key, txn_gas_price, txn_max_gas_units, txn_expiration_time, chain_id)\n    }\n\n    fun writeset_prologue(\n        _sender: signer,\n        _txn_sequence_number: u64,\n        _txn_public_key: vector<u8>,\n        _txn_expiration_time: u64,\n        _chain_id: u8,\n    ) {\n        assert!(false, error::invalid_argument(PROLOGUE_EINVALID_WRITESET_SENDER));\n    }\n\n    fun multi_agent_script_prologue(\n        sender: signer,\n        txn_sequence_number: u64,\n        txn_sender_public_key: vector<u8>,\n        secondary_signer_addresses: vector<address>,\n        secondary_signer_public_key_hashes: vector<vector<u8>>,\n        txn_gas_price: u64,\n        txn_max_gas_units: u64,\n        txn_expiration_time: u64,\n        chain_id: u8,\n    ) acquires Account {\n        prologue_common(sender, txn_sequence_number, txn_sender_public_key, txn_gas_price, txn_max_gas_units, txn_expiration_time, chain_id);\n\n        let num_secondary_signers = vector::length(&secondary_signer_addresses);\n\n        assert!(\n            vector::length(&secondary_signer_public_key_hashes) == num_secondary_signers,\n            error::invalid_argument(PROLOGUE_ESECONDARY_KEYS_ADDRESSES_COUNT_MISMATCH),\n        );\n\n        let i = 0;\n        while (i < num_secondary_signers) {\n            let secondary_address = *vector::borrow(&secondary_signer_addresses, i);\n            assert!(exists_at(secondary_address), error::invalid_argument(PROLOGUE_EACCOUNT_DNE));\n\n            let signer_account = borrow_global<Account>(secondary_address);\n            let signer_public_key_hash = *vector::borrow(&secondary_signer_public_key_hashes, i);\n            assert!(\n                signer_public_key_hash == *&signer_account.authentication_key,\n                error::invalid_argument(PROLOGUE_EINVALID_ACCOUNT_AUTH_KEY),\n            );\n            i = i + 1;\n        }\n    }\n\n    fun writeset_epilogue(\n        _core_resource: signer,\n        _txn_sequence_number: u64,\n        _should_trigger_reconfiguration: bool,\n    ) {\n        assert!(false, error::invalid_argument(EWRITESET_NOT_ALLOWED));\n    }\n\n    /// Epilogue function is run after a transaction is successfully executed.\n    /// Called by the Adapter\n    fun epilogue(\n        account: signer,\n        _txn_sequence_number: u64,\n        txn_gas_price: u64,\n        txn_max_gas_units: u64,\n        gas_units_remaining: u64\n    ) acquires Account {\n        assert!(txn_max_gas_units >= gas_units_remaining, error::invalid_argument(EGAS));\n        let gas_used = txn_max_gas_units - gas_units_remaining;\n\n        assert!(\n            (txn_gas_price as u128) * (gas_used as u128) <= MAX_U64,\n            error::out_of_range(EGAS)\n        );\n        let transaction_fee_amount = txn_gas_price * gas_used;\n        let addr = signer::address_of(&account);\n        // it's important to maintain the error code consistent with vm\n        // to do failed transaction cleanup.\n        assert!(\n            coin::balance<AptosCoin>(addr) >= transaction_fee_amount,\n            error::out_of_range(PROLOGUE_ECANT_PAY_GAS_DEPOSIT),\n        );\n        transaction_fee::burn_fee(addr, transaction_fee_amount);\n\n        let old_sequence_number = get_sequence_number(addr);\n\n        assert!(\n            (old_sequence_number as u128) < MAX_U64,\n            error::out_of_range(ESEQUENCE_NUMBER_TOO_BIG)\n        );\n\n        // Increment sequence number\n        let account_resource = borrow_global_mut<Account>(addr);\n        account_resource.sequence_number = old_sequence_number + 1;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    /// Basic account creation methods.\n    ///////////////////////////////////////////////////////////////////////////\n\n    public entry fun create_account(auth_key: address) acquires Account {\n        let signer = create_account_internal(auth_key);\n        coin::register<AptosCoin>(&signer);\n        register_coin<AptosCoin>(auth_key);\n    }\n\n    /// A resource account is used to manage resources independent of an account managed by a user.\n    public fun create_resource_account(\n        source: &signer,\n        seed: vector<u8>,\n    ): (signer, SignerCapability) {\n        let bytes = bcs::to_bytes(&signer::address_of(source));\n        vector::append(&mut bytes, seed);\n        let addr = create_address(hash::sha3_256(bytes));\n\n        let signer = create_account_internal(copy addr);\n        let signer_cap = SignerCapability { account: addr };\n        (signer, signer_cap)\n    }\n\n    /// Create the account for @aptos_framework to help module upgrades on testnet.\n    public(friend) fun create_aptos_framework_account(): (signer, SignerCapability) {\n        timestamp::assert_genesis();\n        let signer = create_account_unchecked(@aptos_framework);\n        let signer_cap = SignerCapability { account: @aptos_framework };\n        (signer, signer_cap)\n    }\n\n    public entry fun transfer(source: &signer, to: address, amount: u64) acquires Account {\n        if(!exists<Account>(to)) {\n            create_account(to)\n        };\n        coin::transfer<AptosCoin>(source, to, amount)\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    /// Coin management methods.\n    ///////////////////////////////////////////////////////////////////////////\n\n    public(friend) fun register_coin<CoinType>(account_addr: address) acquires Account {\n        let account = borrow_global_mut<Account>(account_addr);\n        event::emit_event<CoinRegisterEvent>(\n            &mut account.coin_register_events,\n            CoinRegisterEvent {\n                type_info: type_info::type_of<CoinType>(),\n            },\n        );\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    /// Capability based functions for efficient use.\n    ///////////////////////////////////////////////////////////////////////////\n\n    public fun create_signer_with_capability(capability: &SignerCapability): signer {\n        let addr = &capability.account;\n        create_signer(*addr)\n    }\n\n    #[test(user = @0x1)]\n    public entry fun test_create_resource_account(user: signer) {\n        let (resource_account, _) = create_resource_account(&user, x\"01\");\n        assert!(signer::address_of(&resource_account) != signer::address_of(&user), 0);\n        coin::register<AptosCoin>(&resource_account);\n    }\n\n    #[test_only]\n    struct DummyResource has key { }\n\n    #[test(user = @0x1)]\n    public entry fun test_module_capability(user: signer) acquires DummyResource {\n        let (resource_account, signer_cap) = create_resource_account(&user, x\"01\");\n        assert!(signer::address_of(&resource_account) != signer::address_of(&user), 0);\n\n        let resource_account_from_cap = create_signer_with_capability(&signer_cap);\n        assert!(&resource_account == &resource_account_from_cap, 1);\n        coin::register<AptosCoin>(&resource_account_from_cap);\n\n        move_to(&resource_account_from_cap, DummyResource { });\n        borrow_global<DummyResource>(signer::address_of(&resource_account));\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // Test-only sequence number mocking for extant Account resource\n    ///////////////////////////////////////////////////////////////////////////\n\n    #[test_only]\n    /// Increment sequence number of account at address `addr`\n    public fun increment_sequence_number(\n        addr: address,\n    ) acquires Account {\n        let acct = borrow_global_mut<Account>(addr);\n        acct.sequence_number = acct.sequence_number + 1;\n    }\n\n    #[test_only]\n    /// Update address `addr` to have `s` as its sequence number\n    public fun set_sequence_number(\n        addr: address,\n        s: u64\n    ) acquires Account {\n        borrow_global_mut<Account>(addr).sequence_number = s;\n    }\n\n    #[test]\n    /// Verify test-only sequence number mocking\n    public entry fun mock_sequence_numbers()\n    acquires Account {\n        let addr: address = @0x1234; // Define test address\n        create_account(addr); // Initialize account resource\n        // Assert sequence number intializes to 0\n        assert!(borrow_global<Account>(addr).sequence_number == 0, 0);\n        increment_sequence_number(addr); // Increment sequence number\n        // Assert correct mock value post-increment\n        assert!(borrow_global<Account>(addr).sequence_number == 1, 1);\n        set_sequence_number(addr, 10); // Set mock sequence number\n        // Assert correct mock value post-modification\n        assert!(borrow_global<Account>(addr).sequence_number == 10, 2);\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // Test account helpers\n    ///////////////////////////////////////////////////////////////////////////\n\n    #[test(alice = @0xa11ce, core = @0x1)]\n    public fun test_transfer(alice: signer, core: signer) acquires Account {\n        let bob = create_address(x\"0000000000000000000000000000000000000000000000000000000000000b0b\");\n        let carol = create_address(x\"00000000000000000000000000000000000000000000000000000000000ca501\");\n\n        let (burn_cap, mint_cap) = aptos_framework::aptos_coin::initialize_for_test(&core);\n        create_account(signer::address_of(&alice));\n        coin::deposit(signer::address_of(&alice), coin::mint(10000, &mint_cap));\n        transfer(&alice, bob, 500);\n        assert!(coin::balance<AptosCoin>(bob) == 500, 0);\n        transfer(&alice, carol, 500);\n        assert!(coin::balance<AptosCoin>(carol) == 500, 1);\n        transfer(&alice, carol, 1500);\n        assert!(coin::balance<AptosCoin>(carol) == 2000, 2);\n\n        coin::destroy_burn_cap(burn_cap);\n        coin::destroy_mint_cap(mint_cap);\n        let _bob = bob;\n    }\n}\n",
              "source_map": ""
            },
            {
              "name": "transaction_context",
              "source": "module aptos_framework::transaction_context {\n    /// Return the script hash of the current script function.\n    public native fun get_script_hash(): vector<u8>;\n}\n",
              "source_map": "0x658711089ef8ec188690401b2f88d93f4aff3fe5025baf137cb13e71d16db7f8180000002b000000010000000000000000000000000000000000000000000000000000000000000001137472616e73616374696f6e5f636f6e7465787400010000658711089ef8ec188690401b2f88d93f4aff3fe5025baf137cb13e71d16db7f8830000009200000000000000000100"
            },
            {
              "name": "voting",
              "source": "/**\n * This is the general Voting module that can be used as part of a DAO Governance. Voting is designed to be used by\n * standalone governance modules, who has full control over the voting flow and is responsible for voting power\n * calculation and including proper capabilities when creating the proposal so resolution can go through.\n * On-chain governance of the Aptos network also uses Voting.\n *\n * The voting flow:\n * 1. The Voting module can be deployed at a known address (e.g. 0x1 for Aptos on-chain governance)\n * 2. The governance module, e.g. AptosGovernance, can be deployed later and define a GovernanceProposal resource type\n * that can also contain other information such as Capability resource for authorization.\n * 3. The governance module's owner can then register the ProposalType with Voting. This also hosts the proposal list\n * (forum) on the calling account.\n * 4. A proposer, through the governance module, can call Voting::create_proposal to create a proposal. create_proposal\n * cannot be called directly not through the governance module. A script hash of the resolution script that can later\n * be called to execute the proposal is required.\n * 5. A voter, through the governance module, can call Voting::vote on a proposal. vote requires passing a &ProposalType\n * and thus only the governance module that registers ProposalType can call vote.\n * 6. Once the proposal's expiration time has passed and more than the defined threshold has voted yes on the proposal,\n * anyone can call resolve which returns the content of the proposal (of type ProposalType) that can be used to execute.\n * 7. Only the resolution script with the same script hash specified in the proposal can call Voting::resolve as part of\n * the resolution process.\n */\nmodule aptos_framework::voting {\n    use std::error;\n    use std::option::{Self, Option};\n    use std::signer;\n    use std::vector;\n\n    use aptos_std::event::{Self, EventHandle};\n    use aptos_std::table::{Self, Table};\n    use aptos_std::type_info::{Self, TypeInfo};\n\n    use aptos_framework::timestamp;\n    use aptos_framework::transaction_context;\n\n    /// Error codes.\n    const EPROPOSAL_EXECUTION_HASH_NOT_MATCHING: u64 = 1;\n    const EPROPOSAL_CANNOT_BE_RESOLVED: u64 = 2;\n    const EPROPOSAL_ALREADY_RESOLVED: u64 = 3;\n    const EPROPOSAL_EMPTY_EXECUTION_HASH: u64 = 4;\n\n    /// ProposalStateEnum representing proposal state.\n    const PROPOSAL_STATE_PENDING: u64 = 0;\n    const PROPOSAL_STATE_SUCCEEDED: u64 = 1;\n    /// Proposal has failed because either the min vote threshold is not met or majority voted no.\n    const PROPOSAL_STATE_FAILED: u64 = 3;\n\n    /// Extra metadata (e.g. description, code url) can be part of the ProposalType struct.\n    struct Proposal<ProposalType: store> has store {\n        /// Required. The address of the proposer.\n        proposer: address,\n\n        /// Required. Should contain enough information to execute later, for example the required capability.\n        /// This is stored as an option so we can return it to governance when the proposal is resolved.\n        execution_content: Option<ProposalType>,\n\n        /// Timestamp when the proposal was created.\n        creation_time_secs: u64,\n\n        /// Required. The hash for the execution script module. Only the same exact script module can resolve this\n        /// proposal.\n        execution_hash: vector<u8>,\n\n        /// A proposal is only resolved if expiration has passed and the number of votes is above threshold.\n        min_vote_threshold: u128,\n        expiration_secs: u64,\n\n        /// Optional. Early resolution threshold. If specified, the proposal can be resolved early if the total\n        /// number of yes or no votes passes this threshold.\n        /// For example, this can be set to 50% of the total supply of the voting token, so if > 50% vote yes or no,\n        /// the proposal can be resolved before expiration.\n        early_resolution_vote_threshold: Option<u128>,\n\n        /// Number of votes for each outcome.\n        /// u128 since the voting power is already u64 and can add up to more than u64 can hold.\n        yes_votes: u128,\n        no_votes: u128,\n\n        /// Whether the proposal has been resolved.\n        is_resolved: bool,\n    }\n\n    struct VotingForum<ProposalType: store> has key {\n        /// Use Table for execution optimization instead of Vector for gas cost since Vector is read entirely into memory\n        /// during execution while only relevant Table entries are.\n        proposals: Table<u64, Proposal<ProposalType>>,\n        events: VotingEvents,\n        /// Unique identifier for a proposal. This allows for 2 * 10**19 proposals.\n        next_proposal_id: u64,\n    }\n\n    struct VotingEvents has store {\n        create_proposal_events: EventHandle<CreateProposalEvent>,\n        register_forum_events: EventHandle<RegisterForumEvent>,\n        resolve_proposal_events: EventHandle<ResolveProposal>,\n        vote_events: EventHandle<VoteEvent>,\n    }\n\n    struct CreateProposalEvent has drop, store {\n        proposal_id: u64,\n        early_resolution_vote_threshold: Option<u128>,\n        execution_hash: vector<u8>,\n        expiration_secs: u64,\n        min_vote_threshold: u128,\n    }\n\n    struct RegisterForumEvent has drop, store {\n        hosting_account: address,\n        proposal_type_info: TypeInfo,\n    }\n\n    struct VoteEvent has drop, store {\n        proposal_id: u64,\n        num_votes: u64,\n    }\n\n    struct ResolveProposal has drop, store {\n        proposal_id: u64,\n        yes_votes: u128,\n        no_votes: u128,\n        resolved_early: bool\n    }\n\n    public fun register<ProposalType: store>(account: &signer) {\n        let voting_forum = VotingForum<ProposalType> {\n            next_proposal_id: 0,\n            proposals: table::new<u64, Proposal<ProposalType>>(),\n            events: VotingEvents {\n                create_proposal_events: event::new_event_handle<CreateProposalEvent>(account),\n                register_forum_events: event::new_event_handle<RegisterForumEvent>(account),\n                resolve_proposal_events: event::new_event_handle<ResolveProposal>(account),\n                vote_events: event::new_event_handle<VoteEvent>(account),\n            }\n        };\n\n        event::emit_event<RegisterForumEvent>(\n            &mut voting_forum.events.register_forum_events,\n            RegisterForumEvent {\n                hosting_account: signer::address_of(account),\n                proposal_type_info: type_info::type_of<ProposalType>(),\n            },\n        );\n\n        move_to(account, voting_forum);\n    }\n\n    /// Create a proposal with the given parameters\n    ///\n    /// @param voting_forum_address The forum's address where the proposal will be stored.\n    /// @param execution_content The execution content that will be given back at resolution time. This can contain\n    /// data such as a capability resource used to scope the execution.\n    /// @param execution_hash The hash for the execution script module. Only the same exact script module can resolve\n    /// this proposal.\n    /// @param min_vote_threshold The minimum number of votes needed to consider this proposal successful.\n    /// @param expiration_secs The time in seconds at which the proposal expires and can potentially be resolved.\n    /// @return The proposal id.\n    public fun create_proposal<ProposalType: store>(\n        proposer: address,\n        voting_forum_address: address,\n        execution_content: ProposalType,\n        execution_hash: vector<u8>,\n        min_vote_threshold: u128,\n        expiration_secs: u64,\n        early_resolution_vote_threshold: Option<u128>,\n    ): u64 acquires VotingForum {\n        // Make sure the execution script's hash is not empty.\n        assert!(vector::length(&execution_hash) > 0, error::invalid_argument(EPROPOSAL_EMPTY_EXECUTION_HASH));\n\n        let voting_forum = borrow_global_mut<VotingForum<ProposalType>>(voting_forum_address);\n        let proposal_id = voting_forum.next_proposal_id;\n        voting_forum.next_proposal_id = voting_forum.next_proposal_id + 1;\n\n        table::add(&mut voting_forum.proposals, proposal_id, Proposal {\n            proposer,\n            creation_time_secs: timestamp::now_seconds(),\n            execution_content: option::some<ProposalType>(execution_content),\n            execution_hash,\n            min_vote_threshold,\n            expiration_secs,\n            early_resolution_vote_threshold,\n            yes_votes: 0,\n            no_votes: 0,\n            is_resolved: false,\n        });\n\n        event::emit_event<CreateProposalEvent>(\n            &mut voting_forum.events.create_proposal_events,\n            CreateProposalEvent {\n                proposal_id,\n                early_resolution_vote_threshold,\n                execution_hash,\n                expiration_secs,\n                min_vote_threshold,\n            },\n        );\n\n        proposal_id\n    }\n\n    /// Vote on the given proposal.\n    ///\n    /// @param _proof Required so only the governance module that defines ProposalType can initiate voting.\n    ///               This guarantees that voting eligibility and voting power are controlled by the right governance.\n    /// @param voting_forum_address The address of the forum where the proposals are stored.\n    /// @param proposal_id The proposal id.\n    /// @param num_votes Number of votes. Voting power should be calculated by governance.\n    /// @param should_pass Whether the votes are for yes or no.\n    public fun vote<ProposalType: store>(\n        _proof: &ProposalType,\n        voting_forum_address: address,\n        proposal_id: u64,\n        num_votes: u64,\n        should_pass: bool,\n    ) acquires VotingForum {\n        let voting_forum = borrow_global_mut<VotingForum<ProposalType>>(voting_forum_address);\n        let proposal = table::borrow_mut(&mut voting_forum.proposals, proposal_id);\n        if (should_pass) {\n            proposal.yes_votes = proposal.yes_votes + (num_votes as u128);\n        } else {\n            proposal.no_votes = proposal.no_votes + (num_votes as u128);\n        };\n\n        event::emit_event<VoteEvent>(\n            &mut voting_forum.events.vote_events,\n            VoteEvent { proposal_id, num_votes },\n        );\n    }\n\n    /// Resolve the proposal with given id. Can only be done if there are at least as many votes as min required and\n    /// there are more yes votes than no. If either of these conditions is not met, this will revert.\n    ///\n    /// @param voting_forum_address The address of the forum where the proposals are stored.\n    /// @param proposal_id The proposal id.\n    public fun resolve<ProposalType: store>(\n        voting_forum_address: address,\n        proposal_id: u64,\n    ): ProposalType acquires VotingForum {\n        let proposal_state = get_proposal_state<ProposalType>(voting_forum_address, proposal_id);\n        assert!(proposal_state == PROPOSAL_STATE_SUCCEEDED, error::invalid_argument(EPROPOSAL_CANNOT_BE_RESOLVED));\n\n        let voting_forum = borrow_global_mut<VotingForum<ProposalType>>(voting_forum_address);\n        let proposal = table::borrow_mut(&mut voting_forum.proposals, proposal_id);\n        assert!(!proposal.is_resolved, error::invalid_argument(EPROPOSAL_ALREADY_RESOLVED));\n\n        let resolved_early = can_be_resolved_early(proposal);\n        proposal.is_resolved = true;\n\n        assert!(\n            transaction_context::get_script_hash() == proposal.execution_hash,\n            error::invalid_argument(EPROPOSAL_EXECUTION_HASH_NOT_MATCHING),\n        );\n\n        event::emit_event<ResolveProposal>(\n            &mut voting_forum.events.resolve_proposal_events,\n            ResolveProposal {\n                proposal_id,\n                yes_votes: proposal.yes_votes,\n                no_votes: proposal.no_votes,\n                resolved_early,\n            },\n        );\n\n        option::extract(&mut proposal.execution_content)\n    }\n\n    /// Return true if the voting on the given proposal has already concluded.\n    /// This would be the case if the proposal's expiration time has passed or if the early resolution threshold\n    /// (if specified) has been reached.\n    ///\n    /// @param voting_forum_address The address of the forum where the proposals are stored.\n    /// @param proposal_id The proposal id.\n    public fun is_voting_closed<ProposalType: store>(voting_forum_address: address, proposal_id: u64): bool acquires VotingForum {\n        let voting_forum = borrow_global_mut<VotingForum<ProposalType>>(voting_forum_address);\n        let proposal = table::borrow_mut(&mut voting_forum.proposals, proposal_id);\n        can_be_resolved_early(proposal) || timestamp::now_seconds() >= proposal.expiration_secs\n    }\n\n    /// Return true if the proposal has reached early resolution threshold (if specified).\n    public fun can_be_resolved_early<ProposalType: store>(proposal: &Proposal<ProposalType>): bool {\n        if (option::is_some(&proposal.early_resolution_vote_threshold)) {\n            let early_resolution_threshold = *option::borrow(&proposal.early_resolution_vote_threshold);\n            if (proposal.yes_votes >= early_resolution_threshold || proposal.no_votes >= early_resolution_threshold) {\n                return true\n            };\n        };\n        false\n    }\n\n    /// Return the state of the proposal with given id.\n    ///\n    /// @param voting_forum_address The address of the forum where the proposals are stored.\n    /// @param proposal_id The proposal id.\n    /// @return Proposal state as an enum value.\n    public fun get_proposal_state<ProposalType: store>(\n        voting_forum_address: address,\n        proposal_id: u64,\n    ): u64 acquires VotingForum {\n        if (is_voting_closed<ProposalType>(voting_forum_address, proposal_id)) {\n            let voting_forum = borrow_global<VotingForum<ProposalType>>(voting_forum_address);\n            let proposal = table::borrow(&voting_forum.proposals, proposal_id);\n            let yes_votes = proposal.yes_votes;\n            let no_votes = proposal.no_votes;\n\n            if (yes_votes > no_votes && yes_votes + no_votes >= proposal.min_vote_threshold) {\n                PROPOSAL_STATE_SUCCEEDED\n            } else {\n                PROPOSAL_STATE_FAILED\n            }\n        } else {\n            PROPOSAL_STATE_PENDING\n        }\n    }\n\n    /// Return the proposal's expiration time.\n    public fun get_proposal_expiration_secs<ProposalType: store>(\n        voting_forum_address: address,\n        proposal_id: u64,\n    ): u64 acquires VotingForum {\n        let voting_forum = borrow_global_mut<VotingForum<ProposalType>>(voting_forum_address);\n        let proposal = table::borrow_mut(&mut voting_forum.proposals, proposal_id);\n        proposal.expiration_secs\n    }\n\n    #[test_only]\n    use std::string::{String, utf8};\n\n    #[test_only]\n    struct TestProposal has store {\n        code_url: String,\n    }\n\n    #[test_only]\n    public fun create_test_proposal(\n        governance: &signer,\n        early_resolution_threshold: Option<u128>,\n    ): u64 acquires VotingForum {\n        // Register voting forum and create a proposal.\n        register<TestProposal>(governance);\n        let governance_address = signer::address_of(governance);\n        let proposal = TestProposal {\n            code_url: utf8(b\"http://mycode.url\"),\n        };\n\n        // This works because our Move unit test extensions mock out the execution hash to be [1].\n        let execution_hash = vector::empty<u8>();\n        vector::push_back(&mut execution_hash, 1);\n        let proposal_id = create_proposal<TestProposal>(\n            governance_address,\n            governance_address,\n            proposal,\n            execution_hash,\n            10,\n            100000,\n            early_resolution_threshold,\n        );\n\n        proposal_id\n    }\n\n    #[test(governance = @0x123)]\n    #[expected_failure(abort_code = 0x10004)]\n    public fun create_proposal_with_empty_execution_hash_should_fail(governance: &signer) acquires VotingForum {\n        register<TestProposal>(governance);\n        let governance_address = signer::address_of(governance);\n        let proposal = TestProposal {\n            code_url: utf8(b\"\"),\n        };\n\n        // This should fail because execution hash is empty.\n        create_proposal<TestProposal>(\n            governance_address,\n            governance_address,\n            proposal,\n            b\"\",\n            10,\n            100000,\n            option::none<u128>(),\n        );\n    }\n\n    #[test(aptos_framework = @aptos_framework, governance = @0x123)]\n    public entry fun test_voting_passed(aptos_framework: signer, governance: signer) acquires VotingForum {\n        timestamp::set_time_has_started_for_testing(&aptos_framework);\n\n        // Register voting forum and create a proposal.\n        let governance_address = signer::address_of(&governance);\n        let proposal_id = create_test_proposal(&governance, option::none<u128>());\n        assert!(get_proposal_state<TestProposal>(governance_address, proposal_id) == PROPOSAL_STATE_PENDING, 0);\n\n        // Vote.\n        let proof = TestProposal { code_url: utf8(b\"\") };\n        vote<TestProposal>(&proof, governance_address, proposal_id, 10, true);\n        let TestProposal { code_url: _ } = proof;\n\n        // Resolve.\n        timestamp::update_global_time_for_test(100001000000);\n        assert!(get_proposal_state<TestProposal>(governance_address, proposal_id) == PROPOSAL_STATE_SUCCEEDED, 1);\n        let proposal = resolve<TestProposal>(governance_address, proposal_id);\n        let voting_forum = borrow_global<VotingForum<TestProposal>>(governance_address);\n        assert!(table::borrow(&voting_forum.proposals, proposal_id).is_resolved, 2);\n\n        let TestProposal { code_url } = proposal;\n        assert!(code_url == utf8(b\"http://mycode.url\"), 3);\n    }\n\n    #[test(aptos_framework = @aptos_framework, governance = @0x123)]\n    #[expected_failure(abort_code = 0x10003)]\n    public entry fun test_cannot_resolve_twice(aptos_framework: signer, governance: signer) acquires VotingForum {\n        timestamp::set_time_has_started_for_testing(&aptos_framework);\n\n        // Register voting forum and create a proposal.\n        let governance_address = signer::address_of(&governance);\n        let proposal_id = create_test_proposal(&governance, option::none<u128>());\n        assert!(get_proposal_state<TestProposal>(governance_address, proposal_id) == PROPOSAL_STATE_PENDING, 0);\n\n        // Vote.\n        let proof = TestProposal { code_url: utf8(b\"\") };\n        vote<TestProposal>(&proof, governance_address, proposal_id, 10, true);\n        let TestProposal { code_url: _ } = proof;\n\n        // Resolve.\n        timestamp::update_global_time_for_test(100001000000);\n        assert!(get_proposal_state<TestProposal>(governance_address, proposal_id) == PROPOSAL_STATE_SUCCEEDED, 1);\n        let TestProposal { code_url: _ } = resolve<TestProposal>(governance_address, proposal_id);\n\n        // Resolve a second time should fail.\n        let TestProposal { code_url: _ } = resolve<TestProposal>(governance_address, proposal_id);\n    }\n\n    #[test(aptos_framework = @aptos_framework, governance = @0x123)]\n    public entry fun test_voting_passed_early(aptos_framework: signer, governance: signer) acquires VotingForum {\n        timestamp::set_time_has_started_for_testing(&aptos_framework);\n\n        // Register voting forum and create a proposal.\n        let governance_address = signer::address_of(&governance);\n        let proposal_id = create_test_proposal(&governance, option::some(100));\n        assert!(get_proposal_state<TestProposal>(governance_address, proposal_id) == PROPOSAL_STATE_PENDING, 0);\n\n        // Vote.\n        let proof = TestProposal { code_url: utf8(b\"\") };\n        vote<TestProposal>(&proof, governance_address, proposal_id, 100, true);\n        vote<TestProposal>(&proof, governance_address, proposal_id, 10, false);\n        let TestProposal { code_url: _ } = proof;\n\n        // Resolve early.\n        assert!(get_proposal_state<TestProposal>(governance_address, proposal_id) == PROPOSAL_STATE_SUCCEEDED, 1);\n        let proposal = resolve<TestProposal>(governance_address, proposal_id);\n        let voting_forum = borrow_global<VotingForum<TestProposal>>(governance_address);\n        assert!(table::borrow(&voting_forum.proposals, proposal_id).is_resolved, 2);\n\n        let TestProposal { code_url: _ } = proposal;\n    }\n\n    #[test(aptos_framework = @aptos_framework, governance = @0x123)]\n    #[expected_failure(abort_code = 0x10002)]\n    public entry fun test_voting_failed(aptos_framework: signer, governance: signer) acquires VotingForum {\n        timestamp::set_time_has_started_for_testing(&aptos_framework);\n\n        // Register voting forum and create a proposal.\n        let governance_address = signer::address_of(&governance);\n        let proposal_id = create_test_proposal(&governance, option::none<u128>());\n\n        // Vote.\n        let proof = TestProposal { code_url: utf8(b\"\") };\n        vote<TestProposal>(&proof, governance_address, proposal_id, 10, true);\n        vote<TestProposal>(&proof, governance_address, proposal_id, 100, false);\n        let TestProposal { code_url: _ } = proof;\n\n        // Resolve.\n        timestamp::update_global_time_for_test(100001000000);\n        assert!(get_proposal_state<TestProposal>(governance_address, proposal_id) == PROPOSAL_STATE_FAILED, 1);\n        let proposal = resolve<TestProposal>(governance_address, proposal_id);\n        let TestProposal { code_url: _ } = proposal;\n    }\n\n    #[test(aptos_framework = @aptos_framework, governance = @0x123)]\n    #[expected_failure(abort_code = 0x10002)]\n    public entry fun test_voting_failed_early(aptos_framework: signer, governance: signer) acquires VotingForum {\n        timestamp::set_time_has_started_for_testing(&aptos_framework);\n\n        // Register voting forum and create a proposal.\n        let governance_address = signer::address_of(&governance);\n        let proposal_id = create_test_proposal(&governance, option::some(100));\n\n        // Vote.\n        let proof = TestProposal { code_url: utf8(b\"\") };\n        vote<TestProposal>(&proof, governance_address, proposal_id, 100, true);\n        vote<TestProposal>(&proof, governance_address, proposal_id, 100, false);\n        let TestProposal { code_url: _ } = proof;\n\n        // Resolve.\n        timestamp::update_global_time_for_test(100001000000);\n        assert!(get_proposal_state<TestProposal>(governance_address, proposal_id) == PROPOSAL_STATE_FAILED, 1);\n        let proposal = resolve<TestProposal>(governance_address, proposal_id);\n        let TestProposal { code_url: _ } = proposal;\n    }\n}\n",
              "source_map": ""
            },
            {
              "name": "staking_config",
              "source": "/// Provides the configuration for staking and rewards\nmodule aptos_framework::staking_config {\n    use std::error;\n\n    use aptos_framework::system_addresses;\n\n    friend aptos_framework::genesis;\n\n    /// Invalid required stake lockup value.\n    const EINVALID_LOCKUP_VALUE: u64 = 1;\n    /// Invalid rewards rate.\n    const EINVALID_REWARDS_RATE: u64 = 2;\n    /// Invalid required stake range, usually happens if min > max.\n    const EINVALID_STAKE_RANGE: u64 = 3;\n    const EINVALID_VOTING_POWER_INCREASE_LIMIT: u64 = 4;\n\n    /// Validator set configurations that will be stored with the @aptos_framework account.\n    struct StakingConfig has copy, drop, key {\n        // A validator needs to stake at least this amount to be able to join the validator set.\n        // If after joining the validator set and at the start of any epoch, a validator's stake drops below this amount\n        // they will be removed from the set.\n        minimum_stake: u64,\n        // A validator can only stake at most this amount. Any larger stake will be rejected.\n        // If after joining the validator set and at the start of any epoch, a validator's stake exceeds this amount,\n        // their voting power and rewards would only be issued for the max stake amount.\n        maximum_stake: u64,\n        recurring_lockup_duration_secs: u64,\n        // Whether validators are allow to join/leave post genesis.\n        allow_validator_set_change: bool,\n        // The maximum rewards given out every epoch. This will be divided by the rewards rate denominator.\n        // For example, 0.001% (0.00001) can be represented as 10 / 1000000.\n        rewards_rate: u64,\n        rewards_rate_denominator: u64,\n        // Only this % of current total voting power is allowed to join the validator set in each epoch.\n        // This is necessary to prevent a massive amount of new stake from joining that can potentially take down the\n        // network if corresponding validators are not ready to participate in consensus in time.\n        // This value is within (0, 100%), not inclusive.\n        voting_power_increase_limit: u64,\n    }\n\n    /// Only called during genesis.\n    public(friend) fun initialize(\n        aptos_framework: &signer,\n        minimum_stake: u64,\n        maximum_stake: u64,\n        recurring_lockup_duration_secs: u64,\n        allow_validator_set_change: bool,\n        rewards_rate: u64,\n        rewards_rate_denominator: u64,\n        voting_power_increase_limit: u64,\n    ) {\n        system_addresses::assert_aptos_framework(aptos_framework);\n\n        // This can fail genesis but is necessary so that any misconfigurations can be corrected before genesis succeeds\n        validate_required_stake(minimum_stake, maximum_stake);\n\n        assert!(\n            rewards_rate_denominator > 0,\n            error::invalid_argument(EINVALID_REWARDS_RATE),\n        );\n\n        assert!(\n            voting_power_increase_limit > 0 && voting_power_increase_limit <= 50,\n            error::invalid_argument(EINVALID_VOTING_POWER_INCREASE_LIMIT),\n        );\n\n        move_to(aptos_framework, StakingConfig {\n            minimum_stake,\n            maximum_stake,\n            recurring_lockup_duration_secs,\n            allow_validator_set_change,\n            rewards_rate,\n            rewards_rate_denominator,\n            voting_power_increase_limit,\n        });\n    }\n\n    public fun get(): StakingConfig acquires StakingConfig {\n        *borrow_global<StakingConfig>(@aptos_framework)\n    }\n\n    /// Return whether validator set changes are allowed\n    public fun get_allow_validator_set_change(config: &StakingConfig): bool {\n        config.allow_validator_set_change\n    }\n\n    /// Return the required min/max stake.\n    public fun get_required_stake(config: &StakingConfig): (u64, u64) {\n        (config.minimum_stake, config.maximum_stake)\n    }\n\n    /// Return the recurring lockup duration that every validator is automatically renewed for (unless they unlock and\n    /// withdraw all funds).\n    public fun get_recurring_lockup_duration(config: &StakingConfig): u64 {\n        config.recurring_lockup_duration_secs\n    }\n\n    /// Return the reward rate.\n    public fun get_reward_rate(config: &StakingConfig): (u64, u64) {\n        (config.rewards_rate, config.rewards_rate_denominator)\n    }\n\n    /// Return the joining limit %.\n    public fun get_voting_power_increase_limit(config: &StakingConfig): u64 {\n        config.voting_power_increase_limit\n    }\n\n    /// Update the min and max stake amounts.\n    /// Can only be called as part of the Aptos governance proposal process established by the AptosGovernance module.\n    public fun update_required_stake(\n        aptos_framework: &signer,\n        minimum_stake: u64,\n        maximum_stake: u64,\n    ) acquires StakingConfig {\n        system_addresses::assert_aptos_framework(aptos_framework);\n        validate_required_stake(minimum_stake, maximum_stake);\n\n        let staking_config = borrow_global_mut<StakingConfig>(@aptos_framework);\n        staking_config.minimum_stake = minimum_stake;\n        staking_config.maximum_stake = maximum_stake;\n    }\n\n    /// Update the recurring lockup duration.\n    /// Can only be called as part of the Aptos governance proposal process established by the AptosGovernance module.\n    public fun update_recurring_lockup_duration_secs(\n        aptos_framework: &signer,\n        new_recurring_lockup_duration_secs: u64,\n    ) acquires StakingConfig {\n        assert!(new_recurring_lockup_duration_secs > 0, error::invalid_argument(EINVALID_LOCKUP_VALUE));\n        system_addresses::assert_aptos_framework(aptos_framework);\n\n        let staking_config = borrow_global_mut<StakingConfig>(@aptos_framework);\n        staking_config.recurring_lockup_duration_secs = new_recurring_lockup_duration_secs;\n    }\n\n    /// Update the rewards rate.\n    /// Can only be called as part of the Aptos governance proposal process established by the AptosGovernance module.\n    public fun update_rewards_rate(\n        aptos_framework: &signer,\n        new_rewards_rate: u64,\n        new_rewards_rate_denominator: u64,\n    ) acquires StakingConfig {\n        system_addresses::assert_aptos_framework(aptos_framework);\n        assert!(\n            new_rewards_rate_denominator > 0,\n            error::invalid_argument(EINVALID_REWARDS_RATE),\n        );\n\n        let staking_config = borrow_global_mut<StakingConfig>(@aptos_framework);\n        staking_config.rewards_rate = new_rewards_rate;\n        staking_config.rewards_rate_denominator = new_rewards_rate_denominator;\n    }\n\n    /// Update the joining limit %.\n    /// Can only be called as part of the Aptos governance proposal process established by the AptosGovernance module.\n    public fun update_voting_power_increase_limit(\n        aptos_framework: &signer,\n        new_voting_power_increase_limit: u64,\n    ) acquires StakingConfig {\n        system_addresses::assert_aptos_framework(aptos_framework);\n        assert!(\n            new_voting_power_increase_limit > 0 && new_voting_power_increase_limit <= 50,\n            error::invalid_argument(EINVALID_VOTING_POWER_INCREASE_LIMIT),\n        );\n\n        let staking_config = borrow_global_mut<StakingConfig>(@aptos_framework);\n        staking_config.voting_power_increase_limit = new_voting_power_increase_limit;\n    }\n\n    fun validate_required_stake(minimum_stake: u64, maximum_stake: u64) {\n        assert!(minimum_stake <= maximum_stake && maximum_stake > 0, error::invalid_argument(EINVALID_STAKE_RANGE));\n    }\n\n    #[test(aptos_framework = @aptos_framework)]\n    public entry fun test_change_staking_configs(aptos_framework: signer) acquires StakingConfig {\n        initialize(&aptos_framework, 0, 1, 1, false, 1, 1, 1);\n\n        update_required_stake(&aptos_framework, 100, 1000);\n        update_recurring_lockup_duration_secs(&aptos_framework, 10000);\n        update_rewards_rate(&aptos_framework, 10, 100);\n        update_voting_power_increase_limit(&aptos_framework, 10);\n\n        let config = borrow_global<StakingConfig>(@aptos_framework);\n        assert!(config.minimum_stake == 100, 0);\n        assert!(config.maximum_stake == 1000, 1);\n        assert!(config.recurring_lockup_duration_secs == 10000, 3);\n        assert!(config.rewards_rate == 10, 4);\n        assert!(config.rewards_rate_denominator == 100, 4);\n        assert!(config.voting_power_increase_limit == 10, 5);\n    }\n\n    #[test(account = @0x123)]\n    #[expected_failure(abort_code = 0x50002)]\n    public entry fun test_update_required_stake_unauthorized_should_fail(account: signer) acquires StakingConfig {\n        update_required_stake(&account, 1, 2);\n    }\n\n    #[test(account = @0x123)]\n    #[expected_failure(abort_code = 0x50002)]\n    public entry fun test_update_required_lockup_unauthorized_should_fail(account: signer) acquires StakingConfig {\n        update_recurring_lockup_duration_secs(&account, 1);\n    }\n\n    #[test(account = @0x123)]\n    #[expected_failure(abort_code = 0x50002)]\n    public entry fun test_update_rewards_unauthorized_should_fail(account: signer) acquires StakingConfig {\n        update_rewards_rate(&account, 1, 10);\n    }\n\n    #[test(account = @0x123)]\n    #[expected_failure(abort_code = 0x50002)]\n    public entry fun test_update_voting_power_increase_limit_unauthorized_should_fail(account: signer) acquires StakingConfig {\n        update_voting_power_increase_limit(&account, 10);\n    }\n\n    #[test(aptos_framework = @aptos_framework)]\n    #[expected_failure(abort_code = 0x10003)]\n    public entry fun test_update_required_stake_invalid_range_should_fail(aptos_framework: signer) acquires StakingConfig {\n        update_required_stake(&aptos_framework, 10, 5);\n    }\n\n    #[test(aptos_framework = @aptos_framework)]\n    #[expected_failure(abort_code = 0x10003)]\n    public entry fun test_update_required_stake_zero_max_stake_should_fail(aptos_framework: signer) acquires StakingConfig {\n        update_required_stake(&aptos_framework, 0, 0);\n    }\n\n    #[test(aptos_framework = @aptos_framework)]\n    #[expected_failure(abort_code = 0x10001)]\n    public entry fun test_update_required_lockup_to_zero_should_fail(aptos_framework: signer) acquires StakingConfig {\n        update_recurring_lockup_duration_secs(&aptos_framework, 0);\n    }\n\n    #[test(aptos_framework = @aptos_framework)]\n    #[expected_failure(abort_code = 0x10002)]\n    public entry fun test_update_rewards_invalid_denominator_should_fail(aptos_framework: signer) acquires StakingConfig {\n        update_rewards_rate(&aptos_framework, 1, 0);\n    }\n\n    #[test(aptos_framework = @aptos_framework)]\n    #[expected_failure(abort_code = 0x10004)]\n    public entry fun test_update_voting_power_increase_limit_to_zero_should_fail(\n        aptos_framework: signer\n    ) acquires StakingConfig {\n        update_voting_power_increase_limit(&aptos_framework, 0);\n    }\n\n    #[test(aptos_framework = @aptos_framework)]\n    #[expected_failure(abort_code = 0x10004)]\n    public entry fun test_update_voting_power_increase_limit_to_more_than_upper_bound_should_fail(\n        aptos_framework: signer\n    ) acquires StakingConfig {\n        update_voting_power_increase_limit(&aptos_framework, 51);\n    }\n\n    // For tests to bypass all validations.\n    #[test_only]\n    public fun initialize_for_test(\n        aptos_framework: &signer,\n        minimum_stake: u64,\n        maximum_stake: u64,\n        recurring_lockup_duration_secs: u64,\n        allow_validator_set_change: bool,\n        rewards_rate: u64,\n        rewards_rate_denominator: u64,\n        voting_power_increase_limit: u64,\n    ) {\n        move_to(aptos_framework, StakingConfig {\n            minimum_stake,\n            maximum_stake,\n            recurring_lockup_duration_secs,\n            allow_validator_set_change,\n            rewards_rate,\n            rewards_rate_denominator,\n            voting_power_increase_limit,\n        });\n    }\n}\n",
              "source_map": ""
            },
            {
              "name": "stake",
              "source": "/**\n * Validator lifecycle:\n * 1. Prepare a validator node set up and call stake::initialize_validator\n * 2. Once ready to deposit stake (or have funds assigned by a staking service in exchange for ownership capability),\n * call stake::add_stake (or *_with_cap versions if called from the staking service)\n * 3. Call stake::join_validator_set (or _with_cap version) to join the active validator set. Changes are effective in\n * the next epoch.\n * 4. Validate and gain rewards. The stake will automatically be locked up for a fixed duration (set by governance) and\n * automatically renewed at expiration.\n * 5. At any point, if the validator operator wants to update the consensus key or network/fullnode addresses, they can\n * call stake::rotate_consensus_key and stake::update_network_and_fullnode_addresses. Similar to changes to stake, the\n * changes to consensus key/network/fullnode addresses are only effective in the next epoch.\n * 6. Validator can request to unlock their stake at any time. However, their stake will only become withdrawable when\n * their current lockup expires. This can be at most as long as the fixed lockup duration.\n * 7. After exiting, the validator can either explicitly leave the validator set by calling stake::leave_validator_set\n * or if their stake drops below the min required, they would get removed at the end of the epoch.\n * 8. Validator can always rejoin the validator set by going through steps 2-3 again.\n * 9. An owner can always switch operators by calling stake::set_operator.\n * 10. An owner can always switch designated voter by calling stake::set_designated_voter.\n*/\nmodule aptos_framework::stake {\n    use std::error;\n    use std::option::{Self, Option};\n    use std::signer;\n    use std::vector;\n    use aptos_std::event::{Self, EventHandle};\n    use aptos_std::signature;\n    use aptos_framework::aptos_coin::AptosCoin;\n    use aptos_framework::coin::{Self, Coin, MintCapability};\n    use aptos_framework::timestamp;\n    use aptos_framework::system_addresses;\n    use aptos_framework::staking_config::{Self, StakingConfig};\n\n    friend aptos_framework::block;\n    friend aptos_framework::genesis;\n    friend aptos_framework::reconfiguration;\n\n    /// Lockup period is shorter than required.\n    const ELOCK_TIME_TOO_SHORT: u64 = 1;\n    /// Withdraw not allowed, the stake is still locked.\n    const EWITHDRAW_NOT_ALLOWED: u64 = 2;\n    /// Validator Config not published.\n    const EVALIDATOR_CONFIG: u64 = 3;\n    /// Not enough stake to join validator set.\n    const ESTAKE_TOO_LOW: u64 = 4;\n    /// Too much stake to join validator set.\n    const ESTAKE_TOO_HIGH: u64 = 5;\n    /// Account is already a validator or pending validator.\n    const EALREADY_ACTIVE_VALIDATOR: u64 = 6;\n    /// Account is not a validator.\n    const ENOT_VALIDATOR: u64 = 7;\n    /// Can't remove last validator.\n    const ELAST_VALIDATOR: u64 = 8;\n    /// Total stake exceeds maximum allowed.\n    const ESTAKE_EXCEEDS_MAX: u64 = 9;\n    /// Account is already registered as a validator candidate.\n    const EALREADY_REGISTERED: u64 = 10;\n    /// No coins in inactive state to withdraw from specified pool.\n    const ENO_COINS_TO_WITHDRAW: u64 = 11;\n    /// Account does not have the right operator capability.\n    const ENOT_OPERATOR: u64 = 12;\n    /// Lockup period is longer than allowed.\n    const ELOCK_TIME_TOO_LONG: u64 = 13;\n    const ENO_POST_GENESIS_VALIDATOR_SET_CHANGE_ALLOWED: u64 = 14;\n    /// Invalid consensus public key\n    const EINVALID_PUBLIC_KEY: u64 = 15;\n    /// Invalid stake amount (usuaully 0).\n    const EINVALID_STAKE_AMOUNT: u64 = 16;\n    /// Validator set exceeds the limit\n    const EVALIDATOR_SET_TOO_LARGE: u64 = 18;\n    /// Voting power increase has exceeded the limit for this current epoch.\n    const EVOTING_POWER_INCREASE_EXCEEDS_LIMIT: u64 = 19;\n\n    /// Validator status enum. We can switch to proper enum later once Move supports it.\n    const VALIDATOR_STATUS_PENDING_ACTIVE: u64 = 1;\n    const VALIDATOR_STATUS_ACTIVE: u64 = 2;\n    const VALIDATOR_STATUS_PENDING_INACTIVE: u64 = 3;\n    const VALIDATOR_STATUS_INACTIVE: u64 = 4;\n\n    /// Limit the maximum size to u16::max, it's the current limit of the bitvec\n    /// https://github.com/aptos-labs/aptos-core/blob/main/crates/aptos-bitvec/src/lib.rs#L20\n    const MAX_VALIDATOR_SET_SIZE: u64 = 65536;\n\n    /// Capability that represents ownership and can be used to control the validator and the associated stake pool.\n    /// Having this be separate from the signer for the account that the validator resources are hosted at allows\n    /// modules to have control over a validator.\n    struct OwnerCapability has key, store {\n        pool_address: address,\n    }\n\n    /// Each validator has a separate StakePool resource and can provide a stake.\n    /// Changes in stake for an active validator:\n    /// 1. If a validator calls add_stake, the newly added stake is moved to pending_active.\n    /// 2. If validator calls unlock, their stake is moved to pending_inactive.\n    /// 2. When the next epoch starts, any pending_inactive stake is moved to inactive and can be withdrawn.\n    ///    Any pending_active stake is moved to active and adds to the validator's voting power.\n    ///\n    /// Changes in stake for an inactive validator:\n    /// 1. If a validator calls add_stake, the newly added stake is moved directly to active.\n    /// 2. If validator calls unlock, their stake is moved directly to inactive.\n    /// 3. When the next epoch starts, the validator can be activated if their active stake is more than the minimum.\n    struct StakePool has key {\n        // active stake\n        active: Coin<AptosCoin>,\n        // inactive stake, can be withdrawn\n        inactive: Coin<AptosCoin>,\n        // pending activation for next epoch\n        pending_active: Coin<AptosCoin>,\n        // pending deactivation for next epoch\n        pending_inactive: Coin<AptosCoin>,\n        locked_until_secs: u64,\n        // Track the current operator of the validator node.\n        // This allows the operator to be different from the original account and allow for separation of\n        // the validator operations and ownership.\n        // Only the account holding OwnerCapability of the staking pool can update this.\n        operator_address: address,\n\n        // Track the current vote delegator of the staking pool.\n        // Only the account holding OwnerCapability of the staking pool can update this.\n        delegated_voter: address,\n\n        // The events emitted for the entire StakePool's lifecycle.\n        initialize_validator_events: EventHandle<RegisterValidatorCandidateEvent>,\n        set_operator_events: EventHandle<SetOperatorEvent>,\n        add_stake_events: EventHandle<AddStakeEvent>,\n        rotate_consensus_key_events: EventHandle<RotateConsensusKeyEvent>,\n        update_network_and_fullnode_addresses_events: EventHandle<UpdateNetworkAndFullnodeAddressesEvent>,\n        increase_lockup_events: EventHandle<IncreaseLockupEvent>,\n        join_validator_set_events: EventHandle<JoinValidatorSetEvent>,\n        distribute_rewards_events: EventHandle<DistributeRewardsEvent>,\n        unlock_stake_events: EventHandle<UnlockStakeEvent>,\n        withdraw_stake_events: EventHandle<WithdrawStakeEvent>,\n        leave_validator_set_events: EventHandle<LeaveValidatorSetEvent>,\n    }\n\n    /// Validator info stored in validator address.\n    struct ValidatorConfig has key, copy, store, drop {\n        consensus_pubkey: vector<u8>,\n        network_addresses: vector<u8>,\n        // to make it compatible with previous definition, remove later\n        fullnode_addresses: vector<u8>,\n        // Index in the active set if the validator corresponding to this stake pool is active.\n        validator_index: u64,\n    }\n\n    /// Consensus information per validator, stored in ValidatorSet.\n    struct ValidatorInfo has copy, store, drop {\n        addr: address,\n        voting_power: u64,\n        config: ValidatorConfig,\n    }\n\n    /// Full ValidatorSet, stored in @aptos_framework.\n    /// 1. join_validator_set adds to pending_active queue.\n    /// 2. leave_valdiator_set moves from active to pending_inactive queue.\n    /// 3. on_new_epoch processes two pending queues and refresh ValidatorInfo from the owner's address.\n    struct ValidatorSet has key {\n        consensus_scheme: u8,\n        // Active validators for the current epoch.\n        active_validators: vector<ValidatorInfo>,\n        // Pending validators to leave in next epoch (still active).\n        pending_inactive: vector<ValidatorInfo>,\n        // Pending validators to join in next epoch.\n        pending_active: vector<ValidatorInfo>,\n        // Current total voting power.\n        total_voting_power: u128,\n        // Total voting power waiting to join in the next epoch.\n        total_joining_power: u128,\n    }\n\n    /// AptosCoin capabilities, set during genesis and stored in @CoreResource account.\n    /// This allows the Stake module to mint rewards to stakers.\n    struct AptosCoinCapabilities has key {\n        mint_cap: MintCapability<AptosCoin>,\n    }\n\n    // TODO change all types to u32 ?\n    struct IndividualValidatorPerformance has store, drop {\n        successful_proposals: u64,\n        failed_proposals: u64,\n    }\n\n    struct ValidatorPerformance has key {\n        validators: vector<IndividualValidatorPerformance>,\n    }\n\n    struct RegisterValidatorCandidateEvent has drop, store {\n        pool_address: address,\n    }\n\n    struct SetOperatorEvent has drop, store {\n        pool_address: address,\n        old_operator: address,\n        new_operator: address,\n    }\n\n    struct AddStakeEvent has drop, store {\n        pool_address: address,\n        amount_added: u64,\n    }\n\n    struct RotateConsensusKeyEvent has drop, store {\n        pool_address: address,\n        old_consensus_pubkey: vector<u8>,\n        new_consensus_pubkey: vector<u8>,\n    }\n\n    struct UpdateNetworkAndFullnodeAddressesEvent has drop, store {\n        pool_address: address,\n        old_network_addresses: vector<u8>,\n        new_network_addresses: vector<u8>,\n        old_fullnode_addresses: vector<u8>,\n        new_fullnode_addresses: vector<u8>,\n    }\n\n    struct IncreaseLockupEvent has drop, store {\n        pool_address: address,\n        old_locked_until_secs: u64,\n        new_locked_until_secs: u64,\n    }\n\n    struct JoinValidatorSetEvent has drop, store {\n        pool_address: address,\n    }\n\n    struct DistributeRewardsEvent has drop, store {\n        pool_address: address,\n        rewards_amount: u64,\n    }\n\n    struct UnlockStakeEvent has drop, store {\n        pool_address: address,\n        amount_unlocked: u64,\n    }\n\n    struct WithdrawStakeEvent has drop, store {\n        pool_address: address,\n        amount_withdrawn: u64,\n    }\n\n    struct LeaveValidatorSetEvent has drop, store {\n        pool_address: address,\n    }\n\n    /// Return the lockup expiration of the stake pool at `pool_address`.\n    /// This will throw an error if there's no stake pool at `pool_address`.\n    public fun get_lockup_secs(pool_address: address): u64 acquires StakePool {\n        borrow_global<StakePool>(pool_address).locked_until_secs\n    }\n\n    /// Return the remaining lockup of the stake pool at `pool_address`.\n    /// This will throw an error if there's no stake pool at `pool_address`.\n    public fun get_remaining_lockup_secs(pool_address: address): u64 acquires StakePool {\n        let lockup_time = borrow_global<StakePool>(pool_address).locked_until_secs;\n        if (lockup_time <= timestamp::now_seconds()) {\n            0\n        } else {\n            lockup_time - timestamp::now_seconds()\n        }\n    }\n\n    /// Return the different stake amounts for `pool_address` (whether the validator is active or not).\n    /// The returned amounts are for (active, inactive, pending_active, pending_inactive) stake respectively.\n    public fun get_stake(pool_address: address): (u64, u64, u64, u64) acquires StakePool {\n        let stake_pool = borrow_global<StakePool>(pool_address);\n        (\n            coin::value<AptosCoin>(&stake_pool.active),\n            coin::value<AptosCoin>(&stake_pool.inactive),\n            coin::value<AptosCoin>(&stake_pool.pending_active),\n            coin::value<AptosCoin>(&stake_pool.pending_inactive),\n        )\n    }\n\n    /// Returns the validator's state.\n    public fun get_validator_state(pool_address: address): u64 acquires ValidatorSet {\n        let validator_set = borrow_global<ValidatorSet>(@aptos_framework);\n        if (option::is_some(&find_validator(&validator_set.pending_active, pool_address))) {\n            VALIDATOR_STATUS_PENDING_ACTIVE\n        } else if (option::is_some(&find_validator(&validator_set.active_validators, pool_address))) {\n            VALIDATOR_STATUS_ACTIVE\n        } else if (option::is_some(&find_validator(&validator_set.pending_inactive, pool_address))) {\n            VALIDATOR_STATUS_PENDING_INACTIVE\n        } else {\n            VALIDATOR_STATUS_INACTIVE\n        }\n    }\n\n    /// Return the voting power of the validator in the current epoch.\n    /// This is the same as the validator's total active and pending_inactive stake.\n    public fun get_current_epoch_voting_power(pool_address: address): u64 acquires StakePool, ValidatorSet {\n        let validator_state = get_validator_state(pool_address);\n        // Both active and pending inactive validators can still vote in the current epoch.\n        if (validator_state == VALIDATOR_STATUS_ACTIVE || validator_state == VALIDATOR_STATUS_PENDING_INACTIVE) {\n            let active_stake = coin::value<AptosCoin>(&borrow_global<StakePool>(pool_address).active);\n            let pending_inactive_stake = coin::value<AptosCoin>(&borrow_global<StakePool>(pool_address).pending_inactive);\n            active_stake + pending_inactive_stake\n        } else {\n            0\n        }\n    }\n\n    /// Return the delegated voter of the validator at `pool_address`.\n    public fun get_delegated_voter(pool_address: address): address acquires StakePool {\n        borrow_global<StakePool>(pool_address).delegated_voter\n    }\n\n    /// Return the operator of the validator at `pool_address`.\n    public fun get_operator(pool_address: address): address acquires StakePool {\n        borrow_global<StakePool>(pool_address).operator_address\n    }\n\n    /// Return the pool address in `owner_cap`.\n    public fun get_owned_pool_address(owner_cap: &OwnerCapability): address {\n        owner_cap.pool_address\n    }\n\n    /// Return the validator index for `pool_address`.\n    public fun get_validator_index(pool_address: address): u64 acquires ValidatorConfig {\n        borrow_global<ValidatorConfig>(pool_address).validator_index\n    }\n\n    /// Return the number of successful and failed proposals for the proposal at the given validator index.\n    public fun get_current_epoch_proposal_counts(validator_index: u64): (u64, u64) acquires ValidatorPerformance {\n        let validator_performances = &borrow_global<ValidatorPerformance>(@aptos_framework).validators;\n        let validator_performance = vector::borrow(validator_performances, validator_index);\n        (validator_performance.successful_proposals, validator_performance.failed_proposals)\n    }\n\n    /// Return the validator's config.\n    public fun get_validator_config(pool_address: address): (vector<u8>, vector<u8>, vector<u8>) acquires ValidatorConfig {\n        let validator_config = borrow_global<ValidatorConfig>(pool_address);\n        (validator_config.consensus_pubkey, validator_config.network_addresses, validator_config.fullnode_addresses)\n    }\n\n    /// Initialize validator set to the core resource account.\n    public(friend) fun initialize(aptos_framework: &signer) {\n        system_addresses::assert_aptos_framework(aptos_framework);\n\n        move_to(aptos_framework, ValidatorSet {\n            consensus_scheme: 0,\n            active_validators: vector::empty(),\n            pending_active: vector::empty(),\n            pending_inactive: vector::empty(),\n            total_voting_power: 0,\n            total_joining_power: 0,\n        });\n\n        move_to(aptos_framework, ValidatorPerformance {\n            validators: vector::empty(),\n        });\n    }\n\n    /// This is only called during Genesis, which is where MintCapability<AptosCoin> can be created.\n    /// Beyond genesis, no one can create AptosCoin mint/burn capabilities.\n    public(friend) fun store_aptos_coin_mint_cap(account: &signer, mint_cap: MintCapability<AptosCoin>) {\n        system_addresses::assert_aptos_framework(account);\n        move_to(account, AptosCoinCapabilities { mint_cap })\n    }\n\n    /// Initialize the validator account and give ownership to the signing account\n    /// except it leaves the ValidatorConfig to be set by another entity.\n    /// Note: this triggers setting the operator and owner, set it to the account's address\n    /// to set later.\n    public entry fun initialize_owner_only(\n        owner: &signer,\n        initial_stake_amount: u64,\n        operator: address,\n        voter: address,\n    ) acquires OwnerCapability, StakePool, ValidatorSet {\n        initialize_owner(owner);\n        move_to(owner, ValidatorConfig {\n            consensus_pubkey: vector::empty(),\n            network_addresses: vector::empty(),\n            fullnode_addresses: vector::empty(),\n            validator_index: 0,\n        });\n\n        if (initial_stake_amount > 0) {\n            add_stake(owner, initial_stake_amount);\n        };\n\n        let account_address = signer::address_of(owner);\n        if (account_address != operator) {\n            set_operator(owner, operator)\n        };\n        if (account_address != voter) {\n            set_delegated_voter(owner, voter)\n        };\n    }\n\n    /// Initialize the validator account and give ownership to the signing account.\n    public entry fun initialize_validator(\n        account: &signer,\n        consensus_pubkey: vector<u8>,\n        proof_of_possession: vector<u8>,\n        network_addresses: vector<u8>,\n        fullnode_addresses: vector<u8>,\n    ) {\n        assert!(signature::bls12381_verify_proof_of_possession(consensus_pubkey, proof_of_possession), error::invalid_argument(EINVALID_PUBLIC_KEY));\n\n        initialize_owner(account);\n        move_to(account, ValidatorConfig {\n            consensus_pubkey,\n            network_addresses,\n            fullnode_addresses,\n            validator_index: 0,\n        });\n    }\n\n    fun initialize_owner(owner: &signer) {\n        let owner_address = signer::address_of(owner);\n        assert!(!exists<StakePool>(owner_address), error::invalid_argument(EALREADY_REGISTERED));\n\n        move_to(owner, StakePool {\n            active: coin::zero<AptosCoin>(),\n            pending_active: coin::zero<AptosCoin>(),\n            pending_inactive: coin::zero<AptosCoin>(),\n            inactive: coin::zero<AptosCoin>(),\n            locked_until_secs: 0,\n            operator_address: owner_address,\n            delegated_voter: owner_address,\n\n            // Events.\n            initialize_validator_events: event::new_event_handle<RegisterValidatorCandidateEvent>(owner),\n            set_operator_events: event::new_event_handle<SetOperatorEvent>(owner),\n            add_stake_events: event::new_event_handle<AddStakeEvent>(owner),\n            rotate_consensus_key_events: event::new_event_handle<RotateConsensusKeyEvent>(owner),\n            update_network_and_fullnode_addresses_events: event::new_event_handle<UpdateNetworkAndFullnodeAddressesEvent>(owner),\n            increase_lockup_events: event::new_event_handle<IncreaseLockupEvent>(owner),\n            join_validator_set_events: event::new_event_handle<JoinValidatorSetEvent>(owner),\n            distribute_rewards_events: event::new_event_handle<DistributeRewardsEvent>(owner),\n            unlock_stake_events: event::new_event_handle<UnlockStakeEvent>(owner),\n            withdraw_stake_events: event::new_event_handle<WithdrawStakeEvent>(owner),\n            leave_validator_set_events: event::new_event_handle<LeaveValidatorSetEvent>(owner),\n        });\n\n        move_to(owner, OwnerCapability { pool_address: owner_address });\n    }\n\n    /// Extract and return owner capability from the signing account.\n    public fun extract_owner_cap(account: &signer): OwnerCapability acquires OwnerCapability {\n        move_from<OwnerCapability>(signer::address_of(account))\n    }\n\n    /// Deposit `owner_cap` into `account`. This requires `account` to not already have owernship of another\n    /// staking pool.\n    public fun deposit_owner_cap(account: &signer, owner_cap: OwnerCapability) {\n        move_to(account, owner_cap);\n    }\n\n    /// Allows an owner to change the operator of the stake pool.\n    public entry fun set_operator(account: &signer, new_operator: address) acquires OwnerCapability, StakePool {\n        let account_addr = signer::address_of(account);\n        let ownership_cap = borrow_global<OwnerCapability>(account_addr);\n        set_operator_with_cap(ownership_cap, new_operator);\n    }\n\n    /// Allows an account with ownership capability to change the operator of the stake pool.\n    public fun set_operator_with_cap(owner_cap: &OwnerCapability, new_operator: address) acquires StakePool {\n        let pool_address = owner_cap.pool_address;\n        let stake_pool = borrow_global_mut<StakePool>(pool_address);\n        let old_operator = stake_pool.operator_address;\n        stake_pool.operator_address = new_operator;\n\n        event::emit_event<SetOperatorEvent>(\n            &mut stake_pool.set_operator_events,\n            SetOperatorEvent {\n                pool_address,\n                old_operator,\n                new_operator,\n            },\n        );\n    }\n\n    /// Allows an owner to change the delegated voter of the stake pool.\n    public entry fun set_delegated_voter(\n        account: &signer, new_delegated_voter: address) acquires OwnerCapability, StakePool {\n        let account_addr = signer::address_of(account);\n        let ownership_cap = borrow_global<OwnerCapability>(account_addr);\n        set_delegated_voter_with_cap(ownership_cap, new_delegated_voter);\n    }\n\n    /// Allows an owner to change the delegated voter of the stake pool.\n    public fun set_delegated_voter_with_cap(\n        owner_cap: &OwnerCapability, new_delegated_voter: address) acquires StakePool {\n        let stake_pool = borrow_global_mut<StakePool>(owner_cap.pool_address);\n        stake_pool.delegated_voter = new_delegated_voter;\n    }\n\n    /// Add `amount` of coins from the `account` owning the StakePool.\n    public entry fun add_stake(\n        account: &signer,\n        amount: u64,\n    ) acquires OwnerCapability, StakePool, ValidatorSet {\n        let account_addr = signer::address_of(account);\n        let ownership_cap = borrow_global<OwnerCapability>(account_addr);\n        add_stake_with_cap(ownership_cap, coin::withdraw<AptosCoin>(account, amount));\n    }\n\n    /// Add `coins` into `pool_address`. this requires the corresponding `owner_cap` to be passed in.\n    public fun add_stake_with_cap(\n        owner_cap: &OwnerCapability, coins: Coin<AptosCoin>) acquires StakePool, ValidatorSet {\n        let pool_address = owner_cap.pool_address;\n\n        let amount = coin::value<AptosCoin>(&coins);\n        assert!(amount > 0, error::invalid_argument(EINVALID_STAKE_AMOUNT));\n\n        // Only track and validate voting power increase for active and pending_active validator.\n        // Pending_inactive validator will be removed from the validator set in the next epoch.\n        // Inactive validator's total stake will be tracked when they join the validator set.\n        let validator_set = borrow_global_mut<ValidatorSet>(@aptos_framework);\n        // Search directly rather using get_validator_state to save on unnecessary loops.\n        if (option::is_some(&find_validator(&validator_set.active_validators, pool_address)) ||\n            option::is_some(&find_validator(&validator_set.pending_active, pool_address))) {\n            update_voting_power_increase(amount);\n        };\n\n        // Add to pending_active if it's a current validator because the stake is not counted until the next epoch.\n        // Otherwise, the delegation can be added to active directly as the validator is also activated in the epoch.\n        let stake_pool = borrow_global_mut<StakePool>(pool_address);\n        if (is_current_epoch_validator(pool_address)) {\n            coin::merge<AptosCoin>(&mut stake_pool.pending_active, coins);\n        } else {\n            coin::merge<AptosCoin>(&mut stake_pool.active, coins);\n        };\n\n        let (_, maximum_stake) = staking_config::get_required_stake(&staking_config::get());\n        let voting_power = get_next_epoch_voting_power(stake_pool);\n        assert!(voting_power <= maximum_stake, error::invalid_argument(ESTAKE_EXCEEDS_MAX));\n\n        event::emit_event<AddStakeEvent>(\n            &mut stake_pool.add_stake_events,\n            AddStakeEvent {\n                pool_address,\n                amount_added: amount,\n            },\n        );\n    }\n\n    /// Rotate the consensus key of the validator, it'll take effect in next epoch.\n    public entry fun rotate_consensus_key(\n        account: &signer,\n        pool_address: address,\n        new_consensus_pubkey: vector<u8>,\n        proof_of_possession: vector<u8>,\n    ) acquires StakePool, ValidatorConfig {\n        let stake_pool = borrow_global_mut<StakePool>(pool_address);\n        assert!(signer::address_of(account) == stake_pool.operator_address, error::invalid_argument(ENOT_OPERATOR));\n\n        assert!(exists<ValidatorConfig>(pool_address), error::not_found(EVALIDATOR_CONFIG));\n        let validator_info = borrow_global_mut<ValidatorConfig>(pool_address);\n        let old_consensus_pubkey = validator_info.consensus_pubkey;\n        assert!(signature::bls12381_verify_proof_of_possession(new_consensus_pubkey, proof_of_possession), error::invalid_argument(EINVALID_PUBLIC_KEY));\n        validator_info.consensus_pubkey = new_consensus_pubkey;\n\n        event::emit_event<RotateConsensusKeyEvent>(\n            &mut stake_pool.rotate_consensus_key_events,\n            RotateConsensusKeyEvent {\n                pool_address,\n                old_consensus_pubkey,\n                new_consensus_pubkey,\n            },\n        );\n    }\n\n    /// Update the network and full node addresses of the validator. This only takes effect in the next epoch.\n    public entry fun update_network_and_fullnode_addresses(\n        account: &signer,\n        pool_address: address,\n        new_network_addresses: vector<u8>,\n        new_fullnode_addresses: vector<u8>,\n    ) acquires StakePool, ValidatorConfig {\n        let stake_pool = borrow_global_mut<StakePool>(pool_address);\n        assert!(signer::address_of(account) == stake_pool.operator_address, error::invalid_argument(ENOT_OPERATOR));\n\n        assert!(exists<ValidatorConfig>(pool_address), error::not_found(EVALIDATOR_CONFIG));\n        let validator_info = borrow_global_mut<ValidatorConfig>(pool_address);\n        let old_network_addresses = validator_info.network_addresses;\n        validator_info.network_addresses = new_network_addresses;\n        let old_fullnode_addresses = validator_info.fullnode_addresses;\n        validator_info.fullnode_addresses = new_fullnode_addresses;\n\n        event::emit_event<UpdateNetworkAndFullnodeAddressesEvent>(\n            &mut stake_pool.update_network_and_fullnode_addresses_events,\n            UpdateNetworkAndFullnodeAddressesEvent {\n                pool_address,\n                old_network_addresses,\n                new_network_addresses,\n                old_fullnode_addresses,\n                new_fullnode_addresses,\n            },\n        );\n    }\n\n    /// Similar to increase_lockup_with_cap but will use ownership capability from the signing account.\n    public entry fun increase_lockup(account: &signer) acquires OwnerCapability, StakePool {\n        let account_addr = signer::address_of(account);\n        let ownership_cap = borrow_global<OwnerCapability>(account_addr);\n        increase_lockup_with_cap(ownership_cap);\n    }\n\n    /// Unlock from active delegation, it's moved to pending_inactive if locked_until_secs < current_time or\n    /// directly inactive if it's not from an active validator.\n    public fun increase_lockup_with_cap(owner_cap: &OwnerCapability) acquires StakePool {\n        let pool_address = owner_cap.pool_address;\n        let config = staking_config::get();\n\n        let stake_pool = borrow_global_mut<StakePool>(pool_address);\n        let old_locked_until_secs = stake_pool.locked_until_secs;\n        stake_pool.locked_until_secs = timestamp::now_seconds() + staking_config::get_recurring_lockup_duration(&config);\n\n        event::emit_event<IncreaseLockupEvent>(\n            &mut stake_pool.increase_lockup_events,\n            IncreaseLockupEvent {\n                pool_address,\n                old_locked_until_secs,\n                new_locked_until_secs: stake_pool.locked_until_secs,\n            },\n        );\n    }\n\n    /// This can only called by the operator of the validator/staking pool.\n    public entry fun join_validator_set(\n        account: &signer, pool_address: address) acquires StakePool, ValidatorConfig, ValidatorSet {\n        assert!(\n            staking_config::get_allow_validator_set_change(&staking_config::get()),\n            error::invalid_argument(ENO_POST_GENESIS_VALIDATOR_SET_CHANGE_ALLOWED),\n        );\n\n        join_validator_set_internal(account, pool_address);\n    }\n\n    /// Request to have `pool_address` join the validator set. Can only be called after calling `initialize_validator`.\n    /// If the validator has the required stake (more than minimum and less than maximum allowed), they will be\n    /// added to the pending_active queue. All validators in this queue will be added to the active set when the next\n    /// epoch starts (eligibility will be rechecked).\n    ///\n    /// This internal version can only be called by the Genesis module during Genesis.\n    public(friend) fun join_validator_set_internal(\n        account: &signer, pool_address: address) acquires StakePool, ValidatorConfig, ValidatorSet {\n        let stake_pool = borrow_global_mut<StakePool>(pool_address);\n        // Account has to be the operator.\n        assert!(signer::address_of(account) == stake_pool.operator_address, error::invalid_argument(ENOT_OPERATOR));\n\n        // Throw an error is the validator is already active.\n        assert!(\n            get_validator_state(pool_address) == VALIDATOR_STATUS_INACTIVE,\n            error::invalid_argument(EALREADY_ACTIVE_VALIDATOR),\n        );\n\n        let config = staking_config::get();\n        let (minimum_stake, maximum_stake) = staking_config::get_required_stake(&config);\n        let voting_power = get_next_epoch_voting_power(stake_pool);\n        assert!(voting_power >= minimum_stake, error::invalid_argument(ESTAKE_TOO_LOW));\n        assert!(voting_power <= maximum_stake, error::invalid_argument(ESTAKE_TOO_HIGH));\n\n        // Track and validate voting power increase.\n        update_voting_power_increase(voting_power);\n\n        // Add validator to pending_active, to be activated in the next epoch.\n        let validator_config = borrow_global_mut<ValidatorConfig>(pool_address);\n        assert!(!vector::is_empty(&validator_config.consensus_pubkey), error::invalid_argument(EINVALID_PUBLIC_KEY));\n\n        // Validate the the current validator set size has not exceeded the limit.\n        let validator_set = borrow_global_mut<ValidatorSet>(@aptos_framework);\n        let validator_set_size = vector::length(&validator_set.active_validators) + vector::length(&validator_set.pending_active);\n        assert!(validator_set_size <= MAX_VALIDATOR_SET_SIZE, error::invalid_argument(EVALIDATOR_SET_TOO_LARGE));\n        vector::push_back(&mut validator_set.pending_active, generate_validator_info(pool_address, stake_pool, *validator_config));\n\n        event::emit_event<JoinValidatorSetEvent>(\n            &mut stake_pool.join_validator_set_events,\n            JoinValidatorSetEvent { pool_address },\n        );\n    }\n\n    /// Similar to unlock_with_cap but will use ownership capability from the signing account.\n    public entry fun unlock(account: &signer, amount: u64) acquires OwnerCapability, StakePool {\n        let account_addr = signer::address_of(account);\n        let ownership_cap = borrow_global<OwnerCapability>(account_addr);\n        unlock_with_cap(amount, ownership_cap);\n    }\n\n    /// Unlock `amount` from the active stake. Only possible if the lockup has expired.\n    public fun unlock_with_cap(amount: u64, owner_cap: &OwnerCapability) acquires StakePool {\n        // Short-circuit if amount to unlock is 0 so we don't emit events.\n        if (amount == 0) {\n            return\n        };\n\n        // Unlocked coins are moved to pending_inactive. When the current lockup cycle expires, they will be moved into\n        // inactive in the earliest possible epoch transition.\n        let pool_address = owner_cap.pool_address;\n        let stake_pool = borrow_global_mut<StakePool>(pool_address);\n        let unlocked_stake = coin::extract<AptosCoin>(&mut stake_pool.active, amount);\n        coin::merge<AptosCoin>(&mut stake_pool.pending_inactive, unlocked_stake);\n\n        event::emit_event<UnlockStakeEvent>(\n            &mut stake_pool.unlock_stake_events,\n            UnlockStakeEvent {\n                pool_address,\n                amount_unlocked: amount,\n            },\n        );\n    }\n\n    /// Withdraw from `account`'s inactive stake.\n    public entry fun withdraw(\n        account: &signer, withdraw_amount: u64) acquires OwnerCapability, StakePool, ValidatorSet {\n        let account_addr = signer::address_of(account);\n        let ownership_cap = borrow_global<OwnerCapability>(account_addr);\n        let coins = withdraw_with_cap(ownership_cap, withdraw_amount);\n        coin::deposit<AptosCoin>(account_addr, coins);\n    }\n\n    /// Withdraw from `pool_address`'s inactive stake with the corresponding `owner_cap`.\n    public fun withdraw_with_cap(\n        owner_cap: &OwnerCapability, withdraw_amount: u64): Coin<AptosCoin> acquires StakePool, ValidatorSet {\n        let pool_address = owner_cap.pool_address;\n        let stake_pool = borrow_global_mut<StakePool>(pool_address);\n        // There's an edge case where a validator unlocks their stake and leaves the validator set before\n        // the stake is fully unlocked (the current lockup cycle has not expired yet).\n        // This can leave their stake stuck in pending_inactive even after the current lockup cycle expires.\n        if (get_validator_state(pool_address) == VALIDATOR_STATUS_INACTIVE &&\n            timestamp::now_seconds() >= stake_pool.locked_until_secs) {\n            let pending_inactive_stake = coin::extract_all(&mut stake_pool.pending_inactive);\n            coin::merge(&mut stake_pool.inactive, pending_inactive_stake);\n        };\n\n        let total_withdrawable_amount = coin::value<AptosCoin>(&stake_pool.inactive);\n        // Cap withdraw amount by total withdrawable.\n        if (withdraw_amount > total_withdrawable_amount) {\n            withdraw_amount = total_withdrawable_amount;\n        };\n        assert!(withdraw_amount > 0, error::invalid_argument(ENO_COINS_TO_WITHDRAW));\n\n        event::emit_event<WithdrawStakeEvent>(\n            &mut stake_pool.withdraw_stake_events,\n            WithdrawStakeEvent {\n                pool_address,\n                amount_withdrawn: withdraw_amount,\n            },\n        );\n\n        coin::extract<AptosCoin>(&mut stake_pool.inactive, withdraw_amount)\n    }\n\n    /// Request to have `pool_address` leave the validator set. The validator is only actually removed from the set when\n    /// the next epoch starts.\n    /// The last validator in the set cannot leave. This is an edge case that should never happen as long as the network\n    /// is still operational.\n    ///\n    /// Can only be called by the operator of the validator/staking pool.\n    public entry fun leave_validator_set(\n        account: &signer, pool_address: address) acquires StakePool, ValidatorSet {\n        let config = staking_config::get();\n        assert!(\n            staking_config::get_allow_validator_set_change(&config),\n            error::invalid_argument(ENO_POST_GENESIS_VALIDATOR_SET_CHANGE_ALLOWED),\n        );\n        let stake_pool = borrow_global_mut<StakePool>(pool_address);\n        // Account has to be the operator.\n        assert!(signer::address_of(account) == stake_pool.operator_address, error::invalid_argument(ENOT_OPERATOR));\n\n        let validator_set = borrow_global_mut<ValidatorSet>(@aptos_framework);\n        // Validate that the validator is already part of the validator set.\n        let maybe_index = find_validator(&validator_set.active_validators, pool_address);\n        assert!(option::is_some(&maybe_index), error::invalid_argument(ENOT_VALIDATOR));\n        let index = option::extract(&mut maybe_index);\n\n        let validator_info = vector::swap_remove(&mut validator_set.active_validators, index);\n        assert!(vector::length(&validator_set.active_validators) > 0, error::invalid_argument(ELAST_VALIDATOR));\n        vector::push_back(&mut validator_set.pending_inactive, validator_info);\n\n        event::emit_event<LeaveValidatorSetEvent>(\n            &mut stake_pool.leave_validator_set_events,\n            LeaveValidatorSetEvent {\n                pool_address,\n            },\n        );\n    }\n\n    /// Returns true if the current validator can still vote in the current epoch.\n    /// This includes validators that requested to leave but are still in the pending_inactive queue and will be removed\n    /// when the epoch starts.\n    public fun is_current_epoch_validator(pool_address: address): bool acquires ValidatorSet {\n        let validator_state = get_validator_state(pool_address);\n        validator_state == VALIDATOR_STATUS_ACTIVE || validator_state == VALIDATOR_STATUS_PENDING_INACTIVE\n    }\n\n    /// Update the validator performance (proposal statistics). This is only called by block::prologue().\n    /// This function cannot abort.\n    public(friend) fun update_performance_statistics(proposer_index_optional: vector<u64>, failed_proposer_indices: vector<u64>) acquires ValidatorPerformance {\n        // Validator set cannot change until the end of the epoch, so the validator index in arguments should\n        // match with those of the validators in ValidatorPerformance resource.\n        let validator_perf = borrow_global_mut<ValidatorPerformance>(@aptos_framework);\n        let validator_len = vector::length(&validator_perf.validators);\n\n        // proposer_indices is a vector because it can be missing (for NilBlocks)\n        if (vector::length(&proposer_index_optional) >= 1) {\n            let proposer_index = *vector::borrow(&proposer_index_optional, 0);\n            // Here, and in all other vector::borrow, skip any validator indices that are out of bounds,\n            // this ensures that this function doesn't abort if there are out of bounds errors.\n            if (proposer_index < validator_len) {\n                let validator = vector::borrow_mut(&mut validator_perf.validators, proposer_index);\n                validator.successful_proposals = validator.successful_proposals + 1;\n            };\n        };\n\n        let f = 0;\n        let f_len = vector::length(&failed_proposer_indices);\n        while (f < f_len) {\n            let validator_index = *vector::borrow(&failed_proposer_indices, f);\n            if (validator_index < validator_len) {\n                let validator = vector::borrow_mut(&mut validator_perf.validators, validator_index);\n                validator.failed_proposals = validator.failed_proposals + 1;\n            };\n            f = f + 1;\n        };\n    }\n\n    /// Triggers at epoch boundary. This function shouldn't abort.\n    ///\n    /// 1. Distribute rewards to stake pools of active and pending inactive validators (requested to leave but not yet\n    /// removed).\n    /// 2. Officially move pending active stake to active and move pending inactive stake to inactive.\n    /// The staking pool's voting power in this new epoch will be updated to the total active stake.\n    /// 3. Add pending active validators to the active set if they satisfy requirements so they can vote and remove\n    /// pending inactive validators so they no longer can vote.\n    /// 4. The validator's voting power in the validator set is updated to be the corresponding staking pool's voting\n    /// power.\n    public(friend) fun on_new_epoch() acquires StakePool, AptosCoinCapabilities, ValidatorConfig, ValidatorPerformance, ValidatorSet {\n        let validator_set = borrow_global_mut<ValidatorSet>(@aptos_framework);\n        let config = staking_config::get();\n        let validator_perf = borrow_global_mut<ValidatorPerformance>(@aptos_framework);\n\n        // Process pending stake and distribute rewards for each currently active validator.\n        let i = 0;\n        let len = vector::length(&validator_set.active_validators);\n        while (i < len) {\n            let validator = vector::borrow(&validator_set.active_validators, i);\n            update_stake_pool(validator_perf, validator.addr, &config);\n            i = i + 1;\n        };\n\n        // Process pending stake and distribute rewards for each currently pending_inactive validator (requested to\n        // leave but not removed yet).\n        let i = 0;\n        let len = vector::length(&validator_set.pending_inactive);\n        while (i < len) {\n            let validator = vector::borrow(&validator_set.pending_inactive, i);\n            update_stake_pool(validator_perf, validator.addr, &config);\n            i = i + 1;\n        };\n\n        // Activate currently pending_active validators.\n        append(&mut validator_set.active_validators, &mut validator_set.pending_active);\n\n        // Officially deactivate all pending_inactive validators. They will now no longer receive rewards.\n        validator_set.pending_inactive = vector::empty();\n\n        let (minimum_stake, _) = staking_config::get_required_stake(&config);\n        let recurring_lockup_duration_secs = staking_config::get_recurring_lockup_duration(&config);\n        // Reset performance scores and update active validator set (so network address/public key change takes effect).\n        let i = 0;\n        let validator_index = 0;\n        let len = vector::length(&validator_set.active_validators);\n        let next_epoch_validators = vector::empty();\n        validator_perf.validators = vector::empty();\n        while (i < len) {\n            let old_validator_info = vector::borrow_mut(&mut validator_set.active_validators, i);\n            let pool_address = old_validator_info.addr;\n            let validator_config = borrow_global_mut<ValidatorConfig>(pool_address);\n            validator_config.validator_index = validator_index;\n            let stake_pool = borrow_global_mut<StakePool>(pool_address);\n            let new_validator_info = generate_validator_info(pool_address, stake_pool, *validator_config);\n\n            // A validator needs at least the min stake required to join the validator set.\n            i = i + 1;\n            if (new_validator_info.voting_power < minimum_stake) {\n                continue\n            };\n\n            // index only increments if the node joins the validator set\n            validator_index = validator_index + 1;\n            validator_set.total_voting_power =\n                validator_set.total_voting_power + (new_validator_info.voting_power as u128);\n            validator_set.total_joining_power = 0;\n            vector::push_back(&mut next_epoch_validators, new_validator_info);\n            vector::push_back(&mut validator_perf.validators, IndividualValidatorPerformance {\n                successful_proposals: 0,\n                failed_proposals: 0,\n            });\n\n            // Automatically renew a validator's lockup for validators that will still be in the validator set in the\n            // next epoch.\n            let stake_pool = borrow_global_mut<StakePool>(pool_address);\n            if (stake_pool.locked_until_secs <= timestamp::now_seconds()) {\n                stake_pool.locked_until_secs =\n                    timestamp::now_seconds() + recurring_lockup_duration_secs;\n            };\n        };\n\n        validator_set.active_validators = next_epoch_validators;\n    }\n\n    /// Update individual validator's stake pool\n    /// 1. distribute rewards to active/pending_inactive delegations\n    /// 2. process pending_active, pending_inactive correspondingly\n    /// This function shouldn't abort.\n    fun update_stake_pool(\n        validator_perf: &ValidatorPerformance,\n        pool_address: address,\n        staking_config: &StakingConfig,\n    ) acquires StakePool, AptosCoinCapabilities, ValidatorConfig {\n        let stake_pool = borrow_global_mut<StakePool>(pool_address);\n        let validator_config = borrow_global<ValidatorConfig>(pool_address);\n        let cur_validator_perf = vector::borrow(&validator_perf.validators, validator_config.validator_index);\n        let num_successful_proposals = cur_validator_perf.successful_proposals;\n        let num_total_proposals = cur_validator_perf.successful_proposals + cur_validator_perf.failed_proposals;\n\n        let (rewards_rate, rewards_rate_denominator) = staking_config::get_reward_rate(staking_config);\n        let rewards_amount = distribute_rewards(\n             &mut stake_pool.active,\n            num_successful_proposals,\n            num_total_proposals,\n            rewards_rate,\n            rewards_rate_denominator\n        );\n        rewards_amount = rewards_amount + distribute_rewards(\n            &mut stake_pool.pending_inactive,\n            num_successful_proposals,\n            num_total_proposals,\n            rewards_rate,\n            rewards_rate_denominator\n        );\n\n        // Pending active stake can now be active.\n        coin::merge<AptosCoin>(&mut stake_pool.active, coin::extract_all<AptosCoin>(&mut stake_pool.pending_active));\n\n        // Pending inactive stake is only fully unlocked and moved into inactive if the current lockup cycle has expired\n        let current_lockup_expiration = stake_pool.locked_until_secs;\n        if (timestamp::now_seconds() >= current_lockup_expiration) {\n            coin::merge<AptosCoin>(\n                &mut stake_pool.inactive,\n                coin::extract_all<AptosCoin>(&mut stake_pool.pending_inactive),\n            );\n        };\n\n        event::emit_event<DistributeRewardsEvent>(\n            &mut stake_pool.distribute_rewards_events,\n            DistributeRewardsEvent {\n                pool_address,\n                rewards_amount,\n            },\n        );\n    }\n\n    /// Calculate the rewards amount.\n    fun calculate_rewards_amount(\n        stake_amount: u64,\n        num_successful_proposals: u64,\n        num_total_proposals: u64,\n        rewards_rate: u64,\n        rewards_rate_denominator: u64,\n    ): u64 {\n        // The rewards amount is equal to (stake amount * rewards rate * performance multiplier).\n        // We do multiplication in u128 before division to avoid the overflow and minimize the rounding error.\n        let rewards_numerator = (stake_amount as u128) * (rewards_rate as u128) * (num_successful_proposals as u128);\n        let rewards_denominator = (rewards_rate_denominator as u128) * (num_total_proposals as u128);\n        if (rewards_denominator > 0) {\n            ((rewards_numerator / rewards_denominator) as u64)\n        } else {\n            0\n        }\n    }\n\n    /// Mint rewards corresponding to current epoch's `stake` and `num_successful_votes`.\n    fun distribute_rewards(\n        stake: &mut Coin<AptosCoin>,\n        num_successful_proposals: u64,\n        num_total_proposals: u64,\n        rewards_rate: u64,\n        rewards_rate_denominator: u64,\n    ): u64 acquires AptosCoinCapabilities {\n        let stake_amount = coin::value<AptosCoin>(stake);\n        let rewards_amount = if (stake_amount > 0) {\n            calculate_rewards_amount(stake_amount, num_successful_proposals, num_total_proposals, rewards_rate, rewards_rate_denominator)\n        } else {\n            0\n        };\n        if (rewards_amount > 0) {\n            let mint_cap = &borrow_global<AptosCoinCapabilities>(@aptos_framework).mint_cap;\n            let rewards = coin::mint<AptosCoin>(rewards_amount, mint_cap);\n            coin::merge(stake, rewards);\n        };\n        rewards_amount\n    }\n\n    fun append<T>(v1: &mut vector<T>, v2: &mut vector<T>) {\n        while (!vector::is_empty(v2)) {\n            vector::push_back(v1, vector::pop_back(v2));\n        }\n    }\n\n    fun find_validator(v: &vector<ValidatorInfo>, addr: address): Option<u64> {\n        let i = 0;\n        let len = vector::length(v);\n        while (i < len) {\n            if (vector::borrow(v, i).addr == addr) {\n                return option::some(i)\n            };\n            i = i + 1;\n        };\n        option::none()\n    }\n\n    fun generate_validator_info(addr: address, stake_pool: &StakePool, config: ValidatorConfig): ValidatorInfo {\n        let voting_power = get_next_epoch_voting_power(stake_pool);\n        ValidatorInfo {\n            addr,\n            voting_power,\n            config,\n        }\n    }\n\n    /// Returns validator's next epoch voting power, including pending_active, active, and pending_inactive stake.\n    fun get_next_epoch_voting_power(stake_pool: &StakePool): u64 {\n        coin::value<AptosCoin>(&stake_pool.pending_active) +\n            coin::value<AptosCoin>(&stake_pool.active) +\n            coin::value<AptosCoin>(&stake_pool.pending_inactive)\n    }\n\n    fun update_voting_power_increase(increase_amount: u64) acquires ValidatorSet {\n        let validator_set = borrow_global_mut<ValidatorSet>(@aptos_framework);\n        let voting_power_increase_limit =\n            (staking_config::get_voting_power_increase_limit(&staking_config::get()) as u128);\n        validator_set.total_joining_power = validator_set.total_joining_power + (increase_amount as u128);\n\n        // Only validator voting power increase if the current validator set's voting power > 0.\n        if (validator_set.total_voting_power > 0) {\n            assert!(\n                validator_set.total_joining_power <= validator_set.total_voting_power * voting_power_increase_limit / 100,\n                error::invalid_argument(EVOTING_POWER_INCREASE_EXCEEDS_LIMIT),\n            );\n        }\n    }\n\n    #[test_only]\n    use aptos_framework::aptos_coin;\n\n    #[test_only]\n    const CONSENSUS_KEY_1: vector<u8> = x\"8a54b92288d4ba5073d3a52e80cc00ae9fbbc1cc5b433b46089b7804c38a76f00fc64746c7685ee628fc2d0b929c2294\";\n    #[test_only]\n    const CONSENSUS_POP_1: vector<u8> = x\"a9d6c1f1270f2d1454c89a83a4099f813a56dc7db55591d46aa4e6ccae7898b234029ba7052f18755e6fa5e6b73e235f14efc4e2eb402ca2b8f56bad69f965fc11b7b25eb1c95a06f83ddfd023eac4559b6582696cfea97b227f4ce5bdfdfed0\";\n\n    #[test_only]\n    const CONSENSUS_KEY_2: vector<u8> = x\"a344eb437bcd8096384206e1be9c80be3893fd7fdf867acce5a048e5b1546028bdac4caf419413fd16d4d6a609e0b0a3\";\n    #[test_only]\n    const CONSENSUS_POP_2: vector<u8> = x\"909d3a378ad5c17faf89f7a2062888100027eda18215c7735f917a4843cd41328b42fa4242e36dedb04432af14608973150acbff0c5d3f325ba04b287be9747398769a91d4244689cfa9c535a5a4d67073ee22090d5ab0a88ab8d2ff680e991e\";\n\n    #[test_only]\n    const EPOCH_DURATION: u64 = 60;\n\n    #[test_only]\n    const LOCKUP_CYCLE_SECONDS: u64 = 3600;\n\n    #[test_only]\n    public entry fun test_setup(aptos_framework: &signer) {\n        timestamp::set_time_has_started_for_testing(aptos_framework);\n        initialize(aptos_framework);\n        staking_config::initialize_for_test(aptos_framework, 100, 10000, LOCKUP_CYCLE_SECONDS, true, 1, 100, 1000000);\n    }\n\n    #[test(aptos_framework = @aptos_framework, validator = @0x123)]\n    #[expected_failure(abort_code = 0x10009)]\n    public entry fun test_inactive_validator_cannot_add_stake_if_exceeding_max_allowed(\n        aptos_framework: signer,\n        validator: signer,\n    ) acquires OwnerCapability, StakePool, ValidatorConfig, ValidatorSet {\n        test_setup(&aptos_framework);\n        let (burn_cap, mint_cap) = aptos_coin::initialize_for_test(&aptos_framework);\n        register_mint_stake(&validator, &mint_cap);\n        let validator_address = signer::address_of(&validator);\n        coin::deposit(validator_address, coin::mint(9901, &mint_cap));\n        store_aptos_coin_mint_cap(&aptos_framework, mint_cap);\n        coin::destroy_burn_cap<AptosCoin>(burn_cap);\n\n        // Add more stake to exceed max. This should fail.\n        add_stake(&validator, 9901);\n    }\n\n    #[test(aptos_framework = @0x1, validator_1 = @0x123, validator_2 = @0x234)]\n    #[expected_failure(abort_code = 0x10009)]\n    public entry fun test_pending_active_validator_cannot_add_stake_if_exceeding_max_allowed(\n        aptos_framework: signer,\n        validator_1: signer,\n        validator_2: signer,\n    ) acquires AptosCoinCapabilities, OwnerCapability, StakePool, ValidatorConfig, ValidatorPerformance, ValidatorSet {\n        timestamp::set_time_has_started_for_testing(&aptos_framework);\n        initialize(&aptos_framework);\n        staking_config::initialize_for_test(&aptos_framework, 50, 10000, LOCKUP_CYCLE_SECONDS, true, 1, 10, 100000);\n        let (burn_cap, mint_cap) = aptos_coin::initialize_for_test(&aptos_framework);\n        register_mint_stake(&validator_1, &mint_cap);\n        register_mint_stake(&validator_2, &mint_cap);\n        let validator_2_address = signer::address_of(&validator_2);\n        coin::deposit(validator_2_address, coin::mint(9901, &mint_cap));\n        store_aptos_coin_mint_cap(&aptos_framework, mint_cap);\n        coin::destroy_burn_cap<AptosCoin>(burn_cap);\n        join_validator_set(&validator_1, signer::address_of(&validator_1));\n        end_epoch();\n\n        // Join validator set but epoch has not ended so validator is in pending_active state.\n        join_validator_set(&validator_2, validator_2_address);\n\n        // Add more stake to exceed max. This should fail.\n        add_stake(&validator_2, 9901);\n    }\n\n    #[test(aptos_framework = @aptos_framework, validator = @0x123)]\n    #[expected_failure(abort_code = 0x10009)]\n    public entry fun test_active_validator_cannot_add_stake_if_exceeding_max_allowed(\n        aptos_framework: signer,\n        validator: signer,\n    ) acquires AptosCoinCapabilities, OwnerCapability, StakePool, ValidatorConfig, ValidatorPerformance, ValidatorSet {\n        test_setup(&aptos_framework);\n        let (burn_cap, mint_cap) = aptos_coin::initialize_for_test(&aptos_framework);\n        register_mint_stake(&validator, &mint_cap);\n        let validator_address = signer::address_of(&validator);\n        coin::deposit(validator_address, coin::mint(9901, &mint_cap));\n        store_aptos_coin_mint_cap(&aptos_framework, mint_cap);\n        coin::destroy_burn_cap<AptosCoin>(burn_cap);\n\n        // Join validator set and wait for epoch end to become active.\n        join_validator_set(&validator, validator_address);\n        end_epoch();\n\n        // Add more stake to exceed max. This should fail.\n        add_stake(&validator, 9901);\n    }\n\n    #[test(aptos_framework = @aptos_framework, validator = @0x123)]\n    #[expected_failure(abort_code = 0x10009)]\n    public entry fun test_active_validator_with_pending_inactive_stake_cannot_add_stake_if_exceeding_max_allowed(\n        aptos_framework: signer,\n        validator: signer,\n    ) acquires AptosCoinCapabilities, OwnerCapability, StakePool, ValidatorConfig, ValidatorPerformance, ValidatorSet {\n        test_setup(&aptos_framework);\n        let (burn_cap, mint_cap) = aptos_coin::initialize_for_test(&aptos_framework);\n        register_mint_stake(&validator, &mint_cap);\n        let validator_address = signer::address_of(&validator);\n        coin::deposit(validator_address, coin::mint(9901, &mint_cap));\n        store_aptos_coin_mint_cap(&aptos_framework, mint_cap);\n        coin::destroy_burn_cap<AptosCoin>(burn_cap);\n\n        // Join validator set and wait for epoch end to become active.\n        join_validator_set(&validator, validator_address);\n        end_epoch();\n\n        // Request to unlock 50 coins, which go to pending_inactive. Validator 50 remaining in active.\n        unlock(&validator, 50);\n        assert_validator_state(validator_address, 50, 0, 0, 50, 0);\n\n        // Add 9901 more. Total stake is 50 (active) + 50 (pending_inactive) + 9901 > 10000 so still exceeding max.\n        add_stake(&validator, 9901);\n    }\n\n    #[test(aptos_framework = @aptos_framework, validator = @0x123, other_validator = @0x234)]\n    #[expected_failure(abort_code = 0x10009)]\n    public entry fun test_pending_inactivecannot_add_stake_if_exceeding_max_allowed(\n        aptos_framework: signer,\n        validator: signer,\n        other_validator: signer,\n    ) acquires AptosCoinCapabilities, OwnerCapability, StakePool, ValidatorConfig, ValidatorPerformance, ValidatorSet {\n        test_setup(&aptos_framework);\n        let (burn_cap, mint_cap) = aptos_coin::initialize_for_test(&aptos_framework);\n        register_mint_stake(&validator, &mint_cap);\n        register_mint_stake(&other_validator, &mint_cap);\n        let validator_address = signer::address_of(&validator);\n        coin::deposit(validator_address, coin::mint(9901, &mint_cap));\n        store_aptos_coin_mint_cap(&aptos_framework, mint_cap);\n        coin::destroy_burn_cap<AptosCoin>(burn_cap);\n\n        // Join validator set and wait for epoch end to become active.\n        join_validator_set(&validator, validator_address);\n        // Need another validator in the set so the first validator can leave later.\n        join_validator_set(&other_validator, signer::address_of(&other_validator));\n        end_epoch();\n\n        // Leave validator set so validator is in pending_inactive state.\n        leave_validator_set(&validator, validator_address);\n\n        // Add 9901 more. Total stake is 50 (active) + 50 (pending_inactive) + 9901 > 10000 so still exceeding max.\n        add_stake(&validator, 9901);\n    }\n\n    #[test(aptos_framework = @aptos_framework, validator = @0x123)]\n    public entry fun test_end_to_end(\n        aptos_framework: signer,\n        validator: signer,\n    ) acquires OwnerCapability, StakePool, AptosCoinCapabilities, ValidatorConfig, ValidatorPerformance, ValidatorSet {\n        test_setup(&aptos_framework);\n        let validator_address = signer::address_of(&validator);\n        join_test_staking(&aptos_framework, &validator, true);\n\n        // Validator has a lockup now that they've joined the validator set.\n        assert!(get_remaining_lockup_secs(validator_address) == LOCKUP_CYCLE_SECONDS, 1);\n\n        // Validator adds more stake while already being active.\n        // The added stake should go to pending_active to wait for activation when next epoch starts.\n        add_stake(&validator, 100);\n        assert!(coin::balance<AptosCoin>(validator_address) == 800, 2);\n        assert_validator_state(validator_address, 100, 0, 100, 0, 0);\n\n        // Pending_active stake is activated in the new epoch.\n        // Rewards of 1 coin are also distributed for the existing active stake of 100 coins.\n        end_epoch();\n        assert!(get_validator_state(validator_address) == VALIDATOR_STATUS_ACTIVE, 3);\n        assert_validator_state(validator_address, 201, 0, 0, 0, 0);\n\n        // Request unlock of 100 coins. These 100 coins are moved to pending_inactive and will be unlocked when the\n        // current lockup expires.\n        unlock(&validator, 100);\n        assert_validator_state(validator_address, 101, 0, 0, 100, 0);\n\n        // Enough time has passed so the current lockup cycle should have ended.\n        // The first epoch after the lockup cycle ended should automatically move unlocked (pending_inactive) stake\n        // to inactive.\n        timestamp::fast_forward_seconds(LOCKUP_CYCLE_SECONDS);\n        end_epoch();\n        // Rewards were also minted to pending_inactive, which got all moved to inactive.\n        assert_validator_state(validator_address, 102, 101, 0, 0, 0);\n        // Lockup is renewed and validator is still active.\n        assert!(get_validator_state(validator_address) == VALIDATOR_STATUS_ACTIVE, 4);\n        assert!(get_remaining_lockup_secs(validator_address) == LOCKUP_CYCLE_SECONDS, 5);\n\n        // Validator withdraws from inactive stake multiple times.\n        withdraw(&validator, 50);\n        assert!(coin::balance<AptosCoin>(validator_address) == 850, 6);\n        assert_validator_state(validator_address, 102, 51, 0, 0, 0);\n        withdraw(&validator, 51);\n        assert!(coin::balance<AptosCoin>(validator_address) == 901, 7);\n        assert_validator_state(validator_address, 102, 0, 0, 0, 0);\n\n        // Enough time has passed again and the validator's lockup is renewed once more. Validator is still active.\n        timestamp::fast_forward_seconds(LOCKUP_CYCLE_SECONDS);\n        end_epoch();\n        assert!(get_validator_state(validator_address) == VALIDATOR_STATUS_ACTIVE, 8);\n        assert!(get_remaining_lockup_secs(validator_address) == LOCKUP_CYCLE_SECONDS, 9);\n    }\n\n    #[test(aptos_framework = @aptos_framework, validator = @0x123)]\n    public entry fun test_inactive_validator_with_existing_lockup_join_validator_set(\n        aptos_framework: signer,\n        validator: signer,\n    ) acquires OwnerCapability, StakePool, AptosCoinCapabilities, ValidatorConfig, ValidatorPerformance, ValidatorSet {\n        test_setup(&aptos_framework);\n\n        let (burn_cap, mint_cap) = aptos_coin::initialize_for_test(&aptos_framework);\n        register_mint_stake(&validator, &mint_cap);\n        store_aptos_coin_mint_cap(&aptos_framework, mint_cap);\n        coin::destroy_burn_cap<AptosCoin>(burn_cap);\n\n        // Validator sets lockup before even joining the set and lets half of lockup pass by.\n        increase_lockup(&validator);\n        timestamp::fast_forward_seconds(LOCKUP_CYCLE_SECONDS / 2);\n        let validator_address = signer::address_of(&validator);\n        assert!(get_remaining_lockup_secs(validator_address) == LOCKUP_CYCLE_SECONDS / 2, 1);\n\n        // Join the validator set with an existing lockup\n        join_validator_set(&validator, validator_address);\n\n        // Validator is added to the set but lockup time shouldn't have changed.\n        end_epoch();\n        assert!(get_validator_state(validator_address) == VALIDATOR_STATUS_ACTIVE, 2);\n        assert!(get_remaining_lockup_secs(validator_address) == LOCKUP_CYCLE_SECONDS / 2 - EPOCH_DURATION, 3);\n        assert_validator_state(validator_address, 100, 0, 0, 0, 0);\n    }\n\n    #[test(aptos_framework = @aptos_framework, validator_1 = @0x123, validator_2 = @0x234)]\n    #[expected_failure(abort_code = 0x10013)]\n    public entry fun test_inactive_validator_cannot_join_if_exceed_increase_limit(\n        aptos_framework: signer,\n        validator_1: signer,\n        validator_2: signer,\n    ) acquires OwnerCapability, StakePool, AptosCoinCapabilities, ValidatorConfig, ValidatorPerformance, ValidatorSet {\n        timestamp::set_time_has_started_for_testing(&aptos_framework);\n        initialize(&aptos_framework);\n        // Only 50% voting power increase is allowed in each epoch.\n        staking_config::initialize_for_test(&aptos_framework, 50, 10000, LOCKUP_CYCLE_SECONDS, true, 1, 10, 50);\n        let (burn_cap, mint_cap) = aptos_coin::initialize_for_test(&aptos_framework);\n        register_mint_stake(&validator_1, &mint_cap);\n        register_mint_stake(&validator_2, &mint_cap);\n        store_aptos_coin_mint_cap(&aptos_framework, mint_cap);\n        coin::destroy_burn_cap<AptosCoin>(burn_cap);\n\n        // Validator 1 needs to be in the set so validator 2's added stake counts against the limit.\n        join_validator_set(&validator_1, signer::address_of(&validator_1));\n        end_epoch();\n\n        // Validator 2 joins the validator set but their stake would lead to exceeding the voting power increase limit.\n        // Therefore, this should fail.\n        join_validator_set(&validator_2, signer::address_of(&validator_2));\n    }\n\n    #[test(aptos_framework = @aptos_framework, validator_1 = @0x123, validator_2 = @0x234)]\n    public entry fun test_pending_active_validator_can_add_more_stake(\n        aptos_framework: signer,\n        validator_1: signer,\n        validator_2: signer,\n    ) acquires OwnerCapability, StakePool, AptosCoinCapabilities, ValidatorConfig, ValidatorPerformance, ValidatorSet {\n        timestamp::set_time_has_started_for_testing(&aptos_framework);\n        initialize(&aptos_framework);\n        staking_config::initialize_for_test(&aptos_framework, 50, 10000, LOCKUP_CYCLE_SECONDS, true, 1, 10, 200);\n        let (burn_cap, mint_cap) = aptos_coin::initialize_for_test(&aptos_framework);\n        register_mint_stake(&validator_1, &mint_cap);\n        register_mint_stake(&validator_2, &mint_cap);\n        store_aptos_coin_mint_cap(&aptos_framework, mint_cap);\n        coin::destroy_burn_cap<AptosCoin>(burn_cap);\n        join_validator_set(&validator_1, signer::address_of(&validator_1));\n        end_epoch();\n\n        // Add more stake while still pending_active.\n        let validator_2_address = signer::address_of(&validator_2);\n        join_validator_set(&validator_2, validator_2_address);\n        assert!(get_validator_state(validator_2_address) == VALIDATOR_STATUS_PENDING_ACTIVE, 0);\n        add_stake(&validator_2, 100);\n        assert_validator_state(validator_2_address, 200, 0, 0, 0, 0);\n    }\n\n    #[test(aptos_framework = @aptos_framework, validator_1 = @0x123, validator_2 = @0x234)]\n    #[expected_failure(abort_code = 0x10013)]\n    public entry fun test_pending_active_validator_cannot_add_more_stake_than_limit(\n        aptos_framework: signer,\n        validator_1: signer,\n        validator_2: signer,\n    ) acquires OwnerCapability, StakePool, AptosCoinCapabilities, ValidatorConfig, ValidatorPerformance, ValidatorSet {\n        timestamp::set_time_has_started_for_testing(&aptos_framework);\n        initialize(&aptos_framework);\n        // 100% voting power increase is allowed in each epoch.\n        staking_config::initialize_for_test(&aptos_framework, 50, 10000, LOCKUP_CYCLE_SECONDS, true, 1, 10, 100);\n        let (burn_cap, mint_cap) = aptos_coin::initialize_for_test(&aptos_framework);\n        register_mint_stake(&validator_1, &mint_cap);\n        register_mint_stake(&validator_2, &mint_cap);\n        store_aptos_coin_mint_cap(&aptos_framework, mint_cap);\n        coin::destroy_burn_cap<AptosCoin>(burn_cap);\n\n        // Validator 1 needs to be in the set so validator 2's added stake counts against the limit.\n        join_validator_set(&validator_1, signer::address_of(&validator_1));\n        end_epoch();\n\n        // Validator 2 joins the validator set but epoch has not ended so they're still pending_active.\n        // Current voting power increase is already 100%. This is not failing yet.\n        join_validator_set(&validator_2, signer::address_of(&validator_2));\n        // Add more stake, which now exceeds the 100% limit. This should fail.\n        add_stake(&validator_2, 1);\n    }\n\n    #[test(aptos_framework = @aptos_framework, validator = @0x123)]\n    #[expected_failure(abort_code = 0x10013)]\n    public entry fun test_active_validator_cannot_add_more_stake_than_limit(\n        aptos_framework: signer,\n        validator: signer,\n    ) acquires OwnerCapability, StakePool, AptosCoinCapabilities, ValidatorConfig, ValidatorPerformance, ValidatorSet {\n        timestamp::set_time_has_started_for_testing(&aptos_framework);\n        initialize(&aptos_framework);\n        // Only 50% voting power increase is allowed in each epoch.\n        staking_config::initialize_for_test(&aptos_framework, 50, 10000, LOCKUP_CYCLE_SECONDS, true, 1, 10, 50);\n        join_test_staking(&aptos_framework, &validator, true);\n\n        // Add more than 50% limit. This should fail.\n        add_stake(&validator, 51);\n    }\n\n    #[test(aptos_framework = @aptos_framework, validator = @0x123)]\n    public entry fun test_active_validator_unlock_partial_stake(\n        aptos_framework: signer,\n        validator: signer,\n    ) acquires OwnerCapability, StakePool, AptosCoinCapabilities, ValidatorConfig, ValidatorPerformance, ValidatorSet {\n        timestamp::set_time_has_started_for_testing(&aptos_framework);\n        initialize(&aptos_framework);\n        // Reward rate = 10%.\n        staking_config::initialize_for_test(&aptos_framework, 50, 10000, LOCKUP_CYCLE_SECONDS, true, 1, 10, 100);\n        join_test_staking(&aptos_framework, &validator, true);\n\n        // Unlock half of the coins.\n        let validator_address = signer::address_of(&validator);\n        assert!(get_remaining_lockup_secs(validator_address) == LOCKUP_CYCLE_SECONDS, 1);\n        unlock(&validator, 50);\n        assert_validator_state(validator_address, 50, 0, 0, 50, 0);\n\n        // Enough time has passed so the current lockup cycle should have ended.\n        // 50 coins should have unlocked while the remaining 51 (50 + rewards) should stay locked for another cycle.\n        timestamp::fast_forward_seconds(LOCKUP_CYCLE_SECONDS);\n        end_epoch();\n        assert!(get_validator_state(validator_address) == VALIDATOR_STATUS_ACTIVE, 2);\n        // Validator received rewards in both active and pending inactive.\n        assert_validator_state(validator_address, 55, 55, 0, 0, 0);\n        assert!(get_remaining_lockup_secs(validator_address) == LOCKUP_CYCLE_SECONDS, 3);\n    }\n\n    #[test(aptos_framework = @aptos_framework, validator = @0x123)]\n    public entry fun test_active_validator_can_withdraw_all_stake_and_rewards_at_once(\n        aptos_framework: signer,\n        validator: signer,\n    ) acquires OwnerCapability, StakePool, AptosCoinCapabilities, ValidatorConfig, ValidatorPerformance, ValidatorSet {\n        test_setup(&aptos_framework);\n        join_test_staking(&aptos_framework, &validator, true);\n        let validator_address = signer::address_of(&validator);\n        assert!(get_remaining_lockup_secs(validator_address) == LOCKUP_CYCLE_SECONDS, 0);\n\n        // One more epoch passes to generate rewards.\n        end_epoch();\n        assert!(get_validator_state(validator_address) == VALIDATOR_STATUS_ACTIVE, 1);\n        assert_validator_state(validator_address, 101, 0, 0, 0, 0);\n\n        // Unlock all coins while still having a lockup.\n        assert!(get_remaining_lockup_secs(validator_address) == LOCKUP_CYCLE_SECONDS - EPOCH_DURATION, 2);\n        unlock(&validator, 101);\n        assert_validator_state(validator_address, 0, 0, 0, 101, 0);\n\n        // One more epoch passes while the current lockup cycle (3600 secs) has not ended.\n        timestamp::fast_forward_seconds(1000);\n        end_epoch();\n        // Validator should not be removed from the validator set since their 100 coins in pending_inactive state should\n        // still count toward voting power.\n        assert!(get_validator_state(validator_address) == VALIDATOR_STATUS_ACTIVE, 3);\n        assert_validator_state(validator_address, 0, 0, 0, 102, 0);\n\n        // Enough time has passed so the current lockup cycle should have ended. Funds are now fully unlocked.\n        timestamp::fast_forward_seconds(LOCKUP_CYCLE_SECONDS);\n        end_epoch();\n        assert_validator_state(validator_address, 0, 103, 0, 0, 0);\n        // Validator ahs been kicked out of the validator set as their stake is 0 now.\n        assert!(get_validator_state(validator_address) == VALIDATOR_STATUS_INACTIVE, 4);\n    }\n\n    #[test(aptos_framework = @aptos_framework, validator = @0x123)]\n    #[expected_failure(abort_code = 0x10005)]\n    public entry fun test_active_validator_unlocking_more_than_available_stake_should_error_out(\n        aptos_framework: signer,\n        validator: signer,\n    ) acquires OwnerCapability, StakePool, AptosCoinCapabilities, ValidatorConfig, ValidatorPerformance, ValidatorSet {\n        test_setup(&aptos_framework);\n        join_test_staking(&aptos_framework, &validator, true);\n\n        // Validator unlocks more stake than they have active. This should error out.\n        unlock(&validator, 200);\n    }\n\n    #[test(aptos_framework = @aptos_framework, validator = @0x123)]\n    public entry fun test_active_validator_withdraw_should_cap_by_inactive_stake(\n        aptos_framework: signer,\n        validator: signer,\n    ) acquires OwnerCapability, StakePool, AptosCoinCapabilities, ValidatorConfig, ValidatorPerformance, ValidatorSet {\n        test_setup(&aptos_framework);\n        join_test_staking(&aptos_framework, &validator, true);\n\n        // Validator unlocks stake.\n        unlock(&validator, 100);\n        // Enough time has passed so the stake is fully unlocked.\n        timestamp::fast_forward_seconds(LOCKUP_CYCLE_SECONDS);\n        end_epoch();\n\n        // Validator can only withdraw a max of 100 unlocked coins even if they request to withdraw more than 100.\n        withdraw(&validator, 200);\n        let validator_address = signer::address_of(&validator);\n        assert!(coin::balance<AptosCoin>(validator_address) == 1001, 2);\n        assert_validator_state(validator_address, 0, 0, 0, 0, 0);\n    }\n\n    #[test(aptos_framework = @aptos_framework, validator = @0x123)]\n    public entry fun test_active_validator_having_insufficient_remaining_stake_after_withdrawal_gets_kicked(\n        aptos_framework: signer,\n        validator: signer,\n    ) acquires OwnerCapability, StakePool, AptosCoinCapabilities, ValidatorConfig, ValidatorPerformance, ValidatorSet {\n        test_setup(&aptos_framework);\n        join_test_staking(&aptos_framework, &validator, true);\n\n        // Unlock enough coins that the remaining is not enough to meet the min required.\n        let validator_address = signer::address_of(&validator);\n        assert!(get_remaining_lockup_secs(validator_address) == LOCKUP_CYCLE_SECONDS, 1);\n        unlock(&validator, 50);\n        assert_validator_state(validator_address, 50, 0, 0, 50, 0);\n\n        // Enough time has passed so the current lockup cycle should have ended.\n        // 50 coins should have unlocked while the remaining 51 (50 + rewards) is not enough so the validator is kicked\n        // from the validator set.\n        assert!(get_validator_state(validator_address) == VALIDATOR_STATUS_ACTIVE, 2);\n        timestamp::fast_forward_seconds(LOCKUP_CYCLE_SECONDS);\n        end_epoch();\n        assert!(get_validator_state(validator_address) == VALIDATOR_STATUS_INACTIVE, 2);\n        assert_validator_state(validator_address, 50, 50, 0, 0, 0);\n        // Lockup is no longer renewed since the validator is no longer a part of the validator set.\n        assert!(get_remaining_lockup_secs(validator_address) == 0, 3);\n    }\n\n    #[test(aptos_framework = @aptos_framework, validator = @0x123, validator_2 = @0x234)]\n    public entry fun test_active_validator_leaves_staking_but_still_has_a_lockup(\n        aptos_framework: signer,\n        validator: signer,\n        validator_2: signer,\n    ) acquires OwnerCapability, StakePool, AptosCoinCapabilities, ValidatorConfig, ValidatorPerformance, ValidatorSet {\n        test_setup(&aptos_framework);\n        let (burn_cap, mint_cap) = aptos_coin::initialize_for_test(&aptos_framework);\n        register_mint_stake(&validator, &mint_cap);\n        register_mint_stake(&validator_2, &mint_cap);\n        store_aptos_coin_mint_cap(&aptos_framework, mint_cap);\n        coin::destroy_burn_cap<AptosCoin>(burn_cap);\n        let validator_address = signer::address_of(&validator);\n        join_validator_set(&validator, validator_address);\n        // We need a second validator here just so the first validator can leave.\n        join_validator_set(&validator_2, signer::address_of(&validator_2));\n        end_epoch();\n\n        // Leave the validator set while still having a lockup.\n        let validator_address = signer::address_of(&validator);\n        assert!(get_remaining_lockup_secs(validator_address) == LOCKUP_CYCLE_SECONDS, 0);\n        leave_validator_set(&validator, validator_address);\n        // Validator is in pending_inactive state but is technically still part of the validator set.\n        assert!(get_validator_state(validator_address) == VALIDATOR_STATUS_PENDING_INACTIVE, 2);\n        assert_validator_state(validator_address, 100, 0, 0, 0, 1);\n        end_epoch();\n\n        // Epoch has ended so validator is no longer part of the validator set.\n        assert!(get_validator_state(validator_address) == VALIDATOR_STATUS_INACTIVE, 3);\n        // However, their stake, including rewards, should still subject to the existing lockup.\n        assert_validator_state(validator_address, 101, 0, 0, 0, 1);\n        assert!(get_remaining_lockup_secs(validator_address) == LOCKUP_CYCLE_SECONDS - EPOCH_DURATION, 4);\n\n        // If they try to unlock, their stake is moved to pending_inactive and would only be withdrawable after the\n        // lockup has expired.\n        unlock(&validator, 50);\n        assert_validator_state(validator_address, 51, 0, 0, 50, 1);\n        // A couple of epochs passed but lockup has not expired so the validator's stake remains the same.\n        end_epoch();\n        end_epoch();\n        end_epoch();\n        assert_validator_state(validator_address, 51, 0, 0, 50, 1);\n        // Fast forward enough so the lockup expires. Now the validator can just call withdraw directly to withdraw\n        // pending_inactive stakes.\n        timestamp::fast_forward_seconds(LOCKUP_CYCLE_SECONDS);\n        withdraw(&validator, 50);\n        assert_validator_state(validator_address, 51, 0, 0, 0, 1);\n    }\n\n    #[test(aptos_framework = @aptos_framework, validator = @0x123, validator_2 = @0x234)]\n    public entry fun test_active_validator_leaves_staking_and_rejoins_with_expired_lockup_should_be_renewed(\n        aptos_framework: signer,\n        validator: signer,\n        validator_2: signer,\n    ) acquires OwnerCapability, StakePool, AptosCoinCapabilities, ValidatorConfig, ValidatorPerformance, ValidatorSet {\n        test_setup(&aptos_framework);\n        let (burn_cap, mint_cap) = aptos_coin::initialize_for_test(&aptos_framework);\n        register_mint_stake(&validator, &mint_cap);\n        register_mint_stake(&validator_2, &mint_cap);\n        store_aptos_coin_mint_cap(&aptos_framework, mint_cap);\n        coin::destroy_burn_cap<AptosCoin>(burn_cap);\n        let validator_address = signer::address_of(&validator);\n        join_validator_set(&validator, validator_address);\n        // We need a second validator here just so the first validator can leave.\n        join_validator_set(&validator_2, signer::address_of(&validator_2));\n        end_epoch();\n\n        // Leave the validator set while still having a lockup.\n        let validator_address = signer::address_of(&validator);\n        assert!(get_remaining_lockup_secs(validator_address) == LOCKUP_CYCLE_SECONDS, 0);\n        leave_validator_set(&validator, validator_address);\n        end_epoch();\n\n        // Fast forward enough so the lockup expires.\n        timestamp::fast_forward_seconds(LOCKUP_CYCLE_SECONDS);\n        assert!(get_remaining_lockup_secs(validator_address) == 0, 1);\n\n        // Validator rejoins the validator set. Once the current epoch ends, their lockup should be automatically\n        // renewed.\n        join_validator_set(&validator, validator_address);\n        end_epoch();\n        assert!(get_validator_state(validator_address) == VALIDATOR_STATUS_ACTIVE, 2);\n        assert!(get_remaining_lockup_secs(validator_address) == LOCKUP_CYCLE_SECONDS, 2);\n    }\n\n    #[test(aptos_framework = @aptos_framework, validator_1 = @0x123, validator_2 = @0x234)]\n    public entry fun test_pending_inactive_validator_does_not_count_in_increase_limit(\n        aptos_framework: signer,\n        validator_1: signer,\n        validator_2: signer,\n    ) acquires OwnerCapability, StakePool, AptosCoinCapabilities, ValidatorConfig, ValidatorPerformance, ValidatorSet {\n        timestamp::set_time_has_started_for_testing(&aptos_framework);\n        initialize(&aptos_framework);\n        // Only 50% voting power increase is allowed in each epoch.\n        staking_config::initialize_for_test(&aptos_framework, 50, 10000, LOCKUP_CYCLE_SECONDS, true, 1, 10, 50);\n        let (burn_cap, mint_cap) = aptos_coin::initialize_for_test(&aptos_framework);\n        register_mint_stake(&validator_1, &mint_cap);\n        register_mint_stake(&validator_2, &mint_cap);\n        store_aptos_coin_mint_cap(&aptos_framework, mint_cap);\n        coin::destroy_burn_cap<AptosCoin>(burn_cap);\n\n        // Validator 1 needs to be in the set so validator 2 can leave later\n        join_validator_set(&validator_1, signer::address_of(&validator_1));\n        join_validator_set(&validator_2, signer::address_of(&validator_2));\n        end_epoch();\n\n        // Validator 2 leaves the validator set. Epoch has not ended so they're still pending_inactive.\n        leave_validator_set(&validator_2, signer::address_of(&validator_2));\n        // Validator 2 adds more stake. This should not succeed as it should not count as a voting power increase.\n        add_stake(&validator_2, 51);\n    }\n\n    #[test(aptos_framework = @0x1, validator_1 = @0x123, validator_2 = @0x234, validator_3 = @0x345)]\n    public entry fun test_multiple_validators_join_and_leave(\n        aptos_framework: signer,\n        validator_1: signer,\n        validator_2: signer,\n        validator_3: signer\n    ) acquires OwnerCapability, StakePool, AptosCoinCapabilities, ValidatorConfig, ValidatorPerformance, ValidatorSet {\n        timestamp::set_time_has_started_for_testing(&aptos_framework);\n        let validator_1_address = signer::address_of(&validator_1);\n        let validator_2_address = signer::address_of(&validator_2);\n        let validator_3_address = signer::address_of(&validator_3);\n\n        initialize(&aptos_framework);\n        staking_config::initialize_for_test(&aptos_framework, 100, 10000, LOCKUP_CYCLE_SECONDS, true, 1, 100, 100);\n\n        let (burn_cap, mint_cap) = aptos_coin::initialize_for_test(&aptos_framework);\n        register_mint_stake(&validator_1, &mint_cap);\n        register_mint_stake(&validator_2, &mint_cap);\n        register_mint_stake(&validator_3, &mint_cap);\n        store_aptos_coin_mint_cap(&aptos_framework, mint_cap);\n        coin::destroy_burn_cap<AptosCoin>(burn_cap);\n\n        // Validator 1 and 2 join the validator set.\n        join_validator_set(&validator_2, validator_2_address);\n        join_validator_set(&validator_1, validator_1_address);\n        end_epoch();\n        assert!(get_validator_state(validator_1_address) == VALIDATOR_STATUS_ACTIVE, 0);\n        assert!(get_validator_state(validator_2_address) == VALIDATOR_STATUS_ACTIVE, 1);\n\n        // Validator indices is the reverse order of the joining order.\n        assert_validator_state(validator_1_address, 100, 0, 0, 0, 0);\n        assert_validator_state(validator_2_address, 100, 0, 0, 0, 1);\n        let validator_set = borrow_global<ValidatorSet>(@aptos_framework);\n        let validator_config_1 = vector::borrow(&validator_set.active_validators, 0);\n        assert!(validator_config_1.addr == validator_1_address, 2);\n        assert!(validator_config_1.config.validator_index == 0, 3);\n        let validator_config_2 = vector::borrow(&validator_set.active_validators, 1);\n        assert!(validator_config_2.addr == validator_2_address, 4);\n        assert!(validator_config_2.config.validator_index == 1, 5);\n\n        // Validator 1 rotates consensus key. Validator 2 leaves. Validator 3 joins.\n        rotate_consensus_key(&validator_1, validator_1_address, CONSENSUS_KEY_2, CONSENSUS_POP_2);\n        leave_validator_set(&validator_2, validator_2_address);\n        join_validator_set(&validator_3, validator_3_address);\n        // Validator 2 is not effectively removed until next epoch.\n        assert!(get_validator_state(validator_2_address) == VALIDATOR_STATUS_PENDING_INACTIVE, 6);\n        assert!(vector::borrow(&borrow_global<ValidatorSet>(@aptos_framework).pending_inactive, 0).addr == validator_2_address, 0);\n        // Validator 3 is not effectively added until next epoch.\n        assert!(get_validator_state(validator_3_address) == VALIDATOR_STATUS_PENDING_ACTIVE, 7);\n        assert!(vector::borrow(&borrow_global<ValidatorSet>(@aptos_framework).pending_active, 0).addr == validator_3_address, 0);\n        assert!(vector::borrow(&borrow_global<ValidatorSet>(@aptos_framework).active_validators, 0).config.consensus_pubkey == CONSENSUS_KEY_1, 0);\n\n        // Changes applied after new epoch\n        end_epoch();\n        assert!(get_validator_state(validator_1_address) == VALIDATOR_STATUS_ACTIVE, 8);\n        assert_validator_state(validator_1_address, 101, 0, 0, 0, 0);\n        assert!(get_validator_state(validator_2_address) == VALIDATOR_STATUS_INACTIVE, 9);\n        // The validator index of validator 2 stays the same but this doesn't matter as the next time they rejoin the\n        // validator set, their index will get set correctly.\n        assert_validator_state(validator_2_address, 101, 0, 0, 0, 1);\n        assert!(get_validator_state(validator_3_address) == VALIDATOR_STATUS_ACTIVE, 10);\n        assert_validator_state(validator_3_address, 100, 0, 0, 0, 1);\n        assert!(vector::borrow(&borrow_global<ValidatorSet>(@aptos_framework).active_validators, 0).config.consensus_pubkey == CONSENSUS_KEY_2, 0);\n\n        // Validators without enough stake will be removed.\n        unlock(&validator_1, 50);\n        timestamp::fast_forward_seconds(LOCKUP_CYCLE_SECONDS);\n        end_epoch();\n        assert!(get_validator_state(validator_1_address) == VALIDATOR_STATUS_INACTIVE, 11);\n    }\n\n    #[test(aptos_framework = @aptos_framework, validator = @0x123)]\n    public entry fun test_delegated_staking_with_owner_cap(\n        aptos_framework: signer,\n        validator: signer,\n    ) acquires OwnerCapability, StakePool, AptosCoinCapabilities, ValidatorConfig, ValidatorPerformance, ValidatorSet {\n        timestamp::set_time_has_started_for_testing(&aptos_framework);\n\n        initialize(&aptos_framework);\n        staking_config::initialize_for_test(&aptos_framework, 100, 10000, LOCKUP_CYCLE_SECONDS, true, 1, 100, 100);\n\n        let (burn_cap, mint_cap) = aptos_coin::initialize_for_test(&aptos_framework);\n        let stake = coin::mint<AptosCoin>(100, &mint_cap);\n        store_aptos_coin_mint_cap(&aptos_framework, mint_cap);\n\n        let pool_address = signer::address_of(&validator);\n        initialize_validator(&validator, CONSENSUS_KEY_1, CONSENSUS_POP_1, vector::empty(), vector::empty());\n        let owner_cap = extract_owner_cap(&validator);\n\n        // Add stake when the validator is not yet activated.\n        add_stake_with_cap(&owner_cap, stake);\n        assert_validator_state(pool_address, 100, 0, 0, 0, 0);\n\n        // Join the validator set with enough stake.\n        join_validator_set(&validator, pool_address);\n        end_epoch();\n        assert!(get_validator_state(pool_address) == VALIDATOR_STATUS_ACTIVE, 0);\n\n        // Unlock the entire stake.\n        unlock_with_cap(100, &owner_cap);\n        assert_validator_state(pool_address, 0, 0, 0, 100, 0);\n        timestamp::fast_forward_seconds(LOCKUP_CYCLE_SECONDS);\n        end_epoch();\n\n        // Withdraw stake + rewards.\n        assert_validator_state(pool_address, 0, 101, 0, 0, 0);\n        let coins = withdraw_with_cap(&owner_cap, 101);\n        assert!(coin::value<AptosCoin>(&coins) == 101, 1);\n        assert_validator_state(pool_address, 0, 0, 0, 0, 0);\n\n        // Operator can separately rotate consensus key.\n        rotate_consensus_key(&validator, pool_address, CONSENSUS_KEY_2, CONSENSUS_POP_2);\n        let validator_config = borrow_global<ValidatorConfig>(pool_address);\n        assert!(validator_config.consensus_pubkey == CONSENSUS_KEY_2, 2);\n\n        // Operator can update network and fullnode addresses.\n        update_network_and_fullnode_addresses(&validator, pool_address, b\"1\", b\"2\");\n        let validator_config = borrow_global<ValidatorConfig>(pool_address);\n        assert!(validator_config.network_addresses == b\"1\", 3);\n        assert!(validator_config.fullnode_addresses == b\"2\", 4);\n\n        let OwnerCapability { pool_address: _ } = owner_cap;\n        coin::burn(coins, &burn_cap);\n        coin::destroy_burn_cap<AptosCoin>(burn_cap);\n    }\n\n    #[test(aptos_framework = @aptos_framework, validator = @0x123)]\n    #[expected_failure(abort_code = 0x1000E)]\n    public entry fun test_validator_cannot_join_post_genesis(\n        aptos_framework: signer,\n        validator: signer,\n    ) acquires AptosCoinCapabilities, OwnerCapability, StakePool, ValidatorConfig, ValidatorPerformance, ValidatorSet {\n        timestamp::set_time_has_started_for_testing(&aptos_framework);\n        initialize(&aptos_framework);\n        staking_config::initialize_for_test(&aptos_framework, 100, 10000, LOCKUP_CYCLE_SECONDS, false, 1, 100, 100);\n\n        // Joining the validator set should fail as post genesis validator set change is not allowed.\n        join_test_staking(&aptos_framework, &validator, true);\n    }\n\n    #[test(aptos_framework = @aptos_framework, validator = @0x123)]\n    #[expected_failure(abort_code = 0x1000E)]\n    public entry fun test_validator_cannot_leave_post_genesis(\n        aptos_framework: signer,\n        validator: signer,\n    ) acquires OwnerCapability, StakePool, AptosCoinCapabilities, ValidatorConfig, ValidatorPerformance, ValidatorSet {\n        timestamp::set_time_has_started_for_testing(&aptos_framework);\n        initialize(&aptos_framework);\n        staking_config::initialize_for_test(&aptos_framework, 100, 10000, LOCKUP_CYCLE_SECONDS, false, 1, 100, 100);\n\n        let (burn_cap, mint_cap) = aptos_coin::initialize_for_test(&aptos_framework);\n        register_mint_stake(&validator, &mint_cap);\n        store_aptos_coin_mint_cap(&aptos_framework, mint_cap);\n        coin::destroy_burn_cap<AptosCoin>(burn_cap);\n\n        // Bypass the check to join. This is the same function called during Genesis.\n        let validator_address = signer::address_of(&validator);\n        join_validator_set_internal(&validator, validator_address);\n        end_epoch();\n\n        // Leaving the validator set should fail as post genesis validator set change is not allowed.\n        leave_validator_set(&validator, validator_address);\n    }\n\n    #[test(\n        aptos_framework = @aptos_framework,\n        validator_1 = @aptos_framework,\n        validator_2 = @0x2,\n        validator_3 = @0x3,\n        validator_4 = @0x4,\n        validator_5 = @0x5\n    )]\n    public entry fun test_staking_validator_index(\n        aptos_framework: signer,\n        validator_1: signer,\n        validator_2: signer,\n        validator_3: signer,\n        validator_4: signer,\n        validator_5: signer,\n    ) acquires OwnerCapability, StakePool, AptosCoinCapabilities, ValidatorConfig, ValidatorPerformance, ValidatorSet {\n        let v1_addr = signer::address_of(&validator_1);\n        let v2_addr = signer::address_of(&validator_2);\n        let v3_addr = signer::address_of(&validator_3);\n        let v4_addr = signer::address_of(&validator_4);\n        let v5_addr = signer::address_of(&validator_5);\n\n        test_setup(&aptos_framework);\n\n        let (burn_cap, mint_cap) = aptos_coin::initialize_for_test(&aptos_framework);\n        register_mint_stake(&validator_1, &mint_cap);\n        register_mint_stake(&validator_2, &mint_cap);\n        register_mint_stake(&validator_3, &mint_cap);\n        register_mint_stake(&validator_4, &mint_cap);\n        register_mint_stake(&validator_5, &mint_cap);\n\n        store_aptos_coin_mint_cap(&aptos_framework, mint_cap);\n        coin::destroy_burn_cap<AptosCoin>(burn_cap);\n\n        join_validator_set(&validator_3, v3_addr);\n        end_epoch();\n        assert!(get_validator_index(v3_addr) == 0, 0);\n\n        join_validator_set(&validator_4, v4_addr);\n        end_epoch();\n        assert!(get_validator_index(v3_addr) == 0, 1);\n        assert!(get_validator_index(v4_addr) == 1, 2);\n\n        join_validator_set(&validator_1, v1_addr);\n        join_validator_set(&validator_2, v2_addr);\n        // pending_inactive is appended in reverse order\n        end_epoch();\n        assert!(get_validator_index(v3_addr) == 0, 6);\n        assert!(get_validator_index(v4_addr) == 1, 7);\n        assert!(get_validator_index(v2_addr) == 2, 8);\n        assert!(get_validator_index(v1_addr) == 3, 9);\n\n        join_validator_set(&validator_5, v5_addr);\n        end_epoch();\n        assert!(get_validator_index(v3_addr) == 0, 10);\n        assert!(get_validator_index(v4_addr) == 1, 11);\n        assert!(get_validator_index(v2_addr) == 2, 12);\n        assert!(get_validator_index(v1_addr) == 3, 13);\n        assert!(get_validator_index(v5_addr) == 4, 14);\n\n        // after swap remove, it's 3,4,2,5\n        leave_validator_set(&validator_1, v1_addr);\n        // after swap remove, it's 5,4,2\n        leave_validator_set(&validator_3, v3_addr);\n        end_epoch();\n\n        assert!(get_validator_index(v5_addr) == 0, 15);\n        assert!(get_validator_index(v4_addr) == 1, 16);\n        assert!(get_validator_index(v2_addr) == 2, 17);\n    }\n\n    #[test(aptos_framework = @aptos_framework, validator_1 = @0x123, validator_2 = @0x234)]\n    public entry fun test_validator_rewards_are_performance_based(\n        aptos_framework: signer,\n        validator_1: signer,\n        validator_2: signer,\n    ) acquires OwnerCapability, StakePool, AptosCoinCapabilities, ValidatorConfig, ValidatorPerformance, ValidatorSet {\n        test_setup(&aptos_framework);\n\n        let validator_1_address = signer::address_of(&validator_1);\n        let validator_2_address = signer::address_of(&validator_2);\n        let (burn_cap, mint_cap) = aptos_coin::initialize_for_test(&aptos_framework);\n        register_mint_stake(&validator_1, &mint_cap);\n        register_mint_stake(&validator_2, &mint_cap);\n        store_aptos_coin_mint_cap(&aptos_framework, mint_cap);\n        coin::destroy_burn_cap<AptosCoin>(burn_cap);\n\n        // Both validators join the set.\n        join_validator_set(&validator_1, validator_1_address);\n        join_validator_set(&validator_2, validator_2_address);\n        end_epoch();\n\n        // Validator 2 failed proposal.\n        let failed_proposer_indices = vector::empty<u64>();\n        let validator_1_index = borrow_global<ValidatorConfig>(validator_1_address).validator_index;\n        let validator_2_index = borrow_global<ValidatorConfig>(validator_2_address).validator_index;\n        vector::push_back(&mut failed_proposer_indices, validator_2_index);\n        let proposer_indices = vector::empty<u64>();\n        vector::push_back(&mut proposer_indices, validator_1_index);\n        update_performance_statistics(proposer_indices, failed_proposer_indices);\n        end_epoch();\n\n        // Validator 2 received no rewards. Validator 1 didn't fail proposals, so it still receives rewards.\n        assert_validator_state(validator_1_address, 101, 0, 0, 0, 1);\n        assert_validator_state(validator_2_address, 100, 0, 0, 0, 0);\n\n        // Validator 2 decides to leave. Both validators failed proposals.\n        unlock(&validator_2, 100);\n        leave_validator_set(&validator_2, validator_2_address);\n        let failed_proposer_indices = vector::empty<u64>();\n        let validator_1_index = borrow_global<ValidatorConfig>(validator_1_address).validator_index;\n        let validator_2_index = borrow_global<ValidatorConfig>(validator_2_address).validator_index;\n        vector::push_back(&mut failed_proposer_indices, validator_1_index);\n        vector::push_back(&mut failed_proposer_indices, validator_2_index);\n        update_performance_statistics(vector::empty<u64>(), failed_proposer_indices);\n        // Fast forward so validator 2's stake is fully unlocked.\n        timestamp::fast_forward_seconds(LOCKUP_CYCLE_SECONDS);\n        end_epoch();\n\n        // Validator 1 and 2 received no additional rewards due to failed proposals\n        assert_validator_state(validator_1_address, 101, 0, 0, 0, 0);\n        assert_validator_state(validator_2_address, 0, 100, 0, 0, 0);\n    }\n\n    #[test(aptos_framework = @aptos_framework, validator = @0x123)]\n    public entry fun test_update_performance_statistics_should_not_fail_due_to_out_of_bounds(\n        aptos_framework: signer,\n        validator: signer,\n    ) acquires OwnerCapability, StakePool, AptosCoinCapabilities, ValidatorConfig, ValidatorPerformance, ValidatorSet {\n        test_setup(&aptos_framework);\n\n        let validator_address = signer::address_of(&validator);\n        let (burn_cap, mint_cap) = aptos_coin::initialize_for_test(&aptos_framework);\n        register_mint_stake(&validator, &mint_cap);\n        store_aptos_coin_mint_cap(&aptos_framework, mint_cap);\n        coin::destroy_burn_cap<AptosCoin>(burn_cap);\n        join_validator_set(&validator, validator_address);\n        end_epoch();\n\n        let valid_validator_index = borrow_global<ValidatorConfig>(validator_address).validator_index;\n        let out_of_bounds_index = valid_validator_index + 100;\n\n        // Invalid validator index in the failed proposers vector should not lead to abort.\n        let failed_proposer_indices = vector::empty<u64>();\n        vector::push_back(&mut failed_proposer_indices, valid_validator_index);\n        vector::push_back(&mut failed_proposer_indices, out_of_bounds_index);\n        update_performance_statistics(vector::empty<u64>(), failed_proposer_indices);\n        end_epoch();\n\n        // Validator received no rewards due to failing to propose.\n        assert_validator_state(validator_address, 100, 0, 0, 0, 0);\n\n        // Invalid validator index in the proposer should not lead to abort.\n        let proposer_index_optional = vector::empty<u64>();\n        vector::push_back(&mut proposer_index_optional, out_of_bounds_index);\n        update_performance_statistics(proposer_index_optional, vector::empty<u64>());\n        end_epoch();\n    }\n\n    #[test(aptos_framework = @aptos_framework, validator = @0x123)]\n    #[expected_failure(abort_code = 0x1000F)]\n    public entry fun test_invalid_config(\n        aptos_framework: signer,\n        validator: signer,\n    ) acquires OwnerCapability, StakePool, ValidatorConfig, ValidatorSet {\n        timestamp::set_time_has_started_for_testing(&aptos_framework);\n        initialize(&aptos_framework);\n        staking_config::initialize_for_test(&aptos_framework, 50, 10000, LOCKUP_CYCLE_SECONDS, true, 1, 100, 100);\n\n        let (burn_cap, mint_cap) = aptos_coin::initialize_for_test(&aptos_framework);\n        register_owner_only(&validator, &mint_cap);\n        store_aptos_coin_mint_cap(&aptos_framework, mint_cap);\n        coin::destroy_burn_cap<AptosCoin>(burn_cap);\n\n        // Join the validator set with enough stake.\n        let validator_address = signer::address_of(&validator);\n        join_validator_set(&validator, validator_address);\n    }\n\n    #[test(aptos_framework = @aptos_framework, validator = @0x123)]\n    public entry fun test_valid_config(\n        aptos_framework: signer,\n        validator: signer,\n    ) acquires OwnerCapability, StakePool, ValidatorConfig, ValidatorSet {\n        timestamp::set_time_has_started_for_testing(&aptos_framework);\n        initialize(&aptos_framework);\n        staking_config::initialize_for_test(&aptos_framework, 50, 10000, LOCKUP_CYCLE_SECONDS, true, 1, 100, 100);\n\n        let (burn_cap, mint_cap) = aptos_coin::initialize_for_test(&aptos_framework);\n        register_owner_only(&validator, &mint_cap);\n        store_aptos_coin_mint_cap(&aptos_framework, mint_cap);\n        coin::destroy_burn_cap<AptosCoin>(burn_cap);\n\n        // Set the valid to true\n        let validator_address = signer::address_of(&validator);\n        rotate_consensus_key(&validator, validator_address, CONSENSUS_KEY_2, CONSENSUS_POP_2);\n\n        // Join the validator set with enough stake.\n        join_validator_set(&validator, validator_address);\n    }\n\n    #[test]\n    public entry fun test_rewards_calculation() {\n        let stake_amount = 2000;\n        let num_successful_proposals = 199;\n        let num_total_proposals = 200;\n        let rewards_rate = 700;\n        let rewards_rate_denominator = 777;\n        let rewards_amount = calculate_rewards_amount(\n            stake_amount,\n            num_successful_proposals,\n            num_total_proposals,\n            rewards_rate,\n            rewards_rate_denominator\n        );\n        // Consider `amount_imprecise` and `amount_precise` defined as follows:\n        // amount_imprecise = (stake_amount * rewards_rate / rewards_rate_denominator) * num_successful_proposals / num_total_proposals\n        // amount_precise = stake_amount * rewards_rate * num_successful_proposals / (rewards_rate_denominator * num_total_proposals)\n        // Although they are equivalent in the real arithmetic, they are not in the integer arithmetic due to a rounding error.\n        // With the test parameters above, `amount_imprecise` is equal to 1791 because of an unbounded rounding error\n        // while `amount_precise` is equal to 1792. We expect the output of `calculate_rewards_amount` to be 1792.\n        assert!(rewards_amount == 1792, 0);\n\n        let stake_amount = 100000000000000000;\n        let num_successful_proposals = 9999;\n        let num_total_proposals = 10000;\n        let rewards_rate = 3141592;\n        let rewards_rate_denominator = 10000000;\n        // This should not abort due to an arithmetic overflow.\n        let rewards_amount = calculate_rewards_amount(\n            stake_amount,\n            num_successful_proposals,\n            num_total_proposals,\n            rewards_rate,\n            rewards_rate_denominator\n        );\n        assert!(rewards_amount == 31412778408000000, 0);\n    }\n\n    #[test_only]\n    public entry fun register_mint_stake(\n        account: &signer,\n        mint_cap: &MintCapability<AptosCoin>,\n    ) acquires OwnerCapability, StakePool, ValidatorConfig, ValidatorSet {\n        aptos_framework::coin::register_for_test<AptosCoin>(account);\n        let address = signer::address_of(account);\n        coin::deposit<AptosCoin>(address, coin::mint<AptosCoin>(1000, mint_cap));\n        initialize_validator(account, CONSENSUS_KEY_1, CONSENSUS_POP_1, vector::empty(), vector::empty());\n        add_stake(account, 100);\n        assert_validator_state(signer::address_of(account), 100, 0, 0, 0, 0);\n    }\n\n    #[test_only]\n    public entry fun register_owner_only(\n        account: &signer,\n        mint_cap: &MintCapability<AptosCoin>,\n    ) acquires OwnerCapability, StakePool, ValidatorConfig, ValidatorSet {\n        aptos_framework::coin::register_for_test<AptosCoin>(account);\n        let address = signer::address_of(account);\n        coin::deposit<AptosCoin>(address, coin::mint<AptosCoin>(1000, mint_cap));\n        initialize_owner_only(account, 0, address, address);\n        add_stake(account, 100);\n        assert_validator_state(signer::address_of(account), 100, 0, 0, 0, 0);\n    }\n\n    #[test_only]\n    public entry fun join_test_staking(\n        aptos_framework: &signer,\n        validator: &signer,\n        change_epoch: bool,\n    ) acquires AptosCoinCapabilities, OwnerCapability, StakePool, ValidatorConfig, ValidatorPerformance, ValidatorSet {\n        let (burn_cap, mint_cap) = aptos_coin::initialize_for_test(aptos_framework);\n        register_mint_stake(validator, &mint_cap);\n        store_aptos_coin_mint_cap(aptos_framework, mint_cap);\n        coin::destroy_burn_cap<AptosCoin>(burn_cap);\n\n        // Join the validator set with enough stake.\n        let validator_address = signer::address_of(validator);\n        join_validator_set(validator, validator_address);\n\n        // Only change epoch if requested to do so. This allows tests to perform more operations while the validator\n        // is still pending active.\n        if (change_epoch) {\n            end_epoch();\n            assert!(get_validator_state(validator_address) == VALIDATOR_STATUS_ACTIVE, 0);\n        };\n    }\n\n    #[test_only]\n    public fun set_validator_perf_at_least_one_block() acquires ValidatorPerformance {\n        let validator_perf = borrow_global_mut<ValidatorPerformance>(@aptos_framework);\n        let len = vector::length(&validator_perf.validators);\n        let i = 0;\n        while (i < len) {\n            let validator = vector::borrow_mut(&mut validator_perf.validators, i);\n            if (validator.successful_proposals + validator.failed_proposals < 1) {\n                validator.successful_proposals = 1;\n            };\n            i = i + 1;\n        };\n    }\n\n    #[test_only]\n    public fun end_epoch() acquires StakePool, AptosCoinCapabilities, ValidatorConfig, ValidatorPerformance, ValidatorSet {\n        // Set the number of blocks to 1, to give out rewards to non-failing validators.\n        set_validator_perf_at_least_one_block();\n        timestamp::fast_forward_seconds(EPOCH_DURATION);\n        on_new_epoch();\n    }\n\n    #[test_only]\n    public fun assert_validator_state(\n        pool_address: address,\n        active_stake: u64,\n        inactive_stake: u64,\n        pending_active_stake: u64,\n        pending_inactive_stake: u64,\n        validator_index: u64,\n    ) acquires StakePool, ValidatorConfig {\n        let stake_pool = borrow_global<StakePool>(pool_address);\n        let actual_active_stake = coin::value<AptosCoin>(&stake_pool.active);\n        assert!(actual_active_stake == active_stake, actual_active_stake);\n        let actual_inactive_stake = coin::value<AptosCoin>(&stake_pool.inactive);\n        assert!(actual_inactive_stake == inactive_stake, actual_inactive_stake);\n        let actual_pending_active_stake = coin::value<AptosCoin>(&stake_pool.pending_active);\n        assert!(actual_pending_active_stake == pending_active_stake, actual_pending_active_stake);\n        let actual_pending_inactive_stake = coin::value<AptosCoin>(&stake_pool.pending_inactive);\n        assert!(actual_pending_inactive_stake == pending_inactive_stake, actual_pending_inactive_stake);\n        let validator_config = borrow_global<ValidatorConfig>(pool_address);\n        assert!(validator_config.validator_index == validator_index, validator_config.validator_index);\n    }\n\n    #[test_only]\n    public fun create_validator_set(\n        aptos_framework: &signer,\n        active_validator_addresses: vector<address>\n    ) {\n        let active_validators = vector::empty<ValidatorInfo>();\n        let i = 0;\n        while (i < vector::length(&active_validator_addresses)) {\n            let validator_address = vector::borrow(&active_validator_addresses, i);\n            vector::push_back(&mut active_validators, ValidatorInfo {\n                addr: *validator_address,\n                voting_power: 0,\n                config: ValidatorConfig {\n                    consensus_pubkey: CONSENSUS_KEY_1,\n                    network_addresses: b\"\",\n                    fullnode_addresses: b\"\",\n                    validator_index: 0,\n                }\n            });\n            i = i + 1;\n        };\n\n        move_to(aptos_framework, ValidatorSet {\n            consensus_scheme: 0,\n            // active validators for the current epoch\n            active_validators,\n            // pending validators to leave in next epoch (still active)\n            pending_inactive: vector::empty<ValidatorInfo>(),\n            // pending validators to join in next epoch\n            pending_active: vector::empty<ValidatorInfo>(),\n            total_voting_power: 0,\n            total_joining_power: 0,\n        });\n    }\n\n    #[test_only]\n    public fun create_stake_pool(\n        account: &signer,\n        active: Coin<AptosCoin>,\n        pending_inactive: Coin<AptosCoin>,\n        locked_until_secs: u64,\n    ) acquires OwnerCapability, StakePool, ValidatorSet {\n        let account_address = signer::address_of(account);\n        initialize_owner_only(account, 0, account_address, account_address);\n        let stake_pool = borrow_global_mut<StakePool>(account_address);\n        coin::merge(&mut stake_pool.active, active);\n        coin::merge(&mut stake_pool.pending_inactive, pending_inactive);\n        stake_pool.locked_until_secs = locked_until_secs;\n    }\n}\n",
              "source_map": ""
            },
            {
              "name": "reconfiguration",
              "source": "/// Publishes configuration information for validators, and issues reconfiguration events\n/// to synchronize configuration changes for the validators.\nmodule aptos_framework::reconfiguration {\n    use std::error;\n    use aptos_std::event;\n    use std::signer;\n    use std::guid;\n    use aptos_framework::system_addresses;\n    use aptos_framework::timestamp;\n    use aptos_framework::stake;\n\n    friend aptos_framework::aptos_governance;\n    friend aptos_framework::block;\n    // TODO: migrate all to callback in block prologue\n    friend aptos_framework::consensus_config;\n    friend aptos_framework::genesis;\n    friend aptos_framework::version;\n    friend aptos_framework::gas_schedule;\n\n    /// Event that signals consensus to start a new epoch,\n    /// with new configuration information. This is also called a\n    /// \"reconfiguration event\"\n    struct NewEpochEvent has drop, store {\n        epoch: u64,\n    }\n\n    /// Holds information about state of reconfiguration\n    struct Configuration has key {\n        /// Epoch number\n        epoch: u64,\n        /// Time of last reconfiguration. Only changes on reconfiguration events.\n        last_reconfiguration_time: u64,\n        /// Event handle for reconfiguration events\n        events: event::EventHandle<NewEpochEvent>,\n    }\n\n    /// Reconfiguration disabled if this resource occurs under LibraRoot.\n    struct DisableReconfiguration has key {}\n\n    /// The `Configuration` resource is in an invalid state\n    const ECONFIGURATION: u64 = 1;\n    /// A `Reconfiguration` resource is in an invalid state\n    const ECONFIG: u64 = 2;\n    /// A `ModifyConfigCapability` is in a different state than was expected\n    const EMODIFY_CAPABILITY: u64 = 3;\n    /// An invalid block time was encountered.\n    const EINVALID_BLOCK_TIME: u64 = 4;\n    /// An invalid block time was encountered.\n    const EINVALID_GUID_FOR_EVENT: u64 = 5;\n\n    /// Only called during genesis.\n    /// Publishes `Configuration` resource. Can only be invoked by aptos framework account, and only a single time in Genesis.\n    public(friend) fun initialize(\n        account: &signer,\n    ) {\n        timestamp::assert_genesis();\n        system_addresses::assert_aptos_framework(account);\n\n        // assert it matches `new_epoch_event_key()`, otherwise the event can't be recognized\n        assert!(guid::get_next_creation_num(signer::address_of(account)) == 1, error::invalid_state(EINVALID_GUID_FOR_EVENT));\n        move_to<Configuration>(\n            account,\n            Configuration {\n                epoch: 0,\n                last_reconfiguration_time: 0,\n                events: event::new_event_handle<NewEpochEvent>(account),\n            }\n        );\n    }\n\n    /// Private function to temporarily halt reconfiguration.\n    /// This function should only be used for offline WriteSet generation purpose and should never be invoked on chain.\n    fun disable_reconfiguration(account: &signer) {\n        system_addresses::assert_aptos_framework(account);\n        assert!(reconfiguration_enabled(), error::invalid_state(ECONFIGURATION));\n        move_to(account, DisableReconfiguration {} )\n    }\n\n    /// Private function to resume reconfiguration.\n    /// This function should only be used for offline WriteSet generation purpose and should never be invoked on chain.\n    fun enable_reconfiguration(account: &signer) acquires DisableReconfiguration {\n        system_addresses::assert_aptos_framework(account);\n\n        assert!(!reconfiguration_enabled(), error::invalid_state(ECONFIGURATION));\n        DisableReconfiguration {} = move_from<DisableReconfiguration>(signer::address_of(account));\n    }\n\n    fun reconfiguration_enabled(): bool {\n        !exists<DisableReconfiguration>(@aptos_framework)\n    }\n\n    /// Force an epoch change.\n    public entry fun force_reconfigure(account: &signer) acquires Configuration {\n        system_addresses::assert_aptos_framework(account);\n        reconfigure();\n    }\n\n    /// Signal validators to start using new configuration. Must be called from friend config modules.\n    public(friend) fun reconfigure() acquires Configuration {\n        stake::on_new_epoch();\n        reconfigure_();\n    }\n\n    public fun last_reconfiguration_time(): u64 acquires Configuration {\n        borrow_global<Configuration>(@aptos_framework).last_reconfiguration_time\n    }\n\n    /// Private function to do reconfiguration. Updates reconfiguration status resource\n    /// `Configuration` and emits a `NewEpochEvent`\n    fun reconfigure_() acquires Configuration {\n        // Do not do anything if genesis has not finished.\n        if (timestamp::is_genesis() || timestamp::now_microseconds() == 0 || !reconfiguration_enabled()) {\n            return\n        };\n\n        let config_ref = borrow_global_mut<Configuration>(@aptos_framework);\n        let current_time = timestamp::now_microseconds();\n\n        // Do not do anything if a reconfiguration event is already emitted within this transaction.\n        //\n        // This is OK because:\n        // - The time changes in every non-empty block\n        // - A block automatically ends after a transaction that emits a reconfiguration event, which is guaranteed by\n        //   VM spec that all transactions comming after a reconfiguration transaction will be returned as Retry\n        //   status.\n        // - Each transaction must emit at most one reconfiguration event\n        //\n        // Thus, this check ensures that a transaction that does multiple \"reconfiguration required\" actions emits only\n        // one reconfiguration event.\n        //\n        if (current_time == config_ref.last_reconfiguration_time) {\n            return\n        };\n\n        assert!(current_time > config_ref.last_reconfiguration_time, error::invalid_state(EINVALID_BLOCK_TIME));\n        config_ref.last_reconfiguration_time = current_time;\n        config_ref.epoch = config_ref.epoch + 1;\n\n        event::emit_event<NewEpochEvent>(\n            &mut config_ref.events,\n            NewEpochEvent {\n                epoch: config_ref.epoch,\n            },\n        );\n    }\n\n    /// Emit a `NewEpochEvent` event. This function will be invoked by genesis directly to generate the very first\n    /// reconfiguration event.\n    fun emit_genesis_reconfiguration_event() acquires Configuration {\n        let config_ref = borrow_global_mut<Configuration>(@aptos_framework);\n        assert!(config_ref.epoch == 0 && config_ref.last_reconfiguration_time == 0, error::invalid_state(ECONFIGURATION));\n        config_ref.epoch = 1;\n\n        event::emit_event<NewEpochEvent>(\n            &mut config_ref.events,\n            NewEpochEvent {\n                epoch: config_ref.epoch,\n            },\n        );\n    }\n}\n",
              "source_map": ""
            },
            {
              "name": "governance_proposal",
              "source": "/// Define the GovernanceProposal that will be used as part of on-chain governance by AptosGovernance.\n///\n/// This is separate from the AptosGovernance module to avoid circular dependency between AptosGovernance and Stake.\nmodule aptos_framework::governance_proposal {\n    friend aptos_framework::aptos_governance;\n\n    use std::string::{String, length, utf8};\n    use std::error;\n\n    const ETOO_LONG: u64 = 1;\n\n    struct GovernanceProposal has store, drop {\n        // Location where metadata such as the proposal's execution script content, description, etc. are hosted.\n        metadata_location: String,\n        // The hash of the metadata to allow easy verification when a user votes that the metadata hosted at a url is\n        // correct.\n        metadata_hash: String,\n    }\n\n    /// Create and return a GovernanceProposal resource. Can only be called by AptosGovernance\n    public(friend) fun create_proposal(\n        metadata_location: String,\n        metadata_hash: String,\n    ): GovernanceProposal {\n        assert!(length(&metadata_location) <= 256, error::invalid_argument(ETOO_LONG));\n        assert!(length(&metadata_hash) <= 256, error::invalid_argument(ETOO_LONG));\n\n        GovernanceProposal {\n            metadata_location,\n            metadata_hash,\n        }\n    }\n\n    /// Useful for AptosGovernance to create an empty proposal as proof.\n    public(friend) fun create_empty_proposal(): GovernanceProposal {\n        create_proposal(utf8(b\"\"), utf8(b\"\"))\n    }\n\n    #[test_only]\n    public fun create_test_proposal(): GovernanceProposal {\n        create_empty_proposal()\n    }\n\n    #[test]\n    #[expected_failure(abort_code = 65537)]\n    public fun test_metadata_url_too_long(): GovernanceProposal {\n        create_proposal(\n            utf8(b\"123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789\"),\n            utf8(b\"\"),\n        )\n    }\n\n    #[test]\n    #[expected_failure(abort_code = 65537)]\n    public fun test_metadata_hash_too_long(): GovernanceProposal {\n        create_proposal(\n            utf8(b\"\"),\n            utf8(b\"123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789\"),\n        )\n    }\n}\n",
              "source_map": "0x95f5eb2e02249b8073571810f0fa0c14a111f5078f7e183ae8f478e0fbcfb8b0f80000000b01000001000000000000000000000000000000000000000000000000000000000000000113676f7665726e616e63655f70726f706f73616c01000095f5eb2e02249b8073571810f0fa0c14a111f5078f7e183ae8f478e0fbcfb8b0a9010000bb010000000295f5eb2e02249b8073571810f0fa0c14a111f5078f7e183ae8f478e0fbcfb8b0480200005902000095f5eb2e02249b8073571810f0fa0c14a111f5078f7e183ae8f478e0fbcfb8b0f50200000203000002000095f5eb2e02249b8073571810f0fa0c14a111f5078f7e183ae8f478e0fbcfb8b06d050000820500000000000005000095f5eb2e02249b8073571810f0fa0c14a111f5078f7e183ae8f478e0fbcfb8b0b8050000bb050000010095f5eb2e02249b8073571810f0fa0c14a111f5078f7e183ae8f478e0fbcfb8b0b3050000bc050000020095f5eb2e02249b8073571810f0fa0c14a111f5078f7e183ae8f478e0fbcfb8b0c3050000c6050000030095f5eb2e02249b8073571810f0fa0c14a111f5078f7e183ae8f478e0fbcfb8b0be050000c7050000040095f5eb2e02249b8073571810f0fa0c14a111f5078f7e183ae8f478e0fbcfb8b0a3050000c805000000010095f5eb2e02249b8073571810f0fa0c14a111f5078f7e183ae8f478e0fbcfb8b089030000980300000002116d657461646174615f6c6f636174696f6e95f5eb2e02249b8073571810f0fa0c14a111f5078f7e183ae8f478e0fbcfb8b0a2030000b30300000d6d657461646174615f6861736895f5eb2e02249b8073571810f0fa0c14a111f5078f7e183ae8f478e0fbcfb8b0c5030000d2030000000013000095f5eb2e02249b8073571810f0fa0c14a111f5078f7e183ae8f478e0fbcfb8b00f04000021040000010095f5eb2e02249b8073571810f0fa0c14a111f5078f7e183ae8f478e0fbcfb8b00804000022040000020095f5eb2e02249b8073571810f0fa0c14a111f5078f7e183ae8f478e0fbcfb8b02604000029040000030095f5eb2e02249b8073571810f0fa0c14a111f5078f7e183ae8f478e0fbcfb8b02304000025040000040095f5eb2e02249b8073571810f0fa0c14a111f5078f7e183ae8f478e0fbcfb8b0000400004e040000050095f5eb2e02249b8073571810f0fa0c14a111f5078f7e183ae8f478e0fbcfb8b0430400004c040000060095f5eb2e02249b8073571810f0fa0c14a111f5078f7e183ae8f478e0fbcfb8b02b0400004d040000070095f5eb2e02249b8073571810f0fa0c14a111f5078f7e183ae8f478e0fbcfb8b0000400004e040000080095f5eb2e02249b8073571810f0fa0c14a111f5078f7e183ae8f478e0fbcfb8b06704000075040000090095f5eb2e02249b8073571810f0fa0c14a111f5078f7e183ae8f478e0fbcfb8b060040000760400000a0095f5eb2e02249b8073571810f0fa0c14a111f5078f7e183ae8f478e0fbcfb8b07a0400007d0400000b0095f5eb2e02249b8073571810f0fa0c14a111f5078f7e183ae8f478e0fbcfb8b077040000790400000c0095f5eb2e02249b8073571810f0fa0c14a111f5078f7e183ae8f478e0fbcfb8b058040000a20400000d0095f5eb2e02249b8073571810f0fa0c14a111f5078f7e183ae8f478e0fbcfb8b097040000a00400000e0095f5eb2e02249b8073571810f0fa0c14a111f5078f7e183ae8f478e0fbcfb8b07f040000a10400000f0095f5eb2e02249b8073571810f0fa0c14a111f5078f7e183ae8f478e0fbcfb8b058040000a2040000100095f5eb2e02249b8073571810f0fa0c14a111f5078f7e183ae8f478e0fbcfb8b0ce040000df040000110095f5eb2e02249b8073571810f0fa0c14a111f5078f7e183ae8f478e0fbcfb8b0ed040000fa040000120095f5eb2e02249b8073571810f0fa0c14a111f5078f7e183ae8f478e0fbcfb8b0ad0400000505000000010945544f4f5f4c4f4e470000"
            },
            {
              "name": "aptos_governance",
              "source": "/**\n * AptosGovernance represents the on-chain governance of the Aptos network. Voting power is calculated based on the\n * current epoch's voting power of the proposer or voter's backing stake pool. In addition, for it to count,\n * the stake pool's lockup needs to be at least as long as the proposal's duration.\n *\n * It provides the following flow:\n * 1. Proposers can create a proposal by calling AptosGovernance::create_proposal. The proposer's backing stake pool\n * needs to have the minimum proposer stake required. Off-chain components can subscribe to CreateProposalEvent to\n * track proposal creation and proposal ids.\n * 2. Voters can vote on a proposal. Their voting power is derived from the backing stake pool. Each stake pool can\n * only be used to vote on each proposal exactly once.\n *\n */\nmodule aptos_framework::aptos_governance {\n    use std::error;\n    use std::option;\n    use std::signer;\n    use std::string::utf8;\n\n    use aptos_std::event::{Self, EventHandle};\n    use aptos_std::simple_map::{Self, SimpleMap};\n    use aptos_std::table::{Self, Table};\n\n    use aptos_framework::account::{SignerCapability, create_signer_with_capability};\n    use aptos_framework::coin;\n    use aptos_framework::governance_proposal::{Self, GovernanceProposal};\n    use aptos_framework::reconfiguration;\n    use aptos_framework::stake;\n    use aptos_framework::system_addresses;\n    use aptos_framework::aptos_coin::AptosCoin;\n    use aptos_framework::timestamp;\n    use aptos_framework::voting;\n\n    /// Error codes.\n    const EINSUFFICIENT_PROPOSER_STAKE: u64 = 1;\n    const ENOT_DELEGATED_VOTER: u64 = 2;\n    const EINSUFFICIENT_STAKE_LOCKUP: u64 = 3;\n    const EALREADY_VOTED: u64 = 4;\n    const ENO_VOTING_POWER: u64 = 5;\n\n    /// Store the SignerCapabilities of accounts under the on-chain governance's control.\n    struct GovernanceResponsbility has key {\n        signer_caps: SimpleMap<address, SignerCapability>,\n    }\n\n    /// Configurations of the AptosGovernance, set during Genesis and can be updated by the same process offered\n    /// by this AptosGovernance module.\n    struct GovernanceConfig has key {\n        min_voting_threshold: u128,\n        required_proposer_stake: u64,\n        voting_duration_secs: u64,\n    }\n\n    struct RecordKey has copy, drop, store {\n        stake_pool: address,\n        proposal_id: u64,\n    }\n\n    /// Records to track the proposals each stake pool has been used to vote on.\n    struct VotingRecords has key {\n        votes: Table<RecordKey, bool>\n    }\n\n    /// Events generated by interactions with the AptosGovernance module.\n    struct GovernanceEvents has key {\n        create_proposal_events: EventHandle<CreateProposalEvent>,\n        update_config_events: EventHandle<UpdateConfigEvent>,\n        vote_events: EventHandle<VoteEvent>,\n    }\n\n    /// Event emitted when a proposal is created.\n    struct CreateProposalEvent has drop, store {\n        proposer: address,\n        stake_pool: address,\n        proposal_id: u64,\n        execution_hash: vector<u8>,\n        metadata_location: vector<u8>,\n        metadata_hash: vector<u8>,\n    }\n\n    /// Event emitted when there's a vote on a proposa;\n    struct VoteEvent has drop, store {\n        proposal_id: u64,\n        voter: address,\n        stake_pool: address,\n        num_votes: u64,\n        should_pass: bool,\n    }\n\n    /// Event emitted when the governance configs are updated.\n    struct UpdateConfigEvent has drop, store {\n        min_voting_threshold: u128,\n        required_proposer_stake: u64,\n        voting_duration_secs: u64,\n    }\n\n    /// Can be called during genesis or by the governance itself.\n    /// Stores the signer capability for a given address.\n    public fun store_signer_cap(\n        aptos_framework: &signer,\n        signer_address: address,\n        signer_cap: SignerCapability,\n    ) acquires GovernanceResponsbility {\n        system_addresses::assert_aptos_framework(aptos_framework);\n\n        if (!exists<GovernanceResponsbility>(@aptos_framework)) {\n            move_to(aptos_framework, GovernanceResponsbility{ signer_caps: simple_map::create<address, SignerCapability>() });\n        };\n\n        let signer_caps = &mut borrow_global_mut<GovernanceResponsbility>(@aptos_framework).signer_caps;\n        simple_map::add(signer_caps, signer_address, signer_cap);\n    }\n\n    /// Initializes the state for Aptos Governance. Can only be called during Genesis with a signer\n    /// for the aptos_framework (0x1) account.\n    /// This function is private because it's called directly from the vm.\n    fun initialize(\n        aptos_framework: &signer,\n        min_voting_threshold: u128,\n        required_proposer_stake: u64,\n        voting_duration_secs: u64,\n    ) {\n        system_addresses::assert_aptos_framework(aptos_framework);\n\n        voting::register<GovernanceProposal>(aptos_framework);\n        move_to(aptos_framework, GovernanceConfig {\n            voting_duration_secs,\n            min_voting_threshold,\n            required_proposer_stake,\n        });\n        move_to(aptos_framework, GovernanceEvents {\n            create_proposal_events: event::new_event_handle<CreateProposalEvent>(aptos_framework),\n            update_config_events: event::new_event_handle<UpdateConfigEvent>(aptos_framework),\n            vote_events: event::new_event_handle<VoteEvent>(aptos_framework),\n        });\n        move_to(aptos_framework, VotingRecords {\n            votes: table::new(),\n        });\n    }\n\n    /// Update the governance configurations. This can only be called as part of resolving a proposal in this same\n    /// AptosGovernance.\n    public fun update_governance_config(\n        _proposal: GovernanceProposal,\n        min_voting_threshold: u128,\n        required_proposer_stake: u64,\n        voting_duration_secs: u64,\n    ) acquires GovernanceConfig, GovernanceEvents {\n        let governance_config = borrow_global_mut<GovernanceConfig>(@aptos_framework);\n        governance_config.voting_duration_secs = voting_duration_secs;\n        governance_config.min_voting_threshold = min_voting_threshold;\n        governance_config.required_proposer_stake = required_proposer_stake;\n\n        let events = borrow_global_mut<GovernanceEvents>(@aptos_framework);\n        event::emit_event<UpdateConfigEvent>(\n            &mut events.update_config_events,\n            UpdateConfigEvent {\n                min_voting_threshold,\n                required_proposer_stake,\n                voting_duration_secs\n            },\n        );\n    }\n\n    /// Create a proposal with the backing `stake_pool`.\n    /// @param execution_hash Required. This is the hash of the resolution script. When the proposal is resolved,\n    /// only the exact script with matching hash can be successfully executed.\n    public entry fun create_proposal(\n        proposer: &signer,\n        stake_pool: address,\n        execution_hash: vector<u8>,\n        metadata_location: vector<u8>,\n        metadata_hash: vector<u8>,\n    ) acquires GovernanceConfig, GovernanceEvents {\n        let proposer_address = signer::address_of(proposer);\n        assert!(stake::get_delegated_voter(stake_pool) == proposer_address, error::invalid_argument(ENOT_DELEGATED_VOTER));\n\n        // The proposer's stake needs to be at least the required bond amount.\n        let governance_config = borrow_global<GovernanceConfig>(@aptos_framework);\n        let stake_balance = stake::get_current_epoch_voting_power(stake_pool);\n        assert!(\n            stake_balance >= governance_config.required_proposer_stake,\n            error::invalid_argument(EINSUFFICIENT_PROPOSER_STAKE),\n        );\n\n        // The proposer's stake needs to be locked up at least as long as the proposal's voting period.\n        let current_time = timestamp::now_seconds();\n        let proposal_expiration = current_time + governance_config.voting_duration_secs;\n        assert!(\n            stake::get_lockup_secs(stake_pool) >= proposal_expiration,\n            error::invalid_argument(EINSUFFICIENT_STAKE_LOCKUP),\n        );\n\n        // We want to allow early resolution of proposals if more than 50% of the total supply of the network coins\n        // has voted. This doesn't take into subsequent inflation/deflation (rewards are issued every epoch and gas fees\n        // are burnt after every transaction), but inflation/delation is very unlikely to have a major impact on total\n        // supply during the voting period.\n        let total_voting_token_supply = coin::supply<AptosCoin>();\n        let early_resolution_vote_threshold = option::none<u128>();\n        if (option::is_some(&total_voting_token_supply)) {\n            let total_supply = *option::borrow(&total_voting_token_supply);\n            // 50% + 1 to avoid rounding errors.\n            early_resolution_vote_threshold = option::some(total_supply / 2 + 1);\n        };\n\n        let proposal_id = voting::create_proposal(\n            proposer_address,\n            @aptos_framework,\n            governance_proposal::create_proposal(\n                utf8(metadata_location),\n                utf8(metadata_hash),\n            ),\n            execution_hash,\n            governance_config.min_voting_threshold,\n            proposal_expiration,\n            early_resolution_vote_threshold,\n        );\n\n        let events = borrow_global_mut<GovernanceEvents>(@aptos_framework);\n        event::emit_event<CreateProposalEvent>(\n            &mut events.create_proposal_events,\n            CreateProposalEvent {\n                proposal_id,\n                proposer: proposer_address,\n                stake_pool,\n                execution_hash,\n                metadata_location,\n                metadata_hash,\n            },\n        );\n    }\n\n    /// Vote on proposal with `proposal_id` and voting power from `stake_pool`.\n    public entry fun vote(\n        voter: &signer,\n        stake_pool: address,\n        proposal_id: u64,\n        should_pass: bool,\n    ) acquires GovernanceEvents, VotingRecords {\n        let voter_address = signer::address_of(voter);\n        assert!(stake::get_delegated_voter(stake_pool) == voter_address, error::invalid_argument(ENOT_DELEGATED_VOTER));\n\n        // Ensure the voter doesn't double vote with the same stake pool.\n        let voting_records = borrow_global_mut<VotingRecords>(@aptos_framework);\n        let record_key = RecordKey {\n            stake_pool,\n            proposal_id,\n        };\n        assert!(\n            !table::contains(&voting_records.votes, record_key),\n            error::invalid_argument(EALREADY_VOTED));\n        table::add(&mut voting_records.votes, record_key, true);\n\n        // Voting power does not include pending_active or pending_inactive balances.\n        // In general, the stake pool should not have pending_inactive balance if it still has lockup (required to vote)\n        // And if pending_active will be added to active in the next epoch.\n        let voting_power = stake::get_current_epoch_voting_power(stake_pool);\n        // Short-circuit if the voter has no voting power.\n        assert!(voting_power > 0, error::invalid_argument(ENO_VOTING_POWER));\n\n        // The voter's stake needs to be locked up at least as long as the proposal's expiration.\n        let proposal_expiration = voting::get_proposal_expiration_secs<GovernanceProposal>(@aptos_framework, proposal_id);\n        assert!(\n            stake::get_lockup_secs(stake_pool) >= proposal_expiration,\n            error::invalid_argument(EINSUFFICIENT_STAKE_LOCKUP),\n        );\n\n        voting::vote<GovernanceProposal>(\n            &governance_proposal::create_empty_proposal(),\n            @aptos_framework,\n            proposal_id,\n            voting_power,\n            should_pass,\n        );\n\n        let events = borrow_global_mut<GovernanceEvents>(@aptos_framework);\n        event::emit_event<VoteEvent>(\n            &mut events.vote_events,\n            VoteEvent {\n                proposal_id,\n                voter: voter_address,\n                stake_pool,\n                num_votes: voting_power,\n                should_pass,\n            },\n        );\n    }\n\n    /// Return a signer for making changes to 0x1 as part of on-chain governance proposal process.\n    public fun get_signer(_proposal: GovernanceProposal, signer_address: address): signer acquires GovernanceResponsbility {\n        let governance_responsibility = borrow_global<GovernanceResponsbility>(@aptos_framework);\n        let signer_cap = simple_map::borrow(&governance_responsibility.signer_caps, &signer_address);\n        create_signer_with_capability(signer_cap)\n    }\n\n    /// Force reconfigure. To be called at the end of a proposal that alters on-chain configs.\n    public fun reconfigure(_proposal: &GovernanceProposal) {\n        reconfiguration::reconfigure();\n    }\n\n    #[test(aptos_framework = @aptos_framework, proposer = @0x123, yes_voter = @0x234, no_voter = @345)]\n    public entry fun test_voting(\n        aptos_framework: signer,\n        proposer: signer,\n        yes_voter: signer,\n        no_voter: signer,\n    ) acquires GovernanceConfig, GovernanceEvents, VotingRecords {\n        setup_voting(&aptos_framework, &proposer, &yes_voter, &no_voter);\n\n        create_proposal(\n            &proposer,\n            signer::address_of(&proposer),\n            b\"123\",\n            b\"\",\n            b\"\",\n        );\n        vote(&yes_voter, signer::address_of(&yes_voter), 0, true);\n        vote(&no_voter, signer::address_of(&no_voter), 0, false);\n\n        // Once expiration time has passed, the proposal should be considered resolve now as there are more yes votes\n        // than no.\n        timestamp::update_global_time_for_test(100001000000);\n        let proposal_state = voting::get_proposal_state<GovernanceProposal>(signer::address_of(&aptos_framework), 0);\n        assert!(proposal_state == 1, proposal_state);\n    }\n\n    #[test(aptos_framework = @aptos_framework, proposer = @0x123, voter_1 = @0x234, voter_2 = @345)]\n    #[expected_failure(abort_code = 0x10004)]\n    public entry fun test_cannot_double_vote(\n        aptos_framework: signer,\n        proposer: signer,\n        voter_1: signer,\n        voter_2: signer,\n    ) acquires GovernanceConfig, GovernanceEvents, VotingRecords {\n        setup_voting(&aptos_framework, &proposer, &voter_1, &voter_2);\n\n        create_proposal(\n            &proposer,\n            signer::address_of(&proposer),\n            b\"\",\n            b\"\",\n            b\"\",\n        );\n\n        // Double voting should throw an error.\n        vote(&voter_1, signer::address_of(&voter_1), 0, true);\n        vote(&voter_1, signer::address_of(&voter_1), 0, true);\n    }\n\n    #[test(aptos_framework = @aptos_framework, proposer = @0x123, voter_1 = @0x234, voter_2 = @345)]\n    #[expected_failure(abort_code = 0x10004)]\n    public entry fun test_cannot_double_vote_with_different_voter_addresses(\n        aptos_framework: signer,\n        proposer: signer,\n        voter_1: signer,\n        voter_2: signer,\n    ) acquires GovernanceConfig, GovernanceEvents, VotingRecords {\n        setup_voting(&aptos_framework, &proposer, &voter_1, &voter_2);\n\n        create_proposal(\n            &proposer,\n            signer::address_of(&proposer),\n            b\"\",\n            b\"\",\n            b\"\",\n        );\n\n        // Double voting should throw an error for 2 different voters if they still use the same stake pool.\n        vote(&voter_1, signer::address_of(&voter_1), 0, true);\n        stake::set_delegated_voter(&voter_1, signer::address_of(&voter_2));\n        vote(&voter_2, signer::address_of(&voter_1), 0, true);\n    }\n\n    #[test_only]\n    public fun setup_voting(aptos_framework: &signer, proposer: &signer, yes_voter: &signer, no_voter: &signer) {\n        use std::vector;\n        use aptos_framework::coin;\n        use aptos_framework::aptos_coin::{Self, AptosCoin};\n\n        timestamp::set_time_has_started_for_testing(aptos_framework);\n\n        // Initialize the governance.\n        initialize(aptos_framework, 10, 100, 1000);\n\n        // Initialize the stake pools for proposer and voters.\n        let active_validators = vector::empty<address>();\n        vector::push_back(&mut active_validators, signer::address_of(proposer));\n        vector::push_back(&mut active_validators, signer::address_of(yes_voter));\n        vector::push_back(&mut active_validators, signer::address_of(no_voter));\n        stake::create_validator_set(aptos_framework, active_validators);\n\n        let (burn_cap, mint_cap) = aptos_coin::initialize_for_test(aptos_framework);\n        // Spread stake among active and pending_inactive because both need to be accounted for when computing voting\n        // power.\n        stake::create_stake_pool(proposer, coin::mint(50, &mint_cap), coin::mint(50, &mint_cap), 10000);\n        stake::create_stake_pool(yes_voter, coin::mint(10, &mint_cap), coin::mint(10, &mint_cap), 10000);\n        stake::create_stake_pool(no_voter, coin::mint(5, &mint_cap), coin::mint(5, &mint_cap), 10000);\n        coin::destroy_mint_cap<AptosCoin>(mint_cap);\n        coin::destroy_burn_cap<AptosCoin>(burn_cap);\n    }\n}\n",
              "source_map": ""
            },
            {
              "name": "block",
              "source": "/// This module defines a struct storing the metadata of the block and new block events.\nmodule aptos_framework::block {\n    use std::error;\n    use std::vector;\n    use aptos_std::event;\n    use aptos_std::event::EventHandle;\n\n    use aptos_framework::timestamp;\n    use aptos_framework::system_addresses;\n    use aptos_framework::reconfiguration;\n    use aptos_framework::stake;\n\n    friend aptos_framework::genesis;\n\n    /// Should be in-sync with BlockResource rust struct in new_block.rs\n    struct BlockResource has key {\n        /// Height of the current block\n        height: u64,\n        /// Time period between epochs.\n        epoch_interval: u64,\n        /// Handle where events with the time of new blocks are emitted\n        new_block_events: event::EventHandle<Self::NewBlockEvent>,\n    }\n\n    /// Should be in-sync with NewBlockEvent rust struct in new_block.rs\n    struct NewBlockEvent has drop, store {\n        epoch: u64,\n        round: u64,\n        height: u64,\n        previous_block_votes_bitvec: vector<u8>,\n        proposer: address,\n        failed_proposer_indices: vector<u64>,\n        /// On-chain time during the block at the given height\n        time_microseconds: u64,\n    }\n\n    /// The `BlockResource` resource is in an invalid state\n    const EBLOCK_METADATA: u64 = 1;\n    /// An invalid signer was provided. Expected the signer to be the VM or a Validator.\n    const EVM_OR_VALIDATOR: u64 = 2;\n    const EINVALID_EPOCH_INTERVAL: u64 = 3;\n\n    /// This can only be called during Genesis.\n    public(friend) fun initialize(account: &signer, epoch_interval: u64) {\n        system_addresses::assert_aptos_framework(account);\n        assert!(epoch_interval > 0, error::invalid_argument(EINVALID_EPOCH_INTERVAL));\n\n        move_to<BlockResource>(\n            account,\n            BlockResource {\n                height: 0,\n                epoch_interval,\n                new_block_events: event::new_event_handle<Self::NewBlockEvent>(account),\n            }\n        );\n    }\n\n    /// Update the epoch interval.\n    /// Can only be called as part of the Aptos governance proposal process established by the AptosGovernance module.\n    public fun update_epoch_interval(\n        aptos_framework: &signer,\n        new_epoch_interval: u64,\n    ) acquires BlockResource {\n        system_addresses::assert_aptos_framework(aptos_framework);\n        assert!(new_epoch_interval > 0, error::invalid_argument(EINVALID_EPOCH_INTERVAL));\n\n        let block_metadata = borrow_global_mut<BlockResource>(@aptos_framework);\n        block_metadata.epoch_interval = new_epoch_interval;\n    }\n\n    /// Set the metadata for the current block.\n    /// The runtime always runs this before executing the transactions in a block.\n    fun block_prologue(\n        vm: signer,\n        epoch: u64,\n        round: u64,\n        proposer: address,\n        proposer_index_optional: vector<u64>,\n        failed_proposer_indices: vector<u64>,\n        previous_block_votes_bitvec: vector<u8>,\n        timestamp: u64\n    ) acquires BlockResource {\n        timestamp::assert_operating();\n        // Operational constraint: can only be invoked by the VM.\n        system_addresses::assert_vm(&vm);\n\n        // Authorization\n        assert!(\n            proposer == @vm_reserved || stake::is_current_epoch_validator(proposer),\n            error::permission_denied(EVM_OR_VALIDATOR)\n        );\n\n        let block_metadata_ref = borrow_global_mut<BlockResource>(@aptos_framework);\n        block_metadata_ref.height = event::counter(&block_metadata_ref.new_block_events);\n\n        let new_block_event = NewBlockEvent {\n            epoch,\n            round,\n            height: block_metadata_ref.height,\n            previous_block_votes_bitvec,\n            proposer,\n            failed_proposer_indices,\n            time_microseconds: timestamp,\n        };\n        emit_new_block_event(&vm, &mut block_metadata_ref.new_block_events, new_block_event);\n\n        // Performance scores have to be updated before the epoch transition as the transaction that triggers the\n        // transition is the last block in the previous epoch.\n        stake::update_performance_statistics(proposer_index_optional, failed_proposer_indices);\n\n        if (timestamp - reconfiguration::last_reconfiguration_time() > block_metadata_ref.epoch_interval) {\n            reconfiguration::reconfigure();\n        };\n    }\n\n    /// Get the current block height\n    public fun get_current_block_height(): u64 acquires BlockResource {\n        borrow_global<BlockResource>(@aptos_framework).height\n    }\n\n    /// Emit the event and update height and global timestamp\n    fun emit_new_block_event(vm: &signer, event_handle: &mut EventHandle<NewBlockEvent>, new_block_event: NewBlockEvent) {\n        timestamp::update_global_time(vm, new_block_event.proposer, new_block_event.time_microseconds);\n        assert!(event::counter(event_handle) == new_block_event.height, error::invalid_argument(EBLOCK_METADATA));\n        event::emit_event<NewBlockEvent>(event_handle, new_block_event);\n    }\n\n    /// Emit a `NewEpochEvent` event. This function will be invoked by genesis directly to generate the very first\n    /// reconfiguration event.\n    fun emit_genesis_block_event(vm: signer) acquires BlockResource {\n        let block_metadata_ref = borrow_global_mut<BlockResource>(@aptos_framework);\n        emit_new_block_event(\n            &vm,\n            &mut block_metadata_ref.new_block_events,\n            NewBlockEvent {\n                epoch: 0,\n                round: 0,\n                height: 0,\n                previous_block_votes_bitvec: vector::empty(),\n                proposer: @vm_reserved,\n                failed_proposer_indices: vector::empty(),\n                time_microseconds: 0,\n            }\n        );\n    }\n\n\n    #[test(aptos_framework = @aptos_framework)]\n    public entry fun test_update_epoch_interval(aptos_framework: signer) acquires BlockResource {\n        initialize(&aptos_framework, 1);\n        assert!(borrow_global<BlockResource>(@aptos_framework).epoch_interval == 1, 0);\n        update_epoch_interval(&aptos_framework, 2);\n        assert!(borrow_global<BlockResource>(@aptos_framework).epoch_interval == 2, 1);\n    }\n\n    #[test(aptos_framework = @aptos_framework, account = @0x123)]\n    #[expected_failure(abort_code = 0x50002)]\n    public entry fun test_update_epoch_interval_unauthorized_should_fail(\n        aptos_framework: signer,\n        account: signer,\n    ) acquires BlockResource {\n        initialize(&aptos_framework, 1);\n        update_epoch_interval(&account, 2);\n    }\n}\n",
              "source_map": ""
            },
            {
              "name": "bucket_table",
              "source": "/// A bucket table implementation based on linear hashing. (https://en.wikipedia.org/wiki/Linear_hashing)\n/// Compare to Table, it uses less storage slots but has higher chance of collision, it's a trade-off between space and time.\n/// Compare to other implementation, linear hashing splits one bucket a time instead of doubling buckets when expanding to avoid unexpected gas cost.\n/// BucketTable uses faster hash function SipHash instead of cryptographically secure hash functions like sha3-256 since it tolerates collisions.\nmodule aptos_framework::bucket_table {\n    use std::error;\n    use std::vector;\n    use aptos_std::aptos_hash::sip_hash_from_value;\n    use aptos_std::table_with_length::{Self, TableWithLength};\n\n    const TARGET_LOAD_PER_BUCKET: u64 = 10;\n    const SPLIT_THRESHOLD: u64 = 75;\n\n    /// Not found in the table;\n    const ENOT_FOUND: u64 = 0;\n    /// Capacity should be larger than 0.\n    const EZERO_CAPACITY: u64 = 1;\n    /// Destroy non-empty hashmap.\n    const ENOT_EMPTY: u64 = 2;\n    /// Key already exists\n    const EALREADY_EXIST: u64 = 3;\n\n    /// BucketTable entry contains both the key and value.\n    struct Entry<K, V> has store {\n        hash: u64,\n        key: K,\n        value: V,\n    }\n\n    struct BucketTable<K, V> has store {\n        buckets: TableWithLength<u64, vector<Entry<K, V>>>,\n        num_buckets: u64,\n        // number of bits to represent num_buckets\n        level: u8,\n        // total number of items\n        len: u64,\n    }\n\n    /// Create an empty BucketTable with `initial_buckets` buckets.\n    public fun new<K: drop + store, V: store>(initial_buckets: u64): BucketTable<K, V> {\n        assert!(initial_buckets > 0, error::invalid_argument(EZERO_CAPACITY));\n        let buckets = table_with_length::new();\n        table_with_length::add(&mut buckets, 0, vector::empty());\n        let map = BucketTable {\n            buckets,\n            num_buckets: 1,\n            level: 0,\n            len: 0,\n        };\n        split(&mut map, initial_buckets - 1);\n        map\n    }\n\n    /// Destroy empty map.\n    /// Aborts if it's not empty.\n    public fun destroy_empty<K, V>(map: BucketTable<K, V>) {\n        assert!(map.len == 0, error::invalid_argument(ENOT_EMPTY));\n        let i = 0;\n        while (i < map.num_buckets) {\n            vector::destroy_empty(table_with_length::remove(&mut map.buckets, i));\n            i = i + 1;\n        };\n        let BucketTable {buckets, num_buckets: _, level: _, len: _} = map;\n        table_with_length::destroy_empty(buckets);\n    }\n\n    /// Add (key, value) pair in the hash map, it may grow one bucket if current load factor exceeds the threshold.\n    /// Note it may not split the actual overflowed bucket.\n    /// Abort if `key` already exists.\n    public fun add<K, V>(map: &mut BucketTable<K, V>, key: K, value: V) {\n        let hash = sip_hash_from_value(&key);\n        let index = bucket_index(map.level, map.num_buckets, hash);\n        let bucket = table_with_length::borrow_mut(&mut map.buckets, index);\n        let i = 0;\n        let len = vector::length(bucket);\n        while (i < len) {\n            let entry = vector::borrow(bucket, i);\n            assert!(&entry.key != &key, error::invalid_argument(EALREADY_EXIST));\n            i = i + 1;\n        };\n        vector::push_back(bucket, Entry {hash, key, value});\n        map.len = map.len + 1;\n\n        if (load_factor(map) > SPLIT_THRESHOLD) {\n            split_one_bucket(map);\n        }\n    }\n\n    fun xor(a: u64, b: u64): u64 {\n        a ^ b\n    }\n    spec xor { // TODO: temporary mockup until Prover supports the operator `^`.\n        pragma opaque;\n        pragma verify = false;\n    }\n\n    /// Split the next bucket into two and re-insert existing items.\n    fun split_one_bucket<K, V>(map: &mut BucketTable<K, V>) {\n        let new_bucket_index = map.num_buckets;\n        // the next bucket to split is num_bucket without the most significant bit.\n        let to_split = xor(new_bucket_index, (1 << map.level));\n        let new_bucket = vector::empty();\n        map.num_buckets = new_bucket_index + 1;\n        // if the whole level is splitted once, bump the level.\n        if (to_split + 1 == 1 << map.level) {\n            map.level = map.level + 1;\n        };\n        let old_bucket = table_with_length::borrow_mut(&mut map.buckets, to_split);\n        // partition the bucket. after the loop, i == j and [0..i) stays in old bucket, [j..len) goes to new bucket\n        let i = 0;\n        let j = vector::length(old_bucket);\n        let len = j;\n        while (i < j) {\n            let entry = vector::borrow(old_bucket, i);\n            let index = bucket_index(map.level, map.num_buckets, entry.hash);\n            if (index == new_bucket_index) {\n                j = j - 1;\n                vector::swap(old_bucket, i, j);\n            } else {\n                i = i + 1;\n            };\n        };\n        while (j < len) {\n            let entry = vector::pop_back(old_bucket);\n            vector::push_back(&mut new_bucket, entry);\n            len = len - 1;\n        };\n        table_with_length::add(&mut map.buckets, new_bucket_index, new_bucket);\n    }\n\n    /// Return the expected bucket index to find the hash.\n    fun bucket_index(level: u8, num_buckets: u64, hash: u64): u64 {\n        let index = hash % (1 << (level + 1));\n        if (index < num_buckets) {\n            // in existing bucket\n            index\n        } else {\n            // in unsplitted bucket\n            index % (1 << level)\n        }\n    }\n\n    /// Acquire an immutable reference to the value which `key` maps to.\n    /// Aborts if there is no entry for `key`.\n    /// The requirement of &mut BucketTable is to bypass the borrow checker issue described in https://github.com/move-language/move/issues/95\n    /// Once Table supports borrow by K, we can remove the &mut\n    public fun borrow<K: copy + drop, V>(map: &mut BucketTable<K, V>, key: K): &V {\n        let index = bucket_index(map.level, map.num_buckets, sip_hash_from_value(&key));\n        let bucket = table_with_length::borrow_mut(&mut map.buckets, index);\n        let i = 0;\n        let len = vector::length(bucket);\n        while (i < len) {\n            let entry = vector::borrow(bucket, i);\n            if (&entry.key == &key) {\n                return &entry.value\n            };\n            i = i + 1;\n        };\n        abort error::invalid_argument(ENOT_FOUND)\n    }\n\n    /// Acquire a mutable reference to the value which `key` maps to.\n    /// Aborts if there is no entry for `key`.\n    public fun borrow_mut<K: copy + drop, V>(map: &mut BucketTable<K, V>, key: K): &mut V {\n        let index = bucket_index(map.level, map.num_buckets, sip_hash_from_value(&key));\n        let bucket = table_with_length::borrow_mut(&mut map.buckets, index);\n        let i = 0;\n        let len = vector::length(bucket);\n        while (i < len) {\n            let entry = vector::borrow_mut(bucket, i);\n            if (&entry.key == &key) {\n                return &mut entry.value\n            };\n            i = i + 1;\n        };\n        abort error::invalid_argument(ENOT_FOUND)\n    }\n\n    /// Returns true iff `table` contains an entry for `key`.\n    public fun contains<K, V>(map: &BucketTable<K, V>, key: &K): bool {\n        let index = bucket_index(map.level, map.num_buckets, sip_hash_from_value(key));\n        let bucket = table_with_length::borrow(&map.buckets, index);\n        let i = 0;\n        let len = vector::length(bucket);\n        while (i < len) {\n            let entry = vector::borrow(bucket, i);\n            if (&entry.key == key) {\n                return true\n            };\n            i = i + 1;\n        };\n        false\n    }\n\n    /// Remove from `table` and return the value which `key` maps to.\n    /// Aborts if there is no entry for `key`.\n    public fun remove<K: drop, V>(map: &mut BucketTable<K,V>, key: &K): V {\n        let index = bucket_index(map.level, map.num_buckets, sip_hash_from_value(key));\n        let bucket = table_with_length::borrow_mut(&mut map.buckets, index);\n        let i = 0;\n        let len = vector::length(bucket);\n        while (i < len) {\n            let entry = vector::borrow(bucket, i);\n            if (&entry.key == key) {\n                let Entry {hash:_, key:_, value} = vector::swap_remove(bucket, i);\n                map.len = map.len - 1;\n                return value\n            };\n            i = i + 1;\n        };\n        abort error::invalid_argument(ENOT_FOUND)\n    }\n\n    /// Returns the length of the table, i.e. the number of entries.\n    public fun length<K, V>(map: &BucketTable<K, V>): u64 {\n        map.len\n    }\n\n    /// Return the load factor of the hashmap.\n    public fun load_factor<K, V>(map: &BucketTable<K, V>): u64 {\n        map.len * 100 / (map.num_buckets * TARGET_LOAD_PER_BUCKET)\n    }\n\n    /// Reserve `additional_buckets` more buckets.\n    public fun split<K, V>(map: &mut BucketTable<K, V>, additional_buckets: u64) {\n        while (additional_buckets > 0) {\n            additional_buckets = additional_buckets - 1;\n            split_one_bucket(map);\n        }\n    }\n\n    #[test]\n    fun hash_map_test() {\n        let map = new(1);\n        let i = 0;\n        while (i < 200) {\n            add(&mut map, i, i);\n            i = i + 1;\n        };\n        assert!(length(&map) == 200, 0);\n        i = 0;\n        while (i < 200) {\n            *borrow_mut(&mut map, i) = i * 2;\n            assert!(*borrow(&mut map, i) == i * 2, 0);\n            i = i + 1;\n        };\n        i = 0;\n        assert!(map.num_buckets > 20, map.num_buckets);\n        while (i < 200) {\n            assert!(contains(&map, &i), 0);\n            assert!(remove(&mut map, &i) == i * 2, 0);\n            i = i + 1;\n        };\n        destroy_empty(map);\n    }\n\n    #[test]\n    fun hash_map_split_test() {\n        let map: BucketTable<u64, u64> = new(1);\n        let i = 1;\n        let level = 0;\n        while (i <= 256) {\n            assert!(map.num_buckets == i, 0);\n            assert!(map.level == level, i);\n            split_one_bucket(&mut map);\n            i = i + 1;\n            if (i == 1 << (level + 1)) {\n                level = level + 1;\n            };\n        };\n        destroy_empty(map);\n    }\n\n    #[test]\n    fun hash_map_bucket_index_test() {\n        let map: BucketTable<u64, u64> = new(8);\n        assert!(map.level == 3, 0);\n        let i = 0;\n        while (i < 4) {\n            split_one_bucket(&mut map);\n            i = i + 1;\n        };\n        assert!(map.level == 3, 0);\n        assert!(map.num_buckets == 12, 0);\n        i = 0;\n        while (i < 256) {\n            let j = i & 15; // i % 16\n            if (j >= map.num_buckets) {\n                j = xor(j, 8); // i % 8\n            };\n            let index = bucket_index(map.level, map.num_buckets, i);\n            assert!(index == j, 0);\n            i = i + 1;\n        };\n        destroy_empty(map);\n    }\n}\n",
              "source_map": ""
            },
            {
              "name": "util",
              "source": "/// Utility functions used by the framework modules.\nmodule aptos_framework::util {\n    friend aptos_framework::code;\n    friend aptos_framework::gas_schedule;\n\n    /// Native function to deserialize a type T.\n    /// TODO: may want to move it in extra module if needed also in other places inside of the Fx.\n    /// However, should not make this function public outside of the Fx.\n    public(friend) native fun from_bytes<T: copy + drop>(bytes: vector<u8>): T;\n}\n",
              "source_map": "0x44e0146be47a6c575578b8bfac32d055d01da91db1f58e383bbe47f98819fb494d00000051000000010000000000000000000000000000000000000000000000000000000000000001047574696c0001000044e0146be47a6c575578b8bfac32d055d01da91db1f58e383bbe47f98819fb499c010000a601000001015444e0146be47a6c575578b8bfac32d055d01da91db1f58e383bbe47f98819fb49a7010000a80100000105627974657344e0146be47a6c575578b8bfac32d055d01da91db1f58e383bbe47f98819fb49b7010000bc0100000000000100"
            },
            {
              "name": "code",
              "source": "/// This module supports functionality related to code management.\nmodule aptos_framework::code {\n    use std::string::String;\n    use std::error;\n    use std::signer;\n    use std::vector;\n\n    use aptos_framework::util;\n    use aptos_framework::system_addresses;\n\n    // ----------------------------------------------------------------------\n    // Code Publishing\n\n    /// The package registry at the given address.\n    struct PackageRegistry has key {\n        /// Packages installed at this address.\n        packages: vector<PackageMetadata>,\n    }\n\n    /// Metadata for a package.\n    struct PackageMetadata has store, copy, drop {\n        /// Name of this package.\n        name: String,\n        /// The upgrade policy of this package.\n        upgrade_policy: UpgradePolicy,\n        /// The BuildInfo, in the BuildInfo.yaml format.\n        build_info: String,\n        /// The package manifest, in the Move.toml format.\n        manifest: String,\n        /// The list of modules installed by this package.\n        modules: vector<ModuleMetadata>,\n        /// Error map, in BCS.\n        error_map: vector<u8>,\n        /// ABIs, in BCS\n        abis: vector<vector<u8>>\n    }\n\n    /// Metadata about a module in a package.\n    struct ModuleMetadata has store, copy, drop {\n        /// Name of the module.\n        name: String,\n        /// Source text.\n        source: String,\n        /// Source map, in internal encoding\n        source_map: vector<u8>,\n    }\n\n    /// Describes an upgrade policy\n    struct UpgradePolicy has store, copy, drop {\n        policy: u8\n    }\n\n    /// A package is attempted to publish with module names clashing with modules published by other packages on this\n    /// address.\n    const EMODULE_NAME_CLASH: u64 = 0x1;\n\n    /// A package is attempted to upgrade which is marked as immutable.\n    const EUPGRADE_IMMUTABLE: u64 = 0x2;\n\n    /// A package is attempted to upgrade with a weaker policy than previously.\n    const EUPGRADE_WEAKER_POLICY: u64 = 0x3;\n\n    /// A package is attempted to upgrade but misses modules which existed before.\n    const EMODULE_MISSING: u64 = 0x4;\n\n    /// Whether unconditional code upgrade with no compatibility check is allowed. This\n    /// publication mode should only be used for modules which aren't shared with user others.\n    /// The developer is responsible for not breaking memory layout of any resources he already\n    /// stored on chain.\n    public fun upgrade_policy_no_compat(): UpgradePolicy {\n        UpgradePolicy{policy: 0}\n    }\n\n    /// Whether a compatibility check should be performed for upgrades. The check only passes if\n    /// a new module has (a) the same public functions (b) for existing resources, no layout change.\n    public fun upgrade_policy_compat(): UpgradePolicy {\n        UpgradePolicy{policy: 1}\n    }\n\n    /// Whether the modules in the package are immutable and cannot be upgraded.\n    public fun upgrade_policy_immutable(): UpgradePolicy {\n        UpgradePolicy{policy: 2}\n    }\n\n    /// Whether the upgrade policy can be changed. In general, the policy can be only\n    /// strengthened but not weakened.\n    public fun can_change_upgrade_policy_to(from: UpgradePolicy, to: UpgradePolicy): bool {\n        from.policy <= to.policy\n    }\n\n    /// Initialize package metadata for Genesis.\n    fun initialize(aptos_framework: &signer, package_owner: &signer, metadata: PackageMetadata)\n    acquires PackageRegistry {\n        system_addresses::assert_aptos_framework(aptos_framework);\n        let addr = signer::address_of(package_owner);\n        if (!exists<PackageRegistry>(addr)) {\n            move_to(package_owner, PackageRegistry{packages: vector[metadata]})\n        } else {\n            vector::push_back(&mut borrow_global_mut<PackageRegistry>(addr).packages, metadata)\n        }\n    }\n\n    /// Publishes a package at the given signer's address. The caller must provide package metadata describing the\n    /// package.\n    public fun publish_package(owner: &signer, pack: PackageMetadata, code: vector<vector<u8>>) acquires PackageRegistry {\n        let addr = signer::address_of(owner);\n        if (!exists<PackageRegistry>(addr)) {\n            move_to(owner, PackageRegistry{packages: vector::empty()})\n        };\n\n        // Check package\n        let module_names = get_module_names(&pack);\n        let packages = &mut borrow_global_mut<PackageRegistry>(addr).packages;\n        let len = vector::length(packages);\n        let index = len;\n        let i = 0;\n        while (i < len) {\n            let old = vector::borrow(packages, i);\n            if (old.name == pack.name) {\n                check_upgradability(old, &pack, &module_names);\n                index = i;\n            } else {\n                check_coexistence(old, &module_names)\n            };\n            i = i + 1;\n        };\n\n        // Update registry\n        if (index < len) {\n            *vector::borrow_mut(packages, index) = pack\n        } else {\n            vector::push_back(packages, pack)\n        };\n\n        // Request publish\n        request_publish(addr, module_names, code, pack.upgrade_policy.policy)\n    }\n\n    /// Same as `publish_package` but as an entry function which can be called as a transaction. Because\n    /// of current restrictions for txn parameters, the metadata needs to be passed in serialized form.\n    public entry fun publish_package_txn(owner: &signer, pack_serialized: vector<u8>, code: vector<vector<u8>>)\n    acquires PackageRegistry {\n        publish_package(owner, util::from_bytes<PackageMetadata>(pack_serialized), code)\n    }\n\n    // Helpers\n    // -------\n\n    /// Checks whether the given package is upgradable, and returns true if a compatibility check is needed.\n    fun check_upgradability(\n            old_pack: &PackageMetadata, new_pack: &PackageMetadata, new_modules: &vector<String>) {\n        assert!(old_pack.upgrade_policy.policy < upgrade_policy_immutable().policy,\n            error::invalid_argument(EUPGRADE_IMMUTABLE));\n        assert!(can_change_upgrade_policy_to( old_pack.upgrade_policy, new_pack.upgrade_policy),\n            error::invalid_argument(EUPGRADE_WEAKER_POLICY));\n        let old_modules = get_module_names(old_pack);\n        let i = 0;\n        while (i < vector::length(&old_modules)) {\n            assert!(\n                vector::contains(new_modules, vector::borrow(&old_modules, i)),\n                EMODULE_MISSING\n            );\n            i = i + 1;\n        }\n    }\n\n    /// Checks whether a new package with given names can co-exist with old package.\n    fun check_coexistence(old_pack: &PackageMetadata, new_modules: &vector<String>) {\n        // The modules introduced by each package must not overlap with `names`.\n        let i = 0;\n        while (i < vector::length(&old_pack.modules)) {\n            let old_mod = vector::borrow(&old_pack.modules, i);\n            let j = 0;\n            while (j < vector::length(new_modules)) {\n                let name = vector::borrow(new_modules, j);\n                assert!(&old_mod.name != name, error::already_exists(EMODULE_NAME_CLASH));\n                j = j + 1;\n            };\n            i = i + 1;\n        }\n    }\n\n    /// Get the names of the modules in a package.\n    fun get_module_names(pack: &PackageMetadata): vector<String> {\n        let module_names = vector::empty();\n        let i = 0;\n        while (i < vector::length(&pack.modules)) {\n            vector::push_back(&mut module_names, vector::borrow(&pack.modules, i).name);\n            i = i + 1\n        };\n        module_names\n    }\n\n    /// Native function to initiate module loading\n    native fun request_publish(\n        owner: address,\n        expected_modules: vector<String>,\n        bundle: vector<vector<u8>>,\n        policy: u8\n    );\n}\n",
              "source_map": ""
            },
            {
              "name": "coins",
              "source": "/// This module allows for more convenient managing of coins across coin::CoinStore and\n/// account::Account\nmodule aptos_framework::coins {\n    use std::signer;\n    use aptos_framework::account;\n    use aptos_framework::coin;\n\n    /// Script function to register to receive a specific `CoinType`. An account that wants to hold a coin type\n    /// has to explicitly registers to do so. The register creates a special `CoinStore`\n    /// to hold the specified `CoinType`.\n    public entry fun register<CoinType>(account: &signer) {\n        register_internal<CoinType>(account);\n    }\n\n    public fun register_internal<CoinType>(account: &signer) {\n        coin::register<CoinType>(account);\n        account::register_coin<CoinType>(signer::address_of(account));\n    }\n}\n",
              "source_map": "0xd0d2c5858adcb8acaab6c2ccefb9b0e352a9b29904a6a07d00e597c2d675ca46850000008a00000001000000000000000000000000000000000000000000000000000000000000000105636f696e7300020000d0d2c5858adcb8acaab6c2ccefb9b0e352a9b29904a6a07d00e597c2d675ca46ec010000f40100000108436f696e54797065d0d2c5858adcb8acaab6c2ccefb9b0e352a9b29904a6a07d00e597c2d675ca46f5010000fd01000001076163636f756e74d0d2c5858adcb8acaab6c2ccefb9b0e352a9b29904a6a07d00e597c2d675ca46ff010000060200000000030000d0d2c5858adcb8acaab6c2ccefb9b0e352a9b29904a6a07d00e597c2d675ca46370200003e0200000100d0d2c5858adcb8acaab6c2ccefb9b0e352a9b29904a6a07d00e597c2d675ca461b0200003f0200000200d0d2c5858adcb8acaab6c2ccefb9b0e352a9b29904a6a07d00e597c2d675ca463f02000040020000000100d0d2c5858adcb8acaab6c2ccefb9b0e352a9b29904a6a07d00e597c2d675ca4657020000680200000108436f696e54797065d0d2c5858adcb8acaab6c2ccefb9b0e352a9b29904a6a07d00e597c2d675ca46690200007102000001076163636f756e74d0d2c5858adcb8acaab6c2ccefb9b0e352a9b29904a6a07d00e597c2d675ca46730200007a0200000000060000d0d2c5858adcb8acaab6c2ccefb9b0e352a9b29904a6a07d00e597c2d675ca46a8020000af0200000100d0d2c5858adcb8acaab6c2ccefb9b0e352a9b29904a6a07d00e597c2d675ca468f020000b00200000200d0d2c5858adcb8acaab6c2ccefb9b0e352a9b29904a6a07d00e597c2d675ca46ee020000f50200000300d0d2c5858adcb8acaab6c2ccefb9b0e352a9b29904a6a07d00e597c2d675ca46db020000f60200000400d0d2c5858adcb8acaab6c2ccefb9b0e352a9b29904a6a07d00e597c2d675ca46ba020000f70200000500d0d2c5858adcb8acaab6c2ccefb9b0e352a9b29904a6a07d00e597c2d675ca46f7020000f80200000000"
            },
            {
              "name": "consensus_config",
              "source": "/// Maintains the consensus config for the blockchain. The config is stored in a\n/// Reconfiguration, and may be updated by root.\nmodule aptos_framework::consensus_config {\n    use aptos_framework::reconfiguration;\n    use aptos_framework::timestamp;\n    use aptos_framework::system_addresses;\n\n    friend aptos_framework::genesis;\n\n    struct ConsensusConfig has key {\n        config: vector<u8>,\n    }\n\n    /// Publishes the ConsensusConfig config.\n    public(friend) fun initialize(account: &signer, config: vector<u8>) {\n        timestamp::assert_genesis();\n        system_addresses::assert_aptos_framework(account);\n\n        move_to(account, ConsensusConfig { config });\n    }\n\n    /// Update the config.\n    public fun set(account: &signer, config: vector<u8>) acquires ConsensusConfig {\n        system_addresses::assert_aptos_framework(account);\n        let config_ref = &mut borrow_global_mut<ConsensusConfig>(@aptos_framework).config;\n        *config_ref = config;\n        reconfiguration::reconfigure();\n    }\n}\n",
              "source_map": "0xae85c761a45704346ffa75806d959301d84a83090ce02e4f200c889dd0dc1b6a9a000000aa00000001000000000000000000000000000000000000000000000000000000000000000110636f6e73656e7375735f636f6e666967010000ae85c761a45704346ffa75806d959301d84a83090ce02e4f200c889dd0dc1b6a58010000670100000001ae85c761a45704346ffa75806d959301d84a83090ce02e4f200c889dd0dc1b6a7a01000080010000020000ae85c761a45704346ffa75806d959301d84a83090ce02e4f200c889dd0dc1b6ada010000e40100000002076163636f756e74ae85c761a45704346ffa75806d959301d84a83090ce02e4f200c889dd0dc1b6ae5010000ec01000006636f6e666967ae85c761a45704346ffa75806d959301d84a83090ce02e4f200c889dd0dc1b6af7010000fd0100000000080000ae85c761a45704346ffa75806d959301d84a83090ce02e4f200c889dd0dc1b6a15020000300200000100ae85c761a45704346ffa75806d959301d84a83090ce02e4f200c889dd0dc1b6a630200006a0200000200ae85c761a45704346ffa75806d959301d84a83090ce02e4f200c889dd0dc1b6a3a0200006b0200000300ae85c761a45704346ffa75806d959301d84a83090ce02e4f200c889dd0dc1b6a7e020000850200000400ae85c761a45704346ffa75806d959301d84a83090ce02e4f200c889dd0dc1b6a990200009f0200000500ae85c761a45704346ffa75806d959301d84a83090ce02e4f200c889dd0dc1b6a87020000a10200000600ae85c761a45704346ffa75806d959301d84a83090ce02e4f200c889dd0dc1b6a760200007d0200000700ae85c761a45704346ffa75806d959301d84a83090ce02e4f200c889dd0dc1b6aa2020000a3020000000100ae85c761a45704346ffa75806d959301d84a83090ce02e4f200c889dd0dc1b6ad5020000d80200000002076163636f756e74ae85c761a45704346ffa75806d959301d84a83090ce02e4f200c889dd0dc1b6ad9020000e002000006636f6e666967ae85c761a45704346ffa75806d959301d84a83090ce02e4f200c889dd0dc1b6aeb020000f1020000010a636f6e6669675f726566ae85c761a45704346ffa75806d959301d84a83090ce02e4f200c889dd0dc1b6a610300006b030000000b0000ae85c761a45704346ffa75806d959301d84a83090ce02e4f200c889dd0dc1b6a4b030000520300000100ae85c761a45704346ffa75806d959301d84a83090ce02e4f200c889dd0dc1b6a22030000530300000200ae85c761a45704346ffa75806d959301d84a83090ce02e4f200c889dd0dc1b6a96030000a60300000300ae85c761a45704346ffa75806d959301d84a83090ce02e4f200c889dd0dc1b6a73030000840300000400ae85c761a45704346ffa75806d959301d84a83090ce02e4f200c889dd0dc1b6a6e030000ae0300000500ae85c761a45704346ffa75806d959301d84a83090ce02e4f200c889dd0dc1b6a610300006b0300000600ae85c761a45704346ffa75806d959301d84a83090ce02e4f200c889dd0dc1b6ac6030000cc0300000700ae85c761a45704346ffa75806d959301d84a83090ce02e4f200c889dd0dc1b6ab9030000c30300000800ae85c761a45704346ffa75806d959301d84a83090ce02e4f200c889dd0dc1b6ab8030000cc0300000900ae85c761a45704346ffa75806d959301d84a83090ce02e4f200c889dd0dc1b6ad6030000f40300000a00ae85c761a45704346ffa75806d959301d84a83090ce02e4f200c889dd0dc1b6af4030000f50300000000"
            },
            {
              "name": "gas_schedule",
              "source": "/// This module defines structs and methods to initialize VM configurations,\n/// including different costs of running the VM.\nmodule aptos_framework::gas_schedule {\n    use std::string::String;\n\n    use aptos_framework::reconfiguration;\n    use aptos_framework::system_addresses;\n    use aptos_framework::timestamp;\n    use aptos_framework::util::from_bytes;\n\n    friend aptos_framework::genesis;\n\n    /// The provided gas constants were inconsistent.\n    const EGAS_CONSTANT_INCONSISTENCY: u64 = 1;\n\n    struct GasEntry has store, copy, drop {\n        key: String,\n        val: u64,\n    }\n\n    struct GasSchedule has key, copy, drop {\n        entries: vector<GasEntry>\n    }\n\n    /// Only called during genesis.\n    public(friend) fun initialize(account: &signer, gas_schedule_blob: vector<u8>) {\n        timestamp::assert_genesis();\n        system_addresses::assert_aptos_framework(account);\n\n        // TODO(Gas): check if gas schedule is consistent\n        move_to<GasSchedule>(account, from_bytes(gas_schedule_blob));\n    }\n\n    public entry fun set_gas_schedule(account: &signer, gas_schedule_blob: vector<u8>) acquires GasSchedule {\n        timestamp::assert_operating();\n        system_addresses::assert_core_resource(account);\n\n        // TODO(Gas): check if gas schedule is consistent\n        let gas_schedule = borrow_global_mut<GasSchedule>(@aptos_framework);\n        *gas_schedule = from_bytes(gas_schedule_blob);\n\n        reconfiguration::reconfigure();\n    }\n}\n",
              "source_map": "0x3b59dc37e49b2ccb7e505d0d29508d905ec7dcbf034fbae7ae886dc5771ee86b96000000a20000000100000000000000000000000000000000000000000000000000000000000000010c6761735f7363686564756c650200003b59dc37e49b2ccb7e505d0d29508d905ec7dcbf034fbae7ae886dc5771ee86b000200000802000000023b59dc37e49b2ccb7e505d0d29508d905ec7dcbf034fbae7ae886dc5771ee86b290200002c0200003b59dc37e49b2ccb7e505d0d29508d905ec7dcbf034fbae7ae886dc5771ee86b3e0200004102000001003b59dc37e49b2ccb7e505d0d29508d905ec7dcbf034fbae7ae886dc5771ee86b5a0200006502000000013b59dc37e49b2ccb7e505d0d29508d905ec7dcbf034fbae7ae886dc5771ee86b840200008b0200000200003b59dc37e49b2ccb7e505d0d29508d905ec7dcbf034fbae7ae886dc5771ee86be0020000ea0200000002076163636f756e743b59dc37e49b2ccb7e505d0d29508d905ec7dcbf034fbae7ae886dc5771ee86beb020000f2020000116761735f7363686564756c655f626c6f623b59dc37e49b2ccb7e505d0d29508d905ec7dcbf034fbae7ae886dc5771ee86bfd0200000e03000000000800003b59dc37e49b2ccb7e505d0d29508d905ec7dcbf034fbae7ae886dc5771ee86b260300004103000001003b59dc37e49b2ccb7e505d0d29508d905ec7dcbf034fbae7ae886dc5771ee86b740300007b03000002003b59dc37e49b2ccb7e505d0d29508d905ec7dcbf034fbae7ae886dc5771ee86b4b0300007c03000003003b59dc37e49b2ccb7e505d0d29508d905ec7dcbf034fbae7ae886dc5771ee86bd6030000dd03000004003b59dc37e49b2ccb7e505d0d29508d905ec7dcbf034fbae7ae886dc5771ee86bea030000fb03000005003b59dc37e49b2ccb7e505d0d29508d905ec7dcbf034fbae7ae886dc5771ee86bdf030000fc03000006003b59dc37e49b2ccb7e505d0d29508d905ec7dcbf034fbae7ae886dc5771ee86bc1030000c803000007003b59dc37e49b2ccb7e505d0d29508d905ec7dcbf034fbae7ae886dc5771ee86bfd030000fe0300000001003b59dc37e49b2ccb7e505d0d29508d905ec7dcbf034fbae7ae886dc5771ee86b1b0400002b0400000002076163636f756e743b59dc37e49b2ccb7e505d0d29508d905ec7dcbf034fbae7ae886dc5771ee86b2c04000033040000116761735f7363686564756c655f626c6f623b59dc37e49b2ccb7e505d0d29508d905ec7dcbf034fbae7ae886dc5771ee86b3e0400004f040000010c6761735f7363686564756c653b59dc37e49b2ccb7e505d0d29508d905ec7dcbf034fbae7ae886dc5771ee86b1b05000027050000000c00003b59dc37e49b2ccb7e505d0d29508d905ec7dcbf034fbae7ae886dc5771ee86b7c0400009904000001003b59dc37e49b2ccb7e505d0d29508d905ec7dcbf034fbae7ae886dc5771ee86bca040000d104000002003b59dc37e49b2ccb7e505d0d29508d905ec7dcbf034fbae7ae886dc5771ee86ba3040000d204000003003b59dc37e49b2ccb7e505d0d29508d905ec7dcbf034fbae7ae886dc5771ee86b490500005905000004003b59dc37e49b2ccb7e505d0d29508d905ec7dcbf034fbae7ae886dc5771ee86b2a0500003b05000005003b59dc37e49b2ccb7e505d0d29508d905ec7dcbf034fbae7ae886dc5771ee86b1b0500002705000006003b59dc37e49b2ccb7e505d0d29508d905ec7dcbf034fbae7ae886dc5771ee86b7f0500009005000007003b59dc37e49b2ccb7e505d0d29508d905ec7dcbf034fbae7ae886dc5771ee86b740500009105000008003b59dc37e49b2ccb7e505d0d29508d905ec7dcbf034fbae7ae886dc5771ee86b650500007105000009003b59dc37e49b2ccb7e505d0d29508d905ec7dcbf034fbae7ae886dc5771ee86b64050000910500000a003b59dc37e49b2ccb7e505d0d29508d905ec7dcbf034fbae7ae886dc5771ee86b9c050000ba0500000b003b59dc37e49b2ccb7e505d0d29508d905ec7dcbf034fbae7ae886dc5771ee86bba050000bb05000000011b454741535f434f4e5354414e545f494e434f4e53495354454e43590000"
            },
            {
              "name": "version",
              "source": "/// Maintains the version number for the blockchain.\nmodule aptos_framework::version {\n    use std::error;\n    use aptos_framework::reconfiguration;\n    use aptos_framework::timestamp;\n    use aptos_framework::system_addresses;\n\n    friend aptos_framework::genesis;\n\n    struct Version has key, copy, drop, store {\n        major: u64,\n    }\n\n    /// Tried to set an invalid major version for the VM. Major versions must be strictly increasing\n    const EINVALID_MAJOR_VERSION_NUMBER: u64 = 1;\n\n    /// Only called during genesis.\n    /// Publishes the Version config.\n    public(friend) fun initialize(account: &signer, initial_version: u64) {\n        timestamp::assert_genesis();\n        system_addresses::assert_aptos_framework(account);\n\n        move_to(\n            account,\n            Version { major: initial_version },\n        );\n    }\n\n    /// Updates the major version to a larger version.\n    /// This is only used in test environments and outside of them, the core resources account shouldn't exist.\n    public entry fun set_version(account: signer, major: u64) acquires Version {\n        system_addresses::assert_core_resource(&account);\n        let old_major = *&borrow_global<Version>(@aptos_framework).major;\n\n        assert!(\n            old_major < major,\n            error::invalid_argument(EINVALID_MAJOR_VERSION_NUMBER)\n        );\n\n        let config = borrow_global_mut<Version>(@aptos_framework);\n        config.major = major;\n\n        reconfiguration::reconfigure();\n    }\n}\n",
              "source_map": "0x277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755d4d000000540000000100000000000000000000000000000000000000000000000000000000000000010776657273696f6e010000277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755d160100001d0100000001277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755d4301000048010000020000277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755d4f020000590200000002076163636f756e74277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755d5a020000610200000f696e697469616c5f76657273696f6e277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755d6c0200007b0200000000080000277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755d8c020000a70200000100277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755dda020000e10200000200277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755db1020000e20200000300277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755d02030000090300000400277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755d28030000370300000500277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755d17030000390300000600277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755ded020000f40200000700277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755d4403000045030000000100277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755d09040000140400000002076163636f756e74277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755d150400001c040000056d616a6f72277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755d260400002b0400000206636f6e666967277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755d550500005b050000096f6c645f6d616a6f72277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755d8b0400009404000000170000277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755d740400007c0400000100277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755d4d0400007d0400000200277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755db0040000c00400000300277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755d99040000a60400000400277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755d98040000c70400000500277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755d97040000c70400000600277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755d8b040000940400000700277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755de7040000f00400000800277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755df3040000f80400000900277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755df1040000f20400000a00277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755dd2040000460500000b00277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755d1e0500003b0500000c00277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755d060500003c0500000d00277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755dd2040000460500000e00277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755d79050000890500000f00277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755d5e0500006f0500001000277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755d550500005b0500001100277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755da3050000a80500001200277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755d940500009a0500001300277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755d94050000a00500001400277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755d94050000a80500001500277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755db3050000d10500001600277bb1f9554c8c0a43dc19404f950db7d7b4260888269d7ab4b1e852c78b755dd1050000d205000000011d45494e56414c49445f4d414a4f525f56455253494f4e5f4e554d4245520000"
            },
            {
              "name": "genesis",
              "source": "module aptos_framework::genesis {\n    use std::error;\n    use std::vector;\n\n    use aptos_framework::account;\n    use aptos_framework::aptos_coin::{Self, AptosCoin};\n    use aptos_framework::aptos_governance;\n    use aptos_framework::block;\n    use aptos_framework::chain_id;\n    use aptos_framework::coin::MintCapability;\n    use aptos_framework::coins;\n    use aptos_framework::consensus_config;\n    use aptos_framework::gas_schedule;\n    use aptos_framework::reconfiguration;\n    use aptos_framework::stake;\n    use aptos_framework::timestamp;\n    use aptos_framework::transaction_fee;\n    use aptos_framework::staking_config;\n    use aptos_framework::version;\n\n    /// Invalid epoch duration.\n    const EINVALID_EPOCH_DURATION: u64 = 1;\n    const EINVALID_ADDRESSES: u64 = 2;\n\n    /// Genesis step 1: Initialize aptos framework account and core modules on chain.\n    fun initialize(\n        gas_schedule: vector<u8>,\n        chain_id: u8,\n        initial_version: u64,\n        consensus_config: vector<u8>,\n        epoch_interval: u64,\n        minimum_stake: u64,\n        maximum_stake: u64,\n        recurring_lockup_duration_secs: u64,\n        allow_validator_set_change: bool,\n        rewards_rate: u64,\n        rewards_rate_denominator: u64,\n        voting_power_increase_limit: u64,\n    ) {\n        // Initialize the aptos framework account. This is the account where system resources and modules will be\n        // deployed to. This will be entirely managed by on-chain governance and no entities have the key or privileges\n        // to use this account.\n        let (aptos_framework_account, framework_signer_cap) = account::create_aptos_framework_account();\n\n        // Initialize account configs on aptos framework account.\n        account::initialize(\n            &aptos_framework_account,\n            @aptos_framework,\n            b\"account\",\n            b\"script_prologue\",\n            b\"module_prologue\",\n            b\"writeset_prologue\",\n            b\"multi_agent_script_prologue\",\n            b\"epilogue\",\n            b\"writeset_epilogue\",\n        );\n\n        // Give the decentralized on-chain governance control over the core framework account.\n        aptos_governance::store_signer_cap(&aptos_framework_account, @aptos_framework, framework_signer_cap);\n\n        consensus_config::initialize(&aptos_framework_account, consensus_config);\n        version::initialize(&aptos_framework_account, initial_version);\n        stake::initialize(&aptos_framework_account);\n        staking_config::initialize(\n            &aptos_framework_account,\n            minimum_stake,\n            maximum_stake,\n            recurring_lockup_duration_secs,\n            allow_validator_set_change,\n            rewards_rate,\n            rewards_rate_denominator,\n            voting_power_increase_limit,\n        );\n        gas_schedule::initialize(&aptos_framework_account, gas_schedule);\n\n        // This needs to be called at the very end because earlier initializations might rely on timestamp not being\n        // initialized yet.\n        chain_id::initialize(&aptos_framework_account, chain_id);\n        reconfiguration::initialize(&aptos_framework_account);\n        block::initialize(&aptos_framework_account, epoch_interval);\n        timestamp::set_time_has_started(&aptos_framework_account);\n    }\n\n    /// Genesis step 2: Initialize Aptos coin.\n    fun initialize_aptos_coin(aptos_framework: &signer): MintCapability<AptosCoin> {\n        let (burn_cap, mint_cap) = aptos_coin::initialize(aptos_framework);\n        // Give stake module MintCapability<AptosCoin> so it can mint rewards.\n        stake::store_aptos_coin_mint_cap(aptos_framework, mint_cap);\n\n        // Give transaction_fee module BurnCapability<AptosCoin> so it can burn gas.\n        transaction_fee::store_aptos_coin_burn_cap(aptos_framework, burn_cap);\n\n        mint_cap\n    }\n\n    /// Only called for testnets and e2e tests.\n    fun initialize_core_resources_and_aptos_coin(\n        aptos_framework: &signer,\n        core_resources_auth_key: vector<u8>,\n    ) {\n        let core_resources = account::create_account_internal(@core_resources);\n        account::rotate_authentication_key_internal(&core_resources, core_resources_auth_key);\n        let mint_cap = initialize_aptos_coin(aptos_framework);\n        aptos_coin::configure_accounts_for_test(aptos_framework, &core_resources, mint_cap);\n    }\n\n    /// Sets up the initial validator set for the network.\n    /// The validator \"owner\" accounts, and their authentication\n    /// Addresses (and keys) are encoded in the `owners`\n    /// Each validator signs consensus messages with the private key corresponding to the Ed25519\n    /// public key in `consensus_pubkeys`.\n    /// Finally, each validator must specify the network address\n    /// (see types/src/network_address/mod.rs) for itself and its full nodes.\n    ///\n    /// Network address fields are a vector per account, where each entry is a vector of addresses\n    /// encoded in a single BCS byte array.\n    fun create_initialize_validators(\n        aptos_framework_account: signer,\n        owners: vector<address>,\n        consensus_pubkeys: vector<vector<u8>>,\n        proof_of_possession: vector<vector<u8>>,\n        validator_network_addresses: vector<vector<u8>>,\n        full_node_network_addresses: vector<vector<u8>>,\n        staking_distribution: vector<u64>,\n    ) {\n        let num_owners = vector::length(&owners);\n        let num_validator_network_addresses = vector::length(&validator_network_addresses);\n        let num_full_node_network_addresses = vector::length(&full_node_network_addresses);\n        assert!(\n            num_validator_network_addresses == num_full_node_network_addresses,\n            error::invalid_argument(EINVALID_ADDRESSES),\n        );\n        let num_staking = vector::length(&staking_distribution);\n        assert!(num_full_node_network_addresses == num_staking, error::invalid_argument(EINVALID_ADDRESSES));\n\n        let i = 0;\n        while (i < num_owners) {\n            let owner = vector::borrow(&owners, i);\n            // create each validator account and rotate its auth key to the correct value\n            let owner_account = account::create_account_internal(*owner);\n\n            // use the operator account set up the validator config\n            let cur_validator_network_addresses = *vector::borrow(&validator_network_addresses, i);\n            let cur_full_node_network_addresses = *vector::borrow(&full_node_network_addresses, i);\n            let consensus_pubkey = *vector::borrow(&consensus_pubkeys, i);\n            let pop = *vector::borrow(&proof_of_possession, i);\n            stake::initialize_validator(\n                &owner_account,\n                consensus_pubkey,\n                pop,\n                cur_validator_network_addresses,\n                cur_full_node_network_addresses,\n            );\n            stake::increase_lockup(&owner_account);\n            let amount = *vector::borrow(&staking_distribution, i);\n            // Transfer coins from the root account to the validator, so they can stake and have non-zero voting power\n            // and can complete consensus on the genesis block.\n            coins::register<AptosCoin>(&owner_account);\n            aptos_coin::mint(&aptos_framework_account, *owner, amount);\n            stake::add_stake(&owner_account, amount);\n            stake::join_validator_set_internal(&owner_account, *owner);\n\n            i = i + 1;\n        };\n        stake::on_new_epoch();\n    }\n\n    #[test_only]\n    public fun setup() {\n        initialize(\n            x\"00\", // empty gas schedule\n            4u8, // TESTING chain ID\n            0,\n            x\"\",\n            1,\n            0,\n            1,\n            1,\n            true,\n            1,\n            1,\n            30,\n        )\n    }\n\n    #[test]\n    fun test_setup() {\n        use aptos_framework::account;\n\n        setup();\n        assert!(account::exists_at(@aptos_framework), 0);\n    }\n}\n",
              "source_map": ""
            },
            {
              "name": "managed_coin",
              "source": "/// ManagedCoin is built to make a simple walkthrough of the Coins module.\n/// It contains scripts you will need to initialize, mint, burn, transfer coins.\n/// By utilizing this current module, a developer can create his own coin and care less about mint and burn capabilities,\nmodule aptos_framework::managed_coin {\n    use std::string;\n    use std::error;\n    use std::signer;\n\n    use aptos_framework::coin::{Self, BurnCapability, FreezeCapability, MintCapability};\n    use aptos_framework::coins;\n\n    //\n    // Errors\n    //\n\n    /// When no capabilities (burn/mint) found on an account.\n    const ENO_CAPABILITIES: u64 = 0;\n\n    //\n    // Data structures\n    //\n\n    /// Capabilities resource storing mint and burn capabilities.\n    /// The resource is stored on the account that initialized coin `CoinType`.\n    struct Capabilities<phantom CoinType> has key {\n        burn_cap: BurnCapability<CoinType>,\n        freeze_cap: FreezeCapability<CoinType>,\n        mint_cap: MintCapability<CoinType>,\n    }\n\n    //\n    // Public functions\n    //\n\n    /// Withdraw an `amount` of coin `CoinType` from `account` and burn it.\n    public entry fun burn<CoinType>(\n        account: &signer,\n        amount: u64,\n    ) acquires Capabilities {\n        let account_addr = signer::address_of(account);\n\n        assert!(\n            exists<Capabilities<CoinType>>(account_addr),\n            error::not_found(ENO_CAPABILITIES),\n        );\n\n        let capabilities = borrow_global<Capabilities<CoinType>>(account_addr);\n\n        let to_burn = coin::withdraw<CoinType>(account, amount);\n        coin::burn(to_burn, &capabilities.burn_cap);\n    }\n\n    /// Initialize new coin `CoinType` in Aptos Blockchain.\n    /// Mint and Burn Capabilities will be stored under `account` in `Capabilities` resource.\n    public entry fun initialize<CoinType>(\n        account: &signer,\n        name: vector<u8>,\n        symbol: vector<u8>,\n        decimals: u64,\n        monitor_supply: bool,\n    ) {\n        let (burn_cap, freeze_cap, mint_cap) = coin::initialize<CoinType>(\n            account,\n            string::utf8(name),\n            string::utf8(symbol),\n            decimals,\n            monitor_supply,\n        );\n\n        move_to(account, Capabilities<CoinType>{\n            burn_cap,\n            freeze_cap,\n            mint_cap,\n        });\n    }\n\n    /// Create new coins `CoinType` and deposit them into dst_addr's account.\n    public entry fun mint<CoinType>(\n        account: &signer,\n        dst_addr: address,\n        amount: u64,\n    ) acquires Capabilities {\n        let account_addr = signer::address_of(account);\n\n        assert!(\n            exists<Capabilities<CoinType>>(account_addr),\n            error::not_found(ENO_CAPABILITIES),\n        );\n\n        let capabilities = borrow_global<Capabilities<CoinType>>(account_addr);\n        let coins_minted = coin::mint(amount, &capabilities.mint_cap);\n        coin::deposit(dst_addr, coins_minted);\n    }\n\n    /// Creating a resource that stores balance of `CoinType` on user's account, withdraw and deposit event handlers.\n    /// Required if user wants to start accepting deposits of `CoinType` in his account.\n    public entry fun register<CoinType>(account: &signer) {\n        coins::register<CoinType>(account);\n    }\n\n    //\n    // Tests\n    //\n\n    #[test_only]\n    use std::option;\n\n    #[test_only]\n    struct FakeMoney { }\n\n    #[test(source = @0xa11ce, destination = @0xb0b, mod_account = @0x1)]\n    public entry fun test_end_to_end(\n        source: signer,\n        destination: signer,\n        mod_account: signer\n    ) acquires Capabilities {\n        let source_addr = signer::address_of(&source);\n        let destination_addr = signer::address_of(&destination);\n        aptos_framework::account::create_account(source_addr);\n        aptos_framework::account::create_account(destination_addr);\n\n        initialize<FakeMoney>(\n            &mod_account,\n            b\"Fake Money\",\n            b\"FMD\",\n            10,\n            true\n        );\n        assert!(coin::is_coin_initialized<FakeMoney>(), 0);\n\n        coin::register_for_test<FakeMoney>(&mod_account);\n        register<FakeMoney>(&source);\n        register<FakeMoney>(&destination);\n\n        mint<FakeMoney>(&mod_account, source_addr, 50);\n        mint<FakeMoney>(&mod_account, destination_addr, 10);\n        assert!(coin::balance<FakeMoney>(source_addr) == 50, 1);\n        assert!(coin::balance<FakeMoney>(destination_addr) == 10, 2);\n\n        let supply = coin::supply<FakeMoney>();\n        assert!(option::is_some(&supply), 1);\n        assert!(option::extract(&mut supply) == 60, 2);\n\n        coin::transfer<FakeMoney>(&source, destination_addr, 10);\n        assert!(coin::balance<FakeMoney>(source_addr) == 40, 3);\n        assert!(coin::balance<FakeMoney>(destination_addr) == 20, 4);\n\n        coin::transfer<FakeMoney>(&source, signer::address_of(&mod_account), 40);\n        burn<FakeMoney>(&mod_account, 40);\n\n        assert!(coin::balance<FakeMoney>(source_addr) == 0, 1);\n\n        let new_supply = coin::supply<FakeMoney>();\n        assert!(option::extract(&mut new_supply) == 20, 2);\n    }\n\n    #[test(source = @0xa11ce, destination = @0xb0b, mod_account = @0x1)]\n    #[expected_failure(abort_code = 0x60000)]\n    public entry fun fail_mint(\n        source: signer,\n        destination: signer,\n        mod_account: signer,\n    ) acquires Capabilities {\n        let source_addr = signer::address_of(&source);\n\n        aptos_framework::account::create_account(source_addr);\n        aptos_framework::account::create_account(signer::address_of(&destination));\n\n        initialize<FakeMoney>(&mod_account, b\"Fake money\", b\"FMD\", 1, true);\n        coin::register_for_test<FakeMoney>(&mod_account);\n        register<FakeMoney>(&source);\n        register<FakeMoney>(&destination);\n\n        mint<FakeMoney>(&destination, source_addr, 100);\n    }\n\n    #[test(source = @0xa11ce, destination = @0xb0b, mod_account = @0x1)]\n    #[expected_failure(abort_code = 0x60000)]\n    public entry fun fail_burn(\n        source: signer,\n        destination: signer,\n        mod_account: signer,\n    ) acquires Capabilities {\n        let source_addr = signer::address_of(&source);\n\n        aptos_framework::account::create_account(source_addr);\n        aptos_framework::account::create_account(signer::address_of(&destination));\n\n        initialize<FakeMoney>(&mod_account, b\"Fake money\", b\"FMD\", 1, true);\n        coin::register_for_test<FakeMoney>(&mod_account);\n        register<FakeMoney>(&source);\n        register<FakeMoney>(&destination);\n\n        mint<FakeMoney>(&mod_account, source_addr, 100);\n        burn<FakeMoney>(&destination, 10);\n    }\n}\n",
              "source_map": "0x6700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f87352e0100003a0100000100000000000000000000000000000000000000000000000000000000000000010c6d616e616765645f636f696e0100006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f87353a030000460300000108436f696e547970656700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f87354f03000057030000036700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f87356b030000730300006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f873597030000a10300006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735c7030000cf0300000400006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f87357a0400007e0400000108436f696e547970656700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f87357f0400008704000002076163636f756e746700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735920400009904000006616d6f756e746700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735ac040000b2040000030c6163636f756e745f616464726700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735e3040000ef0400000c6361706162696c69746965736700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735a3050000af05000007746f5f6275726e6700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735f4050000fb050000001500006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735050500000c05000001006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735f20400000d05000002006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735e3040000ef04000003006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f87354c0500005805000004006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f87352d0500003305000005006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735180500009405000008006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735780500008805000009006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f873567050000890500000a006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f873518050000940500000b006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735d8050000e40500000c006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735b2050000bf0500000d006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735a3050000af0500000e006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735170600001e0600000f006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735200600002606000010006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735fe0500002706000011006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735f4050000fb05000012006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f87353c0600004306000013006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735460600005206000014006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735450600005b06000015006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735310600005c06000016006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f87355c0600005d0600000001006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735140700001e0700000108436f696e547970656700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f87351f0700002707000005076163636f756e746700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f87353207000039070000046e616d656700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f87354c070000500700000673796d626f6c6700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735660700006c07000008646563696d616c736700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735820700008a0700000e6d6f6e69746f725f737570706c796700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f873599070000a707000003086275726e5f6361706700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735c4070000cc0700000a667265657a655f6361706700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735ce070000d8070000086d696e745f6361706700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735da070000e2070000001200006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f87350e0800001508000001006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735300800003408000002006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735230800003508000003006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735500800005608000004006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735430800005708000005006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735650800006d08000006006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f87357b0800008908000007006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735e60700009408000008006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735da070000e207000009006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735ce070000d80700000a006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735c4070000cc0700000b006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735a7080000ae0800000c006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735d4080000dc0800000d006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735ea080000f40800000e006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735020900000a0900000f006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735b00800001509000010006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f87359f080000a608000011006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f873516090000170900000002006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f873582090000860900000108436f696e547970656700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735870900008f09000003076163636f756e746700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f87359a090000a1090000086473745f616464726700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735b4090000bc09000006616d6f756e746700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735cf090000d5090000030c6163636f756e745f616464726700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735060a0000120a00000c6361706162696c69746965736700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735c60a0000d20a00000c636f696e735f6d696e7465646700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735160b0000220b0000001500006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735280a00002f0a000001006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735150a0000300a000002006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735060a0000120a000003006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f87356f0a00007b0a000004006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735500a0000560a000005006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f87353b0a0000b70a000006006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f87359b0a0000ab0a000007006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f87358a0a0000ac0a000008006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f87353b0a0000b70a000009006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735fb0a0000070b00000a006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735d50a0000e20a00000b006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735c60a0000d20a00000c006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735300b0000360b00000d006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735390b0000450b00000e006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735380b00004e0b00000f006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735250b00004f0b000010006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735160b0000220b000011006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735670b00006f0b000012006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735710b00007d0b000013006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735590b00007e0b000014006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f87357e0b00007f0b00000003006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f87356b0c0000730c00000108436f696e547970656700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735740c00007c0c000001076163636f756e746700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f87357e0c0000850c000000000300006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735b40c0000bb0c000001006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f87359a0c0000bc0c000002006700b4ddfea54f8a8957e658f4dbc7bcdf5d1e0098b23475d73c83ed954f8735bc0c0000bd0c0000000110454e4f5f4341504142494c49544945530000"
            },
            {
              "name": "resource_account",
              "source": "/// A resource account is used to manage resources independent of an account managed by a user.\n/// This contains several utilities to make using resource accounts more effective.\n///\n/// A dev wishing to use resource accounts for a liquidity pool, would likely do the following:\n/// 1. Create a new account using `Resourceaccount::create_resource_account`. This creates the\n/// account, stores the `signer_cap` within a `Resourceaccount::Container`, and rotates the key to\n/// the current accounts authentication key or a provided authentication key.\n/// 2. Define the LiquidityPool module's address to be the same as the resource account.\n/// 3. Construct a ModuleBundle payload for the resource account using the authentication key used\n/// in step 1.\n/// 4. In the LiquidityPool module's `init_module` function, call `retrieve_resource_account_cap`\n/// which will retrive the `signer_cap` and rotate the resource account's authentication key to\n/// `0x0`, effectively locking it off.\n/// 5. When adding a new coin, the liquidity pool will load the capability and hence the signer to\n/// register and store new LiquidityCoin resources.\n///\n/// Code snippets to help:\n/// ```\n/// fun init_module(source: &signer) {\n///   let dev_address = @DEV_ADDR;\n///   let signer_cap = retrieve_resource_account_cap(&source, dev_address);\n///   let lp_signer = create_signer_with_capability(&signer_cap);\n///   let lp = LiquidityPoolInfo { signer_cap: signer_cap, ... };\n///   move_to(&lp_signer, lp);\n/// }\n/// ```\n///\n/// Later on during a coin registration:\n/// ```\n/// public fun add_coin<X, Y>(lp: &LP, x: Coin<x>, y: Coin<y>) {\n///     if(!exists<LiquidityCoin<X, Y>(LP::Address(lp), LiquidityCoin<X, Y>)) {\n///         let mint, burn = Coin::initialize<LiquidityCoin<X, Y>>(...);\n///         move_to(&create_signer_with_capability(&lp.cap), LiquidityCoin<X, Y>{ mint, burn });\n///     }\n///     ...\n/// }\n/// ```\nmodule aptos_framework::resource_account {\n    use std::error;\n    use std::signer;\n    use std::vector;\n    use aptos_framework::account;\n    use aptos_std::simple_map::{Self, SimpleMap};\n\n    const ECONTAINER_NOT_PUBLISHED: u64 = 0;\n\n    struct Container has key {\n        store: SimpleMap<address, account::SignerCapability>,\n    }\n\n    /// Creates a new resource account and rotates the authentication key to either\n    /// the optional auth key if it is non-empty (though auth keys are 32-bytes)\n    /// or the source accounts current auth key.\n    public entry fun create_resource_account(\n        origin: &signer,\n        seed: vector<u8>,\n        optional_auth_key: vector<u8>,\n    ) acquires Container {\n        let (resource, resource_signer_cap) = account::create_resource_account(origin, seed);\n\n        let origin_addr = signer::address_of(origin);\n        if (!exists<Container>(origin_addr)) {\n            move_to(origin, Container { store: simple_map::create() })\n        };\n\n        let container = borrow_global_mut<Container>(origin_addr);\n        let resource_addr = signer::address_of(&resource);\n        simple_map::add(&mut container.store, resource_addr, resource_signer_cap);\n\n        let auth_key = if (vector::is_empty(&optional_auth_key)) {\n            account::get_authentication_key(origin_addr)\n        } else {\n            optional_auth_key\n        };\n        account::rotate_authentication_key_internal(&resource, auth_key);\n    }\n\n    /// When called by the resource account, it will retrieve the capability associated with that\n    /// account and rotate the account's auth key to 0x0 making the account inaccessible without\n    /// the SignerCapability.\n    public fun retrieve_resource_account_cap(\n        resource: &signer,\n        source_addr: address,\n    ): account::SignerCapability acquires Container {\n        assert!(exists<Container>(source_addr), error::not_found(ECONTAINER_NOT_PUBLISHED));\n\n        let resource_addr = signer::address_of(resource);\n        let (resource_signer_cap, empty_container) = {\n            let container = borrow_global_mut<Container>(source_addr);\n            let (_resource_addr, signer_cap) = simple_map::remove(&mut container.store, &resource_addr);\n            (signer_cap, simple_map::length(&container.store) == 0)\n        };\n\n        if (empty_container) {\n            let container = move_from(source_addr);\n            let Container { store: store } = container;\n            simple_map::destroy_empty(store);\n        };\n\n        let zero_auth_key = x\"0000000000000000000000000000000000000000000000000000000000000000\";\n        let resource = account::create_signer_with_capability(&resource_signer_cap);\n        account::rotate_authentication_key_internal(&resource, zero_auth_key);\n        resource_signer_cap\n    }\n\n    #[test(user = @0x1111)]\n    public entry fun end_to_end(user: signer) acquires Container {\n        use std::bcs;\n        use std::hash;\n\n        let user_addr = signer::address_of(&user);\n        account::create_account(user_addr);\n\n        let seed = x\"01\";\n        let bytes = bcs::to_bytes(&user_addr);\n        vector::append(&mut bytes, copy seed);\n        let resource_addr = account::create_address_for_test(hash::sha3_256(bytes));\n\n        create_resource_account(&user, seed, vector::empty());\n        let container = borrow_global<Container>(user_addr);\n        let resource_cap = simple_map::borrow(&container.store, &resource_addr);\n\n        let resource = account::create_signer_with_capability(resource_cap);\n        let _resource_cap = retrieve_resource_account_cap(&resource, user_addr);\n    }\n}\n",
              "source_map": "0x4eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c08d0700009d070000010000000000000000000000000000000000000000000000000000000000000001107265736f757263655f6163636f756e740100004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c06c0800007508000000014eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0880800008d0800000200004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0b0090000c70900000003066f726967696e4eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0d1090000d709000004736565644eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0ea090000ee090000116f7074696f6e616c5f617574685f6b65794eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0040a0000150a000007032523314eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c03e0c0000db0c000008617574685f6b65794eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0330c00003b0c000009636f6e7461696e65724eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0610b00006a0b00000b6f726967696e5f616464724eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0a90a0000b40a0000087265736f757263654eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c04b0a0000530a00000d7265736f757263655f616464724eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0a40b0000b10b0000137265736f757263655f7369676e65725f6361704eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0550a0000680a0000002a00004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c08d0a0000930a000001004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0950a0000990a000002004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c06c0a00009a0a000003004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0550a0000680a000004004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c04b0a0000530a000005004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0ca0a0000d00a000006004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0b70a0000d10a000007004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0a90a0000b40a000008004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0f20a0000fd0a000009004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0e00a0000e60a00000a004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0df0a0000e00a00000b004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0db0a0000520b00000d004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0160b00001c0b00000e004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0310b0000450b00000f004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c01e0b0000470b000010004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c00e0b0000150b000011004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c00e0b0000480b000012004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0db0a0000520b000014004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c08a0b0000950b000015004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c06d0b00007e0b000016004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0610b00006a0b000017004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0c70b0000d00b000018004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0b40b0000d10b000019004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0a40b0000b10b00001a004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0f00b0000f90b00001b004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0eb0b0000ff0b00001c004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0010c00000e0c00001d004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0100c0000230c00001e004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0db0b0000240c00001f004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0530c0000650c000020004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0420c0000660c000021004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c03e0c0000db0c000023004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0960c0000a10c000024004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0760c0000a20c000025004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c03e0c0000db0c000027004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0c00c0000d10c000028004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c03e0c0000db0c00002a004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0330c00003b0c00002b004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0110d00001a0d00002c004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c01c0d0000240d00002d004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0e50c0000250d00002e004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0250d0000260d00000001004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c01e0e00003b0e00000002087265736f757263654eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0450e00004d0e00000b736f757263655f616464724eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0600e00006b0e00000a0e5f7265736f757263655f616464724eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0d30f0000e10f000009636f6e7461696e65724eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c08b0f0000940f00000b636f6e7461696e657223314eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0aa100000b31000000f656d7074795f636f6e7461696e65724eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0660f0000750f00000a7265736f7572636523324eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0ad110000b51100000d7265736f757263655f616464724eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0160f0000230f0000137265736f757263655f7369676e65725f6361704eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0510f0000640f00000a7369676e65725f6361704eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0e30f0000ed0f00000573746f72654eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0f1100000f61000000d7a65726f5f617574685f6b65794eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c04c11000059110000002b00004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0ce0e0000d90e000001004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0bc0e0000c20e000002004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0b40e0000070f000005004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0ed0e0000050f000006004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0dc0e0000060f000007004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0b40e0000070f000008004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0390f0000410f000009004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0260f0000420f00000a004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0160f0000230f00000b004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0b40f0000bf0f00000c004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0970f0000a80f00000d004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c08b0f0000940f00000e004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c009100000121000000f004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0041000001810000010004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c01a1000002810000011004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0f10f00002910000012004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0e30f0000ed0f000013004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0d30f0000e10f000014004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0381000004210000015004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0581000006110000016004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0571000006710000017004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0441000006810000018004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c06c1000006d10000019004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0691000006b1000001a004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0660f0000750f00001b004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0510f0000640f00001c004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c087100000961000001d004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0831000003d1100001f004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0c0100000cb10000020004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0b6100000bf10000021004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0aa100000b310000022004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0fb1000000411000023004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0de100000f810000024004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0f1100000f610000025004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c02c1100003111000026004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0121100003211000027004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0df110000f311000028004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0b8110000f411000029004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0ad110000b51100002a004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c02a120000331200002b004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c05c1100009f1100002c004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c0fe110000431200002d004eb1ad74398727f3da2e95df472d8b8d92828d9e71d117fb42e8aac3df9279c04d1200006012000000011845434f4e5441494e45525f4e4f545f5055424c49534845440000"
            }
          ],
          "name": "AptosFramework",
          "upgrade_policy": {
            "policy": 1
          }
        }
      ]
    }
  },
  {
    "type": "0x1::coin::CoinInfo<0x1::aptos_coin::AptosCoin>",
    "data": {
      "decimals": "8",
      "name": "Aptos Coin",
      "supply": {
        "vec": []
      },
      "symbol": "APT"
    }
  },
  {
    "type": "0x1::guid::Generator",
    "data": {
      "counter": "10"
    }
  },
  {
    "type": "0x1::block::BlockResource",
    "data": {
      "epoch_interval": "86400000000",
      "height": "0",
      "new_block_events": {
        "counter": "1",
        "guid": {
          "id": {
            "addr": "0x1",
            "creation_num": "2"
          }
        }
      }
    }
  },
  {
    "type": "0x1::stake::ValidatorSet",
    "data": {
      "active_validators": [
        {
          "addr": "0x66b22b7465af92a9dc8d07d2878716d9dffbbb280830a7d8cf80334b5da812ef",
          "config": {
            "consensus_pubkey": "0xaa7023a1ea88520c0b163c530367dfbfe9269621c96dc9dc9147aca9c278b1340c07b21600b2b5423a2fb88c679b0c5a",
            "fullnode_addresses": "0x012d040000000000052518072022b18b21ecf48f18a1ebb1b8fbe0347af7913e84ad27473669eca6efc8df087a0800",
            "network_addresses": "0x012d040000000000052418072093c5ad141db18cfef10f1452d9019922745c7b8cec22ea40118b9e1a76a756680800",
            "validator_index": "0"
          },
          "voting_power": "1"
        }
      ],
      "consensus_scheme": 0,
      "pending_active": [],
      "pending_inactive": [],
      "total_joining_power": "0",
      "total_voting_power": "1"
    }
  },
  {
    "type": "0x1::stake::ValidatorPerformance",
    "data": {
      "validators": [
        {
          "failed_proposals": "0",
          "successful_proposals": "0"
        }
      ]
    }
  },
  {
    "type": "0x1::stake::AptosCoinCapabilities",
    "data": {
      "mint_cap": {
        "dummy_field": false
      }
    }
  },
  {
    "type": "0x1::voting::VotingForum<0x1::governance_proposal::GovernanceProposal>",
    "data": {
      "events": {
        "create_proposal_events": {
          "counter": "0",
          "guid": {
            "id": {
              "addr": "0x1",
              "creation_num": "3"
            }
          }
        },
        "register_forum_events": {
          "counter": "1",
          "guid": {
            "id": {
              "addr": "0x1",
              "creation_num": "4"
            }
          }
        },
        "resolve_proposal_events": {
          "counter": "0",
          "guid": {
            "id": {
              "addr": "0x1",
              "creation_num": "5"
            }
          }
        },
        "vote_events": {
          "counter": "0",
          "guid": {
            "id": {
              "addr": "0x1",
              "creation_num": "6"
            }
          }
        }
      },
      "next_proposal_id": "0",
      "proposals": {
        "handle": "66250964772389598023276627514581198483"
      }
    }
  },
  {
    "type": "0x1::account::Account",
    "data": {
      "authentication_key": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "coin_register_events": {
        "counter": "0",
        "guid": {
          "id": {
            "addr": "0x1",
            "creation_num": "0"
          }
        }
      },
      "sequence_number": "0"
    }
  },
  {
    "type": "0x1::account::ChainSpecificAccountInfo",
    "data": {
      "module_addr": "0x1",
      "module_name": "0x6163636f756e74",
      "module_prologue_name": "0x6d6f64756c655f70726f6c6f677565",
      "multi_agent_prologue_name": "0x6d756c74695f6167656e745f7363726970745f70726f6c6f677565",
      "script_prologue_name": "0x7363726970745f70726f6c6f677565",
      "user_epilogue_name": "0x6570696c6f677565",
      "writeset_epilogue_name": "0x77726974657365745f6570696c6f677565",
      "writeset_prologue_name": "0x77726974657365745f70726f6c6f677565"
    }
  },
  {
    "type": "0x1::version::Version",
    "data": {
      "major": "4"
    }
  },
  {
    "type": "0x1::chain_id::ChainId",
    "data": {
      "id": 4
    }
  },
  {
    "type": "0x1::timestamp::CurrentTimeMicroseconds",
    "data": {
      "microseconds": "0"
    }
  },
  {
    "type": "0x1::aptos_coin::Capabilities",
    "data": {
      "mint_cap": {
        "dummy_field": false
      }
    }
  },
  {
    "type": "0x1::gas_schedule::GasSchedule",
    "data": {
      "entries": [
        {
          "key": "instr.nop",
          "val": "1"
        },
        {
          "key": "instr.ret",
          "val": "1"
        },
        {
          "key": "instr.abort",
          "val": "1"
        },
        {
          "key": "instr.br_true",
          "val": "1"
        },
        {
          "key": "instr.br_false",
          "val": "1"
        },
        {
          "key": "instr.branch",
          "val": "1"
        },
        {
          "key": "instr.pop",
          "val": "1"
        },
        {
          "key": "instr.ld_u8",
          "val": "1"
        },
        {
          "key": "instr.ld_u64",
          "val": "1"
        },
        {
          "key": "instr.ld_u128",
          "val": "1"
        },
        {
          "key": "instr.ld_true",
          "val": "1"
        },
        {
          "key": "instr.ld_false",
          "val": "1"
        },
        {
          "key": "instr.ld_const.base",
          "val": "1"
        },
        {
          "key": "instr.ld_const.unit",
          "val": "1"
        },
        {
          "key": "instr.imm_borrow_loc",
          "val": "1"
        },
        {
          "key": "instr.mut_borrow_loc",
          "val": "1"
        },
        {
          "key": "instr.imm_borrow_field",
          "val": "1"
        },
        {
          "key": "instr.mut_borrow_field",
          "val": "1"
        },
        {
          "key": "instr.imm_borrow_field_generic",
          "val": "1"
        },
        {
          "key": "instr.mut_borrow_field_generic",
          "val": "1"
        },
        {
          "key": "instr.copy_loc.base",
          "val": "1"
        },
        {
          "key": "instr.copy_loc.unit",
          "val": "1"
        },
        {
          "key": "instr.move_loc.base",
          "val": "1"
        },
        {
          "key": "instr.move_loc.unit",
          "val": "1"
        },
        {
          "key": "instr.st_loc.base",
          "val": "1"
        },
        {
          "key": "instr.st_loc.unit",
          "val": "1"
        },
        {
          "key": "instr.call.base",
          "val": "1"
        },
        {
          "key": "instr.call.unit",
          "val": "1"
        },
        {
          "key": "instr.call_generic.base",
          "val": "1"
        },
        {
          "key": "instr.call_generic.unit",
          "val": "1"
        },
        {
          "key": "instr.pack.base",
          "val": "1"
        },
        {
          "key": "instr.pack.unit",
          "val": "1"
        },
        {
          "key": "instr.pack_generic.base",
          "val": "1"
        },
        {
          "key": "instr.pack_generic.unit",
          "val": "1"
        },
        {
          "key": "instr.unpack.base",
          "val": "1"
        },
        {
          "key": "instr.unpack.unit",
          "val": "1"
        },
        {
          "key": "instr.unpack_generic.base",
          "val": "1"
        },
        {
          "key": "instr.unpack_generic.unit",
          "val": "1"
        },
        {
          "key": "instr.read_ref.base",
          "val": "1"
        },
        {
          "key": "instr.read_ref.unit",
          "val": "1"
        },
        {
          "key": "instr.write_ref.base",
          "val": "1"
        },
        {
          "key": "instr.write_ref.unit",
          "val": "1"
        },
        {
          "key": "instr.freeze_ref",
          "val": "1"
        },
        {
          "key": "instr.cast_u8",
          "val": "1"
        },
        {
          "key": "instr.cast_u64",
          "val": "1"
        },
        {
          "key": "instr.cast_u128",
          "val": "1"
        },
        {
          "key": "instr.add",
          "val": "1"
        },
        {
          "key": "instr.sub",
          "val": "1"
        },
        {
          "key": "instr.mul",
          "val": "1"
        },
        {
          "key": "instr.mod",
          "val": "1"
        },
        {
          "key": "instr.div",
          "val": "1"
        },
        {
          "key": "instr.bit_or",
          "val": "1"
        },
        {
          "key": "instr.bit_and",
          "val": "1"
        },
        {
          "key": "instr.bit_xor",
          "val": "1"
        },
        {
          "key": "instr.bit_shl",
          "val": "1"
        },
        {
          "key": "instr.bit_shr",
          "val": "1"
        },
        {
          "key": "instr.or",
          "val": "1"
        },
        {
          "key": "instr.and",
          "val": "1"
        },
        {
          "key": "instr.not",
          "val": "1"
        },
        {
          "key": "instr.lt",
          "val": "1"
        },
        {
          "key": "instr.gt",
          "val": "1"
        },
        {
          "key": "instr.le",
          "val": "1"
        },
        {
          "key": "instr.ge",
          "val": "1"
        },
        {
          "key": "instr.eq.base",
          "val": "1"
        },
        {
          "key": "instr.eq.unit",
          "val": "1"
        },
        {
          "key": "instr.neq.base",
          "val": "1"
        },
        {
          "key": "instr.neq.unit",
          "val": "1"
        },
        {
          "key": "instr.imm_borrow_global.base",
          "val": "10"
        },
        {
          "key": "instr.imm_borrow_global.unit",
          "val": "10"
        },
        {
          "key": "instr.imm_borrow_global_generic.base",
          "val": "10"
        },
        {
          "key": "instr.imm_borrow_global_generic.unit",
          "val": "10"
        },
        {
          "key": "instr.mut_borrow_global.base",
          "val": "100"
        },
        {
          "key": "instr.mut_borrow_global.unit",
          "val": "100"
        },
        {
          "key": "instr.mut_borrow_global_generic.base",
          "val": "100"
        },
        {
          "key": "instr.mut_borrow_global_generic.unit",
          "val": "100"
        },
        {
          "key": "instr.exists.base",
          "val": "10"
        },
        {
          "key": "instr.exists.unit",
          "val": "10"
        },
        {
          "key": "instr.exists_generic.base",
          "val": "10"
        },
        {
          "key": "instr.exists_generic.unit",
          "val": "10"
        },
        {
          "key": "instr.move_from.base",
          "val": "100"
        },
        {
          "key": "instr.move_from.unit",
          "val": "100"
        },
        {
          "key": "instr.move_from_generic.base",
          "val": "100"
        },
        {
          "key": "instr.move_from_generic.unit",
          "val": "100"
        },
        {
          "key": "instr.move_to.base",
          "val": "100"
        },
        {
          "key": "instr.move_to.unit",
          "val": "100"
        },
        {
          "key": "instr.move_to_generic.base",
          "val": "100"
        },
        {
          "key": "instr.move_to_generic.unit",
          "val": "100"
        },
        {
          "key": "instr.vec_len",
          "val": "1"
        },
        {
          "key": "instr.vec_imm_borrow",
          "val": "1"
        },
        {
          "key": "instr.vec_mut_borrow",
          "val": "1"
        },
        {
          "key": "instr.vec_push_back",
          "val": "1"
        },
        {
          "key": "instr.vec_pop_back",
          "val": "1"
        },
        {
          "key": "instr.vec_swap",
          "val": "1"
        },
        {
          "key": "instr.vec_pack.base",
          "val": "1"
        },
        {
          "key": "instr.vec_pack.unit",
          "val": "1"
        },
        {
          "key": "instr.vec_unpack.base",
          "val": "1"
        },
        {
          "key": "instr.vec_unpack.unit",
          "val": "1"
        },
        {
          "key": "txn.min_transaction_gas_units",
          "val": "600"
        },
        {
          "key": "txn.large_transaction_cutoff",
          "val": "600"
        },
        {
          "key": "txn.intrinsic_gas_per_byte",
          "val": "8"
        },
        {
          "key": "txn.maximum_number_of_gas_units",
          "val": "4000000"
        },
        {
          "key": "txn.min_price_per_gas_unit",
          "val": "0"
        },
        {
          "key": "txn.max_price_per_gas_unit",
          "val": "10000"
        },
        {
          "key": "txn.max_transaction_size_in_bytes",
          "val": "6291456"
        },
        {
          "key": "txn.gas_unit_scaling_factor",
          "val": "1000"
        },
        {
          "key": "move_stdlib.bcs.to_bytes.input_unit",
          "val": "1"
        },
        {
          "key": "move_stdlib.bcs.to_bytes.output_unit",
          "val": "0"
        },
        {
          "key": "move_stdlib.bcs.to_bytes.failure",
          "val": "10"
        },
        {
          "key": "move_stdlib.hash.sha2_256.base",
          "val": "1"
        },
        {
          "key": "move_stdlib.hash.sha2_256.unit",
          "val": "1"
        },
        {
          "key": "move_stdlib.hash.sha3_256.base",
          "val": "1"
        },
        {
          "key": "move_stdlib.hash.sha3_256.unit",
          "val": "1"
        },
        {
          "key": "move_stdlib.signer.borrow_address.base",
          "val": "1"
        },
        {
          "key": "move_stdlib.string.check_utf8.base",
          "val": "1"
        },
        {
          "key": "move_stdlib.string.check_utf8.unit",
          "val": "1"
        },
        {
          "key": "move_stdlib.string.is_char_boundary.base",
          "val": "1"
        },
        {
          "key": "move_stdlib.string.sub_string.base",
          "val": "1"
        },
        {
          "key": "move_stdlib.string.sub_string.unit",
          "val": "1"
        },
        {
          "key": "move_stdlib.string.index_of.base",
          "val": "1"
        },
        {
          "key": "move_stdlib.string.index_of.unit",
          "val": "1"
        },
        {
          "key": "move_stdlib.unit_test.create_signers_for_testing.base",
          "val": "1"
        },
        {
          "key": "move_stdlib.unit_test.create_signers_for_testing.unit",
          "val": "1"
        },
        {
          "key": "aptos_framework.account.create_address.base",
          "val": "1"
        },
        {
          "key": "aptos_framework.account.create_signer.base",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_aggregate_pop_verified_pubkeys.base",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_aggregate_pop_verified_pubkeys.per_pubkey_deserialize",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_aggregate_pop_verified_pubkeys.per_pubkey_aggregate",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_aggregate_signatures.base",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_aggregate_signatures.per_sig_deserialize",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_aggregate_signatures.per_sig_aggregate",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_signature_subgroup_check.base",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_signature_subgroup_check.per_sig_deserialize",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_signature_subgroup_check.per_sig_subgroup_check",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_validate_pubkey.base",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_validate_pubkey.per_pubkey_deserialize",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_validate_pubkey.per_pubkey_subgroup_check",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_verify_aggregate_signature.base",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_verify_aggregate_signature.per_pubkey_deserialize",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_verify_aggregate_signature.per_sig_deserialize",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_verify_aggregate_signature.per_pairing",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_verify_aggregate_signature.per_msg_hashing_base",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_verify_aggregate_signature.per_msg_byte_hashing",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_verify_multisignature.base",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_verify_multisignature.per_pubkey_deserialize",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_verify_multisignature.per_pubkey_subgroup_check",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_verify_multisignature.per_sig_deserialize",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_verify_multisignature.per_sig_verify",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_verify_multisignature.per_msg_hashing_base",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_verify_multisignature.per_msg_byte_hashing",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_verify_normal_signature.base",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_verify_normal_signature.per_pubkey_deserialize",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_verify_normal_signature.per_pubkey_subgroup_check",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_verify_normal_signature.per_sig_deserialize",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_verify_normal_signature.per_sig_verify",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_verify_normal_signature.per_msg_hashing_base",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_verify_normal_signature.per_msg_byte_hashing",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_verify_proof_of_possession.base",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_verify_proof_of_possession.per_pubkey_deserialize",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_verify_proof_of_possession.per_sig_deserialize",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_verify_proof_of_possession.per_sig_verify",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_verify_signature_share.base",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_verify_signature_share.per_pubkey_deserialize",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_verify_signature_share.per_pubkey_subgroup_check",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_verify_signature_share.per_sig_deserialize",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_verify_signature_share.per_sig_verify",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_verify_signature_share.per_msg_hashing_base",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.bls12381_verify_signature_share.per_msg_byte_hashing",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.ed25519_validate_pubkey.base",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.ed25519_validate_pubkey.per_pubkey_deserialize",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.ed25519_validate_pubkey.per_pubkey_small_order_check",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.ed25519_verify.base",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.ed25519_verify.per_pubkey_deserialize",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.ed25519_verify.per_sig_deserialize",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.ed25519_verify.per_sig_strict_verify",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.ed25519_verify.per_msg_hashing_base",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.ed25519_verify.per_msg_byte_hashing",
          "val": "1"
        },
        {
          "key": "aptos_framework.signature.secp256k1_ecdsa_recover.base",
          "val": "1"
        },
        {
          "key": "aptos_framework.hash.sip_hash.base",
          "val": "1"
        },
        {
          "key": "aptos_framework.hash.sip_hash.unit",
          "val": "1"
        },
        {
          "key": "aptos_framework.type_info.type_of.base",
          "val": "1"
        },
        {
          "key": "aptos_framework.type_info.type_of.unit",
          "val": "1"
        },
        {
          "key": "aptos_framework.type_info.type_name.base",
          "val": "1"
        },
        {
          "key": "aptos_framework.type_info.type_name.unit",
          "val": "1"
        },
        {
          "key": "aptos_framework.util.from_bytes.base",
          "val": "1"
        },
        {
          "key": "aptos_framework.util.from_bytes.unit",
          "val": "1"
        },
        {
          "key": "aptos_framework.transaction_context.get_script_hash.base",
          "val": "1"
        },
        {
          "key": "aptos_framework.code.request_publish.base",
          "val": "1"
        },
        {
          "key": "aptos_framework.code.request_publish.unit",
          "val": "1"
        },
        {
          "key": "aptos_framework.event.write_to_event_store.unit",
          "val": "1"
        }
      ]
    }
  },
  {
    "type": "0x1::staking_config::StakingConfig",
    "data": {
      "allow_validator_set_change": false,
      "maximum_stake": "18446744073709551615",
      "minimum_stake": "0",
      "recurring_lockup_duration_secs": "86400",
      "rewards_rate": "273972",
      "rewards_rate_denominator": "1000000000",
      "voting_power_increase_limit": "50"
    }
  },
  {
    "type": "0x1::reconfiguration::Configuration",
    "data": {
      "epoch": "1",
      "events": {
        "counter": "1",
        "guid": {
          "id": {
            "addr": "0x1",
            "creation_num": "1"
          }
        }
      },
      "last_reconfiguration_time": "0"
    }
  },
  {
    "type": "0x1::transaction_fee::AptosCoinCapabilities",
    "data": {
      "burn_cap": {
        "dummy_field": false
      }
    }
  },
  {
    "type": "0x1::aptos_governance::VotingRecords",
    "data": {
      "votes": {
        "handle": "250572580766766989648150312918132283230"
      }
    }
  },
  {
    "type": "0x1::aptos_governance::GovernanceConfig",
    "data": {
      "min_voting_threshold": "0",
      "required_proposer_stake": "0",
      "voting_duration_secs": "3600"
    }
  },
  {
    "type": "0x1::aptos_governance::GovernanceEvents",
    "data": {
      "create_proposal_events": {
        "counter": "0",
        "guid": {
          "id": {
            "addr": "0x1",
            "creation_num": "7"
          }
        }
      },
      "update_config_events": {
        "counter": "0",
        "guid": {
          "id": {
            "addr": "0x1",
            "creation_num": "8"
          }
        }
      },
      "vote_events": {
        "counter": "0",
        "guid": {
          "id": {
            "addr": "0x1",
            "creation_num": "9"
          }
        }
      }
    }
  },
  {
    "type": "0x1::aptos_governance::GovernanceResponsbility",
    "data": {
      "signer_caps": {
        "data": [
          {
            "key": "0x1",
            "value": {
              "account": "0x1"
            }
          }
        ]
      }
    }
  },
  {
    "type": "0x1::consensus_config::ConsensusConfig",
    "data": {
      "config": "0x00010a0000000000000014000000000000000200e8030000000000000a0000000000000001000000000000000a0000000a00000000000000010000000000000001050000000a00000000000000"
    }
  }
]
