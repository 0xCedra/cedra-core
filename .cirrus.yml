rust_lint_task:
  container:
    image: rust:1.61.0-buster
    cpu: 8
    memory: 24G
  env:
    CARGO_INCREMENTAL: "0"
  install_script: apt-get update && apt-get install build-essential ca-certificates clang curl git libpq-dev libssl-dev pkg-config --no-install-recommends --assume-yes
  registry_cache:
    folder: $CARGO_HOME/registry
    fingerprint_script: cat Cargo.lock
  target_cache:
    folder: target
    fingerprint_script:
      - rustc --version
      - cat Cargo.lock
  test_script:
    - rustup update
    - rustup component add clippy
    - rustup component add rustfmt
    - cargo x lint
    - cargo xclippy --workspace --all-targets
    - cargo xfmt --check
    - cargo install cargo-sort
    # Temporary workaround for unsorted hakari generated Cargo files (https://github.com/DevinR528/cargo-sort/issues/38).
    - cargo sort --grouped crates/aptos-workspace-hack
    - cargo sort --grouped --check --workspace
  before_cache_script:
    #  # Delete loose files in the debug directory
    - find ./target/debug -maxdepth 1 -type f -delete
    # Delete the test and benchmark executables. Finding these all might take some
    # experimentation.
    - rm -rf ./target/debug/deps/*aptos*
    # Delete the associated metadata files for those executables
    - rm -rf ./target/debug/.fingerprint/*aptos*
    # Note that all of the above need to be repeated for `debug/` instead of
    # `debug/` if your build script builds artifacts in debug mode.
    # This is just more metadata
    - rm -f  ./target/.rustc_info.json
    # Also delete the saved benchmark data from the test benchmarks. If you
    # have Criterion.rs benchmarks, you'll probably want to do this as well, or set
    # the CRITERION_HOME environment variable to move that data out of the
    # `target/` directory.
    # Also delete cargo's registry index. This is updated on every build, but it's
    # way cheaper to re-download than the whole cache is.
    - rm -rf ~/.cargo/registry/index/
