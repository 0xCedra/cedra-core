use std::ffi::OsString;

xflags::xflags! {
    src "./src/flags.rs"

    cmd xbuild {

        cmd node {
            optional -F,--feature feature: OsString
            optional --profile profile: OsString
        }

        cmd tools {
            repeated packages: OsString
            optional -F,--feature feature: OsString
            optional --profile profile: OsString
        }

        cmd indexer {
            repeated packages: OsString
            optional -F,--feature feature: OsString
            optional --profile profile: OsString
        }

        cmd group {
            cmd forge {
                optional -F,--node-feature feature: OsString
                optional --node-profile profile: OsString
            }
        }

    }
}
// generated start
// The following code is generated by `xflags` macro.
// Run `env UPDATE_XFLAGS=1 cargo build` to regenerate.
#[derive(Debug)]
pub struct Xbuild {
    pub subcommand: XbuildCmd,
}

#[derive(Debug)]
pub enum XbuildCmd {
    Node(Node),
    Tools(Tools),
    Indexer(Indexer),
    Group(Group),
}

#[derive(Debug)]
pub struct Node {
    pub feature: Option<OsString>,
    pub profile: Option<OsString>,
}

#[derive(Debug)]
pub struct Tools {
    pub packages: Vec<OsString>,

    pub feature: Option<OsString>,
    pub profile: Option<OsString>,
}

#[derive(Debug)]
pub struct Indexer {
    pub packages: Vec<OsString>,

    pub feature: Option<OsString>,
    pub profile: Option<OsString>,
}

#[derive(Debug)]
pub struct Group {
    pub subcommand: GroupCmd,
}

#[derive(Debug)]
pub enum GroupCmd {
    Forge(Forge),
}

#[derive(Debug)]
pub struct Forge {
    pub node_feature: Option<OsString>,
    pub node_profile: Option<OsString>,
}

impl Xbuild {
    #[allow(dead_code)]
    pub fn from_env_or_exit() -> Self {
        Self::from_env_or_exit_()
    }

    #[allow(dead_code)]
    pub fn from_env() -> xflags::Result<Self> {
        Self::from_env_()
    }

    #[allow(dead_code)]
    pub fn from_vec(args: Vec<std::ffi::OsString>) -> xflags::Result<Self> {
        Self::from_vec_(args)
    }
}
// generated end
